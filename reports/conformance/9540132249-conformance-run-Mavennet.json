{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e0c2c5dc-b5f6-4806-89e6-703d3398f571",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4863d5aa-c776-4f39-866d-9120a231e24c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d475fb1-a577-4c07-a661-2bb45f19b89f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ec3569dc-1c72-4d89-808a-b39f89ad50f5"
                }
              }
            ]
          },
          {
            "id": "b5e3e34f-a3bc-4a80-85e4-71c5e5aa7b3d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "739b795f-8f4a-427e-b692-d4d797a995b8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "afdb948b-975e-4e07-ac56-8efdd66a00e2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ae406d9d-b675-42fa-af81-87f23a926f12",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "30347a06-ca02-4eed-801b-6e1dff74a1dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7eaaadb3-5d0c-4f57-8d44-06145f597a6a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53eeb9b3-99d4-4d5b-912f-934fdd3941a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24c29de9-cb08-44fb-8069-d83004e36dd5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e8e7ae79-8da7-46a1-82ed-71a2d25126f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d294125c-2bfc-4baf-aeda-0f870275a2d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d2a313c6-02e6-4ca8-bf02-71468c59eeef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec6f9bbf-a7c2-4c9c-87d6-ed186bd8cfb1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb20f067-063c-4bea-a67c-9f2da5eca4f4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "505a409b-5c9e-47e6-ad7b-ffb99da147cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbbc8f87-ed2d-42a0-8e1a-1ebe0b5a4dc3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6946b9b-fb6c-4eb2-9758-9825bd25aa5d"
            }
          }
        ]
      },
      {
        "id": "33cf28c5-9955-454e-a69b-c6632e1accd5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9e0a9d23-d974-420d-97ea-2c6e4ead83a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09fed624-6052-4c99-bda3-6eebfaba873d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "386b6669-e646-4210-b5e7-62034b8ebae7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddbd8b0-c0da-44c1-b3a2-14cfd93db3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c25abb5-1f77-48b3-84c5-ea0743f86013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af65432-bdb7-49ea-a677-da82fd29c7da",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7206243-70ed-42e0-bedd-5b9e83d1fbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "544ce7ca-ec18-4963-882e-a32c950ab898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7ee29d-a5b0-469a-97e2-4551bed689a7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09af9bd-2fcc-4e65-b9a0-7577c5328d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40e2ef95-d29d-432f-9d31-1a03ea6bf1f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e7936c3-aae5-408e-90b7-e9e6ab95b7f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7094d5a2-07f8-41d3-85a7-547cc85b0dd9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3e9c11-810f-4eb2-93b6-3915c5e974fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d1f21dc-5008-48b6-a99f-f0f1d72efbae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c68c08-dbf7-4e89-862e-ed00f950276d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe35bad-567c-4106-9603-22cacc769e8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2e46c5af-db66-4ba5-88d0-eaef74ec8992",
            "name": "Positive Testing",
            "item": [
              {
                "id": "395ffbab-3984-46c9-bcd3-2c6773295960",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aadfaf1-5156-4e9e-a15c-aeb8d58c90ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2ee20e4e-1962-4a8e-9e50-820d6f44bb2b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60bdfe05-a46f-405c-86f3-8a3a891dbb68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "16e6752a-37e9-42cc-9806-dad0287a2c08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a667c34b-c686-4b5a-b35f-3c35a4035070",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca6f3bd4-a267-4a37-9048-322a415a0ffd"
            }
          }
        ]
      },
      {
        "id": "c87d4041-d8b3-4ed0-88c5-5eec3887b89b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "12b1447e-e1d8-46df-a0e5-1c8db25ba2c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3779ea58-64cb-4a1c-8f6f-7313026831d3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "871791ee-86d8-4572-a30f-b0d021f01756",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ed4d59-5ff2-4e71-ad28-220f733138c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a076ee99-3e8d-4c7e-89c6-08a1012b8c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69dd328-cb4c-43e2-83a2-6dff2fc42b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c78e160f-8d8a-4099-b8af-6d5dd601242e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e42fe9-4d58-4542-becf-49036452bd0a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b30661-d3f2-4ae3-a704-7733153d8c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3ea79f-ab3c-4066-8b6b-9381d9d9b45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee26ac0-6bbc-4050-968e-6a97893a6b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8c65f6a-30b7-4683-b96d-7b8b7ef8e471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ca1c9b-8347-4240-b368-fb321d33a5bf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e7d832-681f-475a-bb8d-df0e5554cce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49576b5d-a2a7-4750-8acc-e7ca273f3ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05416a8e-ae1e-45da-93ff-c40d78d389a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c44c79fd-2d98-4ac1-9343-58b5146945ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df06f825-6998-43e3-b58c-4557446bb31d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7680d9-5554-40a0-bc69-2917e878bb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a0c88d-6d33-4029-944d-66e1a0e15130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b30d9f-fd60-4f37-b74f-193f4e4726ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e2f9666-2bfb-4ec3-914a-1bb98d3d8e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b69a34-27fc-4b36-9614-c4b056d0ea85",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82f4ff6-6419-4704-b4aa-7bc2d55e66c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4694b3a9-4322-4b92-a344-6e4de2ae79db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184f5b63-c56c-4805-b00a-f055e57cada4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d788d01-831b-4c23-b24c-b73bd90066e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942552d8-98db-4a27-a04e-dfb3c8c10e12",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae766f12-d99d-469d-b30f-7f3acc18d018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0a9b85-529f-4ff0-9744-17513be266f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be0b766-9513-4f69-8879-316846e0486e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d38cf11-230f-4b22-adf8-3cfeb0fd88db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0603b317-1b18-4d38-912d-7edbf137a1dd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b26e7a1-6742-48b8-916b-588cbe447dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2901e9-2c2d-4f95-98ec-fc44bbc92c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110d4fe-ff1e-4979-aa0b-2afd079d9ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51584598-fed2-4cbb-a498-9bcc4cb08db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3e0619-3107-4307-aa72-70dc21177186",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72654e50-63ef-4548-bce7-8a3e2d3f52fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b04220e-600a-4ace-a688-e5c9338f3c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c7a6ab-be4e-4915-aec0-8fbcb1aca7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c382220-0ad0-4969-9833-1aaf1375afc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076597cc-2949-4b70-98f0-f34cbc9b0def",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb86bb7-47e4-415b-bb17-ff8088d13e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0056c40a-772b-4197-82c0-f6da6f3e545d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4570c8-e647-4335-8544-917853c6bec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7b217d0-1f07-49b9-babe-c8f5ff453a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14796fca-e4af-4996-a69f-3cc48a5fc112",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5ef4b1-7e36-44c0-92d7-6f8723f10d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d79476-dbfe-4743-b442-b4366d43e36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3e4b3c-9456-4a19-9655-0f8001a0211d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9544a756-679c-4778-94eb-cd637c1b2082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2d4c6b-f649-4d1a-ad0c-24e2d38278f9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fe802b-c7b0-45c8-ab33-f40dbcd6a729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f55b1eb-a933-4623-b111-0b7c8b973baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2f027d-4b79-47c8-8efc-a81df607edfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3837f6fd-8066-4974-8548-b0a20c79ca29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8e5344-397a-4d01-85ea-7c29dcfb2c6e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c4f5af-1c37-40e7-bc73-5af3d0125eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219f6c0c-8a04-460e-9162-4f96dee15c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3afaa72-4fb2-481c-ae44-22ec741b17e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f600b53-8bca-4cbc-b7c2-29bf8469e076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a6bedf-34af-489a-8e78-d75ee23dc2e9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2762288d-3a49-4183-adbd-f07420b05587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77531792-6b08-4093-8b4f-71882cc92f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fea25a-d44c-4d83-b94d-d20ae70468d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6483b5aa-5931-4eac-8885-39790cd0b337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8cc21a-259b-4e0d-bd90-55d329abf888",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7866314e-d460-4f87-9ce4-5b9761305fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8b54fe-28c2-4810-9603-43dd0fb03b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b0918e-5ec3-4975-af42-ee539bdad792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e67ae65f-4ceb-48a3-bd7b-e3ddf014602a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c103f614-7d90-4a41-9bef-7c220eb51ba2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3e4933-7ff8-432e-b274-9e83d25abefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d56c49c-701e-4794-ad7c-388a857ac098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab29c0a4-9f8d-4f22-b2aa-2184913be8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66a0dbf7-127e-4d43-a4b0-782350d52a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47200b03-5db3-49cc-b600-9f3dda9637eb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404825a9-1a38-4b4d-918e-6a8c20a86459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f2af20-981c-461f-8fac-c28c8743ec6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a22b33-cb7c-43eb-83b1-da59074c7332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6302b14-0a59-4b52-b6ed-332d26474e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef71de81-bf7c-4d9c-b831-d6832176d260",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54986131-c6d8-480c-8722-a924785d101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdf53e8-2d8b-4496-bd6d-49b477854b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f7413e-01c6-481a-950e-f99539515aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d479e6c-9179-406d-8c12-46659b2ae873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c29ee4-04bc-431f-9682-f5280e630594",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d418755-6aaa-4e0e-920c-6423ce1d3ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c3a849-98a0-4676-9647-906bf1a42ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a708dca2-ec60-47e6-b8fd-b5f43bfc82c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6ad6cd-6768-4a20-b13f-15d2df658f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03527334-c4e9-4d2d-9aed-8bd6c014996d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a95d2e6-28e1-45c0-8c16-247b575b0daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7c0771-b25b-44a9-a8f5-a5cba453484a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cd69dd-1209-4852-915e-02b977a17a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "008e67d0-b616-4bab-b1d6-2c13eed686e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f8508c-4069-4bb7-8aa1-b67cb1ac3e4e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86696646-556b-4d46-bb7e-e5e78f30c063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3f7fd4-f0c4-4c3f-9c81-a2bb39de45cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de78a009-a110-4842-a652-bb24358e15f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6940e2a5-8ad3-4f33-afc3-9cc038ed5b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755a93ed-0850-465d-a7b0-d128a00ccf82",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07221e30-8564-42b8-ad9c-7b3091d670b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d1f208-8681-4d2b-9546-b51ce3303e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca91438f-ae05-49ee-9c95-17af9e421e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "370b89dd-b6ef-4c12-98e0-877865c49211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9782c07e-a51f-4f85-9e49-25ce3c5ada92",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb265ae6-8beb-4482-9647-476ea67c5bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031f845d-ed9f-4358-94ae-7da19fca2477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e711744e-1b37-410a-8ce2-57ccca83cd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8ca1ea-98b4-4b54-9b4b-2dd85d53cb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0095af4-b7f3-4037-b025-ad82899db987",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d0feb7-9910-4be1-a959-9177706b383b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1ab5cd-d5ce-40ba-afa1-7c21cc92540b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8afa2c-e662-4a3b-83f3-04f8ec91677d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb653ff-4a60-4ab0-88b5-25748d49a333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d99096-08e2-4453-a9e3-00c54f7dcbef",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05df4c9-b635-4218-a74f-4f693f4fd8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56e32c6-c81b-4125-8b27-90116a505736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba6eec3-cdb6-4c27-94d8-64123557129f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffdafbc-5040-4b6a-9685-1d7e572e674d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3838721e-e287-481d-8990-93f53a6bfe83",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2320f7-8f16-4dfd-82e3-0af837932bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c1969a-e5c5-490f-b5fc-39bf25220756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dedc2d5-bb35-4caf-8426-bcf7ded3869e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21d892ab-11db-4fa8-8127-7953b4cbcf14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afca31a7-2391-4b57-806b-a4cb4963e42d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3b10d1-12a0-4fac-9206-c16c9dad01db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74af8b9a-5d37-4bbd-b199-657e64c29c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8237f0c2-4891-4d40-8a93-81eedf369853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e364e0a0-3f09-4121-8add-f356bd5f3f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ba70e1-0fe4-427a-a483-26e2e4cd8a17",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812a1283-b6bf-4ba8-8397-ecd7731cb830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94a8d47-1af0-4652-a4d6-9c5bf1811ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40d549f-3bfd-4c67-b721-1ed6cc3cea2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2489e6-86fc-4f9c-8f13-c33a225065f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4602f1d0-bff4-4e17-a5cf-e0507e2e8222",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f04851a-5d0f-4264-bfb9-cce459a9cae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d069cfd-28aa-4335-83eb-769f5f3c6d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a0d640-1061-45eb-95c7-51ea85faae3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3a3ab0-1478-4917-b26c-1024e9cb29b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca4bec1-7f4b-4a20-aa31-33a1f79639ba",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f73175f-221e-42ab-a405-acbf251c2346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b312b3-41e3-4a51-88c8-6546b85cbf51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be7c176-956c-4a1d-b836-22d64233e57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4469cc79-5d00-442c-8b63-b6179339dcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc3f44c-c217-478e-942a-095389d7c5d9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb59fd6a-8717-401b-a79c-de3e6f3cf556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b8289e-0410-4b2d-9ef3-15ee1e86d063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8854154f-fac6-4db0-b51f-d832aff6dc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54397f3-8681-4faa-ab4e-0034c69f45b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d08b7d9-700c-455a-a2ed-3be5bbffbbf7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab7d706-197d-4e68-b027-d071e2e344c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a734242e-e228-4502-8c71-64b83f706901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12827959-ee3d-4438-861f-699f0f1d02a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35aff9ab-a02b-459e-9c05-ebb1eced2b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f9e47a-70d8-48b0-9581-db712986ae10",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2490d0da-e454-430b-a3e0-bc1737a6f13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78260ff6-32fe-4a59-aafe-43957e02de5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8f964a-47f3-4301-96c2-5d92c64a4096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c882a479-fbd0-4151-a63f-bc9d9c35a0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa636ed-b79b-4404-b2b3-2ea288f33414",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4873c0a2-2f00-4fe3-8775-86c7c53887a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8008acf5-efe6-4c0e-bd39-4263ed7ecb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a08bf4f-9b1c-4204-943c-8c57a8512dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b16d8e55-2253-4c22-8f72-77db44b5ce07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee13462-5a2d-49ae-892f-34b7059473ed",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e714cf-efee-4a6b-8448-e9933d2d3cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bdca93-4915-4a93-b224-0286fb6a0df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7779493c-bfb0-4864-9fd0-3dd8301ec694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe863c8-2331-4396-b343-de4fa771af74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dadfc3-4263-4808-b51d-647f1557a751",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fec0577-80c5-43b3-9520-1ffd4db61ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe49bf11-150a-4c45-a450-1131edab9fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cce721-3193-4355-8c8e-6f07ae37c3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "50ad66ae-afb5-4810-85a4-b5954aabb3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c94e4b-b262-4689-b0e6-52cd95be3670",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e372611b-1378-4a14-8893-b37783df9eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a41ed46d-e359-4032-8fc0-f36e2e2000d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ee382c-d3a8-4e09-a427-fc6d36c5efb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb938d9b-8fff-4dd1-9857-032a599756d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c70bf81-0a93-493e-b6a8-eca7ba511939",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6e4c41-f68c-4b7c-ac6c-549e975ba5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199148a8-2323-439a-90ad-3d266470f945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcece31-c339-4d76-9a2b-5a3fe20b5e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52aa5c4b-0f39-46b0-a8f1-4070d4da198e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35c4d9a-ec47-4217-8edc-6972f0354f25",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4a3b31-f197-4e1a-a314-962346fb997a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8604fe-2e3d-4de2-8589-ac9038b0f716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b9692a-2c93-4af1-9ec3-ae8adeae2120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "47858e45-8d1c-4d3b-9815-83f60d0f2398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1145d4f7-8ea6-4483-9dc7-93af7e8493aa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46b89e0-7df3-4bd0-80cd-7f4dbc757658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5453d1f0-8370-403f-94a6-d09d24acadb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc490e8-25db-4093-840b-8b69bf96c09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec897ee-75e3-4da9-a2d8-d2c393b47951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a95120-b4e1-4a4c-838d-06ca8a7a9ac7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895990f4-7423-4542-ba2f-f42fc9436cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95472507-79eb-4177-bffa-d08decfd7d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd9f76a-6e8f-4e7b-a9c7-41d2c88ed53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb12804-7142-478e-802b-727169d2e9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0efcf6d-8747-4fea-9375-960465132b1f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0344f7a-b29f-4e95-8af0-fd8c82ef4e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e8f7ad-64b9-47be-aef7-c1f513b1e17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e384885-d7b8-4a24-8790-e495fc88f966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e36c5d4-fcef-4a46-a72a-1f74db3705a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53519cb-5656-47d0-9adf-0d5510c60c7f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2be211-c7e2-4214-b0b7-0a3b77009d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3828ef34-f7aa-4eea-b9de-6cf0daa3dbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feedb699-406c-4126-a231-d048bd2ada86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7e558bfa-98f9-461c-84cf-6adba0e98405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880a6c79-08a2-49e6-9ce0-b4fdac51a9e9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57723ca-262f-45d3-b6d9-9c099b562fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e45554-f548-416f-8ac0-f2beb54a1ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a36850-8aa6-48bf-8ad2-373f37f28d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9deb0e0a-2588-4d97-a8ca-85e909515d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784b3e01-cb72-4acf-b43d-eeb920051c6e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7709b005-0b0f-4d46-be8a-2aad2f6aad4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c9cf3f-3013-492d-a0f7-c2fe4787f0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca5d302-bdcd-4af3-b7f6-ea4c296ae811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "87765a28-dd6d-4a05-bc80-d03d81ff4847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4b5066-1854-423b-9375-df0e14225bdc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d49424-6311-499e-bfa5-9472109f154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28705db1-60ce-4817-9b56-ee8f5bb4e746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af155080-6188-40f6-a4bb-1ec6148f18a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "efea27e6-8334-440b-95e9-71bf41b4df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b25462c-dd5d-4762-a092-c0fa7aff3709",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e52b3ae-eca1-45f4-acde-1afe3e76ae55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af32da21-ff6b-42de-8024-2591a095a4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b035a4-06e2-4732-b53a-ace614d43e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cae8b366-2fa7-4581-869e-5919bbcf1f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfe46d8-4a7f-4685-99ed-e7fa8b40efd4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c64902-2c24-4726-adc8-f7cdaf06bee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e7a460-26d7-42c1-a3f6-1d91b8721325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162061a1-6215-44f2-9b2f-f75a741655f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac36a26-7996-45dc-94cf-6bc939bba6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c773e0fa-0111-408f-8c81-4e7b3cdc0333",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae09234-4f30-4f8b-bb56-86c37df25fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcd8027-97cb-417d-b07b-0677a2a85301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86383402-66e1-4b5f-b137-f970434fa677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6508e18-9de1-418c-9082-3f2426989abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79985efd-bb1d-4932-9631-7002b3d8798c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6506ee01-05ad-47f6-943b-31db63e37dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba507b62-a02a-473a-b635-4ecf4742dada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b504089-b478-416a-96c8-49493d569f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b31dec-594f-4047-b273-4f9fad2889b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf61002-3612-4469-ad21-f92e743b3fef",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43f12a9-b1dc-4612-9cf0-4385ac1fcf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e6b2be-81a4-44fe-b0c8-7952c54e8fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71d36c6-90a5-4044-9487-5d3be7cee603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26b535e5-6a77-4ae4-bf93-e17148403077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6969296-d63b-461e-9767-5284db99f5be",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db4b995-967d-4d96-b8b9-0f8d19a35c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94de82b3-21a4-4eaa-b8ae-72449bb15824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfabdf3-abfe-4387-bd53-218c1aa11dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc65e91-a3bc-4c94-93f1-847d0b78b7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e288b6-c4d3-466f-9515-272669f182c4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9089c9c1-de11-454f-a39e-8dd07c3b5f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7758a81-4714-412c-853f-7d9a1fe88304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba2536f-fba0-4411-ac2d-dc692d91ceb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6b580e-cd64-46fd-b374-40c3c7bd0180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ba8fb4-d730-4410-a7ce-7a4fdf0ad336",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdb9bdd-d053-4a8f-8271-20042c3208e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f52cbf-a051-4da9-b477-bf5aa0c9e53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e599bc75-0a4f-41a4-8a25-6b6d76ba43ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc89474e-ddd0-4a47-9ac5-b50f02fca6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765a17b7-92d5-4d67-959d-e0aa241cd50b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628f0a2b-72dc-48cd-8a48-c76bfbe2e512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcd3480-0ccb-4cdd-ad79-c7b9251f5289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59939a30-12d4-48b1-9880-47fbeb832b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "442b87c9-2337-4841-b62b-ab3da296a618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315787ae-c207-4980-9267-03372ebff472",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34f1005-19c7-40e9-a88e-3e525e68b4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cea130-6ac0-4951-98d4-000e89aba7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5924b30b-0e48-4bb7-a648-2dfe8c9e96c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad90a22-1316-4c17-8882-05ad15953597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429d9056-9fb2-43b8-a51a-ea5507fc049c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fde213-fc01-4f35-ba3e-a23f8c654429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e003791-277c-492e-8f3a-c138fb0922ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb59b78-a242-46a3-84c2-da01f63b5d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "41ae7e96-bed5-4ad1-9c21-530c5575c8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0107ba-71b0-470d-a243-fc4e0be8b3da",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af46d342-3759-41d7-b135-1632f5120644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf284a5-f2be-46e9-8be8-b00d89c953c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1095aca-e3fa-4b49-ba0a-1716d31ad933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d09eda-c8ea-42f2-b323-e7350c1775e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30078a5c-4afb-4cec-85a8-d3a4f10b4afd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c3aec6-fb01-4968-ac92-05d78588d039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e6315b-cbe5-4faf-bcb9-84892a147520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cde399c-69ea-441e-9a24-43b504fb5b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8987eba9-cfac-4b2a-b8d6-4ee7bd51e596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ab5806-c426-4efe-bd67-75cf7a42c290",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddc40dd-3b6e-4e9a-b6df-7e82aaceea01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2869cd65-502a-426c-8732-91ade88f5c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138f79d9-e00e-4201-8f33-6e6729f2fc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b08e79fa-4fd7-42cc-ba1f-5146b25681d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d05662-c214-4800-bd65-969363c1cb96",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3690e5-fdac-4a79-bc3f-596bc0f98ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97262299-f1e0-4501-a873-4e5d498bb50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97a7652-0f55-4e81-8871-8dc8742d78eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c318f467-042a-4f79-8cba-ac23f664ca47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eded915-0015-49b5-adba-2b2443e934af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f180f268-81c6-4f1e-a48a-558e4be161bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c61d0c6-af33-4b68-b2a4-df23f76f8a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602f5f66-2dea-49c3-8194-3ee98113dc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "22af6521-58b9-44bd-aed0-71ce316076cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607074ec-cfbb-4f44-ae1b-dce6edddf058",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5ec359-36ff-48a9-ab52-e8d8a7247814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436285ad-6d4c-4a05-9de1-1a1cf9d20163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190e95f9-df85-4122-808f-a60fba83ff3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc5f7af-207c-42da-b0d4-be9a14859d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8a91d5-fde0-4287-bc90-8e3d6676762b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81817ca1-b27c-4136-8b3b-61e69d799b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058b24a6-82f5-4d9c-aa6f-7e9f2eb86838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2813814c-59c4-4808-998e-8321d758af32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbddb70-34e1-4085-b130-55d0603339a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9294ef-4e79-450c-ac4a-2ce17fc70572",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6362568f-f484-4300-8a72-90384f230d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a31bae-4551-4d57-9f9c-ec8586d77f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204d1bac-384d-4bc5-8cb8-62e1c55214fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea5f43a-ee3a-405e-a543-9c1953c684a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f8f06b-a838-40d7-8499-576440a75a17",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a32f8f-a2e9-4f9d-9839-14dc90bb03f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6833da25-bd53-4465-b4a1-67dc1b1df8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6509772-c3ce-4576-b4e3-108c04f8ec51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a82731b-b00e-4406-b671-dd70276eca33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a984e9f7-bd1d-49eb-9123-b3bace769040",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dab679-54d1-42d5-aa77-5cfb60314c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb5616f-e4ee-4e69-b7de-4256f43358e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d80cf08-1393-4f74-9931-d3f1fef8eaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a772bfba-4db8-4396-859e-2c075b7b728a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c78be3-6241-44e2-a3bf-3e8015a8293d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75a6da7-8bb2-4ab9-ad3c-cbdd44c3e415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1c42cc-32a9-41a2-9900-1c3769a529a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d12f41e-f840-4a33-b4f5-431861832d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae0cf34-dbb4-441d-ad26-a282f458d393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42328a2-0e2a-4970-8885-91ef7009f708",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117d2d6c-8709-4477-af73-dc21dfb6eee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ebfdf5-9fc5-4851-93af-f6e9ba0ed79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2276d4-206b-4086-bec3-136635cc0bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b27b90-d30c-4ff3-a21b-071d80178cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1da87a1-70eb-4492-bb01-88d1dcefc520",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6584fc01-28b7-47b3-a2ac-97a72fb6716a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58095f5-a1ef-4058-97e4-9fc58fb7010d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242c7e19-12e4-46ff-b7b7-d647f471eb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e43b28f0-e60a-47f0-9c54-8d569d96240d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596c51f2-89f1-4681-9d88-438f5233bd9b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29ae78c-ea0c-4acf-b82a-f7012dc2606f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f9f574-73ad-4923-bd6a-855c7e8f8ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9077a930-92c5-4120-9fed-0fdf6cd545ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "832897c0-5ec5-4e16-96f6-916a873c1cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d71bac-6e1a-4aa8-b0ed-33e0de176c14",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e162f57f-40d1-4531-aa40-14fd20625a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be47ae8-d689-46f5-bc92-8c284de27c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b28afdc-c231-4863-b630-40386e3e8b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f5be41-089a-44b4-8f02-ce3f6310972e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cac16b-9dc6-4a5c-a17f-2faf388a8133",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309e54eb-e5b8-4f6d-bf6f-9b5375d90c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076869ea-c89b-415b-99bd-2783703c24a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ac7cfa-e8cf-47fe-b5d7-2ab1d22105d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3de4595-4e4e-4d5e-9bb9-dc69ccd35002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a715a428-63fb-4de4-b0fd-37d767621401",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef3ebc0-be52-4f04-9e49-52573238d48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d770a9a7-4618-44d9-8c95-a18b1fe91df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44f130b-2a2e-4fc7-89f2-54e035c787c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9966870-c4b7-4409-85a1-74e532f93d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa24bd2e-bef7-42d2-85ca-d12badef10ef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28353e47-d586-4c3e-9d78-21e6c511e628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b599e4-76c6-405b-b55d-b31478c97e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815f46a6-4ceb-49f1-89ad-bb8cb8cf4f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7be306-884e-4053-b0c2-9f521f450a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d34e74-e757-4c59-9ba0-f3061a55dedb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85f4dec-e518-4649-874c-cee88f921a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b79539d-61d1-4441-bb27-548fe0a95937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021a2eea-9702-49a9-a196-c428e6a4866e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "190993ca-51b1-4c09-9cdd-7344f312d9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1121584a-ad4f-4717-a454-270383bae0e3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60eb8d21-0b73-490b-b475-93a25e71cf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d37c13-af72-47c2-8ad4-0cebfe5f2602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc19921-f152-4795-84d0-38e87416f585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5eb0c38-98b8-40b9-93ed-104980fc56b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935cd3a6-cd45-44c5-8d61-35148569363a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efd620e-b3c6-4d7b-a1a9-606c226618cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea43641e-9e98-4014-8d46-23febbba357c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f66829-a06e-446f-8c3d-fa463a34906c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4c406b-c503-4248-87c8-67fcc42ebf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d106b60-6b71-445f-84cf-3bc9ba69b017",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40806c3f-06e7-49af-be52-1f62feaf7b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dcae509-30b9-44c6-95d2-41a78acb4cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa1a226-04f2-4ce0-b245-27f55780737d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed000ca0-45dc-424f-9537-6ce405b209ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b38ec22-fdba-48fd-84eb-52bd1effa0ea",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cdfd6b-a3ce-48f6-a26f-e0612cdc5b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2050a60f-c193-4b9d-9a95-bfc7966ad9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09565e9f-5ebe-4d3f-aabf-e7d2271e21c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0b432e-0f22-4110-b6eb-d50b4d4ec94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f5d00-c064-4e5e-ae9c-658d352c05eb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe95e04-12b6-4572-b8ef-c4ef9c9ce31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70e9fe9-df43-4372-9fdf-aadc9e6e9aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022dd4c7-ed09-425c-a0bd-8f325b2c6310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d35e729b-9726-471b-bbfc-25fe16a01618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df43d1f1-26d0-47c7-b742-36a7c0d8f90f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecceea0c-30a4-4ffd-8d67-ff07ccce7a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd17b9b5-8aa8-45e4-9ddf-f9659646dd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c583167-0fcb-4209-8085-1b33f70e1244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ba3e22-0bfd-497c-86f4-72349ae81b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0af94b-7980-435d-a91f-b2111fcea96c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21deeec7-d2d9-4b00-a3fc-99d16b1a21ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f03a03e-6594-496d-a25e-3ac683485b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3492e4-0e7c-4ec2-a9d8-28379a5c9d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88f2ff80-fe0d-4693-8da1-ebd58b81c7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8ace13-0327-49a9-acbc-925cef04c8b7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a9079d-83e8-4462-8f91-ca8c2bef0d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b4b5e1-042b-4684-a3cd-ec5079b34760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c8a8a8-241c-4b93-9bb1-744152e698d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e11caddd-126f-4787-b1fe-49a38c36017f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df2eb2-50f4-4d00-a0eb-5d702ab426e0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f66520f-301d-4630-b9a3-da7fedc2e9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c143aeb-624f-4b81-b6ad-dcbe009843b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4003eee-2004-47c0-b375-491f8180b779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85cc5d63-11e6-46fe-a76c-12ba6b2515e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2490f78-bce5-4846-94f4-8a667342bf46",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14395815-2860-47ee-86e4-c25984548b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b30c31-9171-4784-a44a-ad0353d43a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ae53ec-0a7b-4198-b118-841f1b3f452a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7942257c-4818-4062-9838-35ad9fe31d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4662ba42-755f-47fc-b819-70b1752605e4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25c28f0-7296-4b3e-8e87-bce0ae7055cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5faf61-4529-46cc-9ac2-997e8d74f9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7dd66d-a4b9-462c-bcbc-9c9cc740964b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54ef4333-e885-478c-9853-bee156b4e4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1a1c0d-0f65-4be1-a83d-6c3e5abf0734",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee05353-634a-4d5f-9acf-42642ce4ec99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f981f0-3eb8-40ad-b0fe-ab1d40f81059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e237a8-5953-4417-b7d9-8c63d09de8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7830f5c4-0b14-4c8e-ba83-abdfe82d8937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec12e9f7-08de-41e3-9666-1f1d6eddd7cc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271465aa-150b-404c-b7d3-c8158b5e0026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25415a8f-72b4-40d3-ab61-61138982e58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f639d73-a933-4e54-962d-220003a10d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ad76a1-f59f-4334-a9ca-538540b29501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75989221-c488-4cfa-96bc-c5e93c96808c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105eafc0-a292-4012-9ec0-30d11fc5d693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e217a0-7251-429b-af1e-11a8d6bbd715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6d4470-bc06-4364-99da-35947ad8e799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "21344b0b-4cf9-471c-808c-e10a990d0c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8e1ef6-f3de-4dca-82b2-05e2aaeee25e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6e4d0a-84e9-4453-bf2e-c01aec2d8618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096641c8-72ec-48f0-8253-491c44623d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ad9f13-2059-49cc-939e-f1a908074db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0505a22d-386e-474f-8ad7-c1db1ce6cd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a5cd76-9255-406e-b427-2db0fadd090f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275ed73b-bcd7-4463-97d6-fb340b5e397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025f9082-d53e-42c2-80df-eaa120088a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb87840-3620-4dd1-9842-22b3ada9b235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e28eef-c29a-41b8-ac2e-bd81f4a3b3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c756ccf7-155f-4e83-96f8-12b7168dcdc0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd91916-3ab9-43a4-b6a0-09d11b4bd809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fb328d71-d242-43a3-bddd-da2863e4a4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf305ee7-0eba-4696-9f4a-c174a610e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "126591ab-de5e-4ed4-854d-7abc6173fcba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89eef226-2ebb-454d-a1c8-f9203d70a12b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3218055-1d1a-462e-91c7-554a434af1e3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be6bae1-3421-46c5-a573-934be9a7e474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3460904e-4202-41fd-9649-72df52c506dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f663990-b92b-44ff-979c-2f9c965f9ddb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6d7a4b1-d213-4e7e-94c8-a58363c1185f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1886ee5f-6e76-4464-81b8-3d495ade02c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ae9e9e7-2661-4ec0-ba61-4a7f4e302f3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2f5fe32-3e76-4fff-8fc8-faedf2ae4a83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d61b6a57-9510-4236-afc4-474925415c96"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f35d3de-a7e2-4e5d-8519-3924a2ad8648",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8ead37c-b537-4457-86cc-b1b1d4f60513"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00d2476d-1a44-47d5-b030-a63f2226b389",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a31b6a6-bf7a-47f8-a5d9-d2fe1c8a6a85"
                }
              }
            ]
          },
          {
            "id": "afa04249-d127-4af4-ae0a-f26be248ba1c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ccf1c60-7e9b-4636-8234-8414568da33b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e4c59ea9-f188-48d2-8c1d-e5f959842955",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed388e4a-3a34-4bb8-a9bc-64b1d6724061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bb724c61-340e-46b7-9313-97cadd0da1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fdf863-bdd6-4d27-b066-2afa3dcfc37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b301dda-02b1-48c8-a011-bf4644e91aee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da10b205-96f7-4e57-88e1-1c12331c2dee",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0b2b812-fa1c-4a83-b944-873bd3f87b2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d4b4b48-8e62-41e1-9acb-b4d585965a43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7324b032-91af-42ec-8c50-efb8b074d75d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3fa0a8f2-be05-4236-957c-4ead51cf8cd6"
                    }
                  }
                ]
              },
              {
                "id": "5caa3e9a-aa05-4a23-b2e2-cf669e2f8f34",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4916372-ab5c-46d1-8248-596ed4aceff6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b9592a3-fc40-4ca7-8c48-7d21b95a77b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "621094c5-a545-4624-932a-c9df3d519e6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a8273cc-6b51-4fda-89af-9ddf8f7af485"
                    }
                  }
                ]
              },
              {
                "id": "77c60a68-b52e-4635-9d6c-80fd6ab121db",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f66edf5-097d-4750-9f96-02da6da93d6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e128458-08e3-4368-bfa3-41994d41cb7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "521f3d9d-4caf-45d9-8e65-30a65aade95a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eb4dbef3-deef-4be4-87fc-6837de7e5665"
                    }
                  }
                ]
              },
              {
                "id": "beeac8c7-bbfb-4ff1-aa56-63e433f3f320",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4257b98-2cf7-41d1-922e-76dd2568d6b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa8632a4-9fd3-43c2-a35c-9d2790cf8a64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ab5833a-bce6-434b-b8ea-fb394b83a8ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c49234f9-5fa7-4a85-b34a-feb8535e3b04"
                    }
                  }
                ]
              },
              {
                "id": "847df11f-206b-4003-8549-2cfeae10aea8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc0742c3-97f4-4f48-ae8c-52aba24fa1c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8286e00-a73b-4bd9-811e-0d0f569e44e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f431a24c-6e71-45a5-b87b-3e22760d54bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1ba5e1c4-f5da-4df7-90bf-febf2f5b9c89"
                    }
                  }
                ]
              },
              {
                "id": "6549c304-cc6a-4cdc-8236-fb63b1c03920",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9874a9e2-9181-4549-8f78-ed8e42dbad6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ce0a945-29ed-488d-b7ea-060338d9dd2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3a3c427-bf96-40a8-bf34-9ec5119f0295",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8078ffd0-86fb-43f9-a809-dc9f47358f77"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a79af72c-f118-4a80-9fa4-57336143eaad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d22c8e56-21f2-4376-98b6-23bd5c4a77da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "665dde8c-ded9-44e8-80e4-fe77d34d1990",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69857f13-2f8b-41fa-80a2-18ede78da80d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b7b240f-3245-4df0-9a10-4fe1a2d92bb9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d7f54248-cae3-4560-8a24-cf1f423a344c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a0ad6ab-0fc1-4d33-9cdd-331b4f247564",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "450da9e8-1396-463f-8017-78345d0574e8"
            }
          }
        ]
      },
      {
        "id": "aa0511f4-5037-4309-a83e-4398e9285e93",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "10f77574-991e-47c6-9c26-d55075bcb911",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e589e4c9-5e6e-42cb-b964-c66603b36e77",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3497ebbe-9052-4d38-9fcb-4c4cbad536d5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91951fb8-fcd7-457f-80ba-8d70960e1a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5db62f0-f07b-400a-bab1-42dc522a4f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6535a0ec-5257-49e7-9252-14a76fbeeb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e632afdc-63a4-4899-b9d2-a389221a535e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d396f9-e1df-45a4-8b34-a9e8f7d5c1fe",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee69307-cd6f-47ab-898d-7dc432765807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708f84d7-d050-4bbb-a23f-db0e6c8676eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd677b3-75a7-46b5-a754-fa872cc81656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd6b365-140b-4054-af65-6177699bc2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926e46e2-2ef5-49f2-bd42-81f5517e456f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d11082a-c4fa-4863-aaa0-8ae003aeaea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff214c9a-7ec1-448c-a61c-f40fc432ffa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb7242d-0536-4ac7-bc2d-bfc26576b06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e177d4-e5fa-4624-b700-ca7422cd2a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51db5170-36f9-4e72-a15b-870720df810e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b0307c-d21f-4226-b1a8-1980b9c1b89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36d137c-2284-430c-882b-1e2f2a99424f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe5fa71-0394-4926-b9c8-957a2790c0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "03e1d431-f09b-424a-97fa-7fccbdba8103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e416f7-e446-4927-a49b-23b259ce9fa9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6508338-6aaf-4a4e-9f54-2ad14515e6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a15ae76-cf36-445a-8136-706ac0ec2437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3c1c5b-8d4e-4a57-b10f-402ef2b89e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d569b717-07ef-4d22-913d-a404bba7481e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe922bb6-22f4-446d-8353-31c7f53b4b06",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f86390a-7247-4da1-b3fe-a1c0c03a48ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a8ff6c-cdff-4fc9-b888-d945d6743e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26162ae7-aaf7-4be7-81fc-7c9800c62c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe53974-1d5c-4a9b-b001-c356408dea0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f54de80-dcd2-4627-ae2c-fe13ea32b396",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682a248b-fd92-4e0a-8972-db4c61c45203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0826bc-4652-472b-8f38-5f427f3563b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad49ba2c-c30d-40d1-8a06-e857f44268d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e775ff-e280-4d4a-90b1-66cf489255f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c42c29-1140-47b2-976a-9bf2b4391de1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5a331f-2602-4260-9d39-dd36bfa2ca17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cca8ee-0488-4625-9be6-e32afb6cb2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632e56ea-1f8e-4195-a4a9-db727d468f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4db66a1b-eca4-4493-8e40-118ed0adfc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26b7004-cd38-432d-ad27-f2cf4d2cb403",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9338b648-491a-4b68-b8fd-5d413bd2204d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825a5239-7d93-41bd-8a42-27a1fb21ee29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dc8e74-a985-480c-b01b-9b4da06d9ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38719e01-7f80-4863-9894-c3f88ff254ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910cd68d-ad48-4ea0-beaf-4000f6eea0a5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2900eb15-2b4c-44c0-983a-645396337109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada92aa1-8d6f-4cb9-8c10-8b9fd40133c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e040af62-5906-476d-b036-219efd38f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba617f7-5143-4e35-9df4-3e1275234679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7041535-8b54-473c-b83f-fc38cbf3244f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32904fa-75b7-49d3-9b90-b102ee696fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c250565-0198-4597-a1eb-57642016bbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf269ce-7272-443a-889c-fcf495401165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "674c9ae0-ef58-4957-93c8-3b262ca2e150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380eee55-4449-42be-b3a5-970e2f3b384f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b4f963-8628-442f-9f71-06105b58e705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f92152-d8c8-4fb2-8787-62ca1c11f064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1815ae-c613-43ae-86df-d33bf093b9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15d74952-a526-4d96-a3bf-2884266966f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015e602a-7ab0-4af6-af5e-2efcd51b0b49",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "963faef1-568e-4184-89fd-3ea66d3cc1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10111889-78c4-4055-87be-a47caafedd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea3b55c-f6c0-4182-93f6-8ef2d0c0969d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e669a570-4334-418f-9d93-e0a37b6ac271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d94ee9-371e-4e77-b4de-f2ce484378bc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac610ae-b4e8-42d9-8de6-f6e385b232dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e41f7b-b6e5-4da4-b807-ee184e4f5196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ceec6d7-0a07-4e0e-8ade-bc8698d142ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "46e52be9-18fa-4ae5-a852-35a583464815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba432dfd-322f-4b62-b00a-49dc1af5c5f4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a053c7-2641-4cc4-b76d-7c7a4a401093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afd192b-ca6f-4253-9404-65ba68f5b2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9510f143-b378-4463-ae3b-6f654140cd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e9000f-c634-4cad-8593-037e825eef82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683940a4-9274-4fc4-896f-ba13be7baee4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ba8e6b-43da-42de-966f-5def193017d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5944f58-93d7-448a-9693-6315c9e53c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1ffe42-f0b9-4248-8217-57c429d3b7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4ff668-3736-4a1a-a9c2-6f414d396dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee97ac77-34e7-40b9-8495-fe8fa6a3a30a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4d1d7d-d5ac-41e5-82f2-f53267c71cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15ae1ac-ea04-40d3-803b-edaad8db68b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7983712-01bc-4538-9a85-61f1f3e553d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa974f9-21e7-4f48-a662-9f4b69b0d17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbec1439-18b4-41c7-adaf-d15351561d43",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55e02bb-73c7-4770-a66a-0f482d61230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00006571-17c3-45d2-b104-07b42ffc97c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644e8657-531a-4f0d-b636-1282bac11819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bdbc37-9df1-434d-9d38-d8dcc233ecd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76676935-4925-4b33-bdff-3f77cf15144e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d59648-a00f-4688-b48f-048f0251f435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5242463d-4c7d-4895-aaaa-9f4acac4c13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949c5378-3b22-4498-bf20-5ee3e405e3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d4eae7-cece-4cab-88e5-4eda98ab2b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647caea6-4bcb-4cbc-a158-ef6f3b035161",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fd799d-ed6e-4088-96cc-452e9c842264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2740b1-57a9-4549-b305-44c6d746aa14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96d8b59-7820-42e6-9eb4-95ccd42d8bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d500def-2301-42d4-921d-0ac4d4eb05f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c4155a-3635-477e-a209-ada0143aecc4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d43422-23c6-4c4a-a38a-868a5fb75061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86eae5a1-ed64-4577-b792-719e3ff71958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f341e6f-048e-4bf4-995b-c691ae81f529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17d82354-4843-4202-b039-cea6191af476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621b2051-e5e3-4b32-9f13-71c93fb9b51d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb74b7ba-613a-462b-88ae-161f21d90bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee9db9a-1e66-4a37-8758-e901829b652f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863534e1-3b2c-4f88-828e-ce43fdbdc8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2db9d94f-9b1c-4d54-bd8b-e928971a78ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c280db8b-4ec7-445b-ba63-121193a9691f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13013efc-d500-4ec3-b5d5-67a435161323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f175f67-b3ee-48bc-8dfa-008e1c1fd996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac505303-90d8-4c11-8a31-0a9adf515318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aec5a861-5bc0-4189-ad8e-46ca26ef64ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bd1f6d-89fc-45e9-b3c4-cb2e68233a3a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70309f1e-d1bb-4325-83df-a04cd4850342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451c1783-4506-44f4-8299-c7381cdf23c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c02146d-1fdb-4ab2-858e-139429fbaa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93ac5217-3862-47af-bc59-6c8740034995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b821f719-a505-41c5-9571-98aeea2c7044",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0721607-4edd-4ca4-b627-ac2212f22f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4761b49-f149-41be-ae57-457fc3917736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73864643-3cbd-45c6-bce4-82b656423e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdb73a5-fd96-4249-9de8-b015f2e3faa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e58127-1141-46d5-a429-9d734bb4ccc7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe591f0-55e8-4b35-a4df-08c9a81f5f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4895492a-8873-469f-86f6-2e80a8f41cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684881d3-aeac-4713-aec9-65e27867b1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c539001d-0011-44ef-80aa-721f5fb6c664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e282ab84-6b3d-4df2-8e18-4223648da123",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1a9555-ab42-423d-9f0d-eb77ce5e4f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3d17d3-bc5d-428f-bdaa-fe5058532cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448bc232-870a-4bcc-ac74-c080269e28e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9cc1cb-2f18-462d-8aae-52ba3e020efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed80f6dc-b2f4-4542-832d-eb6dc6cf9957",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea53c66a-51e8-40a5-a8b0-3cb264d6077f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b000b0fb-dfff-40b0-98dd-7066c4432e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7698567f-0bde-4a9b-af4e-6e873889c765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c11f00f5-deed-4294-b8d4-662378423ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323ac2a1-de8d-4eba-9899-36e2b9bce4bd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a60ad3-0a95-439d-af90-774e4e249016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d567e49-3365-49cc-8ee3-a40fff38e06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de874d67-979d-4de2-9ca5-b5b29e7046b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1dce8cd-5e96-4c3a-bc7a-6f1fb18f0f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c86b3a-e9f8-4be8-8e1e-1385dece121d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35a8957-07f4-43ad-8764-3b04b1943a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2738bf1-fff4-4276-aa1d-8055852798a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2582bb73-3c69-4c3e-8a0b-4ed1ecaa0545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83ba91f5-cf94-440b-9553-58a8fbb393f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcf9923-ed01-437a-8db5-d1881ce3d447",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78ccf8e-701b-484b-8b9e-e590b330bc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1969429f-6c9c-4880-80d5-8c0ae2ee6a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01919faa-79e5-48bd-9ad2-2833bf6b2d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f727041-cd7f-4c00-acd0-5cf05fc46c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6aed938-a701-4124-8703-76ef5b70ad54",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1b86d4-876b-4760-bbb9-8e156cd830ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "792ac999-a475-4f28-b349-edab08f743a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9f738b-5fdc-448f-9080-0e6c10947566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31466ade-caf4-4948-9e2e-1148a3fdf032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdecebf-5223-4830-a9a7-cdd7dfa827ad",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed73a150-0fff-4e60-b94c-8ecd7d7efd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fe0eac-6e0c-4718-8cfa-e5dc62c65fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d91a4c-1fb4-423f-999a-7f363db22bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fb884e-b3b4-4e31-ba61-91f9e37481c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d89042-a7ef-478e-a0fa-74c772f62a6a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff22cbe-cb1a-4707-8dad-1448e5052c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f0557f-f77e-4ace-bed8-fb24c13863d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab56583-ceda-46db-8d0c-16ee5594edbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cf3a3f-cdfb-473e-bdc4-8afdd046d488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651e5c1c-7b0d-4b96-83d3-e4b96f5d9f32",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b235ed2a-5f44-4369-99e6-0601066ea93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da8f39d-d8df-4442-bf6f-641c279e20ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de53a02f-38a2-43ea-876d-2cdaab3a4f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "692f8314-3af0-4a7b-8ba5-cfdfca6fa6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f83c06-332a-4364-aa48-209952c2f60b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35380f40-c68c-4ff0-a6c1-8c3324ae900e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57282c48-a5c6-4f98-8a31-7042399f2496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f428185a-6453-4839-89dc-acfb17f3fc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb237e7-f680-4be3-9611-b9d018f18cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96021ab4-4b3e-4966-b7d4-164e9fd166a3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65329bc6-e863-439d-a9a1-4a486e00f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3291df68-5574-4922-98ec-25b7a36d011f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af277b5-c954-4a6a-84cb-530be8576234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f79f2883-873d-4543-b2cf-33554dbda0f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17589290-db0d-4252-9a60-f7dc52f095a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86f66b1e-84ed-460f-be7e-fb420899799d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73f5871-2994-4181-b23b-0477b644f44b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "73c60cb4-2a49-44d5-aef5-74cb4584df8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82eaea69-b2c8-4c04-a3b7-686283bb2b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6570fa8-ed33-4342-8abc-bf3407a761f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f0c9fa0-95d8-41a0-ae55-7161d055129b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1150cf7-2c97-47ce-b917-5ab688f4130c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d896494-af20-4db1-9fa5-57ae22b197ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d171fe57-6358-4fb5-83d7-2850cce73539"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9ffceb7-2891-4912-8cea-4bc7bc02b9a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2f0e711a-694b-47d0-8792-0676845231e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29ddee1e-1e37-460f-83e8-6865927a5378",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "891fc5d8-fc30-4fa4-b904-8e29846d5212"
            }
          }
        ]
      },
      {
        "id": "5346c0f6-4906-4ef6-9bde-d184c5d7866c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3f5d4c79-d250-49fb-8bf8-624ffd0d4b43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8cf30e95-7080-49ed-8abf-66ebc160e17e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3b0c37f9-986c-4f2f-b277-b8ec43ff313f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a0b354-b4f4-4f49-ad39-70e3282fc7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e48175-d9d4-4157-a321-ff18864194e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2d13b9-244d-456a-a93e-eb0527fdbdfb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6451db-64f2-4a6a-974d-e55a766a104a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ce28b2-910c-4bf6-a41a-91e113e8c22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0215c6a7-e247-4967-8617-83f3b74220fe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa8af78-10dc-45d7-8b12-ae4f1484c89f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399dbca3-15a9-43db-ba7c-a0720f549a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcad928e-ecf6-4af4-9764-1b3eb4f546d7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3e766d-a035-40e8-885f-fe6a3a4c3e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea675bd1-077c-4270-a9c9-0e73c9c6cff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a846799e-714a-489d-81be-7ed7a5c576a3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a1b401-3406-417b-aa84-6e0be827a680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158426be-5288-4012-a411-7e3d21178905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd58585-8142-4c1a-ab4b-4bf5f1dc05f7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39f7788-7d5a-4d50-94c2-1c4054daf69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8f0fd0-ec2d-4d67-aeda-67d7289df899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac73cca6-470e-47f2-9d01-eab62128ac28",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908fa4d2-450d-4e67-b9c4-d9054bef9253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b26b936-7235-4fc9-be48-fa2883129a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf07ff0-2982-4ae9-b325-dc007425bd91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005a6b9f-9456-4126-8eae-2b3c21d5f293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd43026f-4d1c-45e4-9545-c1b0a5d506d2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973a704b-6985-4b47-be39-98efb088238d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f617db-56e3-4a99-9788-85dd3c0ce822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927ef715-6517-4e83-a962-0316c08e55f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6107bc8f-af12-413c-b6c6-9e225d9f022b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ded1d9-28f2-4119-b3dc-44ff3a189072",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1db558e-f4fa-4d59-9d9c-89ba4101ef08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04732c24-9e5b-44c1-9434-8eb4cf3e1ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad32e8b7-5f12-4b00-92f9-2f4b87c4c223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45686c91-6de1-45fa-a403-fe0dba08dfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92232e15-e7e4-4e37-abab-7be6d2fd9a6b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7f9962-2c82-4005-b19b-91c89d2e8de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68474276-6601-4bff-bb64-bef67a5d3fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913de9e0-7956-473a-b2cb-a46ecfbf8e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0622401f-e343-4971-8df4-d00a26ef2229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e540b26-dbd9-4be8-bc61-ef019ef6d310",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e55eb5-0a7b-46b1-8df2-1883a6aac73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5366bb0d-cbfe-4e16-8ab0-a4714238fc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa24237-fea7-44bb-94e3-d5236bc8c0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb65cd25-ebad-482e-b4e0-4dcab830044d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d21f912-0c6a-4e25-bdc6-487b0490b00c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9844a30b-7389-4427-9a88-c3cb9298dd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08724f6f-a6e4-435e-8177-02d3c6e0170e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cb9e38-fd27-4f7a-a8a9-173e7705440d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd13a3c-13a8-45b7-b5ba-af91ba396546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81527277-3177-4408-8351-7155ac0d8443",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a2fa67-c388-4e1b-9ca5-749a6ae31a55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d1658e-7008-4f82-bc3d-53153e80ae38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d885447c-8e67-49d6-a252-082b8ee13160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb62d47-393c-48a1-badb-6eccf5938286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc7c6dd-a8aa-45fb-9c6c-d0af9f144ee6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a21f29e-49cd-4416-becd-9644dbc00d1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e53fee-acbb-4c1c-999e-2ee076b4e867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476f0b98-2334-4d26-8163-e4145591cd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ebe4c6b-ec46-47c0-a958-52b3e22d292f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bda80a-121d-4574-921b-452ac18a5903",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52fd026-11cc-4046-963b-cf86500a1411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622735eb-7004-493b-9f66-0e49973195b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9f05c9-b18e-4156-8671-cac7ad4e3835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9086e3e5-72b6-4258-8d39-9e6b24b6234a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554f8a8b-bf38-45f7-bcd6-edc2d9ea3676",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8973516-fc50-4805-9668-a28ecbfefd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633f7ca4-b108-47a2-9208-576af1bc6320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa06c87-6ed1-4f05-a08e-84568dc56983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9735642-429f-46e7-b982-0fae3fa2229e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c84964-5bb9-4fcc-9724-a3f2bc4f3697",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeef6a36-ad36-4503-88be-0b048a6e1246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7064a8e-aaa3-41a8-9e98-d6e2fd911563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063ea265-3850-4287-825f-01114958aca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9f6a7d-5c33-4829-9bd9-a9d32db2f255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da359eb5-b1ee-4530-9df0-ebaa06b36aae",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec61ed6b-5b17-44cb-b10f-7ac92a071c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68aec1bb-9ed5-40b5-9256-db63ae896c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b07be75-6f81-49d1-85be-bc032ec7f280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f1c89f-6527-473c-a2b2-d26436644441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93021e43-b345-4d43-a2ef-baaad89a33da",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21abb273-188f-4486-b4a0-b63e8a75e137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75e8509-c50f-4bdc-a363-40756631672a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "568620e3-3b88-4c03-ac44-6424603a3e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cf89c1-ddb7-4383-960d-e54cd3b4e5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46c6f81-6bde-49f2-9e7f-b1bb918f069b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e135f3-5217-4ea5-a0c5-373fc0b997e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35212ae3-6032-480a-90d5-32b6bfcb9eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b288eb3e-2d73-4e1f-b5ff-ff7036709b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3d1000-c2f9-4777-b8a0-a1691b99fdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd8e25d-9fff-4a9c-8650-cb475e682a2b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6466061f-5730-412c-80a9-132fc87c78a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e640af-0671-4a3a-85b2-f091b35957b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f963d41d-785d-4100-ba87-81eee5f3228c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a535f0-d679-4e95-a507-fa54d7b5ca15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14c5f4d-b0ad-4599-bda8-f38ae4480fee",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad4b2e0-9e92-4c6b-9936-30fd42f41f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1008b5-8a4b-4ff1-b4c6-806611568ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7841abb4-0a93-4731-9a51-71202fc41d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1440a70-333c-4d72-b48a-a7aa3e31483b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90f9e37-b0a3-4272-a1d2-385faf15fd61",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09bfbc0-fe74-466c-b997-d22ff9e0b751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3575d4bd-c92a-4427-9c8c-53ecba3d7b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87461a8-5f09-4b3a-898b-67200b9b2c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad77cf6-bbeb-44c8-898d-49ff089adac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4670fd48-c428-4e6e-9a94-c5d9cf15a732",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc1c413-33cf-4b2e-b591-38aee7af8de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8816baa-e673-491b-a910-9e3c3be75f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927472e3-fe69-459e-acbb-86c3c548a12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ee3301-2d6f-468f-b776-364c1dfc618f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c2cd6a-b709-4aa8-9e88-4866a7fd2b73",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad8fdfc-b318-4299-9e5a-8300948c5dee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df712502-4267-4dd0-b174-4e017ee1c783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298c37a1-9c7e-4a24-b639-ea7db858fb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363409f1-f48d-4106-9eba-fc1f8ba009f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc58db7-4cd0-4078-997b-b55b9bfcfb46",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d3fff4-1d63-4a96-a075-786f3d1c0703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a988969-661c-4451-8403-04aff9503200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ea10cb-f52e-4285-9162-6d41054de53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b21468-799f-4c23-abff-4f3a4cdb50b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9aa90e2-8b3f-4880-963b-f27559877e5f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea89cba6-bc45-4486-a31c-14e50f173cc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e2daea-3c8f-423a-bf9b-d8a0a63046a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae7188f-a99f-4be0-ab18-1b8d5bf1b82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c414e76e-4f88-491a-8b95-dc40c9085770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebce0db-d516-4f20-ac28-e6005008310f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5dfb38a-dee6-402a-8e18-9eb661b35856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a410d7db-23d9-4aa8-9619-00ea2047cb8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa63736-5bc6-4198-9a48-ef6e761b853c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a7f803-1bbd-47c1-86ef-dfff239ca900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcb9f94-ff97-4a27-b28b-e198ef373b7b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40372b7-87ea-4431-8934-621a4dec454d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1d721d2-c72c-4468-ac86-ea19be0c52b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930400c7-7853-482b-96c5-46ce683bddcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5074a7-8b9a-480c-84dd-9afb9623b6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e3a511-92ae-4d66-8c11-b09ce7abe45e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc279b9-b4d2-44e8-bf54-7e8ecddc0777",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0606f8b-697d-41ed-be58-75fd3a99765b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d237b61-46f0-40a9-978d-1a3cd51d66ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852297d7-e082-4219-84a7-9ccd339524f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65489701-e1e7-489f-ae23-df27c8a8bb49",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a311cc-af47-4482-8272-edf1a35e2542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e6b7046-0422-4be0-94b0-1165883eeb72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2eab298-acfa-4aef-8fcc-a0c700aac675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94872875-cf8f-4faa-8008-dee9b9a44715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a050e7b-7909-4b66-98fc-7cb59126f42c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60b1a68-ba5a-4461-8cc6-74024509e9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c753f6-2175-4e67-a0e5-cbd2e684e1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ffe470-acff-4231-b003-77bee8443c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fcd22f-63b6-4bd3-afdb-4e744cb7a9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e99dccb-aa6e-4494-b103-a0be82c42469",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59665c49-d5d7-403e-9236-ec9d5ad37aa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e272b5-e793-4752-91d8-7a89f4b1a5d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e045fcd-dec3-4cd0-bb3e-bc024ac1dedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8d319f-0505-42b5-b4b4-628d4a9689c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f907fe0c-b7eb-4f2a-9fa3-a2b46e10e475",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d73399-c826-4460-9195-3295848afc88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2278bc61-d4b7-4087-a799-3d1ea138bcc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d298fc5-19e2-4aac-85d4-9c91dec203a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd594909-b2c3-48fe-b4d8-73dbe3d47d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae7c0d8-87dd-4add-9914-135b7c711ae5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150a8f27-e53f-486e-8620-b565e0f58a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b85c335-b59b-4ff3-b5be-f21f053b78d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4ef9ad-0a95-4982-bb4e-87351667bbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80ed570-1343-48ed-9a73-e6e497639cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98014043-a57f-4f20-99ea-daaa553d2a43",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b9cac-9de5-4304-bc9e-b4013c085a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8a0e7c-d405-4db7-bd56-189c3c3b710e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b580ce0a-6759-428e-8b78-99caebe299a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd4d911-b861-434a-927a-ef90722c32d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fd1304-0fec-4d4f-91c5-c0e9fe6af5b3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2247a65a-da16-4b96-8c12-dc0646995a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9f4db7-2261-4656-bdc8-49434dd432f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ee89a6-b7ba-4fc0-ba15-0711fd6c5f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5019d773-1fe6-4e23-a615-3180d76536a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc49f5f-b302-4898-91ec-837b19722233",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f119e37-a771-4ce2-a4e5-92432f41f434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db19856c-8ac5-456f-bd54-ca37ffe33dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a377252e-4c09-4de4-9398-8ab49c4dbcd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6257565-f1b9-4c7f-8396-a560319aff90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef701cc-a159-477a-8442-a7b41b0a0e53",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4364a8a9-6099-407f-ab31-aea1d8765df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a16185b-7393-40ed-9e72-dcfbe8334d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192b55ab-8374-4088-920c-2541d17c8a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba680c1e-ac85-490a-8b92-23f06dd98e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8d59ed-8817-4aa6-8ad3-2560690ea7d3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22de2dc9-6b78-4a64-9a71-ec819a5fbe7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99581660-7eba-4f52-b0f0-e91a2450a759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c35b67-0cd3-4329-9f1f-bfd05b2a4a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37ab91d-697c-4178-97ef-5918367bbd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb2e75d-5dcb-4f46-9d83-31c02e8b9c48",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6fd57c-8cce-4dba-bac8-e6e06a975cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0093da14-9ce8-46a1-9bec-3fbbc6347757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6a90f3-db39-41fd-9f2d-d96d9e3e4f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a263caef-9f22-47de-abfc-0018b521ef55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15eb24fb-5a9a-44a7-8f45-e55cba887b25",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b7f1e7-a104-4fea-93a8-80e293d4afa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cdb3ea2-185b-42e5-be2e-c487b4a088d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a75493-f8bd-4aaa-a1cf-d12b4e758ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04850d5c-7218-4ea3-bef7-dfd398021af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0565f094-a89b-47f4-b01c-6d4a9b287c36",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5057d41f-563f-4dd2-b6ed-facc74f836dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510a7893-ed9d-4be0-b059-7c8146867f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509a0d8e-87cd-474d-8330-427f328d89ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18651951-5d18-4d7f-9c70-88081aeff539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf3d4d7-1a21-42eb-9f12-a1f3ce887ab2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6d69c0-ed2e-4ab5-879b-f355d46f567c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040f1e2a-a181-4a13-9af4-ed83a7c77086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59da22aa-65a1-4d0c-9124-3eb8caeaffa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5374fc-a7a8-4fa0-881b-2b48c02da5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3304c18-32b4-4e9d-8e3c-c461f64e4c22",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668b691e-4362-4389-831d-b25adf5a6058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032e1fa1-f8d1-4ec7-a4f4-aa989f962c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a610f3d-0cec-4b83-8b9d-5230e474d037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93eb096-cdb7-4792-854e-bafa5c9d432e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48606700-eaaa-4763-8a5a-d2c583b6a91e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8720c311-6f58-443a-bb8b-8224848be60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4542b576-42ca-4443-a0c8-19976a2ad4f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f97500-91d5-46e7-a51e-013dcc8ddcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8f0891-0d76-4ade-981e-f366056d8998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf102822-667a-4160-ae54-9dbe5be133c5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6eb1c51-f891-4107-9bab-804932fa418f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e5cbcd-2a28-4a8e-9939-544c526516fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66af240b-096c-4e02-a662-7dc6bc4ca68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e989a1-a6bd-4f65-b50e-586687e49874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c98d26c-42f8-48dd-9601-f01b4d5ee929",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c814bd0-2394-4888-8f63-1620a55704ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e5fac0-040c-49c0-8f66-18dda351d688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c39f7b5-8a3c-45dd-8265-881f28a9df04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa6f2bd-8c1c-49a9-b7b6-b50fd4f676a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12fa00a-245d-4b8f-86d0-c39e48ee63ea",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8641002f-d2dd-44ff-944f-159f823a3d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a1b311-458d-48cd-9986-f3532599309f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3dcadc-a9a0-4425-bfc1-506f014638dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740f982f-9057-42c9-b115-7be3dc811781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01127d8f-6c62-4072-8120-33ecf838ed4a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fdbe73-8ec2-4877-937f-435777829556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c5db3d-3a34-4dd9-999d-3e089d83299d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626724b8-fdb8-4c82-9325-f297df609d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2eefb16-21fc-4722-96a2-0d109a971bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9cc2ca-6e3c-4dac-9107-4d01c40ad345",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f665cb35-c7d4-4f4b-9796-d94945a0abb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345db9d1-4609-425e-8e32-7244f6e6d94d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7148a076-b86a-41bd-b330-b7bee1043f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9565a073-3f5f-422b-98e8-46d8c7a8e84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0186e0ac-2126-4a26-bfc1-f805750fe414",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f24077-181c-45dc-8e6b-f417f8e41d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e8ac9b-a488-4357-91a5-b7e302d00572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b19568-e800-4aa1-bee3-a4c377d04f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5821f548-b760-4490-8557-cefd1d9cadc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03db2e66-db93-45bd-be42-eadafa233413",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2c2568-c5d5-451a-8873-d6a1d84897d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11db4bc1-1136-4e15-8517-6ca7cd71eb0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66df332b-e8a0-43e3-b2a4-9fc1954f7ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b614cd-cd9e-4ab1-8a2d-99bece2beddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9632c4a4-1c32-4a43-8e60-e48ba7c366c5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda36107-05f6-4806-9d04-61d59557de04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9febb803-c515-4484-8cdf-7d97cf35ff4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafb53a6-08ce-4104-b46c-0f06ffe3e5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac482b8-d2c3-455e-93dc-60036a810746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5be0e1c-cf12-4498-8536-77d77986e575",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaac05e-6e0d-4a9f-b733-df9fd22be930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa68cffd-1dbf-473d-8c4a-2b12616d603b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cffb31-4bb8-4d93-9414-37424194b86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1cdc64-6b6f-4118-93b8-80d264b9b4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52524490-0ff4-4df8-9ca8-d868513388ed",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6598cc55-2de9-4421-9b3a-153e82db2094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e5f497-c743-44ad-8546-2c313a526c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc391bfc-a4ed-4b24-a6ba-e529b96f9841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461bc40e-ca17-4145-9a64-d0d011ca72d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cec7adc-68bf-4c21-88e8-68b1738d6ee0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da62b09-b213-489f-adb7-cd453a7ce8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56f248f-b709-40fa-b967-9abfd4f7657e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d66fd4-cbde-45a3-ab23-db42550311b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e5fdf7b-fd16-453e-9fbb-9ad15fc56999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efda320-fa4e-41fb-931f-7596fb2d9991",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad45097-478f-4f82-95ee-80ab55f6e050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45229ac-8329-47d9-9f54-3873d3aa2a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca67614a-d76a-4eae-9318-a6f514a82a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965db2c8-0396-4f4f-b7e4-6b3838892629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d19d541-0469-4d14-9c43-216c10954709",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab84b84-e9c2-4fab-b0d7-1352f024f58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4eb575-c9e6-43fc-b6fb-6a792c57d950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0da44a-2b47-4520-a98d-23ec099547f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a787ae7b-8ba7-4339-a6c6-935eccd621a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdda8b8-e416-48d4-bdfe-1d0abd570a0f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6b9d33-7b6f-473a-b7b0-6dddf1f571a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16ab1d2-b300-46bd-877a-44ace99308ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39ad000-68db-4e30-b063-ac3979f4fc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53c88f3-b5e2-4d3d-998f-41f25ebb0d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa4af7d-4e9c-49bd-abfb-5714dc98d665",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2839f4bc-d9b6-48e5-8c35-1ca2e729abd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce23aba9-e803-435b-be87-00c0c6a74161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabd761f-f65b-4863-b32f-dc7c07b16a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13e26c7-8587-465a-92c9-e4e0b1d0ca6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56547bd5-3b7a-404e-a7d1-98ed0b5a1c39",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e133563-e82b-444f-9775-ff9e27940261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008df423-8f69-4c13-9e84-f947dbf7d101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51cf9f8-c2ce-4d65-9b3c-5c7d0a138191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c09d92c-63d0-44f8-9fa3-ed2af2af8cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce47d630-0bb7-4283-bb61-32f9191d722d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae2fff1-76a3-4344-a7e0-5cf61cb2f64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9124552e-7120-4b35-902c-08f70c5230b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30889f48-f676-44ee-86c3-0f5eb3dae6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c080cf4-cdce-414a-9349-0c366a80d945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f40964-f021-4b0e-a92b-9a27f3fe722a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712a4500-07b4-4bed-b76d-fa40d5b03442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab9f76a-0682-4938-b939-88623d1039ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5247b3-c3a9-411a-a9a3-7318a27b374d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640a3d84-5eba-4715-b77e-e34f1c29fb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eca9cb7-5aa8-47f2-90c2-fd24ba71ef59",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff671f7-668d-4fd1-b14a-9c75cff51e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb199a9-e2ec-49c0-a308-327faef6b0fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9f6a39-9cb8-473d-91eb-a2e638d35dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2700cc2-4eed-4fd8-b4df-7784cc314e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc39152-91da-4706-bf36-76ece6b097d9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5be490-e69a-49b6-8cdc-1ef4fa5f420e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "654a8730-3a11-4489-a5c8-e155b01839fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8ebc07-555e-4fda-8e3a-b91e887c3891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3620a061-b7fd-42b0-830b-c2ccdfd7b6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd0eb93-f396-494b-8080-2c4493422cb1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d160c0-c5c2-43e0-a9d3-751012b88cbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4a62fb-be7e-4789-9a0b-0ea1e1d87bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d8fedf-71b4-4261-80a1-d579289caf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9890d87-5fba-4c5a-8be0-c6021bf311a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53339db-bf9a-40e3-8dc4-5be1b5fc26ea",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aec75ff-6531-4639-b1d9-549a3e663553",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8970549-1000-43d5-8f06-8f60e0c19b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432e72a4-d723-4837-9149-86006292d7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8238e74-debb-472b-8a18-1eecaf182da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bc62d5-103f-44e5-a81b-1ba553a8449b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597c76a3-bffc-4bbb-829f-83a8671ab6d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15df1e7-f04f-45e0-ab7b-e07853c17b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789e8f00-4332-405c-b66c-febb46a3edcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb35075-b6eb-415c-8b95-9a0fed632385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fd01c5-87d5-434d-8d7a-7dc7b0a61dd8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcc1d42-f645-4f85-899e-900dd4d1ded3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84996d42-72c5-4e63-918e-c4498e87c1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad7a917-f0d6-4183-8bae-34fff2a0a489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c3bb37-4d3a-48bc-af83-8918fb99c906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7b01b7-e760-493a-9d12-765fcd01823f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bc27a3-b1c0-4b72-a2ce-c24b1ac249f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7338b7b6-d4db-4836-a6bd-b477724065e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0dec4c-d09d-4670-8b37-a653ff827666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b5d118-497c-4422-9474-a82d1538bd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58644caf-9444-4f35-94f1-7493544802dc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e64d4a-ae1e-4dc0-949d-84e6e8e7c6c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ce2e7df-2bcb-4e4a-8a28-b99ea1fd86a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dd9626-1972-4f8f-8723-059deb1c808e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efc6d28-ee51-4765-80ae-2570d9f3b866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20600f7f-03f9-48d8-8829-32a915dbcee1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7704bbf-9548-4201-929f-e1182a91e927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "406292dc-60d5-4811-ba38-000300b1fd45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75719e6-12d6-462c-8566-c39751b256ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8569cc3b-6149-4bbf-9ed0-dcead473e7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6ab78b-2ad6-4eaa-8dbb-f252e0beb3d5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6842d305-6d3c-4744-96fa-c404b2d84a31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8857ccca-5b99-4039-aa9c-f504e3b318cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ae9d7f-3bb3-47df-b54d-164410a7022e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5030c059-316a-4686-8b5d-7794c6fa1be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ed14f8-106f-4a22-ad0c-72c80996accf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c16b0a5-c47c-4124-9cf2-ec5961e19e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a548be06-cfe9-47c4-bc39-60c7cd1ec08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd813d0-0402-45de-8ff3-2e223e6f16e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a64bf2a-7a70-4b93-ba08-c146d039fa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03892ce3-41b4-4d37-a572-a94bf64ebcda",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878e3628-aa6a-4496-a684-6495c3992fb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97138992-2c7d-4227-b65b-246dbfefe7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166811d6-1a8b-49b3-b8ac-243cc21c3182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c2d3ee-22e2-489f-a034-cbed3157b9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae5e159-b168-4288-9dcb-e1adc1174d69",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479c7871-c09d-419a-a3ea-43c6daa67596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed091722-9ac7-48b8-875a-3702a0f19a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce33adf-ff39-4191-ab7e-f8cf282aa902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39674156-65e9-43f7-869f-273c87ab54a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4c85e1-0389-409e-8f15-c9ef2c5b31d4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ee289d-5932-4fab-bb61-52375536248a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2a4a0ef-286d-415a-a370-639e12f6a4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcdadb9-f24a-4f14-99e1-694f1b540a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2039f4a-1792-4948-9a71-049f3d29033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4238cbcd-e2e8-4a34-ab2e-3c527e448619",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6240498-8cea-4d72-ac8a-f607eb08663b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22649b54-7cef-4be4-8607-ee08de0b3e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d402ab7-cb5d-4784-b683-8371466406d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8880f9fb-84d0-4eec-8851-f49309507652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b603c95b-56c9-48a6-9554-421d4f59ac09",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98793418-6962-4090-ab4b-0b8759442986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4bee504-6b20-43c0-9033-649f462c5b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a39870e-d401-47f1-8a67-4451f885b2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff277af-3807-458b-81f9-78fad2b0ec0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dc05da-7b4f-4ca4-8ae3-242d291b79e5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c258b268-c857-48d7-8171-f52e38efef10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dede2f4-5ebb-45d9-bac8-735772f660d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d179f854-25b5-4473-a930-dbc37dc4d542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8351aa-7794-4edf-a346-dbc3c41989c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c135ae2a-090a-49f1-94a5-1299b2a19fd1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac2e7fc-1b13-43c0-a789-9fddee4d9d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d4009c4-c85f-4038-8fa9-1fd3e56badfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1111c3e2-00db-467d-a107-2f6aa5c69e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10b6a09-2153-4aff-96b5-08284cbbeb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b8a5ee-fb9b-4b7a-b99e-a9b1e2779b60",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3810c50-eca2-447b-b0c6-88c5084eb4b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "588a7464-7a59-408e-86ed-e92da784e7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a1206d-791a-4488-a52a-60bd11e301f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad05940-a5c2-43e0-bb87-ebfe8e8fa8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa17d26a-6936-45c6-a289-66ff0c3ed280",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d99fac-d8db-45ea-b00a-5ad3c4997ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958e0bb8-95df-4ee0-86e7-c3f997359ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805c5eb8-b5a6-4a60-8f82-0381b0faa919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78c04aa-6473-4ea1-9bb3-13fe4602e135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2854c9dd-6dd4-4fb9-ac38-419efe27da7f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23b8b30-255b-43a3-82ba-e51ccb1dbf39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfa7110b-1896-4620-9e73-6bac39b728e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03683062-125c-4268-83f1-8886d14de9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d785eaa0-9eb3-43db-85d9-14b4e4cfdd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab706c7-3e2b-460e-b14f-edca2a8b6aee",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5235a11d-f2cd-4c83-a473-fbf88fc1cb5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b21a8556-e16a-45ca-8825-bfdcd935c733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5de833-dc6c-415b-99a8-34f97868448f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2cf83d-19bd-4222-9f04-7f6aa9a1c282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2807b686-b7eb-4331-b456-0b554b7a0025",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dc3ecb-0982-4f0f-8c39-7f8001587037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7471d49b-f289-4ccd-9883-a1bfc67a3878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a530dcc-4c7d-4f79-a2a4-e52921b90a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc22d91e-e55e-46ee-9525-8437095afcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c2f340-52e5-4ead-b2c6-45f1a416370d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b6d510-a345-49ac-881e-cc21fefcc373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb0f7e7-dbea-42d3-8b7a-d7c0b89e55f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47af8623-4343-4623-999c-da7d2ba7672b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d093b17f-5f21-4f0e-a017-2364af2819c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98425fa6-5fd9-4f9d-81e4-3923a5f89ff2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66dbc22f-8b50-4937-80ac-bf819b99382b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d3493d3-18ad-4d7a-85bf-59bb03d5535e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d2083d-d3d9-4459-8632-bde01861ffce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36a1f5a-61dd-4366-a9fd-3ab7280e7d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a479e31-e9d2-4a92-b6d5-b7c17023b8ce",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8692b6-7db2-4245-adab-9905c1f7b127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74fcb302-9973-44a9-b465-c437d4034d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fb67f3-eb20-4857-9214-205fa15f22d7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae588468-d74a-453f-9dfb-acbb0cccef4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c22530-95bd-4bdd-9e7b-93306d9a8c90",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbd376e-d16f-4080-bc8a-620b68f81ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59d526f9-9951-4429-bf44-94f6e28422ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b09105-2fc3-4ea0-b3c0-ac8d501bc35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5548bd3a-2646-4705-b40b-f936e593cc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315ddc4b-93af-45cf-bf82-5ae0cbd9d4a8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552db64b-cbbc-48c6-8ce5-52ea30c7bce3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "561bbb95-b887-49e3-8fdf-851f5b37495f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7efc89-3790-45b8-880b-67c9b975520c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a91d5a0-2382-4caa-abf0-4411e4fbd853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e678c0-8cef-44f0-9bb8-42436e318908",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef9a885-2784-48f9-9c20-816219977471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6b9335a-a3df-4c49-b381-156cb438c288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37933ab6-7a41-449d-b37f-8212d1174a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f91eacb-3547-4ca3-817a-49ef2edd749b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c4ebca-0973-4a53-9d04-0537b9ad1535",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643e8488-58a8-4603-9541-ea8f0f09d623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7eb5b5a-bf4e-4a4a-9d55-9eea68aa6567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d7333a-39ad-4c31-8e05-e30f54d049af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1de82c-e3fd-40bb-8e29-460b7c564dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a052cd-8739-4422-9756-1102d2bc376c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e861ac-123a-4763-9e07-634a90e4b379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7f8388a-4365-4f55-a588-0436ea033eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2312404-c820-4277-ab69-3ba364d1e1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da72a22-49b2-4ba6-bd04-3bd83fb9220d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2db9c16-231e-4609-bc4c-9b86f75c7aff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75fa2f6-ce04-4bf9-a438-2d278aa906d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4331272-1e4c-406f-a079-2dd9653800e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603d82bd-dce8-4982-a1d9-747883ef8cb2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905c82cc-990a-4024-aa56-9823edcb2be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b14025-4ac0-4b33-b184-00ed12d35abd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf7da6b-cdf6-43c9-a2b2-92f811a8a1ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0022f24a-b735-47d8-ae55-12c3090ff41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f69f9f-d515-446c-ad15-e6035dee03b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c955166-6b3c-4771-bec7-c6b12f4cae0e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05baff20-b67c-4c0d-a907-9cb3fc4fb2cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "059a2f87-4d87-4abf-a67d-e9b6f5606671"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86ae6f7e-2094-45b4-aed0-50796aac4a17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "547a4f93-38a4-4750-bd24-15d4648fa07b"
                    }
                  }
                ]
              },
              {
                "id": "dae7d991-b893-408b-90b2-ea35edf8e64a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "436db565-f2f5-4d2b-9a73-b974cae37f4d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702d1b4e-0e05-4f47-9015-b6dfa645d415",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6f80a46b-628e-4471-be0e-cb38db383fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5253d63c-3289-4f8e-b368-9f65b7965761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a380a2d3-e3a4-4ef7-8cb7-f0731e3f774d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2d0f369-1169-4ec7-b595-5b0f5d31e58d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c90b2526-171a-4955-9253-4ad4c1fa5501"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b6b52f5-6545-4716-9d51-524240ed59a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4f7ca34-c663-439a-9b10-c7bb61af6c65"
                    }
                  }
                ]
              },
              {
                "id": "62b63b0b-de6d-410e-89c4-c20d2f6a7b32",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d83fbd23-2111-48a5-bd30-c6dd270f5ff4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b289d19-4254-4e96-a58f-f683499791c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d4859a28-fba9-4049-8987-762094f75b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cddb60-7605-4bc3-b211-f94bb1e6a538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8440c9-82ae-496b-951d-c3f266a98505"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ffea85fc-12e5-4df7-b50c-1a1a7a060af8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c15d6c3e-d015-4b5f-bea2-add3d8e7a6ca",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4857f6a2-2d1b-4ff1-9e3a-e837f30a1625",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dad4fa3d-0536-4141-9d40-1188877a9e71"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18c38037-9257-48c4-bcfc-e9ed794c4c50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db70293b-dc84-40d3-8a8b-0f74cb0616ae"
                    }
                  }
                ]
              },
              {
                "id": "097d7f08-4fb1-4569-bccb-e34f9927adf8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84bbf29b-1823-40cb-8d8a-2b2a7c08f017",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3feb1a43-5555-4de3-8efc-46d6c5e01acb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbddd6d4-fe98-4ec6-b981-5e2500ab5692",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06fe8e03-0cde-430f-a045-455bd21b6d00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "701d232b-ccea-44b7-90d4-7927dcbb1b31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "44479cd9-adfe-4465-ad10-f9d4f4fd81e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fe405be-d742-4a94-8a03-087256fe1a0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aea38fc9-6d15-4b3a-b1a7-45151d095683"
            }
          }
        ]
      },
      {
        "id": "590c36ae-b101-45d8-ab4e-83bd52952a42",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c30e809d-d2a4-4acd-b675-886c31f9b844",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53e89791-acd3-4c3c-8399-e611faa41b14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "930a8699-7a8b-4da5-a598-5d45be553656",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c0026d-1946-41a6-9078-0b9a24f11248",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f345712b-9a4c-45c4-a6be-d21ac8ff56ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65a658c-8b6e-4337-b4f9-595356f0f1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a21c08f4-f275-4361-bce2-0143ac8306e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d83f7c8c-69a7-48eb-b94e-97678edee7d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfe25fe9-c7bb-4921-b1d9-1f7ef8df234c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9523b3c-ac70-4fde-bc33-f9477e69ab9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46707d46-6836-4580-bc3f-7682abe5d4c2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94088123-c869-4c36-a213-28f0d285a5f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e6c06330-54dd-4a06-99bb-496b2993c5c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf3ec0bc-ab9a-4167-81d4-ee791aea466e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c675e6ab-6345-424a-ab61-f4f8c3b3167e"
            }
          }
        ]
      },
      {
        "id": "11993d3d-8461-446a-b556-959a0ca22e1a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "34634938-7bf3-4fbf-b529-588896cd55a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98b3c6cc-9c66-4d2b-9fac-ef2d8caed207",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cd04822-d6ee-46e4-9f71-868f97475170",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc321e-a54e-4dba-9292-8d22da7d6ede",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2add4bdd-5b2c-454b-9256-6cb587b1b4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646f1d54-c0b9-432b-b420-14021aea2199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "234a97b8-cfbf-44ff-a342-c286273a8dc1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1882fa8f-ed09-4f8d-b91a-b2cb2232e44f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaa4d17a-092c-4a80-a0a9-9a28873c4e88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f062ae9c-2a9d-4e09-8a2a-9df5ad8e7539",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ea97d0-bac4-4933-98df-ce719a348e27"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59f6d992-b4ca-4023-b23e-2900138cbe73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dc254bd2-cb64-465f-bd18-279e60da0456"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28fabc96-15f8-4a3d-9cc5-6e011c98f867",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2c73821-692d-4b8e-bd43-397521d0378e"
            }
          }
        ]
      },
      {
        "id": "d92fa4a6-886e-4178-8201-3962db9da433",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d831fb8f-350d-4af8-85d5-cf10d5f0536f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6eca3e3c-4506-4b4a-b1ca-1119de6e523d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9bc8aac2-25dd-4a24-bd8a-259493e9366c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a527e27-8aae-4540-996b-2058ef09089a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47154121-dd99-4dfe-9d7d-40bdbebf6482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bac54a8-1c16-4b14-b9b6-bb3ec822029f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41ae0a13-ca9e-4d7d-bd39-f34db7b80a50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45e68750-a6db-45f2-94e8-07f004273df3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d4fe618-eb07-41a5-b7ce-8703314012c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60cbbee0-e588-43e7-9029-8845dd4109ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65fcf5e2-a789-4dcf-8589-ed9c205574fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90805719-aaa3-4b58-a249-159fa919ffc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95b833e9-e75c-4f4b-9eac-16e2459d20a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e637051e-b264-4aec-bae9-628ab0c81c02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "945ab1f6-bc24-45aa-ba69-50c634b97a82"
            }
          }
        ]
      },
      {
        "id": "aacfe0d2-1cdf-42d9-8457-90478dfa8889",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aefaa505-8715-42ff-9f46-a17edf85c1bd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5ea7d71-3a99-426c-8fd3-2d61634cc0f9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d0e2d43a-eff0-49d8-88ab-ead4446adf84",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d99e9861-d229-4976-85f9-eabb68a3c937",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4765dc3e-9fa0-4049-9515-7505eba18f1c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.61507936507931,
      "responseMin": 10,
      "responseMax": 686,
      "responseSd": 81.04446317119984,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718584794591,
      "completed": 1718584819236
    },
    "executions": [
      {
        "id": "4863d5aa-c776-4f39-866d-9120a231e24c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55c6291d-1ffe-4c30-8f0d-047423f693b7",
          "httpRequestId": "62191b8a-a407-4098-9cc6-ed99ac74dc6f"
        },
        "item": {
          "id": "4863d5aa-c776-4f39-866d-9120a231e24c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1b248461-8316-40f5-914b-543a7d4db681",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "b5e3e34f-a3bc-4a80-85e4-71c5e5aa7b3d",
        "cursor": {
          "ref": "27857249-fcdd-483a-a9b6-d149b4741ba6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2bf8696a-f5e4-4199-9acd-a2fbe34c45e1"
        },
        "item": {
          "id": "b5e3e34f-a3bc-4a80-85e4-71c5e5aa7b3d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "eed13945-6033-4f68-8299-69f71404ec0f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "7eaaadb3-5d0c-4f57-8d44-06145f597a6a",
        "cursor": {
          "ref": "785c3998-9ad0-4df1-97c5-5d7719bf6630",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "71868c00-9fa1-43da-b6a9-744c7657769e"
        },
        "item": {
          "id": "7eaaadb3-5d0c-4f57-8d44-06145f597a6a",
          "name": "did_json"
        },
        "response": {
          "id": "fbf7e1bf-7ad8-4639-9af4-6c6be6e8e031",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386b6669-e646-4210-b5e7-62034b8ebae7",
        "cursor": {
          "ref": "d24e477c-498f-496a-badc-d8dbe6d2e2dc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6e985a0d-9105-4944-a81d-9303d4cc13d3"
        },
        "item": {
          "id": "386b6669-e646-4210-b5e7-62034b8ebae7",
          "name": "did:invalid"
        },
        "response": {
          "id": "74e1f86b-945e-4444-82ab-2826bb4d20f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386b6669-e646-4210-b5e7-62034b8ebae7",
        "cursor": {
          "ref": "d24e477c-498f-496a-badc-d8dbe6d2e2dc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6e985a0d-9105-4944-a81d-9303d4cc13d3"
        },
        "item": {
          "id": "386b6669-e646-4210-b5e7-62034b8ebae7",
          "name": "did:invalid"
        },
        "response": {
          "id": "74e1f86b-945e-4444-82ab-2826bb4d20f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af65432-bdb7-49ea-a677-da82fd29c7da",
        "cursor": {
          "ref": "35d84b93-dd5d-4f46-b3ab-aac1252f7845",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "07de68fa-a56b-4a6f-9613-7be8ffad24ef"
        },
        "item": {
          "id": "1af65432-bdb7-49ea-a677-da82fd29c7da",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3c40004a-8d49-40c7-b6f6-c6b7adbbaf8f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 312,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7ee29d-a5b0-469a-97e2-4551bed689a7",
        "cursor": {
          "ref": "337a54ca-a44e-4fa2-b7ed-d1d79888b75c",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a6e7695a-ca79-48ff-b217-bf80e6fbc144"
        },
        "item": {
          "id": "eb7ee29d-a5b0-469a-97e2-4551bed689a7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fcd0a856-80b7-423e-aeb6-8021b5427ae9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7094d5a2-07f8-41d3-85a7-547cc85b0dd9",
        "cursor": {
          "ref": "3f0a0600-33db-45bb-862b-1176991f1558",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0840beb0-4402-44ee-a27a-7abd0c4529ac"
        },
        "item": {
          "id": "7094d5a2-07f8-41d3-85a7-547cc85b0dd9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fd32d0af-90f9-4382-8b7e-8c0f6d5edfee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395ffbab-3984-46c9-bcd3-2c6773295960",
        "cursor": {
          "ref": "4f3e5e57-51bb-4541-90d1-8e830c6a0cfa",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7e32311c-5b4d-4a26-87f0-d229cc00e0bc"
        },
        "item": {
          "id": "395ffbab-3984-46c9-bcd3-2c6773295960",
          "name": "identifiers"
        },
        "response": {
          "id": "d69dae96-8771-4256-a455-dc922c6cfcfa",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871791ee-86d8-4572-a30f-b0d021f01756",
        "cursor": {
          "ref": "951fc72e-c91b-4278-90e1-63e2ad715186",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "507a67d6-2f78-46a2-8270-c7042cca2d0c"
        },
        "item": {
          "id": "871791ee-86d8-4572-a30f-b0d021f01756",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39dbd7c5-4ece-49cf-982b-376b75d08426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e42fe9-4d58-4542-becf-49036452bd0a",
        "cursor": {
          "ref": "80f55628-b0f3-48ae-aa93-63cc5a814566",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "09db8e93-9140-400f-90ca-398081e93d93"
        },
        "item": {
          "id": "55e42fe9-4d58-4542-becf-49036452bd0a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "63e012aa-2200-402a-a412-4206a29f022c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ca1c9b-8347-4240-b368-fb321d33a5bf",
        "cursor": {
          "ref": "4d688fa7-498f-4c16-ad03-6064823dc9d1",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d8d2d490-525e-4df3-a8bf-7ef3b3d56785"
        },
        "item": {
          "id": "40ca1c9b-8347-4240-b368-fb321d33a5bf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6d61e7e7-a4b0-4a40-8dca-a1cea8c5ce56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df06f825-6998-43e3-b58c-4557446bb31d",
        "cursor": {
          "ref": "df5dd263-a618-47da-bbb1-dc8ccc76750d",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "457883b0-3c79-4c22-aaef-378d09f322d5"
        },
        "item": {
          "id": "df06f825-6998-43e3-b58c-4557446bb31d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d4c28292-717c-4073-8c04-1fec0613c778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b69a34-27fc-4b36-9614-c4b056d0ea85",
        "cursor": {
          "ref": "6535e31f-e5ab-4c6e-889c-3d41faad2dc1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2750d7d3-4e2d-47ad-a2f0-50635d00b290"
        },
        "item": {
          "id": "22b69a34-27fc-4b36-9614-c4b056d0ea85",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ab1210d5-11e7-48f1-a384-9e1e7af98a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942552d8-98db-4a27-a04e-dfb3c8c10e12",
        "cursor": {
          "ref": "752506ea-6bba-4d8e-8fd9-b75bc6b0eeb7",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3aeefdd2-27aa-4e1c-a9fb-93c9d5304e59"
        },
        "item": {
          "id": "942552d8-98db-4a27-a04e-dfb3c8c10e12",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "053ed061-8519-495d-9ea6-837404ccb09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0603b317-1b18-4d38-912d-7edbf137a1dd",
        "cursor": {
          "ref": "85e7e2a1-346e-4775-a780-2133523e60b8",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7c7f3ba6-dde6-4492-adbd-a47d1553fb1c"
        },
        "item": {
          "id": "0603b317-1b18-4d38-912d-7edbf137a1dd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "88791a5f-0788-4809-9058-0ed6ce01e113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3e0619-3107-4307-aa72-70dc21177186",
        "cursor": {
          "ref": "80c87859-6124-400c-b3d4-742732342047",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8d0f0200-fca5-42e9-a241-9455e54e8654"
        },
        "item": {
          "id": "ac3e0619-3107-4307-aa72-70dc21177186",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e6204097-2f76-4845-b08f-9299fadf5c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076597cc-2949-4b70-98f0-f34cbc9b0def",
        "cursor": {
          "ref": "c9b6e3e2-84ba-4e04-a3e0-434096a9f93b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ba5d12a0-9a17-4114-aa53-f27b670476ca"
        },
        "item": {
          "id": "076597cc-2949-4b70-98f0-f34cbc9b0def",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "40aeeb84-4f8a-45f0-a7cd-7b1e7ef706e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14796fca-e4af-4996-a69f-3cc48a5fc112",
        "cursor": {
          "ref": "897fe663-aa3a-400e-9d92-f23bcc6e7317",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "78447b16-26a1-4fb0-815a-687fd32cb2a4"
        },
        "item": {
          "id": "14796fca-e4af-4996-a69f-3cc48a5fc112",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1e1e5576-db94-462f-93fe-c8f43a7c6def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2d4c6b-f649-4d1a-ad0c-24e2d38278f9",
        "cursor": {
          "ref": "bfbb8b26-90e6-45e4-8f23-4d29aa1255aa",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "62a54a45-67f6-4988-a571-413fb748f659"
        },
        "item": {
          "id": "bf2d4c6b-f649-4d1a-ad0c-24e2d38278f9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3f69c1da-2994-4d42-b8e4-ddd8ce4992ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8e5344-397a-4d01-85ea-7c29dcfb2c6e",
        "cursor": {
          "ref": "b53657df-909b-4005-877c-baab65f174c5",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a10a3fbf-d5e0-4f4f-8411-d17615e7ea1a"
        },
        "item": {
          "id": "7b8e5344-397a-4d01-85ea-7c29dcfb2c6e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "791e0b80-ff7a-4aa6-9dcb-1d8af9f38131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a6bedf-34af-489a-8e78-d75ee23dc2e9",
        "cursor": {
          "ref": "45f04009-31cd-41ee-bfb4-48315bb4a690",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "33dedeb9-f312-4ca6-90a9-51dd090b4db2"
        },
        "item": {
          "id": "95a6bedf-34af-489a-8e78-d75ee23dc2e9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "cd083d8a-598c-4deb-989a-71cdea90f928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8cc21a-259b-4e0d-bd90-55d329abf888",
        "cursor": {
          "ref": "91f6a9af-0100-4d82-a2df-ca487a55cd11",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5c00efa7-ab7c-4842-8e97-83f82c69e6bb"
        },
        "item": {
          "id": "6f8cc21a-259b-4e0d-bd90-55d329abf888",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8c53cdf9-0824-4924-8842-8c5c4db842e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c103f614-7d90-4a41-9bef-7c220eb51ba2",
        "cursor": {
          "ref": "ed01d098-d5bd-4cfe-a3f7-36333dc73c44",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1b76c72c-15a3-4262-bd34-792dc211f6c6"
        },
        "item": {
          "id": "c103f614-7d90-4a41-9bef-7c220eb51ba2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "787ae24f-2c3e-4a1b-a034-dd63bff5e230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47200b03-5db3-49cc-b600-9f3dda9637eb",
        "cursor": {
          "ref": "7e322b40-cce6-4be7-808a-67f9711c4e95",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4c4f949e-9e05-4f6d-a2d5-febb01c765ae"
        },
        "item": {
          "id": "47200b03-5db3-49cc-b600-9f3dda9637eb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a4cf7d89-730d-4cc1-b337-c3d5e3a97dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef71de81-bf7c-4d9c-b831-d6832176d260",
        "cursor": {
          "ref": "01d4cb81-5d6f-4e6a-a3eb-97280c5aa41e",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "598e671e-03f7-436c-b8b6-50802c3f34cd"
        },
        "item": {
          "id": "ef71de81-bf7c-4d9c-b831-d6832176d260",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fae1b8a3-a93a-4ffd-81e8-16b995e1dd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c29ee4-04bc-431f-9682-f5280e630594",
        "cursor": {
          "ref": "05379cbf-1ad1-4e43-8ca3-a88fdcf24f9c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0e4f0af0-5ce5-4347-835b-78cf518ebda8"
        },
        "item": {
          "id": "84c29ee4-04bc-431f-9682-f5280e630594",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "07e5ca4a-cf09-4af7-aeac-8bada37937b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03527334-c4e9-4d2d-9aed-8bd6c014996d",
        "cursor": {
          "ref": "816801a3-5571-4a2c-87ec-867c8b50cb1f",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ef357015-cc29-4127-b517-37c0d98fa0c7"
        },
        "item": {
          "id": "03527334-c4e9-4d2d-9aed-8bd6c014996d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b0149371-fc40-4cab-8f1c-5419b04621c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f8508c-4069-4bb7-8aa1-b67cb1ac3e4e",
        "cursor": {
          "ref": "65a96620-032a-40a6-ba92-8a1ccd779cf9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b1ad2181-80d9-4698-9c3c-af844b51604d"
        },
        "item": {
          "id": "a1f8508c-4069-4bb7-8aa1-b67cb1ac3e4e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b7f83549-165c-46c7-9e78-6bb904626c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755a93ed-0850-465d-a7b0-d128a00ccf82",
        "cursor": {
          "ref": "024c7014-224b-4cbb-9b11-2bc3726d93ec",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fbf8b90e-c3cc-44ec-83f7-98169fd93848"
        },
        "item": {
          "id": "755a93ed-0850-465d-a7b0-d128a00ccf82",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ea76dcab-2240-4cff-b88d-fb1369ff43bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9782c07e-a51f-4f85-9e49-25ce3c5ada92",
        "cursor": {
          "ref": "9bc5f976-9fb2-4246-a64f-2d0b558093c0",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "adbc0d63-cbea-4afb-95fc-6a761508e27c"
        },
        "item": {
          "id": "9782c07e-a51f-4f85-9e49-25ce3c5ada92",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "78ad6d97-f821-4a8c-9b86-d46eae6ce200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0095af4-b7f3-4037-b025-ad82899db987",
        "cursor": {
          "ref": "23bcad80-f009-4029-bea7-5affb8c6db95",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7a05d869-2008-4882-ab44-d4d3d883ea2e"
        },
        "item": {
          "id": "b0095af4-b7f3-4037-b025-ad82899db987",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ff4f6554-2bc9-4cef-b158-7a3cab304e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d99096-08e2-4453-a9e3-00c54f7dcbef",
        "cursor": {
          "ref": "2856fa76-9026-4f61-aade-ff41fd00a27d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "23dcac4a-021f-4ba4-91b6-68d9bac62c0a"
        },
        "item": {
          "id": "73d99096-08e2-4453-a9e3-00c54f7dcbef",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9a16720-e07c-47b7-80d4-69485d705946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3838721e-e287-481d-8990-93f53a6bfe83",
        "cursor": {
          "ref": "d5569061-b965-4460-b278-7de2bf476a18",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bb16114f-62c2-47cf-80e0-c8f9dd276db1"
        },
        "item": {
          "id": "3838721e-e287-481d-8990-93f53a6bfe83",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1b8e8c18-4c26-4a78-809c-d93221150746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afca31a7-2391-4b57-806b-a4cb4963e42d",
        "cursor": {
          "ref": "1a5a1019-6680-4264-938a-3bd3872f8d5b",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ec37ad90-6775-488c-a54b-71d653db56a7"
        },
        "item": {
          "id": "afca31a7-2391-4b57-806b-a4cb4963e42d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ea2d1c2d-d862-4f41-87dc-f5f3754d9b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ba70e1-0fe4-427a-a483-26e2e4cd8a17",
        "cursor": {
          "ref": "2b4e82fd-e236-4479-9652-bb7764fdf60f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "789ffb19-f31a-4e60-9b18-57fe2350265f"
        },
        "item": {
          "id": "25ba70e1-0fe4-427a-a483-26e2e4cd8a17",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d7a298bc-512b-4177-a53e-67094f3964af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4602f1d0-bff4-4e17-a5cf-e0507e2e8222",
        "cursor": {
          "ref": "da33d2b6-b770-4473-ab6c-0ee1e83b2b80",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a365f525-fda7-40d4-8e53-003158365faf"
        },
        "item": {
          "id": "4602f1d0-bff4-4e17-a5cf-e0507e2e8222",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "39991384-5020-422c-9fcc-9ada2041010e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca4bec1-7f4b-4a20-aa31-33a1f79639ba",
        "cursor": {
          "ref": "20450d02-0cb8-4dff-85bc-4e1a55900778",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1c35cd90-d5b5-49b4-a498-3ef1e34e9eee"
        },
        "item": {
          "id": "bca4bec1-7f4b-4a20-aa31-33a1f79639ba",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1207ed06-091f-4e3e-9b27-5ea021866f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc3f44c-c217-478e-942a-095389d7c5d9",
        "cursor": {
          "ref": "49504687-4b9b-4b1c-aa6a-ea7938a703cc",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6b9c3969-65af-4e72-abe1-79348bed04c2"
        },
        "item": {
          "id": "dbc3f44c-c217-478e-942a-095389d7c5d9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "75cb33b9-a503-4735-aa6f-90c4ac9cc098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d08b7d9-700c-455a-a2ed-3be5bbffbbf7",
        "cursor": {
          "ref": "288741ca-11a4-4cc3-8f53-a19ebc87d089",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d67030ac-bbbd-4302-9bae-b73adc35915d"
        },
        "item": {
          "id": "0d08b7d9-700c-455a-a2ed-3be5bbffbbf7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8f58cfac-a7a0-41db-ba47-b33753d167a0",
          "status": "Created",
          "code": 201,
          "responseTime": 686,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d7f9e47a-70d8-48b0-9581-db712986ae10",
        "cursor": {
          "ref": "4ade7006-c92a-4589-8a07-edae69841404",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d4b88b4f-aa8a-45dc-a1d6-87ac06660a94"
        },
        "item": {
          "id": "d7f9e47a-70d8-48b0-9581-db712986ae10",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b9c9ff9f-1056-4b98-93f1-11aff815a6cd",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6fa636ed-b79b-4404-b2b3-2ea288f33414",
        "cursor": {
          "ref": "878d4760-47a0-430b-940b-09d7dbf2dc77",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "15e960eb-eb7f-44c0-b615-6747e666bdae"
        },
        "item": {
          "id": "6fa636ed-b79b-4404-b2b3-2ea288f33414",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ad9a49eb-3651-434f-931f-892b564af9df",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "eee13462-5a2d-49ae-892f-34b7059473ed",
        "cursor": {
          "ref": "6b0cc6a0-6720-4ae1-9159-b19e8cde40b9",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ee6b4663-30c2-46db-ac84-bf12f0c729db"
        },
        "item": {
          "id": "eee13462-5a2d-49ae-892f-34b7059473ed",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5ee54e40-55c0-4258-af17-c181f9c08279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dadfc3-4263-4808-b51d-647f1557a751",
        "cursor": {
          "ref": "2233b970-24e5-4e7c-b589-a5a36095fe0e",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b2cc7613-de44-4ce4-91ed-4e64f952a9f3"
        },
        "item": {
          "id": "d0dadfc3-4263-4808-b51d-647f1557a751",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c6e3e1b6-1ef8-470e-bb7f-61281afae235",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "25c94e4b-b262-4689-b0e6-52cd95be3670",
        "cursor": {
          "ref": "21023642-2736-430f-975d-0c7a5d6179c8",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6261f259-8598-43c2-a553-57239b0aead0"
        },
        "item": {
          "id": "25c94e4b-b262-4689-b0e6-52cd95be3670",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4e1aae05-254f-4c04-9fc0-03ea91941ca8",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4c70bf81-0a93-493e-b6a8-eca7ba511939",
        "cursor": {
          "ref": "fbaf1279-bc42-49f6-81d1-9136b2a0e258",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1a686d7d-b712-44d8-8592-89e59ed9506c"
        },
        "item": {
          "id": "4c70bf81-0a93-493e-b6a8-eca7ba511939",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "39ed56df-a216-42bb-b86e-efbb648432b3",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a35c4d9a-ec47-4217-8edc-6972f0354f25",
        "cursor": {
          "ref": "df5389d2-0a69-4cb5-a87e-d10c126f38cb",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e6ccb958-ffc6-4aae-9c88-fcedafd60fe4"
        },
        "item": {
          "id": "a35c4d9a-ec47-4217-8edc-6972f0354f25",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "84eed487-9861-4bbc-a050-8ff32f64e2b5",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1145d4f7-8ea6-4483-9dc7-93af7e8493aa",
        "cursor": {
          "ref": "c1db9fb6-3fc2-44fa-bd90-c9460651f88c",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6592a227-b565-43d3-bc48-8a58a27e8803"
        },
        "item": {
          "id": "1145d4f7-8ea6-4483-9dc7-93af7e8493aa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3a66a7e3-1595-4fa7-a219-298a25204e2b",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "07a95120-b4e1-4a4c-838d-06ca8a7a9ac7",
        "cursor": {
          "ref": "cd6a971e-2d15-4765-a540-9da844ef0ede",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "96030d6d-f0a2-4970-a3e2-18c45ddca48c"
        },
        "item": {
          "id": "07a95120-b4e1-4a4c-838d-06ca8a7a9ac7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "07bf81de-6fa2-4306-b56c-92d77a677ea5",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a0efcf6d-8747-4fea-9375-960465132b1f",
        "cursor": {
          "ref": "a2eefc64-a364-481a-a4a6-93556e916e22",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ca128908-43e9-4e15-a6f8-759e8d19e16f"
        },
        "item": {
          "id": "a0efcf6d-8747-4fea-9375-960465132b1f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e320f961-40b9-4e2e-89e0-6826d133d2b7",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c53519cb-5656-47d0-9adf-0d5510c60c7f",
        "cursor": {
          "ref": "d735437c-78b9-4595-a1b5-81e207a29bdc",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b406f967-5ac8-4a61-88af-f852891a95b2"
        },
        "item": {
          "id": "c53519cb-5656-47d0-9adf-0d5510c60c7f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4ac8d7bf-205b-4de8-9688-cf9c57721832",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "880a6c79-08a2-49e6-9ce0-b4fdac51a9e9",
        "cursor": {
          "ref": "c51545c8-0598-497a-930c-ff5da0fda418",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1d98b0a4-4b8d-44df-a208-ae45094bf2b1"
        },
        "item": {
          "id": "880a6c79-08a2-49e6-9ce0-b4fdac51a9e9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5acfb656-7f7c-4238-b10a-f18ff37ec384",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "784b3e01-cb72-4acf-b43d-eeb920051c6e",
        "cursor": {
          "ref": "5165eb9b-8559-4287-a1bb-fe933b792c92",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f4e4a8c8-509a-46c5-9a10-f996bd92f9ce"
        },
        "item": {
          "id": "784b3e01-cb72-4acf-b43d-eeb920051c6e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "aed89065-c533-49f5-95bc-6960294b3e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4b5066-1854-423b-9375-df0e14225bdc",
        "cursor": {
          "ref": "bb1f8603-a0d0-4471-b469-b043d7bbb3eb",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "94ba5006-a750-4f66-be32-ee3dc7ee7771"
        },
        "item": {
          "id": "2b4b5066-1854-423b-9375-df0e14225bdc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0d958012-2392-4783-817b-f7d3e4b023a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b25462c-dd5d-4762-a092-c0fa7aff3709",
        "cursor": {
          "ref": "d4d63f8f-3995-4c14-9207-d9012cb4cde8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ed975f2e-590f-471a-8b4e-b4aebdd3eb19"
        },
        "item": {
          "id": "7b25462c-dd5d-4762-a092-c0fa7aff3709",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d918adae-67f9-4543-a715-04db618da6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfe46d8-4a7f-4685-99ed-e7fa8b40efd4",
        "cursor": {
          "ref": "84104895-5a6f-4e26-b87d-193b3f96f65b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ba36ff36-3c89-4f6e-a9c5-8700267788d5"
        },
        "item": {
          "id": "4dfe46d8-4a7f-4685-99ed-e7fa8b40efd4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ef9c9512-6753-4ed1-8854-d0272e1f0de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c773e0fa-0111-408f-8c81-4e7b3cdc0333",
        "cursor": {
          "ref": "d347e407-6526-4fc6-b55d-efc2d30a14d7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b3d0189c-746c-4584-a05e-7153bd9ea4a1"
        },
        "item": {
          "id": "c773e0fa-0111-408f-8c81-4e7b3cdc0333",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "acdf8ae0-e568-4d42-b61b-b67a2cd86198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79985efd-bb1d-4932-9631-7002b3d8798c",
        "cursor": {
          "ref": "55c04d91-690f-4fdf-9db7-2f9ccad1bbf5",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "076705ff-17ee-431f-af0d-34f44b3d58f9"
        },
        "item": {
          "id": "79985efd-bb1d-4932-9631-7002b3d8798c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b5a99ff7-4c6a-42af-a0d9-9e974d95f7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf61002-3612-4469-ad21-f92e743b3fef",
        "cursor": {
          "ref": "c6758acc-2699-443a-adff-53830143b7d4",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fd9155ab-0afc-48e3-9051-e8e611fc54fc"
        },
        "item": {
          "id": "ebf61002-3612-4469-ad21-f92e743b3fef",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6b58f64e-56df-4a33-a0eb-eaa01c18a415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6969296-d63b-461e-9767-5284db99f5be",
        "cursor": {
          "ref": "fa1318a3-2996-42e1-92b9-703dcf27b37f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b2d7aa82-e25e-43ab-9478-96b5718e49c6"
        },
        "item": {
          "id": "c6969296-d63b-461e-9767-5284db99f5be",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "02f50530-c360-499c-aeed-e71a9a4e08ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e288b6-c4d3-466f-9515-272669f182c4",
        "cursor": {
          "ref": "9b76c275-15df-48a6-b912-ef56370e1526",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "650aaa78-d819-487d-90fd-c8c42d2c9886"
        },
        "item": {
          "id": "78e288b6-c4d3-466f-9515-272669f182c4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8d973dc7-a56f-4f48-8c27-f726031229ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ba8fb4-d730-4410-a7ce-7a4fdf0ad336",
        "cursor": {
          "ref": "9612f542-1da4-4371-bab1-e5702e3329b1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "050ab813-0613-4db2-9828-8fd36562eccc"
        },
        "item": {
          "id": "28ba8fb4-d730-4410-a7ce-7a4fdf0ad336",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3b351e24-9f77-40fb-96cb-d0372e12dc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765a17b7-92d5-4d67-959d-e0aa241cd50b",
        "cursor": {
          "ref": "a30d5279-ee1c-4d4f-8708-ff5469d19569",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "28258955-46dc-4f92-b8e9-736105d834ec"
        },
        "item": {
          "id": "765a17b7-92d5-4d67-959d-e0aa241cd50b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9f1ba9a7-6359-4331-95ca-834e324b6280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315787ae-c207-4980-9267-03372ebff472",
        "cursor": {
          "ref": "afce0bec-3d69-4857-8700-9f32095582de",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "91685e38-a190-4cfb-83cd-30008bf0f703"
        },
        "item": {
          "id": "315787ae-c207-4980-9267-03372ebff472",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c799426c-0f37-4668-9e09-d5cf230fc208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429d9056-9fb2-43b8-a51a-ea5507fc049c",
        "cursor": {
          "ref": "6bc21e31-910e-4b8b-84a3-50ec1087eae4",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5596b5e6-4ae2-49c4-a0e1-4628248c2394"
        },
        "item": {
          "id": "429d9056-9fb2-43b8-a51a-ea5507fc049c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "18842854-7bf6-4035-84b5-47098f93a8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0107ba-71b0-470d-a243-fc4e0be8b3da",
        "cursor": {
          "ref": "37e83e98-77ed-4153-a308-8a62ced79d8c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e528ff96-dda0-4dd8-a4ff-9bbb43b72b4a"
        },
        "item": {
          "id": "1e0107ba-71b0-470d-a243-fc4e0be8b3da",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ccfaceaf-4be0-48b3-8e47-4159d28d3932",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "30078a5c-4afb-4cec-85a8-d3a4f10b4afd",
        "cursor": {
          "ref": "779a647f-e7d1-4cb6-af7f-1912e148fa22",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ed292efc-9613-4380-83e4-2bf131bdc1bd"
        },
        "item": {
          "id": "30078a5c-4afb-4cec-85a8-d3a4f10b4afd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d0308c5e-bec5-48be-996e-c7164f2cca62",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "94ab5806-c426-4efe-bd67-75cf7a42c290",
        "cursor": {
          "ref": "a96d4ee0-8f53-4751-a91e-fea3d57a1f04",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "42d1e61f-796d-4e32-b7a8-4aa97ef88dfe"
        },
        "item": {
          "id": "94ab5806-c426-4efe-bd67-75cf7a42c290",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1e6df589-1dd0-4b22-a85c-b7d3ecfd2a99",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "23d05662-c214-4800-bd65-969363c1cb96",
        "cursor": {
          "ref": "671f98bd-6e5a-4733-96bd-07db32ddcf8c",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf838e05-72d2-4cb1-b014-142d4f509fb0"
        },
        "item": {
          "id": "23d05662-c214-4800-bd65-969363c1cb96",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ac8760fe-0d5c-411d-9393-c1b84b2ba59e",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3eded915-0015-49b5-adba-2b2443e934af",
        "cursor": {
          "ref": "a73170a4-fb47-4fde-b21e-00cff642565e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "33c17a2b-c2df-4251-b593-1307f83a9990"
        },
        "item": {
          "id": "3eded915-0015-49b5-adba-2b2443e934af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5a57b705-d90f-4ae1-a026-ba678510e24d",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "607074ec-cfbb-4f44-ae1b-dce6edddf058",
        "cursor": {
          "ref": "4675c290-f244-49df-8f27-67cfcee81ce5",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d34f9c06-b7cc-493f-8a23-ca68868e360f"
        },
        "item": {
          "id": "607074ec-cfbb-4f44-ae1b-dce6edddf058",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "06dad6eb-ca41-43a8-a6cb-b16014f52b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8a91d5-fde0-4287-bc90-8e3d6676762b",
        "cursor": {
          "ref": "f436e94b-468f-4ac8-88e1-890e743b9597",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4a940804-c914-4d2b-bb13-0631ff374ba8"
        },
        "item": {
          "id": "0d8a91d5-fde0-4287-bc90-8e3d6676762b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0a24b267-c099-4a2d-8c86-d5ff4b21e683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9294ef-4e79-450c-ac4a-2ce17fc70572",
        "cursor": {
          "ref": "3ee37021-358a-41bb-82a1-5dcb9897f6bc",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d147dc45-6b2f-4078-90a5-2edc497641d2"
        },
        "item": {
          "id": "ca9294ef-4e79-450c-ac4a-2ce17fc70572",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aa45791b-06b1-4a89-b9ea-7a95d010d688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f8f06b-a838-40d7-8499-576440a75a17",
        "cursor": {
          "ref": "5f00094a-67f4-4bbe-a708-5b3dd0d6dd4f",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6afd947a-036d-41a5-adf3-02480871f0e5"
        },
        "item": {
          "id": "f5f8f06b-a838-40d7-8499-576440a75a17",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6cf1a4f1-6dc7-4e75-b55b-6bfb0a9fdc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a984e9f7-bd1d-49eb-9123-b3bace769040",
        "cursor": {
          "ref": "06ff1110-23d5-4576-bd66-297476524963",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f9147492-8b5b-418e-be46-600848aa4540"
        },
        "item": {
          "id": "a984e9f7-bd1d-49eb-9123-b3bace769040",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "82a66dc9-77df-4a75-a2fa-2a0a434a9848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c78be3-6241-44e2-a3bf-3e8015a8293d",
        "cursor": {
          "ref": "626288bb-909d-4806-8ba8-3327a9f36581",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e0a5d6dc-c00b-4998-ba01-987830c3e783"
        },
        "item": {
          "id": "13c78be3-6241-44e2-a3bf-3e8015a8293d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4f0f45c0-48c4-4885-b784-94d0f8c338c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42328a2-0e2a-4970-8885-91ef7009f708",
        "cursor": {
          "ref": "0911064a-7fd5-4e4f-b77e-18af8461bbcc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fe1b65ec-0d9c-4afa-a6fd-3cccb9fc80b8"
        },
        "item": {
          "id": "c42328a2-0e2a-4970-8885-91ef7009f708",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0428dad1-34fc-4baa-962c-9c98a62b626d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1da87a1-70eb-4492-bb01-88d1dcefc520",
        "cursor": {
          "ref": "f4370dd7-8239-4252-afc4-16fca3e28a66",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7ae41feb-aa54-46b3-94b4-2d63f155f509"
        },
        "item": {
          "id": "e1da87a1-70eb-4492-bb01-88d1dcefc520",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a46e53e8-afe9-42fc-9879-b0337815ff15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596c51f2-89f1-4681-9d88-438f5233bd9b",
        "cursor": {
          "ref": "99ea2354-290a-49a9-a21c-5f08131beddb",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4671a206-f914-4eb2-9f45-13cf81e0d49f"
        },
        "item": {
          "id": "596c51f2-89f1-4681-9d88-438f5233bd9b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "25bda2c2-3138-42a7-809c-ac0260c96650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d71bac-6e1a-4aa8-b0ed-33e0de176c14",
        "cursor": {
          "ref": "715d6967-e72b-4ce1-86d8-c2135a28a06d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "293ec49e-5820-4789-97cb-9568138917f6"
        },
        "item": {
          "id": "d7d71bac-6e1a-4aa8-b0ed-33e0de176c14",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "939a0212-803d-400d-ad85-22d62ea76870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cac16b-9dc6-4a5c-a17f-2faf388a8133",
        "cursor": {
          "ref": "f8db4cac-ea54-443f-bb7f-3599e03e697a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c6ac2e8b-01b5-4188-b4dd-023beb97716e"
        },
        "item": {
          "id": "f5cac16b-9dc6-4a5c-a17f-2faf388a8133",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "04a74270-5638-4eac-9104-5ddd4fe74cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a715a428-63fb-4de4-b0fd-37d767621401",
        "cursor": {
          "ref": "896ea119-e6cc-401d-a3ab-45040b4254c4",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "01a4b697-5312-4569-90a4-66b9f792d0f6"
        },
        "item": {
          "id": "a715a428-63fb-4de4-b0fd-37d767621401",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8636a1cd-c940-4ff6-a4ce-23dd4aee0a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa24bd2e-bef7-42d2-85ca-d12badef10ef",
        "cursor": {
          "ref": "6a5095c3-22c3-4c18-a785-4a38af3d45e7",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3edfb749-61cb-4ffb-9851-ac48ed2a2e43"
        },
        "item": {
          "id": "aa24bd2e-bef7-42d2-85ca-d12badef10ef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cf369f86-028b-42ca-b2de-57fe54e0dce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d34e74-e757-4c59-9ba0-f3061a55dedb",
        "cursor": {
          "ref": "9df10182-c413-400e-a13d-4d5cb4a5fa74",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c8b164c7-548f-4489-b3b4-c966631a9675"
        },
        "item": {
          "id": "32d34e74-e757-4c59-9ba0-f3061a55dedb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "11a83c3e-a01e-44de-b43d-f60f3cfeb0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1121584a-ad4f-4717-a454-270383bae0e3",
        "cursor": {
          "ref": "94aae7eb-6d54-4f80-ad85-5b4194e13cdb",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c7fd7c8b-ebfd-4d67-9c1c-7a5861d8c269"
        },
        "item": {
          "id": "1121584a-ad4f-4717-a454-270383bae0e3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "22029b6f-0ec5-4dbf-acf8-8fd9539c3666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935cd3a6-cd45-44c5-8d61-35148569363a",
        "cursor": {
          "ref": "c0fdc850-8fd7-4590-9cec-cf96e7e07a84",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9643502c-f3d4-49e9-872f-643af9510dec"
        },
        "item": {
          "id": "935cd3a6-cd45-44c5-8d61-35148569363a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "43d67738-1aba-4425-8981-1ef865573b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d106b60-6b71-445f-84cf-3bc9ba69b017",
        "cursor": {
          "ref": "f1504cae-c0cb-4362-aefd-7cca03bd434d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ad7670e8-1600-4933-81b7-7d8101ccd847"
        },
        "item": {
          "id": "1d106b60-6b71-445f-84cf-3bc9ba69b017",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1402e1d5-8015-4715-a085-64d4ed948e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b38ec22-fdba-48fd-84eb-52bd1effa0ea",
        "cursor": {
          "ref": "e584f7bc-6edc-4e6f-a243-f97bf5d869b5",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8476ac27-260a-416b-a3a8-4925d25cf470"
        },
        "item": {
          "id": "8b38ec22-fdba-48fd-84eb-52bd1effa0ea",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f3b76b97-8fdd-4009-917d-cf37fa409ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f5d00-c064-4e5e-ae9c-658d352c05eb",
        "cursor": {
          "ref": "c7ff0d1d-1df5-4504-8da7-4fcc09cbbee5",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e41c3cb9-aed9-4f11-8eb6-8d73d99fe6fd"
        },
        "item": {
          "id": "1e4f5d00-c064-4e5e-ae9c-658d352c05eb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8ba36942-691a-4461-ae9b-2e81531d178e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df43d1f1-26d0-47c7-b742-36a7c0d8f90f",
        "cursor": {
          "ref": "1a59cd1f-57a1-4f1f-8903-a2e0e26fc0a8",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b7111c35-17b9-499a-a04a-0b749ad92358"
        },
        "item": {
          "id": "df43d1f1-26d0-47c7-b742-36a7c0d8f90f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "74c65ca5-1227-4dd4-8c77-80334a500451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0af94b-7980-435d-a91f-b2111fcea96c",
        "cursor": {
          "ref": "5253b7b3-280e-458f-a011-32c5ab5dcd77",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "983a74ef-4f3f-4443-9b82-23913b454048"
        },
        "item": {
          "id": "0f0af94b-7980-435d-a91f-b2111fcea96c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "93265344-90a2-43d5-abab-fce5c86b4937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8ace13-0327-49a9-acbc-925cef04c8b7",
        "cursor": {
          "ref": "d51d2ac6-e7c9-4fbc-9b18-30da708ab056",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2dff879a-77b2-4bf2-8bcf-b9a77c3a5491"
        },
        "item": {
          "id": "0e8ace13-0327-49a9-acbc-925cef04c8b7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "45686a07-88d2-49b7-9cdb-7bb015b7d09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df2eb2-50f4-4d00-a0eb-5d702ab426e0",
        "cursor": {
          "ref": "4aee4832-05fe-4d88-a312-36f45e5f59dc",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e2e63fc7-e319-489c-a9bf-1a1727355956"
        },
        "item": {
          "id": "11df2eb2-50f4-4d00-a0eb-5d702ab426e0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "92e093b6-0de4-47f7-b0b5-507c3ef67704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2490f78-bce5-4846-94f4-8a667342bf46",
        "cursor": {
          "ref": "b1b417fd-e298-4a3e-aae2-11521b72b3a7",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc1a51a3-566a-47bc-b964-b7aee3cadbc5"
        },
        "item": {
          "id": "d2490f78-bce5-4846-94f4-8a667342bf46",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9ce87b73-5c85-4e59-823a-ed13a39013e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4662ba42-755f-47fc-b819-70b1752605e4",
        "cursor": {
          "ref": "8c82d06d-ed0a-41c0-9b71-85fdcffd50c8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0674ff05-6907-48b3-8ebe-39e4712d8082"
        },
        "item": {
          "id": "4662ba42-755f-47fc-b819-70b1752605e4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a9f55187-c1d4-430c-a21e-4b8ade20852c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1a1c0d-0f65-4be1-a83d-6c3e5abf0734",
        "cursor": {
          "ref": "1594e43d-dacd-4d96-b406-c96b85ce64e5",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aa28f2bf-e451-4028-bf71-aa4867835d64"
        },
        "item": {
          "id": "ec1a1c0d-0f65-4be1-a83d-6c3e5abf0734",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3c69f819-18fb-4160-aa96-61103e7b737e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec12e9f7-08de-41e3-9666-1f1d6eddd7cc",
        "cursor": {
          "ref": "d0208898-a733-4693-a99c-a1d076751cae",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "132bd994-f3c6-4805-909c-a2c7e6d5ac3a"
        },
        "item": {
          "id": "ec12e9f7-08de-41e3-9666-1f1d6eddd7cc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c7676204-fa9a-49ca-8566-9489242196e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75989221-c488-4cfa-96bc-c5e93c96808c",
        "cursor": {
          "ref": "65d71d11-4527-4c9a-82db-438b07fc3934",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "20f097f6-aca9-453a-adea-e69a6b1fb7e7"
        },
        "item": {
          "id": "75989221-c488-4cfa-96bc-c5e93c96808c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a580142f-2bbf-458c-b11c-f6006edc03f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8e1ef6-f3de-4dca-82b2-05e2aaeee25e",
        "cursor": {
          "ref": "6b03dbbb-603c-435d-b2fc-0e2eddc9d9a3",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "91614cb0-920a-4f51-b3ac-20c542b1c31d"
        },
        "item": {
          "id": "9c8e1ef6-f3de-4dca-82b2-05e2aaeee25e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0624dac5-5cac-4a5e-8276-10e2b8334168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a5cd76-9255-406e-b427-2db0fadd090f",
        "cursor": {
          "ref": "3278ffe5-883b-4878-972e-973dba8c4f2b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e5946905-b48f-481f-9f54-a54bcf41596f"
        },
        "item": {
          "id": "a3a5cd76-9255-406e-b427-2db0fadd090f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a875aa59-4a55-41c2-b59f-2f9c9a642f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c756ccf7-155f-4e83-96f8-12b7168dcdc0",
        "cursor": {
          "ref": "bd29bd8a-27e2-4f0e-bfbc-2a21795cfa2a",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5164e449-9b4a-46b1-90b7-4fac38e9023d"
        },
        "item": {
          "id": "c756ccf7-155f-4e83-96f8-12b7168dcdc0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a81e5adb-ba4a-4c80-97bd-d4c5492ee88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3218055-1d1a-462e-91c7-554a434af1e3",
        "cursor": {
          "ref": "51ec67e5-2e77-4443-b9b4-79901b3a4d40",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "853d96c2-0665-457a-997e-f9aa0e94982e"
        },
        "item": {
          "id": "f3218055-1d1a-462e-91c7-554a434af1e3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0a11acbb-b95e-4fbf-90f2-5db4b9c154ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c59ea9-f188-48d2-8c1d-e5f959842955",
        "cursor": {
          "ref": "81c6f5d7-35e0-4cf4-8fc6-8e77ccd446d6",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9282fe3f-f047-47af-9a5b-a3a1cacaef37"
        },
        "item": {
          "id": "e4c59ea9-f188-48d2-8c1d-e5f959842955",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9dc10164-41da-4a1b-9315-31381d020691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "da10b205-96f7-4e57-88e1-1c12331c2dee",
        "cursor": {
          "ref": "0d3a0e93-a2a9-438e-8240-71b7a94d8081",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4d1e979a-9a5e-4eb6-a14c-e299febed43b"
        },
        "item": {
          "id": "da10b205-96f7-4e57-88e1-1c12331c2dee",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3c2353f9-11ad-46fe-8a0e-4051e8a9c477",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caa3e9a-aa05-4a23-b2e2-cf669e2f8f34",
        "cursor": {
          "ref": "ebaf76f3-383e-4e92-9d6b-7b2eefa87f52",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4db2a95f-2d41-45c6-ac97-da057a1664a1"
        },
        "item": {
          "id": "5caa3e9a-aa05-4a23-b2e2-cf669e2f8f34",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "004e74b4-838a-4bbc-b26b-e9a6a1ceeac2",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c60a68-b52e-4635-9d6c-80fd6ab121db",
        "cursor": {
          "ref": "4934582d-110e-4549-8813-2910cd0d6fc0",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1abcd3bc-79d4-4ef6-975e-f92fba97b1de"
        },
        "item": {
          "id": "77c60a68-b52e-4635-9d6c-80fd6ab121db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1a643442-cb58-4a49-8b12-50263581174d",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeac8c7-bbfb-4ff1-aa56-63e433f3f320",
        "cursor": {
          "ref": "7aba7de4-24e6-4d15-979e-f5aa01d65b6f",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "76223c91-5e59-4f24-8fda-736170b4df44"
        },
        "item": {
          "id": "beeac8c7-bbfb-4ff1-aa56-63e433f3f320",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8a793a02-fdc4-483a-83a7-cc58a5e75ac3",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "847df11f-206b-4003-8549-2cfeae10aea8",
        "cursor": {
          "ref": "7bfe6981-16a4-482b-bc92-362373bb6004",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8e68f46c-b3a1-4923-b1c2-594116a2bc27"
        },
        "item": {
          "id": "847df11f-206b-4003-8549-2cfeae10aea8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bded9ee8-a2c5-46c0-8ba2-cbba84235b06",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-17T00:40:08.564Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-17T00:40:08.564Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6549c304-cc6a-4cdc-8236-fb63b1c03920",
        "cursor": {
          "ref": "5f20cc6c-e82d-4f48-8187-0111592d2b6f",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2b32282b-017f-4284-afa1-bbbc5a5d79c6"
        },
        "item": {
          "id": "6549c304-cc6a-4cdc-8236-fb63b1c03920",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "600dbd56-37c6-4ad3-9012-b0a23be1a552",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3497ebbe-9052-4d38-9fcb-4c4cbad536d5",
        "cursor": {
          "ref": "015ff662-2a21-47ff-b972-dbf05eff91dd",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cdd7fe7e-26e6-4b21-958e-8d62585a1ed5"
        },
        "item": {
          "id": "3497ebbe-9052-4d38-9fcb-4c4cbad536d5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cb69a972-d5b3-41f4-aebb-9f6000c6f565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d396f9-e1df-45a4-8b34-a9e8f7d5c1fe",
        "cursor": {
          "ref": "88377b67-ee32-4206-98ca-8f2a4db6bee5",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "337da9f8-a248-4ccf-970c-5a0209755991"
        },
        "item": {
          "id": "47d396f9-e1df-45a4-8b34-a9e8f7d5c1fe",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6e45cc44-2ce7-44d8-afba-f050029064a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926e46e2-2ef5-49f2-bd42-81f5517e456f",
        "cursor": {
          "ref": "6935b3be-a7e2-48a1-8dbb-75067bfcffd1",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0d15d017-718c-42ea-a2ec-e761ddb5895e"
        },
        "item": {
          "id": "926e46e2-2ef5-49f2-bd42-81f5517e456f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "72abb188-51fc-4448-9815-67ffdf36187c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51db5170-36f9-4e72-a15b-870720df810e",
        "cursor": {
          "ref": "62ddd7fe-76fd-4403-82b3-d089df1e1cf1",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fc745bdc-23c8-46ca-ae54-8e2b5ff576f4"
        },
        "item": {
          "id": "51db5170-36f9-4e72-a15b-870720df810e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bf63f97d-8a52-4fb7-874e-817322ee097a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e416f7-e446-4927-a49b-23b259ce9fa9",
        "cursor": {
          "ref": "9ddcbbaa-896e-43fb-800a-e39930aa2cb9",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7170de38-a0ed-4973-ba34-d5719b659a90"
        },
        "item": {
          "id": "90e416f7-e446-4927-a49b-23b259ce9fa9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aaf83c80-6d1a-4bd8-aff9-0965daa82022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe922bb6-22f4-446d-8353-31c7f53b4b06",
        "cursor": {
          "ref": "cf427a66-a081-4968-8823-d02d6ca3e31f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5bda247b-4e35-47d8-bc39-173526d30489"
        },
        "item": {
          "id": "fe922bb6-22f4-446d-8353-31c7f53b4b06",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4dd2f127-4efa-448d-ac55-2579cf603470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f54de80-dcd2-4627-ae2c-fe13ea32b396",
        "cursor": {
          "ref": "3e168813-eb7a-4919-b9e5-93a205fa2fc9",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e2ce6d95-4658-49b1-9bf2-fdad0003c3a9"
        },
        "item": {
          "id": "1f54de80-dcd2-4627-ae2c-fe13ea32b396",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "acdff164-6ed2-457f-8356-80700e58affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c42c29-1140-47b2-976a-9bf2b4391de1",
        "cursor": {
          "ref": "9211f562-b036-4909-baf3-2d26abfca8ae",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7779c862-d59f-4736-9d42-221167025bf8"
        },
        "item": {
          "id": "41c42c29-1140-47b2-976a-9bf2b4391de1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "822d1577-a84f-4074-ae1b-e5d458b080e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26b7004-cd38-432d-ad27-f2cf4d2cb403",
        "cursor": {
          "ref": "96a5a4c1-ec20-4ca4-8f14-30e9e29e89c8",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e3ca911b-9add-4c5c-bd52-ac3291f9d138"
        },
        "item": {
          "id": "e26b7004-cd38-432d-ad27-f2cf4d2cb403",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d4c715f0-064a-45bf-81fa-e318e2267110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910cd68d-ad48-4ea0-beaf-4000f6eea0a5",
        "cursor": {
          "ref": "ff3281a7-f385-48d2-b815-424c0f473fcb",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e31958b8-5969-49be-b1bd-6930ef592444"
        },
        "item": {
          "id": "910cd68d-ad48-4ea0-beaf-4000f6eea0a5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "58d51f80-1161-40d7-b5bb-d03d23816dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7041535-8b54-473c-b83f-fc38cbf3244f",
        "cursor": {
          "ref": "e9a78a00-0000-45d0-a779-b4c3956bf5df",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "eb573d49-72d7-465e-9a56-1a5510d89be5"
        },
        "item": {
          "id": "f7041535-8b54-473c-b83f-fc38cbf3244f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "32375a55-9a71-422a-a0f1-08e42c395b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380eee55-4449-42be-b3a5-970e2f3b384f",
        "cursor": {
          "ref": "51ff7889-ce12-418b-8c5b-029f9e007780",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "36516dba-ca82-406b-93e5-6df795912ed2"
        },
        "item": {
          "id": "380eee55-4449-42be-b3a5-970e2f3b384f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "34864212-99d6-4ca6-9930-dc24443aceec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015e602a-7ab0-4af6-af5e-2efcd51b0b49",
        "cursor": {
          "ref": "344de0f6-9601-48a2-844b-d2dc1cf7f4f0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6067b37e-d79b-49e7-936d-0c4db4bdec1a"
        },
        "item": {
          "id": "015e602a-7ab0-4af6-af5e-2efcd51b0b49",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "73f4615d-e89a-4bee-8a9d-c9e45b02cd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d94ee9-371e-4e77-b4de-f2ce484378bc",
        "cursor": {
          "ref": "9adfccf0-13aa-44ed-a925-6429f6a008d3",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d7795f2f-cf51-4963-9796-8a42303b1b85"
        },
        "item": {
          "id": "77d94ee9-371e-4e77-b4de-f2ce484378bc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "215a60c8-65c5-46b7-88d3-8ecfe539178e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ba432dfd-322f-4b62-b00a-49dc1af5c5f4",
        "cursor": {
          "ref": "86fb1ab3-c511-4341-9c03-96c94abc3eff",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ca30e4d7-ade3-4271-8391-539aaa9a9a5f"
        },
        "item": {
          "id": "ba432dfd-322f-4b62-b00a-49dc1af5c5f4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1323043b-ff86-42a5-bb5f-6ef49f4d9f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683940a4-9274-4fc4-896f-ba13be7baee4",
        "cursor": {
          "ref": "867c7468-78de-4c4a-b283-ca66577b268e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "56d69a90-79ce-46d0-9ecf-f4fb79930074"
        },
        "item": {
          "id": "683940a4-9274-4fc4-896f-ba13be7baee4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "be6eb6f5-7853-4471-b862-6b50d459a38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee97ac77-34e7-40b9-8495-fe8fa6a3a30a",
        "cursor": {
          "ref": "5f6a9cb5-1aa9-4e91-9a0d-4b2dcb25abd4",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "450462da-fd38-4c08-b7ef-25002899182d"
        },
        "item": {
          "id": "ee97ac77-34e7-40b9-8495-fe8fa6a3a30a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d7ea906d-c166-4e2a-b102-878cbd1d1ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbec1439-18b4-41c7-adaf-d15351561d43",
        "cursor": {
          "ref": "1d080ccf-2ff7-4d07-beb6-a2f88f0c7b58",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d3cafd77-9507-45c7-9672-4bc590b7aadd"
        },
        "item": {
          "id": "bbec1439-18b4-41c7-adaf-d15351561d43",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fd4bf7d3-1eb4-4401-a14e-13fb1a49b63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76676935-4925-4b33-bdff-3f77cf15144e",
        "cursor": {
          "ref": "262ecc19-8724-4cec-ac68-b88459549a8b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dc01fbc4-8461-47b8-817c-340e07c48e8d"
        },
        "item": {
          "id": "76676935-4925-4b33-bdff-3f77cf15144e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fba860f1-e311-4c5b-8aa2-ab02b64df0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647caea6-4bcb-4cbc-a158-ef6f3b035161",
        "cursor": {
          "ref": "2276844c-2851-41a7-ac9d-a9eb4d0bf411",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bf09348f-9636-4b4a-aa0c-397295dce8c0"
        },
        "item": {
          "id": "647caea6-4bcb-4cbc-a158-ef6f3b035161",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eb975c33-38cf-4244-944e-5a4579c2cd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c4155a-3635-477e-a209-ada0143aecc4",
        "cursor": {
          "ref": "31e57f70-b0e5-4b50-b3b3-421c214cb720",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "46c9c19e-6787-4958-b3dc-2bad08e404be"
        },
        "item": {
          "id": "c7c4155a-3635-477e-a209-ada0143aecc4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9de99f3b-cfba-43ea-a9a4-b68217796d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621b2051-e5e3-4b32-9f13-71c93fb9b51d",
        "cursor": {
          "ref": "17a7de4a-bfd0-41e2-8be9-947be3beb4d2",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "10732fbe-d0bd-48be-b8ab-fce6180b82cf"
        },
        "item": {
          "id": "621b2051-e5e3-4b32-9f13-71c93fb9b51d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "40246130-0876-4f82-97b0-b4a8e46bfc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c280db8b-4ec7-445b-ba63-121193a9691f",
        "cursor": {
          "ref": "2bf7fb00-eb67-49ab-9ae0-4e68d46cc415",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "59c9942e-8378-4918-ae78-f798cbb17491"
        },
        "item": {
          "id": "c280db8b-4ec7-445b-ba63-121193a9691f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e13e1d1f-1fb1-4148-a157-567218fb6e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bd1f6d-89fc-45e9-b3c4-cb2e68233a3a",
        "cursor": {
          "ref": "95f3620b-df7e-41e6-9848-eec05c2beb34",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f185a2e2-3eb7-4e00-80fd-bc12681ef715"
        },
        "item": {
          "id": "13bd1f6d-89fc-45e9-b3c4-cb2e68233a3a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "87f067c7-b02c-4986-a1ca-a1bce067a396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b821f719-a505-41c5-9571-98aeea2c7044",
        "cursor": {
          "ref": "2beee0e7-c9d5-4861-b0b1-b4a0c054aa47",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3c70bf5e-0d83-47bd-8ba9-cae8df075a57"
        },
        "item": {
          "id": "b821f719-a505-41c5-9571-98aeea2c7044",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c1ef0c05-b731-4841-8285-e4b2f27755f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e58127-1141-46d5-a429-9d734bb4ccc7",
        "cursor": {
          "ref": "ff4b455f-2135-496f-9e9b-9b2e692a1da6",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f68cc170-e2c6-493b-b5af-34f312f506eb"
        },
        "item": {
          "id": "68e58127-1141-46d5-a429-9d734bb4ccc7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8b1a9c04-2a20-4293-bffc-7af5ff0eb221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e282ab84-6b3d-4df2-8e18-4223648da123",
        "cursor": {
          "ref": "09ca69df-159b-4d66-a03b-012675ee3ee9",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7dc997f6-16da-4805-8042-5a7509d3597e"
        },
        "item": {
          "id": "e282ab84-6b3d-4df2-8e18-4223648da123",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7f17c19c-05ec-4267-ae27-d2b8b033236d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed80f6dc-b2f4-4542-832d-eb6dc6cf9957",
        "cursor": {
          "ref": "27e076b9-27e9-461a-8807-e89803dc7694",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "40d543d1-9b7b-4926-921c-431b6b468a1c"
        },
        "item": {
          "id": "ed80f6dc-b2f4-4542-832d-eb6dc6cf9957",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b992b0cb-2cc8-4a5d-bac4-e45350081e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323ac2a1-de8d-4eba-9899-36e2b9bce4bd",
        "cursor": {
          "ref": "400a53da-2a35-4bb1-8893-1eab27dabbf2",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "440abc98-0068-43c4-8924-3636a115ab61"
        },
        "item": {
          "id": "323ac2a1-de8d-4eba-9899-36e2b9bce4bd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f589a525-6d8f-42b0-9282-308aee1f7f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c86b3a-e9f8-4be8-8e1e-1385dece121d",
        "cursor": {
          "ref": "98fe4905-c0b2-4661-b89b-abe494b4c057",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ea5256c1-5343-4e9a-afe9-beecdb01e60e"
        },
        "item": {
          "id": "72c86b3a-e9f8-4be8-8e1e-1385dece121d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "34afa667-3e33-40fa-bf54-ab39d2d39562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcf9923-ed01-437a-8db5-d1881ce3d447",
        "cursor": {
          "ref": "09f08f7b-ca9a-49c7-bb9e-413f5b9afa32",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b2ba7e10-a8ea-42db-9234-ad7815988bec"
        },
        "item": {
          "id": "0bcf9923-ed01-437a-8db5-d1881ce3d447",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cf679492-9609-4916-8ae9-a3594cc589e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6aed938-a701-4124-8703-76ef5b70ad54",
        "cursor": {
          "ref": "b39f1833-d28f-409a-a22e-5d25f342d5fa",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5b598c48-ad68-447a-8fd7-497ea8b9c65e"
        },
        "item": {
          "id": "f6aed938-a701-4124-8703-76ef5b70ad54",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fdbbc0e9-5453-4f73-a58a-49ada286a1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abdecebf-5223-4830-a9a7-cdd7dfa827ad",
        "cursor": {
          "ref": "1ccd6009-070d-48bf-9f89-65ddb1ac3755",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6e97abd1-53af-4fd2-8f01-afd4fa6a0ef5"
        },
        "item": {
          "id": "abdecebf-5223-4830-a9a7-cdd7dfa827ad",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b2d2b923-4b81-4b0b-94b9-cbd2b1c0bfd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d89042-a7ef-478e-a0fa-74c772f62a6a",
        "cursor": {
          "ref": "e4b0a48c-ee98-4ee1-81ba-8aacc205f420",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b2517883-55b2-4fa5-8341-4bfd27b7afa8"
        },
        "item": {
          "id": "81d89042-a7ef-478e-a0fa-74c772f62a6a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d907a3e8-3e60-49cb-a919-eab55db32e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651e5c1c-7b0d-4b96-83d3-e4b96f5d9f32",
        "cursor": {
          "ref": "65057068-2feb-4145-afea-ff6acbe0b16d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "62cb9fc7-0f24-40a5-9971-906aefda1c58"
        },
        "item": {
          "id": "651e5c1c-7b0d-4b96-83d3-e4b96f5d9f32",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "24822e9f-67ee-4192-b603-4bebb73ee3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f83c06-332a-4364-aa48-209952c2f60b",
        "cursor": {
          "ref": "5c41832f-ac0c-41ab-8115-1e8639bc93ed",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "feb9e04e-0784-4342-9eff-f92e673183a4"
        },
        "item": {
          "id": "d5f83c06-332a-4364-aa48-209952c2f60b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a591a1fc-b0cf-48bd-bbd1-4fb0509484c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96021ab4-4b3e-4966-b7d4-164e9fd166a3",
        "cursor": {
          "ref": "3d42a3ad-bde9-4f20-a689-e99d4dcbb149",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5f278e58-1dae-4929-a250-97c955329932"
        },
        "item": {
          "id": "96021ab4-4b3e-4966-b7d4-164e9fd166a3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2e29c77b-b4d1-45cc-bab2-74ab1abc5db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f66b1e-84ed-460f-be7e-fb420899799d",
        "cursor": {
          "ref": "e7ed141c-e706-4a92-9be4-d3b3dab81299",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c4982ed1-06a0-44a4-88e4-43b3fc1fb9bc"
        },
        "item": {
          "id": "86f66b1e-84ed-460f-be7e-fb420899799d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "61cbc309-2e7c-46c6-82eb-64a8fb7bfb20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0c37f9-986c-4f2f-b277-b8ec43ff313f",
        "cursor": {
          "ref": "e0d3a9a7-3c7f-4929-969b-868aedea99cb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "446ebfee-3b35-4b9a-a27d-ea04941c0ea8"
        },
        "item": {
          "id": "3b0c37f9-986c-4f2f-b277-b8ec43ff313f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "883d986f-5922-4a29-9041-5a076d6e89a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2d13b9-244d-456a-a93e-eb0527fdbdfb",
        "cursor": {
          "ref": "0914e938-8a58-4fb4-b66b-0cf10f52beda",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b15720e9-27db-4d4d-90c9-9de9bb0b05e3"
        },
        "item": {
          "id": "5e2d13b9-244d-456a-a93e-eb0527fdbdfb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ac9666bb-81c4-4a39-9966-c3c130b75d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0215c6a7-e247-4967-8617-83f3b74220fe",
        "cursor": {
          "ref": "a95b8bf1-f0fe-4234-b12d-a297bb28c93b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4f09700f-29de-4fdd-bbd8-e920bf2318f0"
        },
        "item": {
          "id": "0215c6a7-e247-4967-8617-83f3b74220fe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e7c7a533-8906-427a-90db-c100c97244ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcad928e-ecf6-4af4-9764-1b3eb4f546d7",
        "cursor": {
          "ref": "094be219-d41d-47d3-8c75-71359c5eec33",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1b8538d4-da80-496f-a3fb-6dd5a5513402"
        },
        "item": {
          "id": "dcad928e-ecf6-4af4-9764-1b3eb4f546d7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7b59bcad-014e-4b41-9629-dae39646419f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a846799e-714a-489d-81be-7ed7a5c576a3",
        "cursor": {
          "ref": "3303dd17-e1c8-4d84-9bd3-9f3c4af5a2c0",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8e936708-7f40-424a-bb80-15d59db591ae"
        },
        "item": {
          "id": "a846799e-714a-489d-81be-7ed7a5c576a3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "44c01191-1f9f-4943-9dca-893fe04603dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd58585-8142-4c1a-ab4b-4bf5f1dc05f7",
        "cursor": {
          "ref": "9f172b26-644e-4f6d-b383-fd15b500656b",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7e13b984-48ad-493d-8f82-b572b9028720"
        },
        "item": {
          "id": "6bd58585-8142-4c1a-ab4b-4bf5f1dc05f7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0533af7d-1015-4ca7-9ba6-fcdf2061a4ee",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ac73cca6-470e-47f2-9d01-eab62128ac28",
        "cursor": {
          "ref": "19407a9a-9662-4411-af8c-cfdc55ea9a23",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d16db8f6-cbb0-45fd-8151-d91e6628e4b5"
        },
        "item": {
          "id": "ac73cca6-470e-47f2-9d01-eab62128ac28",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "668964d6-757f-4498-bbb6-b94086482ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd43026f-4d1c-45e4-9545-c1b0a5d506d2",
        "cursor": {
          "ref": "c0d39998-2bd0-4a1e-863d-c808d5b0f058",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "86d32190-8e6c-402b-a742-f88dfa033974"
        },
        "item": {
          "id": "cd43026f-4d1c-45e4-9545-c1b0a5d506d2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c39bd39e-1183-43cf-83cf-1fa901302498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ded1d9-28f2-4119-b3dc-44ff3a189072",
        "cursor": {
          "ref": "3fa6a7ab-1c69-49f6-83a1-cb2950689c0e",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ee641413-8c72-4f8d-8d89-0ca89aa00e00"
        },
        "item": {
          "id": "94ded1d9-28f2-4119-b3dc-44ff3a189072",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "509ef313-a9d6-4fd0-908b-09709b638a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92232e15-e7e4-4e37-abab-7be6d2fd9a6b",
        "cursor": {
          "ref": "90604c13-93fb-454a-8ca4-19b1bf28eb04",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6aa6c35b-677d-4955-823a-9a4bcd3014c5"
        },
        "item": {
          "id": "92232e15-e7e4-4e37-abab-7be6d2fd9a6b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b5b10ec1-bfde-4f1d-b569-48db28c746bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e540b26-dbd9-4be8-bc61-ef019ef6d310",
        "cursor": {
          "ref": "f997a88a-14b7-474e-88c6-ca4cb8ed0876",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d714d698-5b42-451e-92ee-836c67706cfb"
        },
        "item": {
          "id": "0e540b26-dbd9-4be8-bc61-ef019ef6d310",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "05e8ebb6-c4ef-467a-8d32-a699d867fe37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d21f912-0c6a-4e25-bdc6-487b0490b00c",
        "cursor": {
          "ref": "a2ca36b4-4d78-4e76-a305-b9499eb0a99e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ac0777a0-934b-47ca-91b9-a3b71f44387f"
        },
        "item": {
          "id": "0d21f912-0c6a-4e25-bdc6-487b0490b00c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2f866f21-401f-4670-9fad-af7bb8d5ecf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81527277-3177-4408-8351-7155ac0d8443",
        "cursor": {
          "ref": "bd0f563e-ed7a-41e6-90dc-13d4bbfe27d9",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2da08ded-62d9-4e32-bb23-cd05d20fa481"
        },
        "item": {
          "id": "81527277-3177-4408-8351-7155ac0d8443",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7daa6ef1-fa1a-4443-843a-7ca145bf98b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc7c6dd-a8aa-45fb-9c6c-d0af9f144ee6",
        "cursor": {
          "ref": "bde78089-374e-4978-aa5a-89fd0268ce75",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "990dc219-5f16-48a9-b8ed-94f1c977459e"
        },
        "item": {
          "id": "3cc7c6dd-a8aa-45fb-9c6c-d0af9f144ee6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "affc6db0-a2ad-44d6-9356-f7b1c49116be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bda80a-121d-4574-921b-452ac18a5903",
        "cursor": {
          "ref": "a10f6f8d-a5ca-4f95-93f4-0e147004862a",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "920d29fc-ead8-418d-ba69-6d11ce86a58c"
        },
        "item": {
          "id": "05bda80a-121d-4574-921b-452ac18a5903",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "defd2dfc-30fb-4bc5-a9e8-433dfad37f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554f8a8b-bf38-45f7-bcd6-edc2d9ea3676",
        "cursor": {
          "ref": "baa7171a-bca7-4dcb-8ecf-4b2f7f1afd48",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d6ba98b7-82a6-42e6-9534-77fc2e5114f1"
        },
        "item": {
          "id": "554f8a8b-bf38-45f7-bcd6-edc2d9ea3676",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "69b9c57f-124d-47e3-96f8-6fb70b614f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c84964-5bb9-4fcc-9724-a3f2bc4f3697",
        "cursor": {
          "ref": "322db974-d6f0-4b71-882d-468c21121152",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "94293552-0258-46a0-90ca-84677ac594da"
        },
        "item": {
          "id": "44c84964-5bb9-4fcc-9724-a3f2bc4f3697",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f1e09144-a637-430a-857f-3fa9e61eddcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da359eb5-b1ee-4530-9df0-ebaa06b36aae",
        "cursor": {
          "ref": "ac7df793-099b-458d-bcb4-8a435c3e9b49",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d023a040-3feb-44aa-a901-4ae0f39f2c6e"
        },
        "item": {
          "id": "da359eb5-b1ee-4530-9df0-ebaa06b36aae",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dfaea775-2700-456f-8194-d00b45992d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93021e43-b345-4d43-a2ef-baaad89a33da",
        "cursor": {
          "ref": "687f5b23-ea27-4e49-80a1-19b5c3cbafbf",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "210c4ac9-ebda-4c4d-959b-f23f5a4204d7"
        },
        "item": {
          "id": "93021e43-b345-4d43-a2ef-baaad89a33da",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7fd1b54c-dac0-4fac-ac13-aed3099c6f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46c6f81-6bde-49f2-9e7f-b1bb918f069b",
        "cursor": {
          "ref": "f374cbfa-405d-4e9d-be67-7c962b416246",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7b460840-1c19-450b-9d88-598470cb1a88"
        },
        "item": {
          "id": "e46c6f81-6bde-49f2-9e7f-b1bb918f069b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8f5de3c2-f0cd-460a-aef7-47cab6e2202c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd8e25d-9fff-4a9c-8650-cb475e682a2b",
        "cursor": {
          "ref": "b8e7be7b-4fe0-4846-b2f5-e937c4659cab",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a2978639-d712-431c-882e-76eeff39bd08"
        },
        "item": {
          "id": "6dd8e25d-9fff-4a9c-8650-cb475e682a2b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "429376db-5f62-4ede-a3a3-a329340ab244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14c5f4d-b0ad-4599-bda8-f38ae4480fee",
        "cursor": {
          "ref": "ec7288cb-2d6a-4bee-93c6-2b0242aa8eea",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f8dd1ff8-3eb9-4f39-b5be-480bbe7e7bfc"
        },
        "item": {
          "id": "c14c5f4d-b0ad-4599-bda8-f38ae4480fee",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fb30f13e-416c-49ae-a153-4dc0b9a5b7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90f9e37-b0a3-4272-a1d2-385faf15fd61",
        "cursor": {
          "ref": "300ccc7d-8fda-4be7-bc54-d571b5a5570f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "010d3151-6533-4997-89db-13ed7554c9cc"
        },
        "item": {
          "id": "b90f9e37-b0a3-4272-a1d2-385faf15fd61",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "217eccc5-cbd8-424e-a963-2e8553fe92b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4670fd48-c428-4e6e-9a94-c5d9cf15a732",
        "cursor": {
          "ref": "af88045f-6b1f-4a3d-84c4-a3ddd73936d3",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "69bd8118-6bf0-4e72-8641-f9700283f33a"
        },
        "item": {
          "id": "4670fd48-c428-4e6e-9a94-c5d9cf15a732",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2671d82d-9636-4d9c-b838-72e4315fa2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c2cd6a-b709-4aa8-9e88-4866a7fd2b73",
        "cursor": {
          "ref": "b92d9cdc-7394-47ca-8986-90bce69f3342",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8b058d1a-c714-4e49-af83-21571a1d54c2"
        },
        "item": {
          "id": "d7c2cd6a-b709-4aa8-9e88-4866a7fd2b73",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b90daf45-15f8-48e5-82d4-616792f10b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc58db7-4cd0-4078-997b-b55b9bfcfb46",
        "cursor": {
          "ref": "fa4fafe7-378c-47aa-9221-4ae0c6f30078",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "900f72e7-a5ef-4b3a-bad7-1181e71de657"
        },
        "item": {
          "id": "4dc58db7-4cd0-4078-997b-b55b9bfcfb46",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e66af23-a02b-4fa1-b20a-59765169561a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9aa90e2-8b3f-4880-963b-f27559877e5f",
        "cursor": {
          "ref": "ca6fcb3c-7b0e-4a24-87c3-a923a10f528a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9bb29737-0580-40fc-98c7-6855d4eefd37"
        },
        "item": {
          "id": "e9aa90e2-8b3f-4880-963b-f27559877e5f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ea30a1f-e8af-46e3-92ab-e214882f8fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebce0db-d516-4f20-ac28-e6005008310f",
        "cursor": {
          "ref": "eb45d29a-59f1-4930-acc1-6f666862278b",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "086d9860-5ac3-4c56-b69d-2c673ddc5612"
        },
        "item": {
          "id": "8ebce0db-d516-4f20-ac28-e6005008310f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "163c3ed2-b86d-4189-8e6e-1dbf6c7fdd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcb9f94-ff97-4a27-b28b-e198ef373b7b",
        "cursor": {
          "ref": "0d83161b-10ce-4c49-9c13-23a3991c9067",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "65e95013-ac40-440b-b204-abbe5ab9a5f5"
        },
        "item": {
          "id": "4fcb9f94-ff97-4a27-b28b-e198ef373b7b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cccd594b-815b-4c0c-aef0-bc838e97f478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e3a511-92ae-4d66-8c11-b09ce7abe45e",
        "cursor": {
          "ref": "464e7094-bbd6-4cb6-bd9b-8f1fa09fdd59",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c54f2358-b9c9-44aa-8d8c-636bc550f83a"
        },
        "item": {
          "id": "f2e3a511-92ae-4d66-8c11-b09ce7abe45e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "db798cd4-11af-4db4-920d-76873ccba74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65489701-e1e7-489f-ae23-df27c8a8bb49",
        "cursor": {
          "ref": "878426f1-c1b9-4ba6-9967-f6b4bef71d4a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9ea8de9f-fc33-4831-8e63-f00d5f6e04dd"
        },
        "item": {
          "id": "65489701-e1e7-489f-ae23-df27c8a8bb49",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "70be8cbb-671b-43e5-ab05-5f400435b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a050e7b-7909-4b66-98fc-7cb59126f42c",
        "cursor": {
          "ref": "2c3c0b52-21f2-46eb-88a6-0eef92507621",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b0be3527-2cde-48db-acda-6bf5d2283de8"
        },
        "item": {
          "id": "2a050e7b-7909-4b66-98fc-7cb59126f42c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "14946059-070b-48b2-a1b3-74749745e374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e99dccb-aa6e-4494-b103-a0be82c42469",
        "cursor": {
          "ref": "c42fefd9-cd1a-4cd0-bd3b-74374fef4e91",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "45a7f64d-aa86-47ea-b17b-d93f04af2ab6"
        },
        "item": {
          "id": "4e99dccb-aa6e-4494-b103-a0be82c42469",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9812c9cc-e864-45f3-8237-e049b230cb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f907fe0c-b7eb-4f2a-9fa3-a2b46e10e475",
        "cursor": {
          "ref": "001d1871-cdf4-4970-a539-4b2060073bbf",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2cc91f7f-1682-497e-85e9-7292a76e05c1"
        },
        "item": {
          "id": "f907fe0c-b7eb-4f2a-9fa3-a2b46e10e475",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e2c9152-e1a3-4e2d-b9d1-53e722a79b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae7c0d8-87dd-4add-9914-135b7c711ae5",
        "cursor": {
          "ref": "85400e45-cb3f-4d21-b69c-10affff35b14",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "42eac01a-f975-44a0-bf65-90e195a5a597"
        },
        "item": {
          "id": "aae7c0d8-87dd-4add-9914-135b7c711ae5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "25207780-529b-4774-9cbf-e74c550b55ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98014043-a57f-4f20-99ea-daaa553d2a43",
        "cursor": {
          "ref": "5788a6c7-e5a2-412e-9edd-17a6465cb660",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d822109a-048e-4b34-9256-eeabfbd33148"
        },
        "item": {
          "id": "98014043-a57f-4f20-99ea-daaa553d2a43",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a48fed5c-1768-47b3-9fd7-8354ce04c80a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "57fd1304-0fec-4d4f-91c5-c0e9fe6af5b3",
        "cursor": {
          "ref": "a7851f02-d9c8-4eec-9ace-84ac7d684090",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3c21d0b9-32c4-4c0b-8d05-82d3e3f03559"
        },
        "item": {
          "id": "57fd1304-0fec-4d4f-91c5-c0e9fe6af5b3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f6c48818-0c08-4784-af7c-fe132b12ce83",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "fbc49f5f-b302-4898-91ec-837b19722233",
        "cursor": {
          "ref": "9af99af3-8fad-4355-a1e3-2c93d2499c97",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ecb0e4e0-4c30-41b8-bf4e-f9d1f7a93076"
        },
        "item": {
          "id": "fbc49f5f-b302-4898-91ec-837b19722233",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "afa34fb3-1603-4332-b3f0-b070442a4526",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0ef701cc-a159-477a-8442-a7b41b0a0e53",
        "cursor": {
          "ref": "97760e93-7e61-43f1-8552-e3f2870b8671",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "39eabe60-ae24-4571-b12c-533872ef51ce"
        },
        "item": {
          "id": "0ef701cc-a159-477a-8442-a7b41b0a0e53",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7fd0fe96-1101-4eff-ae67-91f270aa734d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8d59ed-8817-4aa6-8ad3-2560690ea7d3",
        "cursor": {
          "ref": "a77febc9-fc03-42fd-9eb3-764237353942",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2d5cf1e8-c949-4e1c-b43c-dfdc59423e79"
        },
        "item": {
          "id": "ee8d59ed-8817-4aa6-8ad3-2560690ea7d3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dc67fb03-e5f2-4c7d-8856-78bc191596ea",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "0cb2e75d-5dcb-4f46-9d83-31c02e8b9c48",
        "cursor": {
          "ref": "cb606494-7ffa-46a9-b384-575790309a16",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "894d54ba-6502-474c-b563-8f3f4b53cbd7"
        },
        "item": {
          "id": "0cb2e75d-5dcb-4f46-9d83-31c02e8b9c48",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ef8bb6a4-1a9f-4c5b-b060-fb74fef0a251",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "15eb24fb-5a9a-44a7-8f45-e55cba887b25",
        "cursor": {
          "ref": "d3a47f2b-0217-4a8c-8c97-614b318733f8",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "86ad91d4-6ba7-492f-aaa7-cd537490d543"
        },
        "item": {
          "id": "15eb24fb-5a9a-44a7-8f45-e55cba887b25",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9dd721b5-ec84-42b9-a79d-01d06105b81d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "0565f094-a89b-47f4-b01c-6d4a9b287c36",
        "cursor": {
          "ref": "0eaf6751-9a92-4ce5-9986-97ee5ba6cd18",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b3687f6b-94ec-4662-b9fa-5ac866e5549a"
        },
        "item": {
          "id": "0565f094-a89b-47f4-b01c-6d4a9b287c36",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c75bad74-18c6-4be3-a9e3-62736562d036",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cdf3d4d7-1a21-42eb-9f12-a1f3ce887ab2",
        "cursor": {
          "ref": "d36398dd-b6c0-4984-af15-103e32c1fcf3",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "76953578-903d-483c-a66b-8d2c0690a61a"
        },
        "item": {
          "id": "cdf3d4d7-1a21-42eb-9f12-a1f3ce887ab2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "65869367-557b-44fb-b6c4-24294ca19446",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b3304c18-32b4-4e9d-8e3c-c461f64e4c22",
        "cursor": {
          "ref": "4d794326-3a96-4a4f-b67d-88ce6a02609c",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6e034dd6-dbe8-4fa1-a521-6cef0092c3e1"
        },
        "item": {
          "id": "b3304c18-32b4-4e9d-8e3c-c461f64e4c22",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "72bd077d-2708-4e75-88a5-e0cdfb8533cb",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "48606700-eaaa-4763-8a5a-d2c583b6a91e",
        "cursor": {
          "ref": "f5b533cf-82ca-4612-a77e-91f79e9e9f84",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "baa6fa2a-17b4-4a88-953e-12516178277a"
        },
        "item": {
          "id": "48606700-eaaa-4763-8a5a-d2c583b6a91e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5a60f7d6-07d5-44a6-9e1a-abcec91a46dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf102822-667a-4160-ae54-9dbe5be133c5",
        "cursor": {
          "ref": "d68ee0c3-3771-4dbd-9de5-1add89616e2e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5a06e1bd-1f58-4617-9b9f-6e334fe060c4"
        },
        "item": {
          "id": "bf102822-667a-4160-ae54-9dbe5be133c5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b4633b6c-6720-4fc7-8ccf-0d5152ede482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c98d26c-42f8-48dd-9601-f01b4d5ee929",
        "cursor": {
          "ref": "95735696-d6eb-423f-bc8c-0c898d482fb4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f8601909-d4d2-4e05-9018-b44d486acf3a"
        },
        "item": {
          "id": "8c98d26c-42f8-48dd-9601-f01b4d5ee929",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8be492f4-a7f5-4608-8fc3-b165faecee14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12fa00a-245d-4b8f-86d0-c39e48ee63ea",
        "cursor": {
          "ref": "9955ff1c-8859-4c89-bfe1-96fb02d7e581",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cd6861b7-e376-4aee-a5b4-31cdfddfd919"
        },
        "item": {
          "id": "a12fa00a-245d-4b8f-86d0-c39e48ee63ea",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0f89cdee-c4fe-416c-baca-f0bdac96de45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01127d8f-6c62-4072-8120-33ecf838ed4a",
        "cursor": {
          "ref": "85024f00-acb0-4b96-a0a5-ec8a8634ae2e",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4b8b1adc-d5a3-480a-94d6-cdffff919a32"
        },
        "item": {
          "id": "01127d8f-6c62-4072-8120-33ecf838ed4a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4e9ee0b4-a3bd-41b7-be6a-b9601a3ec402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9cc2ca-6e3c-4dac-9107-4d01c40ad345",
        "cursor": {
          "ref": "e0562ff1-0cfc-47a8-a5a1-f5529ddad0ad",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "57207557-3e7e-46cb-81ee-af83459cb468"
        },
        "item": {
          "id": "fc9cc2ca-6e3c-4dac-9107-4d01c40ad345",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a04fc4e2-d8a6-4a11-90a5-8e9efde8317f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0186e0ac-2126-4a26-bfc1-f805750fe414",
        "cursor": {
          "ref": "1b7ce92c-c4b0-406e-a3f0-2efdcddeb911",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d51fe3c5-51a2-4199-8762-e1c951692b98"
        },
        "item": {
          "id": "0186e0ac-2126-4a26-bfc1-f805750fe414",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c67f6555-5665-4345-8164-4a96e2c46bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03db2e66-db93-45bd-be42-eadafa233413",
        "cursor": {
          "ref": "7443eddd-5c7b-4325-b6c8-b145cc03afb7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a4587450-326c-40ab-a33e-f6edde373ff8"
        },
        "item": {
          "id": "03db2e66-db93-45bd-be42-eadafa233413",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a4bb1feb-267f-4043-a17c-c76da990141d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9632c4a4-1c32-4a43-8e60-e48ba7c366c5",
        "cursor": {
          "ref": "9d8723cb-bec3-4ac8-9a3c-ffd1a987f43d",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a8573df2-b7da-471b-aa4f-1ed928ce2c73"
        },
        "item": {
          "id": "9632c4a4-1c32-4a43-8e60-e48ba7c366c5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "798a10f3-5186-4843-9463-4a8e87db8039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5be0e1c-cf12-4498-8536-77d77986e575",
        "cursor": {
          "ref": "26f099a3-9522-4a1f-aa77-5d9436531e1f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "be09f04b-54b8-44c5-b47f-a83c80e2c44b"
        },
        "item": {
          "id": "d5be0e1c-cf12-4498-8536-77d77986e575",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ca8d912e-f67f-4dbf-a1c4-b76fff6c5b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52524490-0ff4-4df8-9ca8-d868513388ed",
        "cursor": {
          "ref": "8876e438-8a75-40c5-bb17-c03520f72f59",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2724bcf6-b278-473d-872b-5d892f3b9f50"
        },
        "item": {
          "id": "52524490-0ff4-4df8-9ca8-d868513388ed",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "294408a8-18a8-439b-8df0-31dee25792d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cec7adc-68bf-4c21-88e8-68b1738d6ee0",
        "cursor": {
          "ref": "98049a62-0ed1-4e60-97a5-9555473754fd",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fea648de-ba2f-4a8a-9bdd-9a47cf8b68a5"
        },
        "item": {
          "id": "8cec7adc-68bf-4c21-88e8-68b1738d6ee0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e0fb41a4-64d3-4af6-8d64-99844334074a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efda320-fa4e-41fb-931f-7596fb2d9991",
        "cursor": {
          "ref": "bcdcd519-f286-4a88-9744-80048f428885",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fad6241f-4567-4f64-8953-0f1e86ad6121"
        },
        "item": {
          "id": "2efda320-fa4e-41fb-931f-7596fb2d9991",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8766c9af-2962-4a27-94fc-0a7917d6bea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d19d541-0469-4d14-9c43-216c10954709",
        "cursor": {
          "ref": "07cbfb51-8f96-4331-8e80-fa7b82e6803c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "81d0295c-0730-459c-8825-30c21b78657f"
        },
        "item": {
          "id": "9d19d541-0469-4d14-9c43-216c10954709",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "636bde1a-b849-4559-9e43-5e92dc198cbc",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "8fdda8b8-e416-48d4-bdfe-1d0abd570a0f",
        "cursor": {
          "ref": "3b198822-9956-4c18-8f2e-f037f15e9d7e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e946391f-40ab-4486-b894-ccb7b31b533a"
        },
        "item": {
          "id": "8fdda8b8-e416-48d4-bdfe-1d0abd570a0f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e123ea9a-235a-4332-ac46-00c7ad2fe1d6",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "eaa4af7d-4e9c-49bd-abfb-5714dc98d665",
        "cursor": {
          "ref": "8846740a-fc07-4df6-8ad1-97bbd4110c66",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8ddc2e18-befb-49b9-a464-310b3c81e5be"
        },
        "item": {
          "id": "eaa4af7d-4e9c-49bd-abfb-5714dc98d665",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "29ba15b4-237f-414f-823e-39afbedbe26f",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "56547bd5-3b7a-404e-a7d1-98ed0b5a1c39",
        "cursor": {
          "ref": "1bcb2970-f656-4171-bf3b-22db780249b4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5b02d3e9-6e1d-4536-aa7f-198b73ac11a8"
        },
        "item": {
          "id": "56547bd5-3b7a-404e-a7d1-98ed0b5a1c39",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cf19c522-401c-4213-b784-425a7354af43",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ce47d630-0bb7-4283-bb61-32f9191d722d",
        "cursor": {
          "ref": "7c05b84b-35fe-420d-b65f-4c2aedd21391",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2d7ba5fc-5762-4b23-8fed-4f8345ccdabb"
        },
        "item": {
          "id": "ce47d630-0bb7-4283-bb61-32f9191d722d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7ab94d65-581b-4608-9851-8b7cef8c4257",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "78f40964-f021-4b0e-a92b-9a27f3fe722a",
        "cursor": {
          "ref": "438654bf-1375-465f-ad28-239cc442fdd0",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f1db9f5b-6954-44f0-baf2-98eb2045f757"
        },
        "item": {
          "id": "78f40964-f021-4b0e-a92b-9a27f3fe722a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "eb6ddcfa-c4f0-4e35-9abe-0d87a55e1f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eca9cb7-5aa8-47f2-90c2-fd24ba71ef59",
        "cursor": {
          "ref": "75b763fe-cd9c-4c50-93ba-fd58568b2f56",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b9f458b5-0844-4cf3-bbb2-5ba369d4c051"
        },
        "item": {
          "id": "7eca9cb7-5aa8-47f2-90c2-fd24ba71ef59",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "86640821-cdad-42ff-ba9a-2d30dc3fc2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc39152-91da-4706-bf36-76ece6b097d9",
        "cursor": {
          "ref": "1ad9daf1-5b54-4c42-86ee-93fda458fcf3",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b68fde48-787d-45f6-a3ff-84458c3cbcf3"
        },
        "item": {
          "id": "efc39152-91da-4706-bf36-76ece6b097d9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c2d02ac9-5dd6-4420-ba8a-d4363a2ccdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd0eb93-f396-494b-8080-2c4493422cb1",
        "cursor": {
          "ref": "bcb7bdae-1d2b-4180-85e1-c6d6e4ecaf52",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8ae5f7d5-2736-49de-bebd-1b7db5f66bc3"
        },
        "item": {
          "id": "bfd0eb93-f396-494b-8080-2c4493422cb1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "715d6030-7d85-4607-a4d2-217248d4e049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53339db-bf9a-40e3-8dc4-5be1b5fc26ea",
        "cursor": {
          "ref": "f71bbb3e-0733-46e2-9084-3f279b9a5e74",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f0a6db4a-b7bf-47e3-b509-057fac6fcc25"
        },
        "item": {
          "id": "d53339db-bf9a-40e3-8dc4-5be1b5fc26ea",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7caa7f14-9289-40b8-a1b5-1bdf8df59d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bc62d5-103f-44e5-a81b-1ba553a8449b",
        "cursor": {
          "ref": "8dd5a458-1030-4bd8-ac8f-d565482a0616",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b5f05d6f-8f23-443e-be15-3d2a355b44b5"
        },
        "item": {
          "id": "c9bc62d5-103f-44e5-a81b-1ba553a8449b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "00add93e-9303-477c-8750-7087dd80460e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fd01c5-87d5-434d-8d7a-7dc7b0a61dd8",
        "cursor": {
          "ref": "0d6d3549-5824-44cf-9bab-bddfe4ed7f0b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d4bf5c3-c5ac-4c3a-9d9c-39b3f0a99984"
        },
        "item": {
          "id": "f8fd01c5-87d5-434d-8d7a-7dc7b0a61dd8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1991c599-b998-4016-b774-f28d7b30249e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7b01b7-e760-493a-9d12-765fcd01823f",
        "cursor": {
          "ref": "40d9c355-d4d2-41fe-8cb4-7472d91578cc",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8083b706-0737-4304-9989-89ee8827e252"
        },
        "item": {
          "id": "ee7b01b7-e760-493a-9d12-765fcd01823f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "420ff02e-41e3-4d93-9234-fdecdb52f2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58644caf-9444-4f35-94f1-7493544802dc",
        "cursor": {
          "ref": "1f45630f-ae47-48a4-a01c-6086b75a4c51",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec09e968-6391-44f2-b632-d8e2fa08585d"
        },
        "item": {
          "id": "58644caf-9444-4f35-94f1-7493544802dc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "78bc0375-d439-4a4d-ab05-18a7adfd9ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20600f7f-03f9-48d8-8829-32a915dbcee1",
        "cursor": {
          "ref": "f0166ddf-e159-441a-8e3d-95e3c2ad587d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c514298a-648c-460f-85a8-98eeef7edfea"
        },
        "item": {
          "id": "20600f7f-03f9-48d8-8829-32a915dbcee1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3de10033-0cda-4b9c-bec0-a4da8aeba286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6ab78b-2ad6-4eaa-8dbb-f252e0beb3d5",
        "cursor": {
          "ref": "7215ecd7-d10c-4b22-861c-a6926e40730b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "63a30c8d-867f-45f7-9f3f-0fe08f3b6614"
        },
        "item": {
          "id": "5f6ab78b-2ad6-4eaa-8dbb-f252e0beb3d5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "42cb7b95-b355-4e11-9af4-c5322356a7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ed14f8-106f-4a22-ad0c-72c80996accf",
        "cursor": {
          "ref": "0ec96fe8-1af8-4526-8691-a64ec90a01dd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "58ce8e50-9a8a-4e68-bb2f-b0979d9c1f5e"
        },
        "item": {
          "id": "f1ed14f8-106f-4a22-ad0c-72c80996accf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f563c2fe-2527-4cde-a197-fe29244c4b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03892ce3-41b4-4d37-a572-a94bf64ebcda",
        "cursor": {
          "ref": "fe2a2b83-e04f-4dc0-bce8-a70d5d06e5e1",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "daaa52f5-5e17-4a8e-bb3d-8e34e7c8031d"
        },
        "item": {
          "id": "03892ce3-41b4-4d37-a572-a94bf64ebcda",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "95c412af-aaa6-477c-8ca5-337022edc05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae5e159-b168-4288-9dcb-e1adc1174d69",
        "cursor": {
          "ref": "b5d3df4f-f640-4c3e-8532-80403d386537",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6dad9e86-6369-4a22-9763-ccf8765c70d2"
        },
        "item": {
          "id": "bae5e159-b168-4288-9dcb-e1adc1174d69",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b4dd6e8c-1027-497f-8004-8b4ea0c2de41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4c85e1-0389-409e-8f15-c9ef2c5b31d4",
        "cursor": {
          "ref": "5f1384e2-1329-4704-b76f-d4cf43894ff2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4c462fdb-6ea2-49c9-98e0-4c4a01bae8b9"
        },
        "item": {
          "id": "ea4c85e1-0389-409e-8f15-c9ef2c5b31d4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7df0088c-998f-4d30-a5ae-697306563dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4238cbcd-e2e8-4a34-ab2e-3c527e448619",
        "cursor": {
          "ref": "b63ecefc-b4d9-4822-8cae-15338cfe5cd3",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fb63782f-90ef-4b0e-a6b0-9c480fcb8817"
        },
        "item": {
          "id": "4238cbcd-e2e8-4a34-ab2e-3c527e448619",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4fff782f-66ef-4d28-bc4f-249d6084b4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b603c95b-56c9-48a6-9554-421d4f59ac09",
        "cursor": {
          "ref": "2af8f3fd-b3eb-4b20-9f76-fad327e8a97f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5946e060-9df6-4634-af2a-a53cba9d6ec7"
        },
        "item": {
          "id": "b603c95b-56c9-48a6-9554-421d4f59ac09",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "74f1f866-c02d-457c-8ed1-9a3ba1ea9223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dc05da-7b4f-4ca4-8ae3-242d291b79e5",
        "cursor": {
          "ref": "001c4401-e266-4f53-8c5f-c4045e292e5a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b6c25e3e-a1f8-4882-bb7c-6d4741df6fef"
        },
        "item": {
          "id": "80dc05da-7b4f-4ca4-8ae3-242d291b79e5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cd34fe97-1c09-43f8-bb9d-b7ff6ff9106f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c135ae2a-090a-49f1-94a5-1299b2a19fd1",
        "cursor": {
          "ref": "817da1ba-c5de-464a-ae48-ad4df86972e1",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7e88f0e3-019c-42e6-9cd7-96080a3aa294"
        },
        "item": {
          "id": "c135ae2a-090a-49f1-94a5-1299b2a19fd1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f53bd998-a338-4ed1-a96e-10b3bbfac18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b8a5ee-fb9b-4b7a-b99e-a9b1e2779b60",
        "cursor": {
          "ref": "eb713845-4565-469c-9050-246d693360e5",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1b2a9576-d8f2-422c-9df4-6e0aeddeea5c"
        },
        "item": {
          "id": "15b8a5ee-fb9b-4b7a-b99e-a9b1e2779b60",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0914bb4e-a883-4da7-b6f5-81ffb70e8c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa17d26a-6936-45c6-a289-66ff0c3ed280",
        "cursor": {
          "ref": "f0f82a89-1786-4378-857c-97c00d6c02a3",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e6c2da1a-382c-448e-9c99-963c61433925"
        },
        "item": {
          "id": "aa17d26a-6936-45c6-a289-66ff0c3ed280",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "435a74f7-8bd0-4f57-9fee-4a46caea477b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2854c9dd-6dd4-4fb9-ac38-419efe27da7f",
        "cursor": {
          "ref": "635d227b-4927-4697-bd55-947c771acb28",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "35a8e10b-d80b-47a0-8552-d4fb18eacb82"
        },
        "item": {
          "id": "2854c9dd-6dd4-4fb9-ac38-419efe27da7f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0256ba8b-c4a9-43cd-9d5b-ce149a605452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab706c7-3e2b-460e-b14f-edca2a8b6aee",
        "cursor": {
          "ref": "fd176c6d-9fbd-45e1-b074-96df0ff24ddc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3937cc90-6101-4ad1-803a-6d45f96f1b1d"
        },
        "item": {
          "id": "aab706c7-3e2b-460e-b14f-edca2a8b6aee",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "da9ee34f-3b27-4410-9258-b5ceafa81838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2807b686-b7eb-4331-b456-0b554b7a0025",
        "cursor": {
          "ref": "bcafd457-b7b5-4a55-b723-ca93605a7e16",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4f667d6d-b2eb-4ca3-846e-f6ad06ed9222"
        },
        "item": {
          "id": "2807b686-b7eb-4331-b456-0b554b7a0025",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f6eae373-1d11-47ca-88a5-e79275555375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c2f340-52e5-4ead-b2c6-45f1a416370d",
        "cursor": {
          "ref": "02d222b7-0cb5-4eb1-98f0-94f8820fc21f",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b7f053c2-2b76-42c3-b274-1d9668edf4ec"
        },
        "item": {
          "id": "81c2f340-52e5-4ead-b2c6-45f1a416370d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8d1205b8-4f57-4efd-9cb2-703239dd26f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98425fa6-5fd9-4f9d-81e4-3923a5f89ff2",
        "cursor": {
          "ref": "abf91bfe-5a24-4cd2-91f4-f8714abb1038",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "88657ed3-78c8-49fb-9ca4-199084d5474d"
        },
        "item": {
          "id": "98425fa6-5fd9-4f9d-81e4-3923a5f89ff2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fa2f2280-71c3-454e-85ed-30c34885fd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a479e31-e9d2-4a92-b6d5-b7c17023b8ce",
        "cursor": {
          "ref": "119df2ce-b7ec-4e35-94d1-723a3b7d5e2a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "69f981af-5874-4c94-aab3-e3a7754c9262"
        },
        "item": {
          "id": "8a479e31-e9d2-4a92-b6d5-b7c17023b8ce",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6cfb66f1-231f-4daa-841a-4dbd0edd533a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c22530-95bd-4bdd-9e7b-93306d9a8c90",
        "cursor": {
          "ref": "a898af55-12b2-4bfe-a278-124c1256d708",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "992373b5-7c14-4665-aea2-d93e1a4d1e1f"
        },
        "item": {
          "id": "16c22530-95bd-4bdd-9e7b-93306d9a8c90",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "955cbb63-fdab-4248-a575-3c69ce2fb42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315ddc4b-93af-45cf-bf82-5ae0cbd9d4a8",
        "cursor": {
          "ref": "47aa08cf-a3c0-4420-aa54-0b1217d406ca",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eeff556f-abb3-4384-9408-4c265df8ba2f"
        },
        "item": {
          "id": "315ddc4b-93af-45cf-bf82-5ae0cbd9d4a8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3fb7c042-588e-449b-86fd-7ad328f3a348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e678c0-8cef-44f0-9bb8-42436e318908",
        "cursor": {
          "ref": "0f230ef1-8ab4-4ae4-a162-c2ba1cfb148b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dc5cec88-8d68-4e63-a259-80987c54a4a1"
        },
        "item": {
          "id": "62e678c0-8cef-44f0-9bb8-42436e318908",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "37d2c8f4-ed6a-47e5-b9b1-5c0e635788dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c4ebca-0973-4a53-9d04-0537b9ad1535",
        "cursor": {
          "ref": "277f1148-e91a-4f8d-9951-5af3ea19f688",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6e351c0f-ccdd-4970-ad61-0ca2575b05a6"
        },
        "item": {
          "id": "98c4ebca-0973-4a53-9d04-0537b9ad1535",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "265cefd7-18a3-448a-9189-6afb07c1ff7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a052cd-8739-4422-9756-1102d2bc376c",
        "cursor": {
          "ref": "94dddb22-0fb9-4c53-9813-2ec95863736c",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3c76bf02-6c66-4cc1-8b04-78b7c777265d"
        },
        "item": {
          "id": "00a052cd-8739-4422-9756-1102d2bc376c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "44c2a99d-dede-49a3-a3a0-2e5f86d36923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2db9c16-231e-4609-bc4c-9b86f75c7aff",
        "cursor": {
          "ref": "519e873f-5ae6-4ac3-94e5-f7ab19adc9b1",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "48bb22c1-2199-4d12-b00a-e8d3e8c24a99"
        },
        "item": {
          "id": "f2db9c16-231e-4609-bc4c-9b86f75c7aff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5b030744-adaf-47f9-b10b-d142e7046e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b14025-4ac0-4b33-b184-00ed12d35abd",
        "cursor": {
          "ref": "df58b288-3536-498d-bb77-610025d8659e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "75bfd577-9b6f-4729-b9ad-b01b1d0af04e"
        },
        "item": {
          "id": "d3b14025-4ac0-4b33-b184-00ed12d35abd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f1a89a5d-b2b4-4adb-abe5-a84ba66afd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436db565-f2f5-4d2b-9a73-b974cae37f4d",
        "cursor": {
          "ref": "0ff8fdfb-7f99-4e0c-9bfc-37372c3240d8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "267bf348-c2d6-4c07-b030-8b713ee0c215"
        },
        "item": {
          "id": "436db565-f2f5-4d2b-9a73-b974cae37f4d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cfd53475-2f99-4178-bfc4-cf479261e512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83fbd23-2111-48a5-bd30-c6dd270f5ff4",
        "cursor": {
          "ref": "3620f354-13e4-47d0-8bca-6dd5bd0bb025",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "761333bf-2166-44bf-a356-b4d97703821a"
        },
        "item": {
          "id": "d83fbd23-2111-48a5-bd30-c6dd270f5ff4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "43a2fe06-c9fc-496d-b1b6-078d5b71498d",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c15d6c3e-d015-4b5f-bea2-add3d8e7a6ca",
        "cursor": {
          "ref": "442aec12-5b52-4b68-baef-23400bb0327f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9593c987-6cf5-4eb6-86f4-fa7687d88f49"
        },
        "item": {
          "id": "c15d6c3e-d015-4b5f-bea2-add3d8e7a6ca",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b78807f5-274f-44e2-b362-2c506afb7e61",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "097d7f08-4fb1-4569-bccb-e34f9927adf8",
        "cursor": {
          "ref": "adb11a14-12fb-46b7-a4f8-a6a23df7a030",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cbfbb8a1-1841-4b65-a1af-ab59d764be39"
        },
        "item": {
          "id": "097d7f08-4fb1-4569-bccb-e34f9927adf8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c08f0548-51e6-4c32-b7ae-245cabad8fca",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "930a8699-7a8b-4da5-a598-5d45be553656",
        "cursor": {
          "ref": "3b18a76a-d2d3-47fc-ab42-6d3bcb319d86",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5f43510d-4d99-435d-9faf-bac5cd04fb19"
        },
        "item": {
          "id": "930a8699-7a8b-4da5-a598-5d45be553656",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "063075b1-a175-4cde-8c18-8d08d44c8279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930a8699-7a8b-4da5-a598-5d45be553656",
        "cursor": {
          "ref": "3b18a76a-d2d3-47fc-ab42-6d3bcb319d86",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5f43510d-4d99-435d-9faf-bac5cd04fb19"
        },
        "item": {
          "id": "930a8699-7a8b-4da5-a598-5d45be553656",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "063075b1-a175-4cde-8c18-8d08d44c8279",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd04822-d6ee-46e4-9f71-868f97475170",
        "cursor": {
          "ref": "2ce0bed9-ba12-42f3-9334-721b7c8ed3ed",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "af07b87f-3ea3-4a22-a716-59bc5923e1d3"
        },
        "item": {
          "id": "9cd04822-d6ee-46e4-9f71-868f97475170",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "58593524-3522-44fe-a245-71e35f32f4ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc8aac2-25dd-4a24-bd8a-259493e9366c",
        "cursor": {
          "ref": "b2f21996-848a-45a7-ab86-d07773a5de74",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "094e1408-96b0-4947-a928-12275f8206a6"
        },
        "item": {
          "id": "9bc8aac2-25dd-4a24-bd8a-259493e9366c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "62b5a57c-7477-40fd-90d3-77b2ca5a42dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}