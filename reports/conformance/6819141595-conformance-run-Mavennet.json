{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bbb8b468-451d-4451-b808-069439f63bc0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1f7b9b8c-aa35-44be-9e50-475c0e16c1b0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "53695214-b3f0-41e4-81da-8b9c12cb304f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "48ae841e-94f7-4952-8c4f-45fb6cde289d"
                }
              }
            ]
          },
          {
            "id": "dd07231a-3c06-4bd5-be10-d4b70a4f251d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9db0275d-38de-4a7a-950a-9333bdce13a0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "33999cee-fa51-4e9c-a631-44071f0f95fe"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "88797542-55b5-4a9c-8de5-c4b479395e8f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "75d98e6a-38f9-4b64-97e3-2f3586d5ffd9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1794b4a2-bdce-468c-80e2-e9947eb5ead0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c1874a9-d8b8-4ac3-ad04-f1629b1d372d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e519067-eb09-41c8-bec7-365494d955db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5ad2541-b126-4498-ab68-3ad1e537a01a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4386bf96-1b5d-47f5-873a-73e309e73055"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e61acd53-fda2-47da-8509-93c365463f3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e34f072-ac4c-41f6-a264-d88826d01dfc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "911daf9e-d66b-4811-8ec2-16f11bdf87d9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6426454b-8355-44a0-b464-9a4ee1dc5dbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc1e75ea-14dc-4709-9014-cfe5086c2707",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eeef3453-a654-4853-b4c6-2aed6330e22a"
            }
          }
        ]
      },
      {
        "id": "685797ea-abce-4354-af27-0742265b9d0b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bca2c84f-6fe5-4e4b-8e1c-cb2813125a97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2d00a18-9c44-4acc-9cae-7462991c7986",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f6d990a2-25c4-4ad9-b790-92aad91febf2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c64962-beb6-4844-ae6d-89fc9f67a7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a449beb8-7086-4aef-a292-e3d5042e20a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218d8902-e24b-433d-a63a-f0c6ddd958f0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e4039a-277b-4e00-884a-88fb68038a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67ad8e24-568f-4104-ad2d-8479298c1a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a914e2d7-a504-4774-bf6b-7f58574f53c0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9897c956-1e2b-4222-8ae6-e0ebe2542879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f654100b-5cbb-41f9-8908-2aedd42bf2eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71aae2db-fbe9-4e41-a54a-3db74455f622",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da8ff1c3-bc2c-4d82-a3a0-5b77cc52302b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3214b1-ae83-4257-92e6-b1f09f4df538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb4d8302-ad53-4723-8a88-466685769aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463fb183-e5b9-4828-82b3-7a4d82d126c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4425bb1-667e-4584-a533-161cedada9a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1b0e890c-f91c-4598-a71b-e45ebd9788f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bceb8178-5322-4117-b7b5-fbf546a9fca9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "188c0832-7b6a-46d3-9acc-a66ffe554473",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3367c4f1-7db1-42a7-8894-0666259447e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94676f65-a6d4-4572-9690-79aed8fe9e07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a8776f8b-e394-4a7b-8f9e-b19f978b9590"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72d60773-672d-4270-8d69-59226c7f1631",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aea2dbc0-7aff-4803-b45d-e67f3888ccb0"
            }
          }
        ]
      },
      {
        "id": "6d578588-a874-4814-b20e-3fd025dc99ae",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ce673c58-4af0-4337-927a-8702725d8fbc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef974b17-4611-4337-be4d-5e6af6211649",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9d6d94f3-c22f-475d-9348-0b6a39d21817",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1101e48-4cea-4470-a274-5048dd00b461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74db13b-4a0d-4fb5-8b83-0e8b7f3f2884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994653a8-c58c-4592-8124-d7d6f204bf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f825ce3-0359-469d-b9a8-5b6a7dd14bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad509d86-9793-449f-a5f3-c3a844abb1cb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986167d8-9ca6-464e-aa39-a9ded87b120a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4ecf41-cbea-4060-9d62-100c7a2ced57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edab7898-a903-4a08-ae26-a71699c18f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e56d36b-ce00-456d-bbd7-ab5bdf1883e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eeac72f-bade-4c28-9b3b-401b5a532625",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ae3830-03b7-4378-8dda-24078cd555fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0002aa36-6fdb-4d6f-a64b-45fc256a483c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237652a1-c92e-4dca-b252-593e3a4788f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd1b87e7-2367-4826-8942-d8f1a48a7c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8e5405-7083-4810-a6da-b24c3ffa6e62",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5409a9e3-eea8-43f0-a7da-336e62d39ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5a0f61-4dfb-4ee3-b5d0-fea42cf5de69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24f1d85-8718-498c-9e7c-4e8cfc8888ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4ffccb8-571a-4e23-b8ec-52c1489e1b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e791b76a-7ddb-4337-bd15-4e46d64ed07e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85976e04-50ed-4555-8566-55c6f6e3dcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1340d37-090a-4605-8c4a-137b55f4a311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1fd7db-d17e-4bbe-b817-4c508d6d173c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06a948f6-d9fe-425c-877a-18a42b7754bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6441529-2a8a-4616-8241-c65b98cd2007",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68820a98-1c99-4a90-b78d-9d021d0b7812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc43d41-7d34-46c4-a262-262d4a0feae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb92f8a-0e2f-4325-a58e-1ceb210ecaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c6639d3-d1c8-4e10-8bdf-bdf4d2b6e655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e4e95f-d008-462b-b372-0e881730f51e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a0513d-b817-4d53-a7f4-8072ca746648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ceb410-55e0-4785-8a6b-b45f0694ec7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b976f464-37ba-4d0e-8621-b0253ab0ce28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47f55c7a-e1f8-471e-b549-89843ed8e41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5816a41-bdbb-40db-bfaf-108b18e7b804",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a94220c-9c28-455a-8b6e-21c8679b0577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e14ba6b-42fb-48f5-874d-0e8d5df8fd35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5892f2f8-b1f0-4cd8-a325-bc847bf8fbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c1f12b9-d885-4699-967f-f36bb1d6fa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d3ca6-f9e0-4cae-8f58-27e10dad9dd9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359bf5cd-c472-4271-b32b-b81215eb46df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1219d3-c3b3-4e5c-9f4c-a3bf3c1c21f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb49509f-c4e6-4723-a202-f9fb9fa190b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "518c525a-13b3-4495-b4b9-bba20d6732a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a51672f-fcf8-4312-ba70-3fc955993390",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e335f873-5835-411e-99fc-4cd18a495c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d742fa22-fdd8-43e2-9a0b-cf0607557c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2ef89c-60cd-41e5-81f2-69a795120199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cef7e0ff-b29e-4552-8691-879092c8a28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ace5a8-2991-4238-bc27-13890c67e974",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2bf310-14f6-4565-b1e9-576d379c3f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754e4fd0-8a1d-467d-a116-7698da0215b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84a1893-25b6-45b4-af52-5c1ddb06d6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7dea320-ee84-434c-8442-c55ef9911d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be80e369-41d8-4e42-8088-cf1503f7d22b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4260cec-fe14-4bcd-9b07-74df14d4ac26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5b9897-8a49-4548-803a-028ed85eb501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdd6eec-0dd0-404d-b977-d60a6e700d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fea0f12b-c4fd-4e5e-beb5-c9aef5d303ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45f8b19-7a82-4d05-8fe8-5dcb5603fb4b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2251418e-c4c2-49ea-9ad1-1074eff2ee0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca7c06b-3c32-42e9-b9a0-30dc5246ab50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b05d16-f06a-445f-930f-53c1e134073e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d38156b6-3bcf-4da8-bbbd-dcde2af09108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178f23ef-ec0b-483a-a74e-a0fdd5843fac",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f8a8ee-527f-4bf4-8207-4fbe731405e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd11037b-6bc3-4476-aa75-74f555f80481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc424e1-f67d-4122-a63f-75975b7f821f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d17a2b01-f71e-43bd-bcab-69de2ed94925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5a3f0d-60f8-4ebd-9c98-f00d8b509306",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba7a6e8-b00a-4752-b43c-6d5fde353412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927a7884-56ac-41a1-91fd-082206e1c6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b820d90a-660e-4bce-8ea3-afff33baf1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16b65c8a-bffe-41ed-8f3e-4c0226b63c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b995c76-3214-4a00-ae41-359504636fc7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ad2998-9746-4be9-b355-a77ade92722b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb4c5f7-9724-4680-a99e-a953059a8ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94abbca8-84ea-40e2-b4f7-d85a8e51146c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d35b1291-46a2-4408-b092-ab97838223e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a0a863-1743-45ab-8da1-c8b2b48fe4d8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c3d275-c46a-4e61-8b0a-8d65444a17b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d718f8-fd78-45e1-9cfe-244dfa2053da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da9a80a-3f15-451c-b827-594a15e44064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c36c14d-fecf-4cd0-bcb7-0b5b8d918f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7742bad4-e564-40f8-b943-f618809ff938",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb577923-5195-4fb0-905c-84b31356e9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a287228-cab5-440f-9817-3068759fda1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465524aa-ece5-4166-80d6-54caecd2124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e54e174e-6842-4ba2-acac-60881bac52ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecafece-8ceb-4241-bf1f-2d5fdaeab39d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffb93a6-e05c-40ff-83eb-d133b12d1fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13245d7d-80c4-4b65-8004-dcc62fe48f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679f44aa-d5d6-4e05-b10e-e288a75527e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95c6fcdc-a6f0-4416-81b3-39cdc612df62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5c8538-2497-4a78-a147-1f1fa24cc641",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1769e2dd-e61b-46ba-95a8-d63a3eb61b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4554309f-b304-4de2-af04-0223d45b9306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c75ffdf-eb31-414b-b963-5017c25e6e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab8c5af-4b9f-4662-be42-d11eea34f949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96239568-6d15-4966-be43-51d489265f17",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3085bca6-f155-49b4-a189-cc6b9acb0f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f185328-c1eb-425d-94dc-d2b966fb80cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d2bf15-cea6-4bac-bad4-8577e2121554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5691bb-a636-44d3-9e35-a1b0a4d87542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae7a3ee-0244-449b-90a9-3ee3e85519b3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa40d61-b6e9-449a-b416-7b373cac0a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3128c271-4c81-442b-9f3f-3ed375358418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd1cf52-c892-4e49-b9f6-20838623b7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af843d0f-531f-4756-bdeb-84ad9de146b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebc3856-1e5f-4787-be28-bd6dbd3326f2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d54a8e9-2819-4a52-8d55-0f6eada44d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9d3b63-b808-4f6d-aa9c-25f5596da1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d999a2-70ba-4cb9-9e87-5e239b13970c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1defef85-0890-472b-b9f7-06ab85864571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26112dfc-23ea-4386-a7ba-77023577bbf5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b3d465-a6da-4550-9132-8fdf3d31ec79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652c2c8f-dcd4-4746-8024-a2b6e14a514a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24f66e5-ba85-4d69-92d6-42b150c44eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe3c74d-2c23-41c8-9f4b-4dae46daf77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddb339c-dd9d-4f9f-9617-859cc82a718b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c4b16f-7a5b-4af7-b45f-d15c4023dc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e036f079-e605-4e50-ac62-03c88e204c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a1b7dc-ab5a-4357-b6f2-82f4a24f295b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43204e47-8ddf-43a2-96db-d80a6c50dff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1807b2-bc55-4996-8e9b-f86c0a066723",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5c25ad-8b51-4dda-8803-3f91966d279f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc8fbe3-671c-42d6-ba15-3fea8dd225bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fd25e9-41f8-4808-a489-e9f14c5da04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7f312e-bdb7-42b2-9aff-3dd63c7fa65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f0fd75-2c7e-495a-8b74-f78357c0853f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735ab139-60ef-4a28-b458-2118e9348d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feda6182-b062-48da-8d79-89aed570a64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0c0092-ad5f-4107-97cf-ef1272d6c0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8235be08-ba5a-4334-bb72-2c7656b13f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed665723-38d5-4684-b12c-6720f2b937d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7682f7f-9805-4a9b-a0c9-2ebc344a9b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30300b7-5267-41af-b319-0b0f2c88857c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3afa30-1e8e-4b87-bcc1-42b6eba82328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "009ab62d-5ad3-4ddb-9b08-cec27743c219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07aad666-d763-4b45-b48c-f23a26e43052",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d299b265-7c88-4173-8ce5-c17110bbdb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a2a7a6-f3d7-415f-9792-7de2c4234b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38061ceb-60a0-48dd-90b0-7998c6ede173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ef81c3-5df0-4e2d-963d-0fa7000189a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af669db7-55c8-4fbc-ba8e-07c3031a8be7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abf0e6f-8d58-48cf-a147-e8c1525267ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df862858-6a13-4aca-a0a9-1bddba456e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da95affb-e256-4832-af52-aaa2c21c1a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "601ffcb7-655e-4f57-a16e-284453592f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222faaa4-2f3f-402a-ae67-120aa8d4a616",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e035c1f-b4be-4b58-ad24-31a0c0cf7b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c93528-9841-4ce9-b14c-3d9937663e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23554faf-e606-4800-801b-d867a106e380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9595a784-df8a-4d37-900e-da9d0abb4c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ace6d9-8372-4bbd-9ea4-d711fd654a64",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5a8af7-eaa3-43b3-b6a5-76b4dd75df9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019b2878-eafc-4c67-af54-f9f59f8ff89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e1aeb6-e622-4e16-ac63-4ee20dd9a085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43dabb87-0e4d-40f6-a5a7-30c2828e7622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77d0052-aeda-4cf9-9f9e-b523459ec75b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e67a40-ec87-40d0-891b-884b1252b390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec195614-c3e8-4ce8-bbf3-fb5e55a647b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55ee649-7790-462a-9e23-6020db08667b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f568a06-e8d3-42e0-b173-193650e2b45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c11c57a-c626-42ce-9064-0581f64d0061",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b98c6d8-c1ab-4583-ad27-4059e5d7065d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68f9b28-ba68-45ec-b9eb-deab1a238e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f01653-b8d8-4b42-b281-ddb573372a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "780d6df2-6e1a-4659-a8b6-d7a8f8bd6196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e414b93-1acd-41e4-b055-b0982fb721ee",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e575ff-7b5d-42f4-a012-10db1450e731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033ddb1f-7975-4616-b7e2-27652dac05a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85837e4-3a77-423f-bebe-ccf6418f861e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "56d66688-171a-4227-8b83-bf5178498a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f921d14d-19e1-4521-a423-c989cb8c582f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6716cc46-00c0-43ec-8664-f2349c2f1caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a40067ae-65f4-4ce7-8186-b5184e62d02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268ec902-0391-4f77-a2a5-6d22d813bfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2af9c31-09da-4a33-afbc-19fe7fbc1c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b201514-75ab-4173-990f-6d448740ea0d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc97f050-50c1-49ba-8ffb-f1184ce243e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce485417-4ff6-4429-917a-57731913e664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b07d4b0-0767-4f8c-8546-d6b35eef3252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a50ae4a-2ac1-4759-9ba1-23a4c709f274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7421c7e4-0d4b-45d8-949c-cebede4122c9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ea1054-2e87-48ac-9216-2b580ebbcde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53492cd7-c6bb-4c6d-a688-db091c5a5d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4afefb-f533-452c-9c6d-1e75111ea986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c43a683-a4b5-40df-a330-4b8178015fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123648be-4b92-4b51-a6dd-c50519d0046e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65267711-ef7f-4a5f-af5c-744ddad84b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "134b4d12-c96a-4ab7-a105-fa912b8751ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe7d197-b318-4ce4-9380-e47d10564402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "abd4b427-a6fc-445d-a314-d7c028c24237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b0733d-b6d1-40ce-8c77-2f46bd0f8ae0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2286d469-fb82-401c-9377-d6bbb0ebb484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21616f65-1d13-4a1a-a2dd-eca81da59b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bf394d-cffd-43ab-ad33-4e24060a446a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe489f2-07d1-49b4-a556-1049d2e3fae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fa6b64-6c30-44cd-b7e2-ba6f43e95b3d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f636cd8b-1c3a-4506-b91e-4bfc6ab8abfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664ca466-5ab0-4983-b9de-4250d7068bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4976f5ea-a919-4fee-ae63-9d3ef4f4c628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bcb452d-e4c1-43e7-bd05-a19dd3b681c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd6491b-011d-439c-bc2e-b1467c844c23",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62117a91-f1a1-451c-bc86-5f687cad8e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6f3aff-8f2b-4df7-9fc5-5c047cfd65fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e32a15d-03e2-4ea3-bb1c-43a3fd933c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dc0a46-e7e9-428c-b2f2-15002835e793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78308f16-f061-4b8b-8244-caf6967dac50",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46a3a80-62c8-42a6-9dcd-44a79651f328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35fd136-3642-4125-9615-cb2a33a58e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740ad800-512b-4b17-a99d-6bf5e0326939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ba4491-c9c1-41db-8361-4267613f364b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4667561f-51ef-47d1-8fa0-16932b1df985",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e5965a-0e63-4266-97f2-e4bf3dba1c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfd2b7e-8f1b-497e-8ebe-d51f43c0100f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7e9c95-5677-4afc-a351-e81c1c442362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e95028b-63e9-446c-a7c9-61f23118a184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fa80bf-4135-462a-9199-13670c52c3a5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6754595e-d79c-4c71-a8ba-46965d478826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fcd90f-77bb-450d-83f7-8d90a170b227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12405d53-d023-4286-8305-d849d76e740b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "272b52e1-fbb6-4003-9cac-11cff74cee40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004ebac2-5365-445f-ba6e-d9b984e8dbb8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9769ea-6903-45d6-ad23-157c982e855e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27261ca-c399-411e-85cf-22ab52198f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1a731e-815c-4ec7-9a15-e93e3ac4a8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aaac187-05a3-4b57-97e8-1988ab01972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64506df3-6349-4171-91ca-506cda398c33",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798919b6-e6f7-4277-ab2f-5b121a6f7367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dffa7af-b317-49b4-81c2-5127acfebaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683c8c4b-781b-4079-a649-1b74133d0dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d64a2f-1a13-42fd-b3af-a7a0ac88c23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f1f867-d664-42b0-9182-f5db21b0a497",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3aa8c8-0a74-4039-b417-a05f6508646d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9dc1ff-847a-4379-98ac-6f535d70c867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc97a79-e9dc-42c4-b5ab-d2799868572a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95799d80-8ecf-457a-8587-16598c493342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55559a6f-3ae2-456f-840f-ad8b131409fe",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ee15b3-871d-4337-819a-38aec66ccac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fe1904-c238-4543-a96b-80e2f0e0f511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d87e204-06e1-43db-8010-2026826dbf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29346408-8a03-48a4-99e0-9f3158aa8c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1363eb4d-43ab-417c-b49e-dba1c4d1f8a3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6e581a-8105-4fdf-84f6-92ce37e33d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ae01d0-620b-4c74-9e93-eb6d364444b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7beac5ee-868d-4ebf-a498-0148d6c0b869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5939f133-2dcf-42fe-ae24-1d8ecf76045f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796162f2-7a72-459e-b4b5-6b94d4421e5a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d87d3d-27e2-45cf-bb0f-cbe7f19e6572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c170fce5-31dd-4cf3-acb7-ce7235438a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1c2578-494a-4c11-9353-82f1c30cdd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a637098f-ecc0-4d8c-8745-4ab6173ede63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5794de27-17d1-4df6-9e44-3f4f32c19ab2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf45ed91-2dd1-4ff6-842d-6f120c546cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e97f217-f167-45e7-92c4-8228b35dea21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231e0a4b-2bca-4ddf-a90c-7205fa857682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eed9835-8646-48af-9aa6-28a3ab70e3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cfff4c-8760-4478-9a11-edd8528d3120",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d118aff-b018-4d15-af4d-1cc7610c94e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac04460e-3449-42f6-bb07-22df681e4463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96f958b-4a58-42d5-9bdd-074f9a270290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c67c9056-5d80-4acb-985a-60cd92f7d40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbf1d24-9814-4e18-8bf1-876328c8afd4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0830d0-e598-4dad-912f-b66a423f1439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4d9cca-348d-4a87-8e56-aa631aa4a8e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7febc68d-5b7a-4c5b-97a3-b6f85d9a31b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d06f598-3d7e-4e9a-9589-c53b85fdedbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e551f7-52f2-4b6f-979f-d7c6a448e11a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd54c60-b384-47d5-a1b5-dc0c4fa71d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55eb54cf-fd08-40dd-bd0a-dc1ac41339b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99439c44-0304-45b1-8b12-78ab92d5aa9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e760ea4d-968c-46e7-9c15-c4d19a65ae23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b46407-60e4-4588-a928-4bf261163656",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447dd58f-96d4-4d6d-803c-e95fd6fc719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef08a55-2c88-464b-bfd0-440330afbdcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897b20d0-fadf-4cf8-ae64-980dbb5fbd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "164ca8d7-60b5-421f-9abe-99fac60dbab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3142cf-4cf3-4ead-81a0-dc90eaf373d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c73e7d-33e2-4759-bb12-70d2ce6fa4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40715681-6b16-4746-bcec-57cd18a0d5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f09ac77-e4aa-4a8c-a7f6-64bdf41fee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0586a32a-a19c-4a14-a323-b2bd18d404d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42398d06-0a27-47f0-9374-8151f85a9d47",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c2299c-a045-40bb-878e-8cd918121a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a86beb-314e-4e33-9781-fe8a136d33e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38bee0e-3df1-4397-8a4b-ea6375644625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68bb098a-fa2f-4b2d-bc04-64db269f6992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fded3f-6e6a-4df6-91a2-795beb98e619",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf8a49d-9837-4712-93cb-b5716d3b9386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00ebbbc-ea59-4d44-93d7-1bfaaf1d25b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3a6446-03d1-4627-9426-b894faf0adbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca247938-b51f-4bbd-8d99-e1945a94cd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12e08aa-9440-4ade-b312-efb148b020f1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccc8a77-e1eb-499e-9a01-72bbd6ee81d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e25f5d-c70f-494d-b8bb-6994f0629ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4881c2d5-89d3-48a4-acbe-072a7e004f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "570d7216-2b0a-42ad-8587-c1df01ed7f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97c1034-49e8-4c3f-8b83-b06603767b97",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e1ae1a-6365-407a-a133-d6309d594045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6259a4eb-f1d6-45c1-aa5d-b638af5c6b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40770f1b-a371-47f7-ad6c-20c67959f4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c5550c-ac43-4355-8aa4-92aefee62d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3e5b7c-d2f4-4249-8388-244647c0c376",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0346ad-8a6f-419a-be57-37332cb40414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07320559-a722-44d7-9bd5-ef88d37c0e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcdfddd-c1d7-4249-8372-9b9641ec5872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0542c22-8998-46cb-b922-8b977548ccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcce1007-2ef4-48be-8aed-5e52789bcea7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7a02a4-89a3-4cba-804a-28a5cab9516b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5d1af5-4a07-4246-8e62-c7e4248dfcab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046623da-859f-4338-9420-975fd98001ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab26f75e-9850-44f8-bf19-fc505eb4e323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5812560d-66b9-4646-9300-52302a1f881d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da07d325-b154-4ce1-97a3-5f07ea7a49df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4b1737-5c99-4abc-9ce0-c0c8327c0116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608565b0-9f6e-4272-b994-ed295eec7846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0854eddd-e74d-4c54-8be2-633912e8b9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde5211e-c546-4f3d-b5c4-b1ee0b694cae",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa9086f-02b6-4f08-be39-e5867e188bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e3a5a3-2ec9-42b6-aed9-d099e6b24349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95050cf-6fcb-4d58-8a97-70ab84ab6492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16975459-71ab-432c-9948-1e3c5a504011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23642356-2115-419b-9b7c-e040ad56ba73",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2ae6e8-4a9f-4216-868b-2d789699dcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c98d9ee-4cf0-43da-b4db-1c7dc9a39c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216ea01e-b9da-4c2c-a48b-6b04bc2083ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bef2f93-3a2e-4988-ae68-816c80611a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e113235-aef0-4abe-9cf6-7898394da52f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c948f4-8662-42e6-9f8b-763c7ef7467f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e338e364-f3d4-4a8f-ada1-e52e6539b0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5af15d-1e0d-4b2f-b93b-956cdf34dd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c91a2c2a-66eb-4148-87ba-2cf5f2ee9ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5eb72fd-cc40-4c61-8caa-d81261a5012a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679effe4-636b-4a7a-92fe-4d7e01b69e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0620de14-d67d-48c8-b2ba-8cf963a64e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4757d791-e6e2-4cb6-b058-c970e99a492d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17c822b6-caf5-4ea6-8bc1-d1e6070a2032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e947ad-cda2-49b9-b5d7-2d97670549f7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1679d06e-acf0-47c0-82cf-05afbd34ee91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab43e05c-0b41-4272-a6fb-b0d316c375d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a22bd6-ed8e-48ea-9dd0-5ee0359e6fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "319bf674-4351-424a-a954-b5a387d20d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956ec7f5-2d03-4254-8b36-d68158956b90",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317a00c0-e717-4c20-9249-61f537fd47d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4131f398-e2a4-44c0-b7a5-49184af41fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57664b00-8739-4028-897e-fe349d129a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79a7714d-8225-4b7c-8138-92fc32d80553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641baf8a-9c53-411c-95b3-8e1b2f756f83",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6958837e-d9af-4340-a8e3-192950337b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d748def7-27e8-435e-8002-26bd018d5011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb939a36-391d-40b9-a197-7cce5586aa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ab8111-164b-442b-87c8-d1636f6d6b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00133b9d-aded-4c50-9640-6eab8b0bafd3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a301fd-1a18-4ccd-a4fe-81e6fb9cd706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa1f0dc-4e14-4ac3-bf1d-df6d90eefe61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9782049e-9fa8-4265-96c8-1d8a04d37886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32295af8-a3b6-4014-88f6-fe83129a269c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44b7115-2fe8-405c-b394-9afd981566af",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff663ed2-7087-442c-bd3a-87afa7627b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072935c1-2dd9-456c-b3f0-01e8e44eadda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd5edfe-05f8-468b-80fc-7dba8c894670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc1e538-beed-4fd7-9f9e-34901e9e9382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e5faa7-fb88-441a-b857-d575e1b73a08",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4359fd0e-22a6-47b0-8435-800a8220fddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6fc424-e2b3-477a-8941-d93734703cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c34c6a-41bf-4767-88e8-d7eeb8780502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d36456d-b1d5-40d6-b63e-ec250e65fe5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285d16d3-aada-4d7f-99b7-e9218ed66abf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b7b8c2-3f89-41ed-87e4-47c698dc42e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff535cb-abc3-4e9e-a265-ccc992e553d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd591aae-bb94-445f-898d-cf56b45238e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "85455472-4cc5-4fb7-a8c0-643ae456a397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff216ab6-f92c-412b-ab8c-6cdf66976a21",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446bb601-fe20-4b66-954b-e030d3e5b3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf2e687-16cc-446c-ac38-836f14d2a44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92947987-f470-4c52-91fc-cd41c2c858b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f37da26b-f5da-4582-b4f5-523bb4b76d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8efb55-c25e-417b-a6d5-b0f99e020a52",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f747bb96-f76f-4dae-ba91-0f42a37c10a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb967ee5-b491-4bfa-961f-fb28ed7518e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32b653b-0ad2-4045-8b5e-129f44333855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8a3668-de1b-42be-9c81-0525208db516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c1129b-7f06-4b34-902f-89f930f34309",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91df78c-3f9b-4534-97a3-d205a1e610a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6328fa31-81df-41d3-bb2f-780fa5b55b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c5f997-a8f2-441a-a0c6-37e899f36164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47c9f7e1-2787-409c-baf1-1c2694784454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd99557-0cdc-45d6-9960-a97072b9735c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c010b6b8-b02a-4f95-b5c4-a245e05db291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d444bba-9cb8-48e5-b586-71cecaa0d1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d3d024-5ef8-40f6-9221-c75123ecdf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3ab6a8-dbdf-4bcd-abd5-71a532d1737e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafae0fa-711b-45be-9358-717d3f2281ed",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe1d0c9-955e-4fcb-8eb6-620f1be43230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf43340f-c32c-411c-b5f3-ff90edfaa097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741bccf4-490f-426c-8470-b188e7abb4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac8197c-a4d4-45a9-8ad8-a3f3e048bef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b7d430-e2c3-4152-85ce-0bb9f814e501",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab4f069-8511-46e0-8079-adc290c82719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5873808-e2e8-4bb9-b234-c571dc500505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178c936b-291d-4e21-9ee9-c8ccfd0d320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f2467e-b102-41f7-adcd-efa0b4ad6042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10e77f1-72f5-4feb-9043-b1daac484412",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba698bb8-12b0-4808-bedb-afe2f8fbcb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a2a183-36f6-4eb1-8714-8fd5e539c9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c46aeea-afcb-4bab-b146-8026a2d0b9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26814506-623a-43c2-a496-4c703ce463b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70048a67-1de8-45d5-bb48-492b78ea4513",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbb58c2-5245-44ff-8677-1d0282d54563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa908c1-d26e-4289-bb01-e99212be2c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a105cb09-c835-44eb-b412-5a4762b357b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79954efd-48ed-4f75-85ba-c2534d96539e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9b4da2-ba96-4c21-a519-cb10d6fb50a2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36ce3ea-c964-461c-a563-12826d47f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a7bb12-4b85-45ad-8610-8695dd2e03dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606e3efc-31db-456c-9b4a-3cb24860a24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc423b7-09fb-44b5-afce-a43082a8983a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1406df-ae52-48fa-a640-95487f7deefa",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac34cf1-4633-40f3-a667-eed63a08a2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2116192e-d8e3-49dd-84e0-0db95d70e46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af8e1ae-824b-46ba-bdc3-135c257fbc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c5eb69-9333-461a-a32c-4d3ef4ade6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c9ea2f-347f-4d96-80ff-b38986ecec87",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47109140-a33b-40f7-a1ff-5a639353f723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1573be60-017a-4396-80e3-3cc4cd09a854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3967af7-696e-4ee2-9c60-940fd625463a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edf3c34f-b17b-4f9f-a52c-facbe3ec1c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8346e59-d0b0-4ca8-83fd-100da7f5865a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386f0934-24a8-4f3f-a626-e54c7344160f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666cbf98-9f76-4947-bd47-c1cd4fb0fd26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cc365a-6175-40b4-b302-7798f12e35a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9477c4-e681-4b7c-af08-9ec9eed74775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7ffba1-f608-43d9-8814-e281a1309dfc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee1f69f-0683-4966-bc0f-31820d0cc156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0567f2bc-c705-4111-b289-1c6142229797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ff3526-f52a-4a34-ba29-a4ebc8483874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c6f4aa-5eaa-4fc3-b95f-87d0e6de4b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45c5b93-0320-4d2f-903c-50c7173b3b72",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273da58d-f859-4541-957d-65b1f3d72878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52d1755-b232-4d95-a60d-0d2ef2663ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ef634b-89db-4da4-8794-23893dda70d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "27060044-8bde-4c4a-b17b-2d3243d07c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec086d9-2b38-4ede-93c5-a47c591d642a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e34cfd-84ea-4deb-9e0a-c3c12253aa0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a2f91c-5b91-4f1f-820a-da7a23cae5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22eab63d-c4ec-4d6f-8908-7db571b21886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a42d8b6-f028-4149-a2e2-8294dbc709bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0a7431-50d1-4740-9dcb-54eb1e070fe8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2f0aaf-bc30-47e9-a911-5ceae128003d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6f7ba9-e7c8-488b-a75b-b7d058b54335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884cdfea-90f6-49a7-a6f4-ebbc10d8d694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "398cef2c-47c7-4a38-abb6-2cb61db8be66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ed9294-557f-431f-9645-bf9bb8f9d10f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f61f8eb-acb4-4204-bce3-e91dbb61d054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "265f55a2-2a2a-499b-9e14-f0b51a9b6f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd742e46-2ebe-4eac-a31a-1a7c833343f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d90807-a789-45d9-b0b4-71b86aa8aa32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "703763bf-beb1-4980-aa4c-eb84dab92dc2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d17abf89-a75d-40d7-b9c9-14af3c6303dc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d01a674-419e-438e-962a-bdf678f2841c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c1db7ab-2401-4418-be3e-5d0c4b7828a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19f1a29-3899-4df6-8793-7d6f3e2c865a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ff5ec35-f3b3-4584-ad57-8c9d5c469211"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4604977e-b3f8-4510-93dc-366f35e74f25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bcc81a8-e891-480f-b2ec-879ff295b6e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33312167-d38a-4bef-a8e5-613859f37e07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cf13b46-d4bb-439b-aae6-81b23e8cbb3e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ed4f44c4-75dc-4b02-88d4-8d944495f7b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e751159-dbb4-42cd-b930-3af8689d1d4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1b10446-8501-4a70-945f-d1500ea79c27",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1791b9eb-4aef-4019-ba6d-2883bb9a126a"
                }
              }
            ]
          },
          {
            "id": "beb792df-4425-4bad-a426-f5c69ba88177",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9624924-c3ec-46e9-a39c-335b63b29fdd",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6c9132a5-58a9-4fb0-aaf8-3a649ddcc476",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdec0bb-b7c8-4b75-a52f-b32b2057454e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e3dc50e9-b077-4023-99e5-295671b6cb9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2cb42c-12d2-4432-8a41-90fde19c7542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9fe84b-a89a-4cda-b4c1-e2168b7d2ef9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9103ba56-6b5a-41c9-8341-926ad5a6ae78",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "195fee03-7b8a-4e13-ae32-93d9aa0211bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c79217bf-3708-4bfc-8785-19ad24ca1f5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa82f1ec-1b83-46e6-b195-a666676c769e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "482aa3e5-67d4-48a0-b2a3-87456a726181"
                    }
                  }
                ]
              },
              {
                "id": "32427b3c-6cad-4f61-b165-732ff7862125",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "944c29d7-08cc-4151-8a85-84bfcf2192f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a828f726-3939-486d-a90a-fc9557fc54e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fea9c132-c3d8-4e05-a6da-bed2d7ad5b13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c9cbfb19-4477-43a2-afaf-562551d7c46d"
                    }
                  }
                ]
              },
              {
                "id": "478996d8-c976-40fe-b357-ee6b997a5a19",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "214fe169-46de-482b-ac0b-6bf61dc34025",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1abde926-cc15-4228-94ba-60983847cedd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9fb0a35-3d5c-4d2f-870e-091c3d0c9115",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36645d54-5854-4c21-a6d4-75b1be5cb19d"
                    }
                  }
                ]
              },
              {
                "id": "c4872ea3-8d93-41bb-98b5-862a655d127c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b5a295d-df99-4a64-9792-0a0d1a2e84ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9934bbf-8d8b-4411-b2e4-be0eb1c3d668"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc556bc7-6888-4489-b41a-5e62dfd5e950",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "33b68e59-b6fb-4918-b6c4-f3627e9b8887"
                    }
                  }
                ]
              },
              {
                "id": "d650acbf-f688-41a2-accf-790234a1b72e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d83196c4-a78a-4579-92e4-63f43c912459",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8dc46b9-0b32-466d-a93e-13fd93bc8d23"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42fc7adf-c915-424b-add9-589b1839afd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "81dc60c8-0ba7-4d0d-8bb3-c0c3fdfaf5bd"
                    }
                  }
                ]
              },
              {
                "id": "ac3f262e-fe84-4cd8-a64b-2039d2ee6541",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4251b3a3-23df-411b-aae0-65196c792ba7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "410ce1b8-993a-4757-96fe-9320752db15a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9949cc6-724a-40b3-9ab1-191495d0988f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a64a9358-455d-4d8a-a7ee-70329ae463a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "278031f0-687d-431b-ac0a-37aa61e4554d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2f48faa-46ee-458b-91aa-6a91947e0b54"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6eb82ebf-81c8-4485-a9dd-388ea1c7e2dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96fb5a2e-d583-49ee-b2c8-ecd232df3a1b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e4ebcd0-1bf0-4529-972b-0cd308950700",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8b7f0262-d0e2-497a-9cb7-5b310e23e7fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc8eb933-bb03-4f95-8d13-38e2c9ed8632",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "798e4930-cb3d-4a69-b38a-ccd618023735"
            }
          }
        ]
      },
      {
        "id": "f5a25e95-60e0-4581-8275-111ac15db6a5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "06d92f89-e818-45f7-add5-3400f4a92e4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05e5b513-9fdc-416d-97e0-ca3b5c2c0fa7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a5ad1fa-fbb3-402d-8e98-0978fb762613",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5978d86c-7243-4d28-9855-b637a488fd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a0bc4a-1ed5-457b-bc7e-7276c3020bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907d37c5-38b5-4137-ad94-5a528c755108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6902194c-1051-4154-8880-dbdc854d8504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b21f97-8610-4b1d-9485-8a43f210c378",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ffa6ae-8d13-4701-a3b9-e23bfab9f97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45a2031-18c4-413b-bf61-2936d4f3814c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146829aa-2f4e-4e19-ac53-fde562c6fd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed450bd-5a0d-4d16-ac47-4f3a867e240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912d94b9-62c3-4a1d-bbde-fa5caf5b54c2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c016a2bb-1eff-4790-a0f9-aea66bd8c51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c4bb9a-1049-4b9b-a7ea-90854b892cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ad98ab-87ef-492d-9ae3-f81457b5dd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b31d844f-db92-433f-b8e2-319f1c425327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18fea51-96f6-40c2-bb20-5c583a8a4b5b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb1fe39-4128-4a90-b0b4-f8472201e66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fe0102-3817-4c7d-9042-15be1928111b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37406b63-ad71-410a-902b-5076abaa8c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b91b1a26-1e62-4aea-b581-31c2d5d919a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d347f2-f568-42e8-beff-bf9ff4918c01",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577d681b-0f8b-4fc4-a3c0-7501ba0e8df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c66adb-cea6-4c56-abdf-4bc510fa4587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281c2bd6-aa45-4ee6-bc8b-1e954eed177f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "899c6c10-966b-4369-9dfc-b89ef88cf4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aecc98d-6c5b-4a44-8d17-0899d951569e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fc31b4-ee2c-4926-ae7d-8138e3bf36b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb678bd7-9f4b-4a80-8695-61bbb544909d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fcec8d-d77b-4f06-8410-ed9a2bde6d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b74f8966-b3b0-4d6c-9ee4-cf01603d1841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e953973-d6a6-49c2-93ca-677b520cb79e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414b3650-de79-4405-8358-47c7700c3c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291c76d4-e08f-4af5-b399-db2c8e6b5f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7ee60a-0a82-4d46-8f1e-7ccfbdb178c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4f5b2a-f73d-47d1-b50e-99c98d25b075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0e465b-6d03-41ed-9aea-e5e621f129fc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d83ed4b-8156-43ad-95f7-509d2d96572d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59315ddb-fffd-4474-a445-9367fb2f0e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b68c84f-beb9-47d5-9486-9a56b962355e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5506d6-fa55-4d85-940d-85ce10559cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9eb244-636e-4533-9562-3beb6d2d8458",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c81808-0a6a-41c6-be00-c4958f7a183d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ef635b-44fd-4333-93f0-bc55748e0f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be3d006-a667-4051-b57b-9fa522f3f654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e32b49-0b69-4227-80c8-fc709d7ab7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cca6d1f-8473-421b-9e79-73eb6a71486d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80b1029-2a41-47ea-8ff8-6b6f3dd8242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9211dab4-0c2f-4b14-8ada-94f1d0dfb00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b111fff5-d746-4c73-9d24-22e38c2bd72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3433c5aa-13d3-434e-8d20-e473ef90bbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7fc6c8-cd08-4256-afe3-9e5f6e0accae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2effe5e5-389a-4130-b4e2-8553a8b511d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf25bcc-5310-4a55-bb65-5f1f66f45586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e2dae9-6e5c-459a-8d18-fdf2c476939c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cd5718-3d6e-4606-9a86-cb7f9e9c7284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4d8776-2057-4393-9aba-ccbbaa599219",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6226dfd0-8a9d-4634-9d67-563866fe3c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad9d9ca-5ac2-4584-8754-330c4b91dcfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3df1ca-698d-4f74-b037-4ae3c47841f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e02ff07-e882-4a41-a33c-28f36cefaed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299b58d1-32ef-4907-917a-1ad4cafb5786",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b690b7b-779c-4324-91ba-c87908f248df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42642d7-8ec1-484d-b84b-df7148502ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97db0f4-2341-40d7-9844-eb4476222bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d83e2b89-6aa7-4448-ae96-da6c8015491f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a52811d-26cf-4505-83c6-0ea8272ab123",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33902faf-6e5b-400a-bd47-2f8258f5d9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4014cf8d-8b8d-470d-a57e-1f4a125c4de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c39e3c-7b3a-47e6-bf6a-36146354a7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd75831-32a9-49de-b1ab-768cb48d82e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645ca933-9d15-498f-9e67-97df6808c4cb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fdf7c2-3aa5-4af1-8a0c-c051a5b831eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4849f9b5-9ebf-4a0c-9506-bcb49bc2c469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e29c78-8f59-4ece-a733-f718b6c3d7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "34670d7b-d791-4d51-947a-536f1dd362de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72718fa0-e1f8-4df3-b6f7-acc25d484c30",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5fb285-3469-407a-91c0-5002f4918d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1630c34-647e-42de-a3bf-18ad40e701fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fc6e71-b781-44cd-84bc-228a07719123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeead157-a8df-4caa-b208-fbcf15cd27d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8c4ded-9142-489c-a7ae-200d228b5739",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6b5192-f833-447f-85e1-ff28040e5d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20be042f-b235-46ac-a8c7-e76e891d19a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76da8cb0-cb98-47ac-b76a-3b9cf521597c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4944f9-f7a2-4100-8e44-ff10db18e6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df02fa4-c59d-4d55-b40d-172f7837831e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea954ee-3c05-4647-9102-d68199998ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f57bcb-af54-4f0e-85bc-adbeaeda8930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ddf063-0e10-4b6b-b10b-0521a738a452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "90dba57f-bddc-44a2-8a10-6f45e4ee3f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56633c5-c8dc-40d5-b056-a627b7fa22c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7591805a-aeae-4d5c-b3f0-55a7802821b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5c9a8a-6a47-4a2d-8549-7f92529ff8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb16d48-8fe7-4606-b766-7fd4c8682daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65ff2aad-7af3-471f-b598-b193614605b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a973ded6-b6f3-41e8-a9e5-60b5b8b64545",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7f5da7-f371-4184-98f9-f4ab16cb5ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a98a6cd-657f-44db-bb74-940c88a07ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93613051-eceb-4581-bcfe-fbbee8257083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2b7fb0-43b1-4256-b73d-f442465897f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dd36c6-f6f7-403b-896c-7c010ed3d9d0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470dda71-2058-4ad7-a21a-c2a0b6ebb491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbc2766-171b-4f19-bb7a-05dda76a587d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee4b549-2ec4-4002-b9ca-b61013005911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb72943d-322b-470d-b231-7377ff1752b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb072b7-ba62-438a-bc2d-cbecada77d5a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79406ddf-3b3d-4138-a41b-7c8b6d6f0d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aeed052-1a8f-477f-8ac9-6e2883a7f617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15dca5c-7dac-4197-b6f3-ee6ebb7dedab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf525702-ebd8-4a6d-8708-0bb14a2689ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dad0ae-a22e-481b-9eb3-c572f44e04cc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9baa25-63af-4911-b5dd-4a4e05a78ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b22e550-a188-4a30-b5c9-4c7debcba94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41011a79-1a1d-43be-8f24-d812508f2bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c6e38d-2fdf-4076-a696-9a41abb452db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97a4fd0-e75e-4b8d-ab31-894c6f7d3146",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3acc51-e192-4db4-b813-5862c5359adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e225233a-19a7-4e5a-a9e7-5908a69baedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf91b9d4-88f6-4959-af61-7f480c3e2bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f653ae-d5a7-4e91-9b3d-36d169402b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f38447c-c475-4ae5-ba34-611a84ab4e81",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4064c37-0fdb-4216-9192-fb1edc5bfde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e7e019-612a-471a-a43a-3419b3e3141b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07ef59f-94e8-4b40-89de-6660d0e7ec87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18de0d43-f0ab-4791-847b-d8dcdc54873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c3f802-d98f-430c-9e44-b97c47ee5a95",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593ff2bf-0e74-42a9-9263-e0d0873aee4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e239b84e-7a97-4064-ae1c-fe84eef84118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d048c14a-2683-4e6e-b0b6-19bf690fdb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5edb6a34-52d6-4510-82f9-e5be631dfe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06991855-922e-4082-9043-8dac1da24da4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f6274c-ac39-4fa9-b09f-a48a9af32d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3ba041-e71c-4893-ae6b-7111e404eb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc47d42-c88f-4639-8943-8627a054bab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c0a4b6-5513-4e54-897b-1d132fd36128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8071a861-b14a-4dc0-81a7-a69d3d1ead59",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a42712-c852-499a-9700-2dab8ffac69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c69cc94-efb5-4d17-b33b-b51ca8ee63db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc0016b-f6a3-4bbb-84a9-a91b517a2e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3675211-f380-4a49-88c4-d9b972aac022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3adcce-311f-4ed8-8761-41655632d852",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75199fc8-5dce-47e1-b62d-fadaad37cc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a60f39-258f-45ff-ae84-df7a59f2d566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea28daf2-a9bf-48b0-a515-21ccaaa8050f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02dcc633-c570-47ca-ac2c-aba6abee52d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86555f27-e221-4dbd-bb07-e78a0e8e896e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f6a505-ec48-45bc-91c9-ebcd830f77f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056fa02e-d99b-4a92-abfb-b9c1115c1772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c1aa20-1c14-4e66-9f0c-53d461631bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c87424-ef61-4ba2-87c8-785d3978f401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a887b5f-b6ae-4138-acd0-6116c430d634",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9758b9-884e-480e-891a-c85c4a914709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f1b136-6bf5-4fed-915c-f8080a8459a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60cfdc0-ee42-4b74-bc23-5ecf2135a1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c9f41b-10c1-44b6-9c9e-86f7dc72821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dbea56-64fb-464b-84f9-014abc36812d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7d5ec1-2e34-4aef-a6b7-a1626520372d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c609f500-0422-4a85-aa19-e695f3e85f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f42f3bd-9f7b-43bb-9166-d7bfdd84f699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7967b944-a1bc-4043-988a-6103969a4bc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d3256ea-c51e-4ec5-b00a-ed5b7bf2a5db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8316e92e-3f18-47e7-a5ed-1f1e35a50c2e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee201b79-a54c-4a11-92ae-17a2ad0b16ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "28783d26-3750-4942-a557-d90d124c7755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c56b97-f573-4132-873a-edc356dea62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ac62ebe-d188-4443-affc-16c41e72c758"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0af4d466-fd7e-4d4c-8009-cdbdd273a2a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8905e02-4b2e-40dd-84a9-9a69916319c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01f92e11-da23-455a-ab1f-9a2d9e8e2fb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18114a30-a673-47bb-9557-00db8493e019"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "206e39cb-e3a1-47c4-83d0-833f780496f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb85f2a7-086f-4ecd-9c13-f8fe60ffbccc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "880c3419-8e0e-4091-8d2f-375a9d9fe9f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42f03507-3e76-4d82-824e-ec52c2bd1497"
            }
          }
        ]
      },
      {
        "id": "3507a012-d434-4ad1-9ebc-2d4b7bfec82d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "68f4d85d-9f6d-4a94-be18-0f09d0154db9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "415c63d3-abaf-4936-bb04-2e54025c0d2c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "022674e5-36c1-45d5-a268-47cbebc579cf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a17e8d-a771-4c3e-ae23-c720dff82cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a95e5e1-3f1c-4390-bc5d-a00edd443ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c318d2-be01-4c71-9e90-ef856372768e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "230c0586-0f56-456b-9c21-6123397cee5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bf7bb6-27a0-494c-bbd4-cab6083a49ef",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005fcafa-8312-40e3-9dd2-903f2c5f6d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb76099-0f66-4fb0-84ce-33e4b30582ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c48300-56ac-48f5-bdbf-0b57a14e49e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2621461b-a274-4d94-8aee-e4c31cda8a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6303007e-53ad-4f4a-a123-3365fedb282c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c04ea55-7df4-4f2b-8f59-0f3b942557a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c8b24e-fe2d-46af-8078-965b08ca2f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4fe9e6-0b01-4b7f-bf70-3969e1cbe7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "550b727b-636b-4b94-8303-ce150fb16fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8277bf-7048-40c5-bd8f-0eebc1c22489",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba559e0-3f5c-473f-b239-1e9fb7f3c240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f040c20-9c0b-4842-85a5-9ea426da29ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a316aad-95cf-4885-a5f2-ec6f0cd12c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d509140e-deb4-40b1-bbd0-b59d753b7183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f659b342-790f-41d0-939f-3277b64588dc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5b3890-d676-4df2-86ff-f07c063f5030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1439a885-0ce4-4a95-b7a4-3d6ed3f7841a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b23af3-910b-4936-94e9-91420033771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62ec702c-6d44-4b1d-ba16-8c35e4b67a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75729b80-2892-406d-b401-6ebf76ea65c0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e21d77-bc03-4171-95cd-e2b710e9c53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93b658a-0f27-4328-9736-10054ab67a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1dcef3-b0de-4dc2-825e-c76fc8ba3886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94a5057b-3a7b-415a-a823-713166d9b6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a11a36b-02a1-415b-b075-9c42cde315d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1a4601-d7da-468d-9937-dbbc8249bc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3851695-1a13-4bfa-bff4-9f8372dc8219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c7bd7c-7f7c-4794-8b1d-fe8e43e0b520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "902835b2-14b3-4e38-92c5-e409495ea85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995cb834-8d53-4748-82c9-75cfe27fe4fa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f128dd-769c-4c11-8961-41f68989d501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab0d156-d9ff-4f37-ac32-c106f8fe67c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e52eb1-bc3e-4d76-9889-dd0a79f45957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a0e4a7-3aa1-45e5-9732-e945dcc4652d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22a5f55-f5e2-4285-a56d-5381e3403759",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be64b58-bb8c-447b-aef2-704698f4a746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17983604-f5b3-4200-8240-9c465d0e5931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3feaa9-d206-4ded-b652-8f1fd0df47f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08fefb66-d002-44c8-9712-b4b1a188170f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa4f792-8d52-44fe-9205-fb097b61292f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5846a735-7a39-4ce5-be19-2c983f88322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1930a789-1195-4800-a5f4-259f770a06f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06f62f2-0952-495a-930c-95511f26bbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4f492a-0c93-42e6-9f46-9e8a07064560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3f5877-c685-498b-a1eb-e59aa41f31f2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5494c954-57c6-4623-919e-c5b295b9c529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7976cbe8-0ed0-40e6-86ed-e471e740f27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f88c29-ffd6-450c-9988-a41e40a43340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "68c25584-0a2b-443d-a0cf-bf03c26ffd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6c9714-f4d9-4871-95d3-dcb809d35600",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6d2320-4d86-4cdf-92f8-e617dd3f5cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17228d6f-4e06-49db-8fa7-ddc775cb49b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bcbfe7-d6b5-4a86-8dfb-682615bb3631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02cf80a4-34d5-40f0-ba51-3fd471c6c21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658d2a8d-7222-4048-b369-f7eb67472761",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8118a44-b21d-4240-94b0-8d02ff4337cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21add9c2-50b6-4bd2-99ac-4d62c0bda877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d730c901-4ee0-439a-a50a-04da5ef5e65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1747945-8329-42b7-925a-01e84907b64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aa9aab-c9ba-4a23-8098-7bf7d287efa4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f879574-0107-49a9-a61e-18a77e93363b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88352aac-ac9a-42f7-86df-6eddfbc01eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74d9c06-850c-4c88-9db2-843c06e16d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a57316a-033b-445b-bc6b-9c4bf38fc2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60215f10-2989-4217-bfb6-08b451d81d06",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccee763c-df40-4bd0-8191-ce59aafc067a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cf082d-e178-446d-960d-ded397239d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75ee31a-35c1-494d-b082-47c6bcc35f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e74b331-8eeb-4386-885c-714e4f7842fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e86784-0fcb-4e7a-af4f-09cd47e80edf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74f385e-7d25-454b-aea8-fb9b0c18b7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ae0338-3d9b-478c-94a8-3cd3cd9144d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04654e56-ccc6-451d-a746-400d67dbaf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b284c311-e287-450e-ab61-adbe9fb7788e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41418b79-4654-4eb4-b573-487267466da4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967837c7-815c-468e-9d8b-957eaaf53b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9883b69-47e3-41d8-88fe-e8284a7d39d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6ebd9a-ebe6-49b6-a466-cc888492c2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b613a8f4-9412-4d10-b839-50932f20a64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e434ebe0-539b-4134-85d9-59b27b073e55",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63707337-030e-48d5-99af-d171efcf2e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30526bab-2ebb-4bb4-bd4d-242060cbb0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a011d9-764f-4c47-b091-8c827abe591e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d96f15c6-abb3-4825-b02f-c794cf655760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a0ccde-1093-4c42-827c-f313b39f1d7f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b3b0b1-2608-4b85-bbd3-c5a30874f527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa11ec2f-d2cf-4aac-8c7e-59e5586f996f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5806be9e-8660-472f-aeec-e38e63775807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dee9f1ef-4f54-4b65-a916-ff384c6a998a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643a77e6-0bcb-43b0-96a3-4832b59e161c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035d8b48-7aa2-4da9-9594-a0d1094c791a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186b88cc-8c87-40ac-aa47-907c0f239933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6279914-112f-410d-9d7a-4c1f9181d1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "011ffd43-c8cf-4062-bb1d-f2544f6409dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad881a97-b2d5-4c5a-afab-f720182a5f66",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c647cf09-5296-4603-8f9a-f901d8a41d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccae1cc-3d0f-4e9a-ba67-0ea40380ec09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e854cac1-e3e0-4279-9ba7-7709a1078cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa99f0d-53bb-4dfb-a64d-a1a94c9e9521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673979da-4ed9-4990-9d2a-59c86237674d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c9b605-d247-4df0-bc70-c1f196332bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644e6c0a-97d7-4dd7-8a3c-b647af9073a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d4b419-396a-4de5-aeb4-d1fdb4622132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93a2e13d-ad1e-439b-bbc2-00acee1f08a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c1d237-78d8-4ee9-baca-1318baf5e762",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d54be92-1744-48c8-aa16-bcbd7789bf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a0b397-2e35-4e64-bdcb-891bcdcf9b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c3fe6d-62e6-4e83-91c5-020800234d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d286a706-ce08-4c7c-9042-96a08af091af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19ae976-8051-4352-8da7-b12a362e0f9a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25177aa7-3d3f-45bc-802a-d3abe29f4fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe4f512-4a12-43d7-adbf-8da3730c39a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80515672-fe03-4e81-ac03-f46b181b1936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e178319-a780-4ffd-bcc0-01c5390b0bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac11e9-9e39-4ec4-acb6-9a8089a4fb35",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee23727-c28d-4002-946b-db5c20d8d28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae0ad2a-5f74-4038-a116-c2ee58a71bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c539458-f848-4b3e-99a9-24c0a5570f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e60d6765-05d3-447e-ad5c-04de6c84b565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b72e26-ee7d-4b1a-b117-8d0f7d429281",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9badc258-fada-4fb1-a754-25c7ba1f3227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a20bc9c-9da8-4212-b8d5-03585da86df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1522b629-117c-4a47-9ff1-e839e2fbbaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "990f6db2-171e-47c4-b8f7-5417450f1de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3134e9f8-5b26-492e-94b8-18633b09786b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd37fcbe-a5c5-4857-85d0-f2e6c711a53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeeb6600-265b-437d-b4a6-e4dc50812c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a8ff7b-cb97-4b45-b9fb-6e9617d1352e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2feec4aa-395e-4e74-821e-88bd1c4d272c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ab7ee5-5057-495d-8191-1c2892920e05",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dfce9e-5c45-4e51-b867-20271aa34dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94cf7a81-2469-4052-98fc-ca5f74f9308f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca727fe-8c9b-4030-bd81-36a477c224d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "306c6f24-f6fb-42f5-9ed0-b877a8509190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9bde90-4657-456d-aef1-80412e88eb38",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8ac734-2aa9-450a-86fd-7e0492b0c851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c20875-d9b7-471d-a113-cba76f70ab03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dd0999-8517-4195-b2ca-c2f8a788feb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a88ae8b8-64bf-4483-9cbd-2a7c12c6ba8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc7c841-2dd4-4019-be40-aae63ae4b5b3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c50513c-45e5-499a-a84c-f93ceadf39b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ace171c-53f6-4848-9784-ae0d4bbf3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5d1114-4941-4517-acdf-b30d7e882ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4cc705-f606-4e69-8dec-fd227c87e780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af449a30-f2f2-470e-a0b3-6846183aadfc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef580ce0-7738-4da3-9989-015327d9ad61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf88a06-f324-4ef2-98a0-be950fb3e053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d554588d-19ea-442e-b120-c9a4973e9598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca31ae11-9216-4f31-a507-3b15fcbea7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f05a9e-a28d-4dec-b9a2-485057306387",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36bc9ea-bc5f-4fa2-9a2f-9baf3ac9147d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4975e5bb-cc8a-4ed0-bc9e-94a54bdeff33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d308ed57-e48b-44a4-940a-377829dce492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2cf0e20-3b22-48af-8c24-08224b743872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3bf915-2308-4d64-840c-c54e060c2f2b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6d2eb7-d317-4978-8370-751ec2641a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e4c345-d988-4e59-8bd3-96212fe84bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cfc2aa-4a0e-470e-a884-d4f1858c5f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3586b55b-ccec-4a7f-b5b3-702c3fb51aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea66857-c18a-4b6e-90d1-2df2008b0753",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1397fe9-fcd8-4dbc-81c5-b4e4f914594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee46284-aa5c-4690-b129-bb99e25f44b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b96bd61-b0f4-45cd-88a8-204092b18f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c468c44-4d79-46bc-878a-c734c10a7f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e3da51-3894-49d5-b6ab-04fbb3561d23",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2ed8a8-46ce-499a-bf62-1955ade3fd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826cd53c-7699-472c-8ea8-e7d785b18667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8562ce50-8f85-44e6-abbe-12455013b322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7faad34e-b834-47c8-a56d-1f510986bf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6b099b-6429-455b-a9ce-fed38a02350a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb54005-5faa-4186-acae-e2e03c51c32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9658bf-8655-4219-8778-582776b8c526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ab55e3-a202-439d-adcf-f26dde94d7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c244ff4-e9a4-4f4d-841f-df6f8597b6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671806aa-9a65-44e7-a15f-0511f605f013",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34c886e-ad63-4c27-950a-9bdb0e4adf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c711c220-1bab-47fd-9d5b-97d491c26e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1dc8cf-f280-47e1-b8cc-60696b9c8f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7280d1a8-1260-4942-bec5-439735c36c0d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3bbc3078-873e-4e78-8715-30adc3e3868e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d36e37b-7b71-4679-93f5-d2ac303191bf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c590cd-f1ac-4f4a-b7ad-1dd3b0f609a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a80f4d-caf2-4ce4-a8a1-dc1f621d7cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e438ef77-027b-4ac0-9742-58e511f0b0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1905b73-1289-4a7e-b17c-12bcff7b2b7f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a5845ac-80ac-42c4-bcf9-991206f9a7d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c6cf8f2-f0a1-441b-bbce-7abb867f0b07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "825f15cf-00ad-4df2-94e6-38630419da3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab02d60e-c42b-4dee-82b2-15cb1f2e17ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae3e4408-be48-4754-abf6-55bf4c3f441b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9df4a5cf-7bba-4ca3-ae33-0e680e5afdc5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87e3dd70-3c94-423b-a558-5aae41dbf5da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b83b0e7d-588e-47f3-91c7-94baaee84b36"
            }
          }
        ]
      },
      {
        "id": "bbd69722-49ab-48e4-bb23-2d1dd5e028cc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d6c56d4a-e9f4-44d6-acf2-60073a74b6c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a5b691a-9b17-4e79-b497-0d4c0c08ede6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "da68e528-a23c-4807-b051-dfb1c424df66",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4237cb5-f327-4385-b72a-a4a2de3ab072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e3c854-56b6-4104-900b-d458c8689f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c862705f-c861-4853-a5ec-6275cac6a996",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a7d51e-a75f-4fbe-9573-55a9ae9d29ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790f2042-4f72-4cf6-bc46-526c0d1c1c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f2a0fa-03fa-4244-aa3e-58e90411e688",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647781ad-ed92-465c-8f8e-03aa179d6cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b5c852-89a7-4951-8a66-516ee25b836f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41841721-6ae8-427a-bc57-c57f26f1d65a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068c1c4d-ec51-4a38-ac22-ecbb46d712c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb85ace-73d5-444b-b80c-2febe19306ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e377b46-fb34-435d-876c-7789c819d90d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3707951c-bd63-40bd-aae8-bd10811e6e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547a0432-7de1-45b5-b8fb-2a310a5e649e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d54aa9-43c2-471c-ae46-cc68d1af57d4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80ba93e-977d-4f0c-bf47-5af7d404649d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17daf596-2ca5-476e-ab16-d78a6bd67d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a83c42-48cf-47ea-ab3e-18a43cf0a743",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a66c904-dfed-4255-a313-738190471dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c827863-990c-4687-a886-c99a611335b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a842b5d4-a5de-4c24-aa41-798ae6e571ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f917b8-b821-4cf3-b869-79e4d17495c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252468ed-1f9e-4036-99c5-0bc8064d1549",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfa12b6-f3fb-46c8-a986-a3c76551aa19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f36be2b-2a38-474d-9f70-b1149ecd5212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7082367c-35be-479c-b16c-f61ae186cf09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be4c955-bcc1-4664-8319-744f41b36167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ba0031-4e00-4fb6-90cd-4243faf501d5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdde785-4e72-449e-a385-dea52e63ec65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1dd50fc-39c6-40a8-82ba-b33f1a509cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903bf171-337f-44ab-907e-98e9a562ba54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ed758e-5a91-4bbf-b59f-a30f38147266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579b4254-9ab7-49ae-9521-5315eb018b46",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3966801-c0fe-4198-8fe9-6f3f9b7c6c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee006cc5-d6c3-4df7-84ff-15b8b4b1b5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a916e70-0420-437e-9246-3e01189d9bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fdc89be-c146-46af-a29c-17abcc846959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fce7f23-e865-4594-a15c-42d24eb926f4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97afc40f-954b-424a-b3f8-a803817c4a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb54a19-24f0-447a-8cbe-26184b8d3c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df785c75-a5b2-469a-a57a-425f379a7722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5165935-1d6f-486a-a337-41e709b94b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e8eda6-ddfa-4488-928d-6bbbbc15fbee",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e541327-4dee-477c-a0d3-0502e222c6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb50f0e-cd27-4512-b4a2-9a50baf614e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af1c15d-b6b9-41d6-a726-7d6d5da3cbf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9892d8d7-b074-4d89-bb98-cd668995d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a98db4c-edac-4429-af00-6963c9614a9f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47982a95-4420-4810-8c8e-4823149dddab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c83be50-2e13-41c6-8db0-d104cdc52b08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2f9dff-c4ce-479c-b7fe-48d071da286c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756d3e2b-6d22-40c4-9e31-0101d387b2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90480b53-0f93-4738-9d8c-5414fa18777d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94982ca-b3f8-4da1-bd92-efb7190269eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0956fa58-c72d-4c67-80aa-b58819da5235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a0853d-e540-44bc-92c2-ebdfe210d872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0388533-7e09-4789-b772-e6427d51aedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81066f6f-850b-4a11-bc7b-6bcaeb8414a7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc1ed39-7bed-431d-8c1d-d5486ec3925e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8b0fe4f-9866-42d7-bfc5-f182c72c907d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b36aff-7a1f-47cf-aa91-51bcdd001754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98665b6-c701-424c-9ca7-c145ed2ec229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1c144b-75fd-4e77-b0d2-65edac364eb1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9bc9d1-47c7-4cba-977b-c0d5d174f579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6536e1a1-ae27-49c3-9e2a-84186db87fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2248c23-5b0b-429c-af25-9b00f4164be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21da569c-b8e0-4869-baae-088d805bb3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c349e6c9-23f1-457c-abd4-6039ee07158e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28794c9-f6fd-402f-bf74-8b804589cfc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1bb7f0-09aa-4ebd-a7c1-fc0ded54e38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19cbf7e-5373-40c2-abdd-708017275ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "642db533-94da-4219-bb0c-80c6c1f4b2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62ce4f4-4531-4f7d-adb4-5d3e1cab3c2d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca42561b-5c40-441a-886c-0290e3904d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3b7c1d-9acf-48d7-8111-3565a9ec06d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf11fa58-b444-45c6-92e6-c93eb76c479a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2b270a-7554-4f90-a596-8d004f64f8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d6e6f9-f241-4e46-8d1f-7340f96f90f6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c64832-25e1-48f1-a758-b6120ca21eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724219ce-cadd-441d-bfe3-554a3f8478fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41e671b-1190-49cb-8c7c-93b906b040bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed302c0-f999-4ecf-acca-4efc58a4e948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62c87fa-dc0f-42f9-9730-8e13762e0f10",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cece2a-0046-499a-a514-c68f395eca0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8cf242-6745-4f9a-8c38-bb3b21da4cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fee5b1-e0eb-497e-b634-3bdd8d9414d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58c46e1-db8f-45dd-b40a-dab55f294ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117c4c61-0d39-4c60-a9ca-570247da7aff",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8b0045-94d6-44cf-8f68-ed7e57092c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a21bf15-e043-41aa-8fc6-8dfc630fff80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbd0eda-9aae-4a8b-83f7-9a61fd48e4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a29d49-6c2e-4aa3-a31f-954ba42cdfd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef4ce66-9337-48cc-9994-42595f909b3f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc97e2f-c0f2-498f-b263-57a9e346d364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14b6a77-da9a-4fff-827a-b97a205ad92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1fb4da-03d9-4beb-aade-6d229d1b26a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2433bf-72e9-423f-82bd-9078fd136270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd41ae4d-a7c9-4816-82a3-97287291ccc0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bd2616-c61c-49a4-b04e-094ed0632400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73465901-eb3f-45e9-8a27-1fb3ee2376c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0ae59b-93b3-458d-bb54-ffd77d0df330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae1a39f-3ffb-496b-b2d6-63347cc04092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856312af-84ab-4f3a-9548-03bb098b5bff",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a1754c-1d67-4549-a2c6-49c19ed8353f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cd3b627-724e-4c35-8ab4-51b8bb8c3ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a812671-8835-462f-b5b2-9d17b1c31b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049cc568-ac93-4a17-919f-8728619d89c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f55fbe-0b7e-44a9-ac0f-d22807381584",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fadd071-3775-4212-bfd1-79e1a395f64c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fcc071-78bb-4d1b-b449-2c6ed03c92d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fac2531-973f-459c-9737-923d1244a861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b176ae9-4fa7-4922-9b11-85b95d7ca7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc35b4c-78e2-409c-91d9-7d1f85248d55",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0995098a-9ec7-4e16-bf21-eb649dfbd84b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66782ebc-d311-4f3c-bc71-93c4a929d394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89044241-e017-427f-9c2d-72c983ac6ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e49d651-70bb-4913-9032-526b398f0ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5282e785-864d-4b2b-aa99-99ed917a7c58",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a220368-eb6e-47b6-a6f9-f391cc8df62e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c90ff9cd-1e3d-4163-b463-c3fa801d0bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75de33a3-9a3a-4c24-afa8-bae5202c038f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80f9fed-abb2-42ed-bbb1-e1a7958bbe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2eb3b3-00ac-4787-b07d-60c35706794e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eadd536-92a4-4008-8ab3-fe796bfb7fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92b2f1a-2856-4974-b753-4b0627d1b9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50496cbc-3e2f-43fd-bf97-89bc8c4ca88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358b700b-032f-419e-8ec9-9827dd4bc486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bb777a-b98d-4e5d-99e2-df6803c9dcbb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79726d4-c374-4733-875d-da895b05c6e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b62921-2f9e-449c-b76e-16a83e333ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbafa27f-782a-43d2-86bf-bd180c1cb75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9b27c9-e15a-45e4-a11e-86302e8a6841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be37710-4d1a-453e-8c62-110caaf7a4c1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86367b3e-305d-4f9f-a884-6c79b3986360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf0d45a-bd51-4795-a558-297f9bd99745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf52809-2541-4dad-a71a-f2f38e4249cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc74652-3e1e-4b9b-97ca-09515c5de5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c0c01e-6337-4df0-b84f-3ade16f9a48f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfdbf18-98ed-4b80-abfc-ab80046caab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d84226-01da-4a1e-98ed-d665c25a53be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7396d4d9-a42d-4f19-9b50-7333fea05df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d988240-c13b-4199-9b04-186d39c97945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91cce60-e519-41f8-8307-2e41a9bf2ccc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c0e5de-d0f5-4c11-9c44-7fcc9e85c959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9da334e-6785-48d1-952d-98d39d86b6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58996646-e64f-4356-a4ba-72d766d41c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11eb817e-c6a8-4a74-ba12-98b9588de2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20e4b73-8328-4d15-b844-b9ca9929e194",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c29933-8882-4ca1-a7e3-01cf222e8349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ca23cb-826a-4371-a291-d1d5d5e75791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5375fb9b-3d28-47a3-a9fd-75956fb5b94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b298f407-aee6-4dac-aaf3-8fee6696de51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f752c-87e3-4e2e-8e7e-b43b1d6c31a8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d319ae2b-0058-45c7-a98b-14079ec9f603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d71fa27-0583-44ba-ab69-73e5b4c78c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c20e42-36f0-487f-80f0-c1e13d7a34c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15112d2-323a-40dd-a5ab-3fb98e5e5278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c354d2c2-4c73-4965-8c83-c05b5338f0fd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c0c4e1-a4e4-4ca3-8722-0048d42554a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d217d64-2aa3-4dbf-b735-ff414524c078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b216a1-704e-4d89-9bc0-9273262cc5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f550002d-16e8-489b-9e6c-386200427498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6803f6dc-d8ed-4e43-b8ce-a00dc08f13c9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2154437-0328-42ec-a383-2efcf3cf8c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3798d57-d425-4709-a675-874fba53980c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa20b459-f1a8-465b-be81-9b3d37c9244f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea28c94-aa0a-45e9-b68c-e0e0c3b62424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19432c61-77c7-41b9-b486-e00c18fd7115",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db51957e-fcf4-4602-b7b9-896d7ca297bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521aeab2-2b50-4c9e-ab70-ebffd724af5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e6925f-6393-4f87-b94d-b2c03d9bdaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2559fc-5571-4cec-9692-aca6c75b13c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eff468-0449-4c52-aee7-ae9e339bb518",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b29ece1-59a6-49fb-b468-7387ca0adf41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5064c079-cd58-4a50-a954-73f92bcd9047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af397c2-ae53-4d60-857d-882538d2be20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a94fa3-9284-41ea-ae1d-997e148f2058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcfa869-45c6-4746-895d-3b4a6a969b57",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870d0e37-56c3-4812-a2d9-2b84631d704e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7293c8-6f6a-41b9-b687-2515b3d458bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77a8cf2-4b6a-46c3-96e1-6ea48545326f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7341954-136c-4ccb-bfab-5ebf674893a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec79ed51-0aa7-45f6-969f-4111ade2f4b5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c5d0fa-1de8-4465-a1c4-0da4e3d1eddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e77a67-e822-45ad-9550-44a8fb14ada1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24980dd-0881-4143-9b2f-ef951fc01016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13392a66-a9c3-4892-b5c5-ba9dbc68626d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c8ca19-20dc-4b16-b30c-2e0fd9d7bc53",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0307ff93-945c-4975-b233-d785b0cc9d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f114b2-9c3e-4f99-8cf5-36b89aaa4949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174fbc62-91a2-477b-8d78-5ad341155ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175637bb-e77e-46ac-ae60-5114f056bda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996cbde9-96bf-4614-b70e-c24c54be09d2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f2e591-6e68-4f61-b901-080fa5187bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c493d02c-ebb9-494a-b04c-41a71b58a474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59eb641-c974-4c7c-9a96-eb93eed742a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b78119-e5b1-473c-8279-ef553ab197a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4813c3-4d82-48ee-819e-e2ab54282c20",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17db853-00c5-4680-8854-e1a46d4d3f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e339498-bbdb-491f-a1c4-ecb7d78ba115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50252018-9a1b-4f56-82d7-e64d7c38bff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0efc626-a7c0-4afc-9177-4127dcb3ef2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba08b52-09ab-4205-962b-39ab1e8c4302",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce22a54-f553-47f4-b194-46b465515e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e85fbb3-881f-46cc-9ea8-5f22b92440e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13227f1-4823-41eb-ab1c-9a84be250441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1340d47e-4797-4858-87b9-019a8fb53cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32564c96-e9b5-4881-b4fc-c81742c8d959",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe21dca3-9331-413e-8e46-0eb1a11e9b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3bdaf5-1f5d-4ea3-8098-2968e7c32a7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65b4ca9-8a38-4651-ab96-c1a0685524b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b2a3ee-28eb-488f-b907-215da59fc390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dda754-06cd-4955-bb78-0637d0420925",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a10b6a9-d8e3-4111-9862-054f011fe3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff825535-caea-4775-a95f-8dc58f9ef5d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e50334-af85-4d8d-80d7-22e762e10e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab8c48b-f093-4bf0-b0dc-d880b9a10527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca23a9c0-d09b-47ac-8dc2-e49d0e91f39c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee2aba6-14d0-4084-a31e-9d039baf045a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e29c999-6b18-4822-aeda-04fae327b194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e6f18d-eeb9-4adf-a2fa-e8ad7cb9daef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff1042f-47f6-4d8d-a529-173c894a60ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8e5bc2-e343-41ae-821f-c7552d277191",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed68a05-35e8-45c4-bd96-44b0cfe26a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f173805c-8eb7-4f0e-a440-8605c93f9d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cac5394-3c77-4633-a55a-b6395effbe88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605b935d-87bc-4c8f-9f9c-5adad0dd9dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b326381-0512-473b-9130-7d08be5b4b05",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6323f6-4d33-4cc7-b196-3528bb4afd62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999ff407-69d8-4178-a3f0-0d67851a7ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65faea4-3130-4d89-8e4f-2e8ad8f6b8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0ecf0b-aac8-42d2-8da3-65bb9700fa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab505719-912a-4174-97a4-c6fcdb3ef2eb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a719bb93-293c-4b0f-8a25-add4ffb535ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f3124a-027c-4d70-a888-b6d5a9efe2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff44be1-d4c8-4b42-ae7d-e5148742f5be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13ad6bf-9f1e-4e81-a02b-3b286bad09cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1e9a72-3a6b-4159-8ff8-46b9fcf10f4f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d888273-75c6-4f92-9207-ec0f1384c978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3146336-2cd9-4be3-947e-f9ceae1bebda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052aaf60-b7bf-4777-99da-2627a6986ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9a6f59-fb5f-483c-a44c-c6770c390370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8df140-64aa-4092-8903-dd5959680a0d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa92e79-d8b3-4c76-861f-a853928310c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f227be-b751-472c-a258-ae04c3421460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a40a1d8-d5cc-4470-8782-4de4c5703519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee8b66b-a0e2-4fe3-99bc-7a8ae50c063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc39631-5663-4d57-864e-c08bf1886ad6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0b022a-8698-459c-b707-89c4594845f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de344b3-4047-4f8a-ae41-e832d0102ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffd0000-b3f1-419d-b7f7-130d8966a5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bac821-7f5c-4a73-9038-e06740f989a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd4a05a-cc44-46c0-9dfb-c6955c20aa7d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b3347b-be7a-43e8-aeb0-9a695b6a04f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3d0b89-8b26-437c-b54d-904967626a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a5403e-2086-4150-8966-10102d348d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf4901e-5c98-4659-816e-7623614ce207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704a6f14-434f-4460-a544-d719dee62b5a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3383d492-12eb-467b-8522-892e4187b63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebab573-9317-42fc-81b0-67df5c06fa9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9f5cd9-90fb-4b01-811c-5665659747ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48df3aa0-fcb6-495b-b637-7e0047aedf8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd518e51-ee93-42aa-ad72-3c9b2431b657",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94fff6f-6e64-474d-983d-852e357506d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b56caa-8e37-42dc-a640-ee4f7d3b3dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71333f5-db60-45bd-8d39-f81fff89b8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7f7bd4-b334-47ca-b9cc-6cce56bcde82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25db9c7-8a87-49cc-9c04-8e440c196c7a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75ac0cd-6bfd-4425-8295-044abca42d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d3622d-7323-4e57-bcb5-86b30369f37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bcc022-df7c-4176-9b62-e6e585546a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7906853a-c01f-49a4-83ea-0af347e2ed05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441ce10b-5ec8-4d23-a1a7-a7e0cf05b36f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7548e31-dfc9-47c9-b86b-73974e3d40a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b46687-040e-48cf-afe3-b327949e5e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6740362a-5ede-4002-956b-a9dd7e08feb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a058fc2d-1a79-4abb-bb08-bdea830566aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260426f7-2c6e-44dd-a1e0-a739386be348",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0101b51b-cc76-4f7f-a20a-5715b048f01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcaa92fd-617d-4e36-a78a-349618bf6b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166d4bc6-79f5-4bd4-8601-52360133b7a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebe7834-3422-4103-a163-edfe124b707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24a6f61-b0fb-427d-a34e-94ff0b8b0dd0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c531e4-4ff0-4fcf-a9d5-465277f919fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f96371-de61-478e-8bd1-7118c2aaa53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7748c3-0a4a-4964-a2d7-0d7729930c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec4943b-660d-46b2-8895-0f8b4d6901ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5210fe-1680-4164-a081-d8e7b1e2a7b7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf92b9d-58e7-462d-9f54-88e312391d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241fb6aa-88ad-43ae-886b-f8fe23a9dd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbb08f4-017d-46ad-9df1-1291a068d070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afcda7a2-578d-4d57-826b-b067c869023f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a0788-eb73-4512-aa46-0091ab046e9f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9ef580-b04c-4785-8b79-8f36f17d22f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9cb816-6beb-4e00-800e-af0e77a3d6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9440e493-2042-43a3-a117-e4b9093184eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caf91f2-83fc-45c3-bd5d-ebedac6497a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da1fa6c-175e-466f-9acb-ef4b655d5e97",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87236cc0-414f-4cc1-a6c9-99ea6d6006dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d35e23-ffdb-4894-a4db-9c6d2f52841b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d15f2e-9da3-430a-a645-26ac4021f0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c776235f-12ff-46b7-be43-437f71a58ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2baefe4-9ae0-448c-a816-7dcef4c3fdd5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4d33f6-9af4-4027-985c-45dcabf3d61b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bb4934e-8b55-4237-b931-1eb89065b440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b8bcea-50e4-44ac-90dc-6f7743f29d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a49651-bf47-470a-8dd9-1d7df6c3832e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba954a4-0d26-4366-9e38-21f29880e464",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e6e357-40d6-4fa9-a1e5-451b158b7f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931af022-cfd8-40e0-8b8d-d84573db267f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493839cf-53f4-4c05-8037-838e07108d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a14d9f7-f68e-4afb-a261-04405ace7bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f1999a-2f38-4bb5-926d-1810a8362777",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b258b4-a568-4f0b-ae2f-3d9633fe2405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9700e6d7-f54b-4e97-938a-48d864eafeae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba67ba4-ecd4-4697-876f-20418305b934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f85e50-a00c-4266-9c49-ae898f869919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8829dbc-697d-4da6-92b7-2b262560de16",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86645390-32d2-424b-9b7d-c06315673273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e3e1756-9fe1-4789-85c8-bab9a67455d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6f9b93-3c50-46c3-bc6b-c611a6821a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486944fb-d8a1-4b3f-8de2-ff5a238ad49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d696cd-8709-49ce-a766-602558d98350",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e427ed9e-3cb1-4d8d-b03a-979ede0222c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8947f1fc-20cf-4357-a0f0-7289c461776f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d40c21-9e64-4e76-bf14-4caee0a88024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21bb1889-f74f-4b07-ad74-48ee27e5b96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896f3e3e-655e-41ea-93d4-9f1fb36f3811",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f958d66-f1f3-4346-84b9-8d90bd82cb67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "846cf0de-0873-4bbd-91ed-2cf00b41df13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7ebb42-14ba-44b6-aeac-a9c5590790b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93abe811-1e84-455e-b4cd-120480b83d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65aafd01-4e7c-4211-b89f-8ab894e8552e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84fbffc-1393-4f11-bf9e-5c75e550426a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d793160-d272-4f05-b318-d57f2444e8ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c151a1e-c5f7-4b77-93a1-a88d41a4873d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd03165-05d4-4153-bf21-c01bf0dd6fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0adf217-e887-42ee-879f-315068fb0136",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547ab8bd-8b40-455c-9391-445d32454952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5d6dad6-adc9-4883-bf9a-c7649b120ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7073d41c-d1a6-4fce-96f2-c99a847ce54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cff4a4d-0b47-489e-9545-013e6897e54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92563260-bb29-43e7-8f08-424d77e8335e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c18892b-40b1-440e-92b0-08a192ecfd31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd071e61-1fb0-49a5-ac3e-6f3cff3748bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c3334e-8160-4060-9d2f-49e4aad0c02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848b2a31-1256-4572-8a61-cfd497c53a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b65a071-867f-45ab-838d-3fffa81d036e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2856afb9-c85c-40d2-bfd6-0b932c02a895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6147e02-7758-4e6e-89c7-d02bd53ba6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3f3a30-11e6-4cc3-b504-5be965aebc5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5d897c-10c5-4657-b3d6-5b9d8e45a482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5087fb5-41ae-4fab-a8dd-aa0cfb1fe958",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19e77bd-822f-4941-98b9-a670600b6aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "960cf812-abdf-41c7-800b-f6829aa3ed6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8974faf1-2195-4974-b36a-3b437913d9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc0f1ce-d5aa-40b7-99a4-7abcdd01bb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd735cb-f0f3-4a50-b725-b6ca068e57f8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6138b75e-2cd1-4952-9229-06fb82656416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76476c43-9a57-47a6-8c57-1731bd4b7d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96642227-46b2-4ba9-b44e-150f5386387f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb71740a-912f-4ccf-a7fb-d2d589b07fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed8464f-5486-4bce-8ac0-55bbb2bea556",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f44d04a-f8d7-417e-8e0e-417a1719a21d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2c8f57b-a11c-406b-a64f-22a653cfbaa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74922ab-86fd-4c2a-95ff-8f31e9d3b665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657c0bcd-4e5f-4d36-8d6c-b613caf50a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c63259-655a-496f-affe-9bdfa7402cd5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dcf577-7a0f-487c-ba37-9bb6e6fb3a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04b56a9c-8e02-4be1-a47b-b2c46d622c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc21dd75-fc38-4166-b0be-1aa9628d291f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7245b5-a938-47ba-91df-dfec76515e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19abdc63-d692-4da0-9948-02f8e93e248e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966eea0e-e00f-408f-86f4-7b56dd889671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ad66fc-67cb-44da-90e2-6160ca179abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf885172-0668-4cd1-826a-2c0487f373cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fccbb6-3c30-4f2a-ba93-42e38e1d59de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f91028-4887-4ba5-a3d4-3e7a76f32e24",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a640426b-cf1d-43f0-b162-48a0b811b6b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4539dca-f31e-4885-8598-b287f631e509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8121aef2-7220-4827-ad17-ea32c401d261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58cf797-7ec1-41d6-859f-7ae78ce400cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd5c02e-d8cb-4e95-ba4a-87f2829d5a33",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f771f9-7153-4e73-b29d-cfc09c16616f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e88bc068-36f8-46bf-967f-258c6f418cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac10123c-531d-48e4-9a51-43e1ec46abc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526d7c18-6fa7-4152-b27e-1f68381525c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6727030a-a1fb-417b-af13-1e7d07f15441",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4ef0f1-ce6b-48e9-b74d-8cc73447dd30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce4fb57e-f145-468b-9c18-444c9b3177cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611404f6-22e2-4510-bde6-27ce75869f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1f5184-eeee-401e-aa1e-1da0e9d1dd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1023000-8fcb-499d-9d1c-b14a5d2dbb05",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3342fec8-ae9a-4b3b-a4f6-858800705da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d98972-e57a-4c2e-84bc-ebfef12982bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553e100f-b375-48eb-b712-9edcbedb9903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbb8d5c-2148-4fa9-a2ac-b16796b91887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2d9f79-dac8-4691-8743-bf588197efe0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f51eea-d70b-4a4a-9a5c-682ce51c2afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e746a67-eb6a-457b-b9f4-5d039897237c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b734e37c-02a9-4cb9-bd90-8686faf19c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4684ce-b8a6-471d-9ebc-896162f3cdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665ab2e7-4a84-48ce-a18b-0fd278bc7c19",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732689bf-ca07-4b67-b4dd-733533b33a04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e81ce96-25b5-49d2-aaba-1185ce02ee9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c88831-33d8-41b6-b2e5-4edf29442493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0584f0-2b03-4358-a1e4-84137ef6735d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b56bd2-2ade-499e-8c18-f4590c31b245",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83512d4d-d46c-40c1-8b71-228a61f37767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52c0fcc9-2138-45d1-b94f-7601158b2d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "995d4d78-1611-4801-9369-e0e3bbaf9a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53a16db-1662-4d71-81cf-84b5e82ba963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207b88a3-f1a0-4a18-9af0-bbddf18ff188",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373e0e48-28f7-49a5-a1d6-e72316f0b98b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "513b3e01-f01b-4253-943e-555bf1d7dedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd19bfcc-2f23-4adf-af8c-322c65f8616a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed5e059-6855-419d-b91f-5c6ca4a92167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6340ab-90d0-437c-8a4b-18293c4b8a74",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7675f5-7f2b-4a1e-a0f9-ea5c8ac2382e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f69afa8-a2c6-4ba8-be82-c93266523914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876bfd48-c489-4dc6-bf99-07f0b36cba76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d776496f-358a-41b3-b3cc-b8e30f6c1205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f668c242-c3fc-4678-9770-0de00e0af96d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67e8982-2eca-4602-be37-c001d7761a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd860de-6329-4fae-9a4a-07825e00abef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c396836-4deb-423c-9a60-bce8d958c14c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4545db67-f7f4-4562-83fc-91db5b21fbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f593838-53eb-4645-b3b8-69984b62d06b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07850b2-b823-4189-8575-98d9908dabd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d93632e2-8e42-4f08-b022-9d60cb3a2a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afac83ae-97a6-483e-81b0-b67e68ec26d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c214f5-3c28-40e9-b8f1-ba6e9a8da217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbcdd4a-6b96-4493-9067-375612bb283c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846a8136-470c-40ad-abc8-79c8dd2541a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4323fc0-23a4-4f90-ad6c-eaadb879d5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a749f2c3-5c75-4104-a516-e1ff47db0902",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac10c44-07bd-4a64-825d-b6ac371e68f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3d8610-9745-4597-9d67-090f9f947cec",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8215ecb8-997e-4e67-b5cf-e7a728f15ff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ba2b1b-0f74-470c-8918-03eda53b2267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed19037b-dedd-4e44-923c-1d2d1d7c65b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c7cfe8-ac42-4f4e-a966-7d1ffdaa37d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680b548e-387a-4c75-a609-3e7ad1f1cc8d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed5ff23-4ba0-4bf2-b05b-b7d7889028c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37707d39-834a-44eb-be9d-dde33b427885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2eb823-2bee-45ec-86a1-d81dc1929321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d184692b-87b6-404f-bcb0-ab2ac99014f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d59c27f-29d0-42c2-997b-3dc74cac24a7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cb4da2-ce57-4e18-a89b-736ad5f851bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5901f0-b151-483e-8e99-c09f4e6a4307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e03871b-dfcf-4510-aa36-42d84dc2646d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a1c88d-863d-44d2-b789-8a6b85ef859f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d23913b-7518-4825-bb68-039ac04d1e26",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba966ff-405d-4e92-a183-1c6d5deff25b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a07f327f-0e7b-409d-bf88-77bb6c01f86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459da899-e2fd-4220-aebb-c4677d18160f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443d53a9-be0c-4aec-8b92-a5df79a03e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7febb60d-97a3-4cf3-9437-9a78d1766f3d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5023e7ec-fbb4-41ff-9497-eb146118c8fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50221f35-ba62-4841-b875-3ed200f08fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff2ee2b-4ba4-41f1-b4da-d92ba59362c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0845d39-3d2b-4a9f-b316-9410abf8d264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630a23a0-b3b3-4d75-840e-2fafe15c14df",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c19d172-db7f-458e-830c-9d5708ce2e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "059a34c2-5a3f-415c-87a0-9c88c51e0139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeea3c2-83f8-4fda-97ae-c12632e21add",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05460215-599b-402d-8dcb-3dfadf22cce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e053e0a3-ba65-4bea-b4ba-e5239ee8270c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f76caa8-d1bd-4160-b7ab-58aef505a4ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9948cc0d-974e-40fe-b624-de7c9b17407a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52606ef0-3d4c-4bbb-a49a-4ac039240508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6784c906-dd44-44c1-8c7b-23d0bb0626e7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "109da444-17f6-4ae5-a928-2e9e282e6438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21e6781c-d55b-499c-9463-ba6adacddbcf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d783512-9f60-4ef2-abfe-62d1ca00aa2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "573bea5f-e921-4127-99c1-7f4a3d1fcf36"
                    }
                  }
                ]
              },
              {
                "id": "7cb80000-0ff9-422a-b66c-555663f4a493",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95a8136f-ffb8-4749-a240-9ab975f6372c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb3da85-7a30-4561-a98a-b2fc0cfda263",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e13355b6-4309-4521-89e0-45f7463b894d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdcd266-6b60-46db-94e7-4f5c2e3eee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f82c9675-b499-44d3-9bd5-5e6698339e6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71a05c03-328f-4896-a3d6-861ad796b30e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed64c0af-a47e-49bb-980c-a4b043c2058d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1542ed70-680a-4a3f-9e45-5eb3b541ecf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff6a4c95-51a5-47d0-88a7-93117a29ca0c"
                    }
                  }
                ]
              },
              {
                "id": "649af2a8-175e-456f-ae8d-89a125c64416",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "334a901c-dbc1-4ded-be87-3f56962f5191",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7ef5c5-3508-40df-a68c-2c0deabda1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "00270a0b-9587-408e-bc99-2679ca8989ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8ff5fa-8578-41f7-ac23-9fa3da647c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348d0ee9-6b45-4bb9-ad35-569d43fa54db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3fc005c4-3862-47d0-9a69-9ba4d514d494",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2aa9074b-ecd5-452b-8a08-66e15625f8c6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "466c69eb-354e-4578-b382-9936b4d87bd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c38061e4-9a06-46df-bed3-9a874b7e2d39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe491e20-75f2-43c4-ad0d-539317530bd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ccf4813-f4c4-42d7-90b3-b443a8b6062c"
                    }
                  }
                ]
              },
              {
                "id": "cfd406fa-7204-4d3b-9bdf-3381648a077b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81cb65be-5322-4e83-a44b-a77a2ec96a02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bde61b6b-5e1e-46ec-b98f-f8204ded3adf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7f5f644-16f5-4b7c-87c1-064fe9c08ea9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6de05bc7-f3b2-4756-8a6a-ddb81fc993b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9589827f-8096-4e07-a48c-da1998e2a209",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5d797ac8-c31a-4f60-8539-103e738b7e44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "103e9752-0ceb-4676-b7d9-632af2c44a5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba5d41c0-657d-46cb-bd6f-18e8af35b275"
            }
          }
        ]
      },
      {
        "id": "ccbf03a0-2330-4b76-812b-891f82ff198a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e189ceb7-d630-4ab1-b2b7-3c0f51914bd6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5acf4ab2-c40e-4e5f-a8d9-618bf31a6c7b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a95c13e-b874-4f85-8d78-473c681686b4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d6271d-9e08-4969-99cf-35caba96d387",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7e44d5a5-4b54-4dd4-a63a-609b11fd778b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6121c0c3-66fc-41ca-bc78-7fce884feeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15296bd4-b85f-47a4-bb8e-820c9221b4af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bec6d31-89d7-475e-887a-1d4e0acdf79b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8336200a-501c-4333-8e1b-0a14fb92b010"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1f61ccf-744c-4d40-a27e-923e4a71fc19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "789a3c77-a6fc-4357-bec8-c16877d91d49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01745be4-75a5-43a8-a0dc-33c48eb8bf62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c5bafb6e-1c07-468f-9199-a4026c69ca65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c56e6751-faa9-4bab-8055-f9679e579717",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98b590f3-2549-4d74-9dc5-6c0abb909b87"
            }
          }
        ]
      },
      {
        "id": "daf704b8-6b83-4e1c-9d74-e95eaddd5e57",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cbbd870d-3f9f-41d6-94e7-955d8bba5fa7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6772c32d-f7da-41da-b45c-203aab5fe777",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f601848-1038-4a05-bdd4-9e5477e646a1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489a4989-c76e-4df2-bea8-98cb70e60faa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75494fbb-e9ee-40b2-ba3b-62f808d39b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07764f6-e8d5-4c75-abe9-56f50f9bfac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ed2f44b-4c64-49a8-991c-c56ef8bc7151"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3507f7e9-e928-4ebf-93fa-e1899d58a261",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c7622a7-f953-4b40-8014-580ad91fd07d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aacc82d6-600d-458f-99f2-4d42f92b79d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "943264c6-8be4-423e-87ae-f707e5033f6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43907a7f-2b48-4534-8123-519cc31adeb5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7bf5f5cf-72e0-43bc-9d6e-7455b8b1ad5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0b955d9-a9a5-470e-8504-53ec2c94d77c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de26e063-ab92-40b0-9aea-0cb088cca246"
            }
          }
        ]
      },
      {
        "id": "8fc940b2-e84b-4dcd-a17c-cbce8cbb1764",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "341afdfc-ce8a-4372-a8f4-acbfad62aab5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c42c508c-64c6-4fd5-98f9-6624956be72a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5efbdf0-65ed-4f14-82a3-490d4fff3202",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70312476-05d4-4c7f-a6bc-fd9e4bf0da75",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "216ec1bc-0709-4c71-b962-cf262e75e273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1579335-f12f-4c6a-9761-8dba152d1c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f925cd5e-1668-401a-b65c-c6c77c90f711"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d65917b6-57f4-4754-b626-abe2c01bf6a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc357d59-8424-4bfa-970f-a9a1bfa9d523"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6d854d5-2c01-45b3-9726-b713ca6ed19d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42036e8d-9fe5-43cc-a941-c3f12da2da11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5055b0bd-2e5e-4201-9714-f2e197f47a71",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7c103aef-9f5f-4e6d-bf7d-674efecbf207"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02423a18-a2d7-49b0-b59b-f34881e798ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0edddae0-efa3-4cce-bb88-6ec6e209e74e"
            }
          }
        ]
      },
      {
        "id": "ecf2c19b-d7ad-4613-b3a5-be1f95e9d398",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a69a606-c2b9-4818-baec-1e9310f28547",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5092cfa4-da66-46ec-996c-58c09b6c89c3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b6a1fd09-ce21-4aa6-8c2d-fe60539fc42f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4318484f-bed9-4716-8131-080d16c1a33f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e62b29a7-3e05-4291-9bb5-5a5a7da03ec2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.1508771929824,
      "responseMin": 7,
      "responseMax": 651,
      "responseSd": 69.12029971407732,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699576464721,
      "completed": 1699576512128
    },
    "executions": [
      {
        "id": "1f7b9b8c-aa35-44be-9e50-475c0e16c1b0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d6489703-e5b3-43ed-bc0e-6d0ab1d449fb",
          "httpRequestId": "6a90d44e-4f91-4fbf-83bc-a2c4ae208292"
        },
        "item": {
          "id": "1f7b9b8c-aa35-44be-9e50-475c0e16c1b0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fb9ffc6e-88e2-4b8e-88af-1e212a7a1bc7",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "dd07231a-3c06-4bd5-be10-d4b70a4f251d",
        "cursor": {
          "ref": "ab8be07d-dcbc-4bbb-a1b7-97c5bcce6056",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ff290808-d8d3-4f3c-9e0f-626c5c042396"
        },
        "item": {
          "id": "dd07231a-3c06-4bd5-be10-d4b70a4f251d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ee91925c-0907-4cbe-8cab-72e2a8f16a78",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1794b4a2-bdce-468c-80e2-e9947eb5ead0",
        "cursor": {
          "ref": "6ef9560f-8706-4a86-a026-846fb6311d9b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fc2d3088-8f0b-4052-a183-38fe6afea412"
        },
        "item": {
          "id": "1794b4a2-bdce-468c-80e2-e9947eb5ead0",
          "name": "did_json"
        },
        "response": {
          "id": "a97b3328-7cad-4498-b130-85ddcd012b98",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d990a2-25c4-4ad9-b790-92aad91febf2",
        "cursor": {
          "ref": "13546610-adc5-463a-a327-d381f6c6b420",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "66b6f22c-348a-46a3-b062-12f47f663d9c"
        },
        "item": {
          "id": "f6d990a2-25c4-4ad9-b790-92aad91febf2",
          "name": "did:invalid"
        },
        "response": {
          "id": "1c94e693-294e-49be-a397-8b3eb8a3145d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d990a2-25c4-4ad9-b790-92aad91febf2",
        "cursor": {
          "ref": "13546610-adc5-463a-a327-d381f6c6b420",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "66b6f22c-348a-46a3-b062-12f47f663d9c"
        },
        "item": {
          "id": "f6d990a2-25c4-4ad9-b790-92aad91febf2",
          "name": "did:invalid"
        },
        "response": {
          "id": "1c94e693-294e-49be-a397-8b3eb8a3145d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218d8902-e24b-433d-a63a-f0c6ddd958f0",
        "cursor": {
          "ref": "3a06d5d8-8eff-42e0-b701-e6337e51e94a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "950df9cd-04e7-4bb2-aa0d-f773db073814"
        },
        "item": {
          "id": "218d8902-e24b-433d-a63a-f0c6ddd958f0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a69ab3f9-8051-4953-adf0-2bc472511b8e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 145,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a914e2d7-a504-4774-bf6b-7f58574f53c0",
        "cursor": {
          "ref": "6da49869-526c-42f1-a05f-e5e2603734fa",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e354bba7-241b-479d-acb6-249dcbc9012e"
        },
        "item": {
          "id": "a914e2d7-a504-4774-bf6b-7f58574f53c0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "886103d2-1bb2-4283-bad0-48646189d690",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8ff1c3-bc2c-4d82-a3a0-5b77cc52302b",
        "cursor": {
          "ref": "0c811cfe-bbfe-4312-9983-472d880a91fc",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "221cba05-0091-4f0d-afd2-8e0a1aebfa51"
        },
        "item": {
          "id": "da8ff1c3-bc2c-4d82-a3a0-5b77cc52302b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9eefba00-7f33-44bf-9fdc-a5b202cd0e73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bceb8178-5322-4117-b7b5-fbf546a9fca9",
        "cursor": {
          "ref": "70147277-a177-48ef-b877-8812bbe31b5a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0157b3b1-9535-4d44-87e2-9c2b4973216d"
        },
        "item": {
          "id": "bceb8178-5322-4117-b7b5-fbf546a9fca9",
          "name": "identifiers"
        },
        "response": {
          "id": "b220119d-4970-4b08-ad9e-3e4a60f91e85",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6d94f3-c22f-475d-9348-0b6a39d21817",
        "cursor": {
          "ref": "c7af1bf1-2412-4b5d-a37e-41f8e08b6f25",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2641a34b-1232-49ad-b4f6-b6441bd9a1a1"
        },
        "item": {
          "id": "9d6d94f3-c22f-475d-9348-0b6a39d21817",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "89bc6089-4c16-4ad3-80f1-90055b7999b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad509d86-9793-449f-a5f3-c3a844abb1cb",
        "cursor": {
          "ref": "dfcaa464-5263-4a46-a7f6-91af114c7852",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fc28da98-83fb-4411-95cd-80fd778b5aa0"
        },
        "item": {
          "id": "ad509d86-9793-449f-a5f3-c3a844abb1cb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "40eeb107-783f-4975-af2d-1284002fbcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eeac72f-bade-4c28-9b3b-401b5a532625",
        "cursor": {
          "ref": "fa298ce5-c27f-47d4-b966-316fe395b351",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "29273c82-0163-4f34-b64e-fac15cf0a7b3"
        },
        "item": {
          "id": "8eeac72f-bade-4c28-9b3b-401b5a532625",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e63ce8af-69b1-4bc7-a8b7-bdcaf7d489d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8e5405-7083-4810-a6da-b24c3ffa6e62",
        "cursor": {
          "ref": "4f846e22-3243-48f1-afef-fa569c50df2d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a5c1e96b-501c-49bf-a152-28f548a7dd5a"
        },
        "item": {
          "id": "eb8e5405-7083-4810-a6da-b24c3ffa6e62",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "302b7a49-e13d-4e66-91df-12d83e3aa8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e791b76a-7ddb-4337-bd15-4e46d64ed07e",
        "cursor": {
          "ref": "54a50ec5-7fdc-40ed-8d99-6549ac3569e8",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "db761492-99db-4d56-aa42-ed87db756034"
        },
        "item": {
          "id": "e791b76a-7ddb-4337-bd15-4e46d64ed07e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "aca10fcd-cd1d-4466-bd98-989700f7559c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6441529-2a8a-4616-8241-c65b98cd2007",
        "cursor": {
          "ref": "e3bb9824-78c8-4165-9093-1a4815281259",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "abd48cfc-b2e6-4c5b-87b8-4e704aa8790a"
        },
        "item": {
          "id": "a6441529-2a8a-4616-8241-c65b98cd2007",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "41d252fe-b08f-4af7-b006-06529ec597e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e4e95f-d008-462b-b372-0e881730f51e",
        "cursor": {
          "ref": "addb26d6-4573-4ba4-8024-1ccf1cf368ff",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b539f26a-cb94-4295-be55-8042750338df"
        },
        "item": {
          "id": "a2e4e95f-d008-462b-b372-0e881730f51e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5b39ddcf-f182-45cd-a6f9-fda256cea830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5816a41-bdbb-40db-bfaf-108b18e7b804",
        "cursor": {
          "ref": "de952dc9-9988-4a97-9011-afbe784d032b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ddc9968a-37e7-4a2f-aea0-8f5ae9d11453"
        },
        "item": {
          "id": "f5816a41-bdbb-40db-bfaf-108b18e7b804",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4d85b35f-de39-4cd8-81fa-4acd90c252cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3d3ca6-f9e0-4cae-8f58-27e10dad9dd9",
        "cursor": {
          "ref": "057f4359-59c5-46a4-accd-9024b9d5b463",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e0fc3e9b-7f51-4a1f-ac82-dd0c9a8b8c57"
        },
        "item": {
          "id": "5a3d3ca6-f9e0-4cae-8f58-27e10dad9dd9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6c851df5-e30b-415c-a58e-a24a00d58608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a51672f-fcf8-4312-ba70-3fc955993390",
        "cursor": {
          "ref": "f6295f0b-b33f-417a-bd50-7a39e24ef577",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b939bd6e-de4d-4cac-a7ff-dd6e4e989799"
        },
        "item": {
          "id": "0a51672f-fcf8-4312-ba70-3fc955993390",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2dfec238-301a-47a4-86aa-f54d09ac322a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ace5a8-2991-4238-bc27-13890c67e974",
        "cursor": {
          "ref": "cdcd1205-ca16-40c4-8963-af797047f928",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e01aa168-936e-4277-b952-8c43762c543d"
        },
        "item": {
          "id": "a2ace5a8-2991-4238-bc27-13890c67e974",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6b9595ea-c29c-42a4-9999-8b255c0db9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be80e369-41d8-4e42-8088-cf1503f7d22b",
        "cursor": {
          "ref": "56337fb3-d768-4899-9ac1-9eb640f19d33",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0f8351af-36a5-46ab-8c4d-d17f2a50a177"
        },
        "item": {
          "id": "be80e369-41d8-4e42-8088-cf1503f7d22b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6cb114ce-2c28-407a-bee1-d93fbd8c8e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45f8b19-7a82-4d05-8fe8-5dcb5603fb4b",
        "cursor": {
          "ref": "490f08f4-3b7c-42d6-9a3e-4688c1f1bbbc",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9782b1d8-3c81-48f3-8d20-5362ce9ad205"
        },
        "item": {
          "id": "b45f8b19-7a82-4d05-8fe8-5dcb5603fb4b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ce374450-50c6-4868-a07b-a16659750033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178f23ef-ec0b-483a-a74e-a0fdd5843fac",
        "cursor": {
          "ref": "1e668f0a-ae3a-4b44-b3a7-79d43ee94b1f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bd03cdee-1a9a-446b-8d7f-ac175b33c3d3"
        },
        "item": {
          "id": "178f23ef-ec0b-483a-a74e-a0fdd5843fac",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "55628abc-9b63-4b65-8c22-18b79dd46b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5a3f0d-60f8-4ebd-9c98-f00d8b509306",
        "cursor": {
          "ref": "5ba355b5-82f4-497f-9657-057ae371a84c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4b352851-4a21-43fc-88c1-90d7f0abebd6"
        },
        "item": {
          "id": "ec5a3f0d-60f8-4ebd-9c98-f00d8b509306",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3f9e076a-9964-4f9b-b913-5288e343cca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b995c76-3214-4a00-ae41-359504636fc7",
        "cursor": {
          "ref": "7c0aa824-4913-40eb-85a9-419c137b7a5f",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "74a369ae-9947-4559-a74c-797b123a9362"
        },
        "item": {
          "id": "0b995c76-3214-4a00-ae41-359504636fc7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5b587e15-91c4-4832-a200-2683f73c4394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a0a863-1743-45ab-8da1-c8b2b48fe4d8",
        "cursor": {
          "ref": "b76a874a-f847-45ba-b5bc-9d541d24c040",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "43b2b303-d4c6-4cdf-a8ea-9a76c8552845"
        },
        "item": {
          "id": "a7a0a863-1743-45ab-8da1-c8b2b48fe4d8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bd2a745a-5b56-45cb-b6de-f98bb400d368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7742bad4-e564-40f8-b943-f618809ff938",
        "cursor": {
          "ref": "3fcb8529-b3cf-493d-944c-44ac86b6784e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "54363df4-2a4f-4337-8cce-125d1947476c"
        },
        "item": {
          "id": "7742bad4-e564-40f8-b943-f618809ff938",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "34091795-ecb4-477c-a673-862c4f27237a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecafece-8ceb-4241-bf1f-2d5fdaeab39d",
        "cursor": {
          "ref": "8bc7682c-8139-45f3-b89b-769eff198d4a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a69404d5-d58b-493d-8630-c3f82bd2cd38"
        },
        "item": {
          "id": "fecafece-8ceb-4241-bf1f-2d5fdaeab39d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "990fdceb-b152-444e-a43b-42a035c278c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5c8538-2497-4a78-a147-1f1fa24cc641",
        "cursor": {
          "ref": "6f20fee5-0f20-499e-a854-169eec65edc0",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9642f276-cd74-4369-b9cc-7937a04b1a44"
        },
        "item": {
          "id": "2a5c8538-2497-4a78-a147-1f1fa24cc641",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7a7d887e-0eca-4f1e-bc45-36162dd394d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96239568-6d15-4966-be43-51d489265f17",
        "cursor": {
          "ref": "a72e6580-212b-4635-9cf9-5099f781637e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f0923dc2-e016-4134-a76b-9dca9a7d0228"
        },
        "item": {
          "id": "96239568-6d15-4966-be43-51d489265f17",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4b212a00-690a-4a0b-b967-67263c12bef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae7a3ee-0244-449b-90a9-3ee3e85519b3",
        "cursor": {
          "ref": "3d7df90a-fa0a-48c5-8574-3c728ad66abb",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "285566fe-b79d-4d73-ba22-ba5cc48c63ff"
        },
        "item": {
          "id": "2ae7a3ee-0244-449b-90a9-3ee3e85519b3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "12e0d605-2e33-4814-aa3f-239da09aa7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebc3856-1e5f-4787-be28-bd6dbd3326f2",
        "cursor": {
          "ref": "9209d57a-9761-4449-a6f6-2ef47b29d737",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ba939379-0313-427e-aeab-6f28de8489ff"
        },
        "item": {
          "id": "0ebc3856-1e5f-4787-be28-bd6dbd3326f2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d97e10b5-9f14-48ca-b5b0-e146e5393a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26112dfc-23ea-4386-a7ba-77023577bbf5",
        "cursor": {
          "ref": "9e1a49f7-f641-4e32-bcc9-e22dbc1babd1",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc93b1e1-8843-4823-ad1f-644007dc16a3"
        },
        "item": {
          "id": "26112dfc-23ea-4386-a7ba-77023577bbf5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0e323acc-c05c-4bc3-8786-e1d5f7c71d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddb339c-dd9d-4f9f-9617-859cc82a718b",
        "cursor": {
          "ref": "fa5e878e-f717-4004-ab1a-b706c38acb34",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6d2a2199-03b3-4bc9-8e54-a61a0b90521e"
        },
        "item": {
          "id": "bddb339c-dd9d-4f9f-9617-859cc82a718b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0d56feb1-a153-4cf7-84af-5c40ae1c7a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1807b2-bc55-4996-8e9b-f86c0a066723",
        "cursor": {
          "ref": "e3ffea58-8e6f-4e02-9a49-9aa3ce9caa97",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2b4275b8-6469-4d0f-bad2-c97167f1566e"
        },
        "item": {
          "id": "bc1807b2-bc55-4996-8e9b-f86c0a066723",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c1712341-3e6a-42bf-95d3-e7d811bc7391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f0fd75-2c7e-495a-8b74-f78357c0853f",
        "cursor": {
          "ref": "fca3bb45-63ea-4f98-9557-e868bb8592bf",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9ef30968-5425-4da6-aa5f-6a5902bc8be5"
        },
        "item": {
          "id": "f8f0fd75-2c7e-495a-8b74-f78357c0853f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "46273940-62d5-4d6d-96a9-b73059db9621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed665723-38d5-4684-b12c-6720f2b937d2",
        "cursor": {
          "ref": "1dc434fc-88f9-430f-b260-b55c9f97a06b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a1bb9afc-ee37-4ddb-8a7d-6cbd44ee60cc"
        },
        "item": {
          "id": "ed665723-38d5-4684-b12c-6720f2b937d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2284d3c9-c7f2-49e0-9d4d-4b2aae7c0722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07aad666-d763-4b45-b48c-f23a26e43052",
        "cursor": {
          "ref": "ac7cf1c1-2a72-44d0-a683-888ff063306f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3fd9c309-6500-4bb2-a2e8-d668d350ddd1"
        },
        "item": {
          "id": "07aad666-d763-4b45-b48c-f23a26e43052",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "15cc95ce-a94e-4fec-a0c2-40212380b5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af669db7-55c8-4fbc-ba8e-07c3031a8be7",
        "cursor": {
          "ref": "be7c0c9f-2f27-451f-8952-b88042a9cf0a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6700df88-1d4e-4478-b05b-088f6a5e322c"
        },
        "item": {
          "id": "af669db7-55c8-4fbc-ba8e-07c3031a8be7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f17766bd-d3c0-46f1-aeb3-b58bc65ecfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222faaa4-2f3f-402a-ae67-120aa8d4a616",
        "cursor": {
          "ref": "87abb9da-cc35-4dd2-bf2e-4c91ad45e04a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "015455ba-cfcb-4ea2-a236-060a30e58c3f"
        },
        "item": {
          "id": "222faaa4-2f3f-402a-ae67-120aa8d4a616",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6e29465a-b665-4da2-acba-af35fe86d105",
          "status": "Created",
          "code": 201,
          "responseTime": 651,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d8ace6d9-8372-4bbd-9ea4-d711fd654a64",
        "cursor": {
          "ref": "a3a9290b-6d63-42b3-9ab8-718bce27f3e7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "06977170-517f-42a9-a906-a13dd9d16754"
        },
        "item": {
          "id": "d8ace6d9-8372-4bbd-9ea4-d711fd654a64",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c92545f1-9cb8-4483-a87d-f1ed8a72e9fb",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b77d0052-aeda-4cf9-9f9e-b523459ec75b",
        "cursor": {
          "ref": "815239b9-9e80-4c8e-a10b-48dd7c858916",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "73109c17-9603-48a5-81df-ec411091760e"
        },
        "item": {
          "id": "b77d0052-aeda-4cf9-9f9e-b523459ec75b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "33e03f07-26f6-40e6-aeef-556ff4d4904c",
          "status": "Created",
          "code": 201,
          "responseTime": 399,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3c11c57a-c626-42ce-9064-0581f64d0061",
        "cursor": {
          "ref": "c9c44145-d0f3-4522-a630-883decccfe6c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "839742a4-e14c-4022-bde2-467e4df6d697"
        },
        "item": {
          "id": "3c11c57a-c626-42ce-9064-0581f64d0061",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4b255522-f10b-4b5b-9ff9-bd77505757ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e414b93-1acd-41e4-b055-b0982fb721ee",
        "cursor": {
          "ref": "174a5afc-7526-400e-b147-839f448eb383",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1d1abdef-5864-408e-a8aa-eca7e2943773"
        },
        "item": {
          "id": "0e414b93-1acd-41e4-b055-b0982fb721ee",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6a2884b4-d73b-4fda-a0fc-6517e43e1aa4",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f921d14d-19e1-4521-a423-c989cb8c582f",
        "cursor": {
          "ref": "86cebeda-3fdd-4ed3-823b-5c9fe93a9c2e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "887f7a2b-ab8b-4e74-8eeb-ade1775fc34a"
        },
        "item": {
          "id": "f921d14d-19e1-4521-a423-c989cb8c582f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7458c65a-da4c-44bf-b651-35ebbb4c122f",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9b201514-75ab-4173-990f-6d448740ea0d",
        "cursor": {
          "ref": "975776e5-5eca-4dd2-b1c1-b211159065d1",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "086e3355-81aa-41b5-b5ef-079cb10fa7a1"
        },
        "item": {
          "id": "9b201514-75ab-4173-990f-6d448740ea0d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9847fc19-45bf-4f7f-8b89-3367b6dee719",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7421c7e4-0d4b-45d8-949c-cebede4122c9",
        "cursor": {
          "ref": "dc802357-c4c8-4229-8dae-57fc8075c678",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "96c82791-d223-45e4-bd7a-ba6cb50a0299"
        },
        "item": {
          "id": "7421c7e4-0d4b-45d8-949c-cebede4122c9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "921dfdc2-a18a-4069-930d-d6e719cb0963",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "123648be-4b92-4b51-a6dd-c50519d0046e",
        "cursor": {
          "ref": "75c0d530-a1b2-405c-8e0a-1fe4aace9662",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a5fbf57-24b6-4567-9e86-fd3063c1b852"
        },
        "item": {
          "id": "123648be-4b92-4b51-a6dd-c50519d0046e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "31202386-79dc-4e4f-b084-99ad468f1480",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "84b0733d-b6d1-40ce-8c77-2f46bd0f8ae0",
        "cursor": {
          "ref": "5eb8603e-a2d3-4d32-822b-ca1a94a39393",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "888ba828-f9a9-4902-ac73-5c8225a97a82"
        },
        "item": {
          "id": "84b0733d-b6d1-40ce-8c77-2f46bd0f8ae0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ece11a72-884d-470d-bf01-7859ce300c6c",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e0fa6b64-6c30-44cd-b7e2-ba6f43e95b3d",
        "cursor": {
          "ref": "d866662e-9311-47b3-ad67-d92c8d48cfed",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f2d748a7-f50b-40d1-b181-e487e9a331a2"
        },
        "item": {
          "id": "e0fa6b64-6c30-44cd-b7e2-ba6f43e95b3d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4c006a98-d6b4-4134-85fc-5e2282c88d8a",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ccd6491b-011d-439c-bc2e-b1467c844c23",
        "cursor": {
          "ref": "2ff4217e-184d-4eeb-b208-befe1608120a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a81a2db4-4653-4d65-a88e-220726e30c2d"
        },
        "item": {
          "id": "ccd6491b-011d-439c-bc2e-b1467c844c23",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f61565e1-0a48-49ac-a3fa-b2c21cc8e26b",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "78308f16-f061-4b8b-8244-caf6967dac50",
        "cursor": {
          "ref": "a10697ae-2411-42e1-95a8-3418fdde34bb",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "309100fc-bcc5-4991-b767-a0a2a8428a14"
        },
        "item": {
          "id": "78308f16-f061-4b8b-8244-caf6967dac50",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b5a365fc-3294-4102-b66d-15d35f4a5a5e",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4667561f-51ef-47d1-8fa0-16932b1df985",
        "cursor": {
          "ref": "dfeb7d13-c982-4ee7-9b32-f55a995b32d1",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1e523be9-dfce-4c3f-9e94-ea1c4b0d1846"
        },
        "item": {
          "id": "4667561f-51ef-47d1-8fa0-16932b1df985",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a48d28b0-ef78-48bf-b241-0825a157e761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fa80bf-4135-462a-9199-13670c52c3a5",
        "cursor": {
          "ref": "213ad586-2ae5-4b88-825b-448eda0236c9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "67bc5f04-5923-40f1-ba5a-8cf548d748fe"
        },
        "item": {
          "id": "e3fa80bf-4135-462a-9199-13670c52c3a5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f0fa3d14-5697-4f56-9e7b-8eee4049d763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004ebac2-5365-445f-ba6e-d9b984e8dbb8",
        "cursor": {
          "ref": "ca8d65a5-f83b-4da5-93f3-d0f890fc8979",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "542ed50c-cdcc-4048-a3c0-427302d9914a"
        },
        "item": {
          "id": "004ebac2-5365-445f-ba6e-d9b984e8dbb8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a7a4faaf-3b1c-4a4b-9b9d-a4ba92d2f977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64506df3-6349-4171-91ca-506cda398c33",
        "cursor": {
          "ref": "a92dff99-92d9-4d2a-93ae-5162df7e620d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3582d6e2-e6b2-40c5-ab6d-250e4a16b601"
        },
        "item": {
          "id": "64506df3-6349-4171-91ca-506cda398c33",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7b577835-38d3-4392-9c27-1145e8658ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f1f867-d664-42b0-9182-f5db21b0a497",
        "cursor": {
          "ref": "b70d76ab-efc0-475a-a6b9-edfcd6b0a3b3",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f1f5bceb-1aa3-4d69-8149-ae28e04facff"
        },
        "item": {
          "id": "28f1f867-d664-42b0-9182-f5db21b0a497",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "446ceb23-3708-4cfa-ba51-4a59d6c4de89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55559a6f-3ae2-456f-840f-ad8b131409fe",
        "cursor": {
          "ref": "92fbb287-7fe5-412b-87d4-2544ff6eef96",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "15f30caa-a968-480e-8411-ecbd85063cf1"
        },
        "item": {
          "id": "55559a6f-3ae2-456f-840f-ad8b131409fe",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "97715416-efe7-4c0d-9a19-2f987c17aba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1363eb4d-43ab-417c-b49e-dba1c4d1f8a3",
        "cursor": {
          "ref": "e26dd529-05f2-433a-af9c-744a4be87e71",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "87dd7295-2f34-43ca-a91f-c2d74999386d"
        },
        "item": {
          "id": "1363eb4d-43ab-417c-b49e-dba1c4d1f8a3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c18dc7d9-3108-439b-adcd-d908cbd651e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796162f2-7a72-459e-b4b5-6b94d4421e5a",
        "cursor": {
          "ref": "08f9bc59-f6b7-491b-a349-4d78e71637da",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "28e7f4cc-3f6b-48a1-a5f7-2a59f2a9df28"
        },
        "item": {
          "id": "796162f2-7a72-459e-b4b5-6b94d4421e5a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "210f1678-d19a-419d-a357-0cdeea4b125a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5794de27-17d1-4df6-9e44-3f4f32c19ab2",
        "cursor": {
          "ref": "23fcc3fb-2a02-4406-a713-5003c28847c7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "31721d43-442e-40a0-8735-210f8bf0befa"
        },
        "item": {
          "id": "5794de27-17d1-4df6-9e44-3f4f32c19ab2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7128fa19-852f-4dd8-ac5d-fdd9a6eb2723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cfff4c-8760-4478-9a11-edd8528d3120",
        "cursor": {
          "ref": "8fee368d-f1b2-451a-8e6a-c4c33dc2b863",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8bfdf7e9-690d-47df-a69b-74b30192fd1e"
        },
        "item": {
          "id": "92cfff4c-8760-4478-9a11-edd8528d3120",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d05465cf-32e6-445e-bb0e-b7dcee392e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbf1d24-9814-4e18-8bf1-876328c8afd4",
        "cursor": {
          "ref": "74e1e4bc-2a1a-46ee-b8e8-a15d12b29921",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "084e1bc1-03a6-4b16-add5-8c62918ea5e9"
        },
        "item": {
          "id": "6fbf1d24-9814-4e18-8bf1-876328c8afd4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "72bd9a12-0b56-4b65-926d-229b0dd0d4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e551f7-52f2-4b6f-979f-d7c6a448e11a",
        "cursor": {
          "ref": "75fecb8e-65ec-497f-8d09-15b0ad839934",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "eec4edef-ea86-48a0-8524-a39394ee4078"
        },
        "item": {
          "id": "28e551f7-52f2-4b6f-979f-d7c6a448e11a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dcd59056-cfbe-40cd-8672-cb2338fc8eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b46407-60e4-4588-a928-4bf261163656",
        "cursor": {
          "ref": "d25bf5e7-a62f-4c89-a3c0-85b13848dd50",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c6eb71f8-018c-43d2-90a6-044f7e03edcb"
        },
        "item": {
          "id": "d2b46407-60e4-4588-a928-4bf261163656",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ddc693c5-c233-4fe7-9964-9ec161a50a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3142cf-4cf3-4ead-81a0-dc90eaf373d7",
        "cursor": {
          "ref": "332bec79-cb7d-4d14-9a72-cc1316a6cbb9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9939e87c-8168-4abc-8ebc-f98d4e492b3f"
        },
        "item": {
          "id": "4b3142cf-4cf3-4ead-81a0-dc90eaf373d7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "24837b6b-c1b3-4eab-a375-3eecb53a6b3f",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "42398d06-0a27-47f0-9374-8151f85a9d47",
        "cursor": {
          "ref": "bc860888-8e57-4934-8819-7f69492c9948",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "99a47d9c-5e3d-4505-9349-752eb7e14364"
        },
        "item": {
          "id": "42398d06-0a27-47f0-9374-8151f85a9d47",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cde7aa3e-d604-48f4-a879-3c9127af0170",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "41fded3f-6e6a-4df6-91a2-795beb98e619",
        "cursor": {
          "ref": "16362e90-eeb9-43c0-9c6b-c6cac080cc23",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "823cd234-283d-4022-959c-9193e0419e65"
        },
        "item": {
          "id": "41fded3f-6e6a-4df6-91a2-795beb98e619",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "afce5452-e2ba-4893-865e-7628eb2e2242",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b12e08aa-9440-4ade-b312-efb148b020f1",
        "cursor": {
          "ref": "c5fd3624-6544-4b83-911f-a27aa6e4f447",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8ae13e95-0439-4aa7-8436-531a9a97e16c"
        },
        "item": {
          "id": "b12e08aa-9440-4ade-b312-efb148b020f1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2139d5d4-23a1-4103-a860-38687b4d2c49",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c97c1034-49e8-4c3f-8b83-b06603767b97",
        "cursor": {
          "ref": "99a06b1b-982f-4d58-bdd4-6a1e25cd42d6",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1f9253d0-6029-44c3-83d8-c7700d31ae17"
        },
        "item": {
          "id": "c97c1034-49e8-4c3f-8b83-b06603767b97",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3091f5a1-6def-425a-9dbd-c79d391db73f",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "db3e5b7c-d2f4-4249-8388-244647c0c376",
        "cursor": {
          "ref": "ca404153-6fe3-4018-b82e-5558d0014fe2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fc756941-f607-4249-b589-023593ed2abb"
        },
        "item": {
          "id": "db3e5b7c-d2f4-4249-8388-244647c0c376",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "85e43ed1-5daa-4525-877d-f8d37404e385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcce1007-2ef4-48be-8aed-5e52789bcea7",
        "cursor": {
          "ref": "cec781b0-e154-4a9f-8fb2-a3e3db03b12d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1dfe73d3-d097-4373-a11c-e944e8ad7f20"
        },
        "item": {
          "id": "fcce1007-2ef4-48be-8aed-5e52789bcea7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "15f662f6-3810-4fc5-93bd-6b1224e154b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5812560d-66b9-4646-9300-52302a1f881d",
        "cursor": {
          "ref": "3e2a3272-b569-404e-84d6-7cd93cd67763",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7ae72e53-74d2-4edb-bdaa-23b499efdbc5"
        },
        "item": {
          "id": "5812560d-66b9-4646-9300-52302a1f881d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c01df394-80b9-49d5-8147-bb5b5ad74d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde5211e-c546-4f3d-b5c4-b1ee0b694cae",
        "cursor": {
          "ref": "806fbfc6-c059-4e0e-a41c-714cbc8dda9f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5a78a03d-44ee-42d4-9876-858b9f7be160"
        },
        "item": {
          "id": "cde5211e-c546-4f3d-b5c4-b1ee0b694cae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bf32bb40-2b82-40b9-8dbb-12b428ab8a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23642356-2115-419b-9b7c-e040ad56ba73",
        "cursor": {
          "ref": "f553954d-2e46-4fd9-b907-99f563acbe58",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d464f3bb-c15b-431d-831b-2aedf8ec5a9d"
        },
        "item": {
          "id": "23642356-2115-419b-9b7c-e040ad56ba73",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "de37d796-fc84-4ff0-9aa4-f27fc18024cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e113235-aef0-4abe-9cf6-7898394da52f",
        "cursor": {
          "ref": "b47742b3-0034-4835-b4a9-e17533e0d440",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5d1eb5ae-9b55-42a3-a302-ef073a5c6ce2"
        },
        "item": {
          "id": "0e113235-aef0-4abe-9cf6-7898394da52f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "321b1c34-cf8a-43e8-a081-db63d8474982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5eb72fd-cc40-4c61-8caa-d81261a5012a",
        "cursor": {
          "ref": "97494494-9af3-45b3-8e04-da5daddcb303",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2799da0d-968a-4484-8607-9fec469e03c7"
        },
        "item": {
          "id": "c5eb72fd-cc40-4c61-8caa-d81261a5012a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1bcb5ea3-742d-4683-8297-8a807b5d99d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e947ad-cda2-49b9-b5d7-2d97670549f7",
        "cursor": {
          "ref": "ccefd1a2-dd7e-4c94-a8b8-db0a4cc722e9",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "524e16f1-d48d-4707-807d-af45fd90b0a5"
        },
        "item": {
          "id": "34e947ad-cda2-49b9-b5d7-2d97670549f7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8cdb96c4-74bf-44ad-9e36-37903f17aa08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956ec7f5-2d03-4254-8b36-d68158956b90",
        "cursor": {
          "ref": "6f7eea85-2b5c-41f4-b9e7-f6e622ed649b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7fce1c1e-f862-486d-940a-556741fea380"
        },
        "item": {
          "id": "956ec7f5-2d03-4254-8b36-d68158956b90",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "17345f6b-8cf9-4efe-bf6b-207824b132fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641baf8a-9c53-411c-95b3-8e1b2f756f83",
        "cursor": {
          "ref": "2a0bb9e8-7dc0-4ada-861b-5027fded74b1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5f1f7cd5-d10a-4327-8c14-ee294ce3e03c"
        },
        "item": {
          "id": "641baf8a-9c53-411c-95b3-8e1b2f756f83",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5a2c56cd-5465-41b0-ae3f-0222ed888ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00133b9d-aded-4c50-9640-6eab8b0bafd3",
        "cursor": {
          "ref": "090b90e4-964c-407c-a9f2-d7f3f8e6480c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b95abee0-9a97-4e73-a75e-66e0748d1513"
        },
        "item": {
          "id": "00133b9d-aded-4c50-9640-6eab8b0bafd3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2df3c718-1401-4d45-954c-0cf019c303f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44b7115-2fe8-405c-b394-9afd981566af",
        "cursor": {
          "ref": "0c13e099-5ec4-4669-b140-d7260f494bd4",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "23acf35f-7dc8-46d6-a32b-0c4ce03f674e"
        },
        "item": {
          "id": "a44b7115-2fe8-405c-b394-9afd981566af",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "566be034-bbf4-457d-ae6e-4f33d0be22eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e5faa7-fb88-441a-b857-d575e1b73a08",
        "cursor": {
          "ref": "dd3d6caa-45ab-4704-bfb2-874a4a7ba6de",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c424ab67-d1f6-469b-8199-f019800349c9"
        },
        "item": {
          "id": "07e5faa7-fb88-441a-b857-d575e1b73a08",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d0d0d8a6-3fd1-4daf-ab55-725a904c7f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285d16d3-aada-4d7f-99b7-e9218ed66abf",
        "cursor": {
          "ref": "2828d5bf-b932-4e6b-82f1-36340266eee4",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "716256e2-03dc-422c-8f14-ec3bb6cd411e"
        },
        "item": {
          "id": "285d16d3-aada-4d7f-99b7-e9218ed66abf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dbb5885d-b450-4380-8acf-0b362092eb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff216ab6-f92c-412b-ab8c-6cdf66976a21",
        "cursor": {
          "ref": "2eb84fc0-1c39-4965-b15b-4080ebee4f2f",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8a6e1a3f-ba12-43d9-a849-e10ab6601443"
        },
        "item": {
          "id": "ff216ab6-f92c-412b-ab8c-6cdf66976a21",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5d96e58a-576c-4da2-8343-2cc03b5ec93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8efb55-c25e-417b-a6d5-b0f99e020a52",
        "cursor": {
          "ref": "191b7b7b-3197-4a04-b4a7-74e2bb43b413",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9715af11-92ef-4635-8ecd-c612856f4c59"
        },
        "item": {
          "id": "6a8efb55-c25e-417b-a6d5-b0f99e020a52",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f46985fa-e680-4d5a-8460-4788d8af970f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c1129b-7f06-4b34-902f-89f930f34309",
        "cursor": {
          "ref": "a3d2ce94-053f-4c35-a4bd-49870bd91932",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fb48c8d7-a079-424e-ae30-dcd1d4d97af3"
        },
        "item": {
          "id": "a2c1129b-7f06-4b34-902f-89f930f34309",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4b8ff972-0bc0-48f0-ae93-5f44847c7fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd99557-0cdc-45d6-9960-a97072b9735c",
        "cursor": {
          "ref": "966e439e-698d-4477-943b-ec9f0e10680e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1d7a20f1-0582-49fb-bc46-c16894d61243"
        },
        "item": {
          "id": "3bd99557-0cdc-45d6-9960-a97072b9735c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6f3aa707-dc46-47a1-8832-4025633dae4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafae0fa-711b-45be-9358-717d3f2281ed",
        "cursor": {
          "ref": "2646f870-ae72-4fe8-bc72-d600fa9fbb3f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "39f1131f-3f30-43ec-b3a9-78edacb599f2"
        },
        "item": {
          "id": "cafae0fa-711b-45be-9358-717d3f2281ed",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c2933374-6ed3-43a3-855e-5cbbfb3b2881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b7d430-e2c3-4152-85ce-0bb9f814e501",
        "cursor": {
          "ref": "d8f79b22-e32a-480a-9e01-39d11305d42f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "943f7af1-d8fb-49a4-af41-3b93260ae823"
        },
        "item": {
          "id": "33b7d430-e2c3-4152-85ce-0bb9f814e501",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5d6ef0a9-2d9e-4b10-afa4-d331c2df6a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10e77f1-72f5-4feb-9043-b1daac484412",
        "cursor": {
          "ref": "b8842016-7653-4a96-a148-0c9bb6972835",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8995ac5e-6667-42f6-8b87-72f622322491"
        },
        "item": {
          "id": "d10e77f1-72f5-4feb-9043-b1daac484412",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8a4af2a1-69c3-469d-99e7-56fc9f392dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70048a67-1de8-45d5-bb48-492b78ea4513",
        "cursor": {
          "ref": "dbc8c3d2-a6cb-4e36-8642-3f7b14f2fe9f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b2f88f74-efa1-44d6-9be5-48c5ef45007e"
        },
        "item": {
          "id": "70048a67-1de8-45d5-bb48-492b78ea4513",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f29020ce-dff0-4805-b087-71c3b27d4004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9b4da2-ba96-4c21-a519-cb10d6fb50a2",
        "cursor": {
          "ref": "8552ba6e-dd0d-4e70-b576-63662d63b8d8",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ecd2b314-9dd8-474c-9aa3-b46fd20e0653"
        },
        "item": {
          "id": "0b9b4da2-ba96-4c21-a519-cb10d6fb50a2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "40f7bbbc-e8d5-43e0-94a9-4cd58dd13f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1406df-ae52-48fa-a640-95487f7deefa",
        "cursor": {
          "ref": "c33a1cae-f569-40cf-999a-85c58ab37ee7",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7eed823e-d6cc-4f93-8ba3-8a968bc33441"
        },
        "item": {
          "id": "ec1406df-ae52-48fa-a640-95487f7deefa",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fe532658-93da-45bf-8f80-be7dd3bd7750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c9ea2f-347f-4d96-80ff-b38986ecec87",
        "cursor": {
          "ref": "b0d552b8-33b0-4196-974f-e86011518cdb",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bb856b97-c770-4dbe-ba7a-f2ee96e99722"
        },
        "item": {
          "id": "61c9ea2f-347f-4d96-80ff-b38986ecec87",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1f4e3138-11ce-4ef3-94de-47d9074ae79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8346e59-d0b0-4ca8-83fd-100da7f5865a",
        "cursor": {
          "ref": "e790a8c0-bd35-4f91-8eb9-dffcb87abf04",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2af53c3e-7221-49dd-98e6-b0cf97ad4025"
        },
        "item": {
          "id": "d8346e59-d0b0-4ca8-83fd-100da7f5865a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e76c67f6-424e-4ba3-967b-e7e9bff2490d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7ffba1-f608-43d9-8814-e281a1309dfc",
        "cursor": {
          "ref": "29da1bab-2f85-4df1-8a3b-7f8101b014fc",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "676a03e5-2453-4271-ab92-afe29d12cd4b"
        },
        "item": {
          "id": "ea7ffba1-f608-43d9-8814-e281a1309dfc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9524a241-4071-4808-b2c1-6d94b4e8bee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45c5b93-0320-4d2f-903c-50c7173b3b72",
        "cursor": {
          "ref": "0c3f01dc-9b30-4537-9a10-61ba486a14ab",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cb279f7a-83f7-478f-b2dd-954068d82839"
        },
        "item": {
          "id": "f45c5b93-0320-4d2f-903c-50c7173b3b72",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b7c187b4-db52-4729-83bc-c72cc27cc582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec086d9-2b38-4ede-93c5-a47c591d642a",
        "cursor": {
          "ref": "57dd0275-3ebf-4fad-b8aa-57f0cbd922df",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3223b798-8a89-49ea-b3bf-e66e4af74639"
        },
        "item": {
          "id": "8ec086d9-2b38-4ede-93c5-a47c591d642a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c60c7b9a-4034-4546-9fa0-d11f106bc66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0a7431-50d1-4740-9dcb-54eb1e070fe8",
        "cursor": {
          "ref": "be8b2025-5213-40dd-ae79-fd757283f9aa",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "86dd5b8b-70b5-40bf-a90a-3a6bdbe1c9da"
        },
        "item": {
          "id": "3e0a7431-50d1-4740-9dcb-54eb1e070fe8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a838ec58-ac10-450d-a1e6-529a63ab3710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ed9294-557f-431f-9645-bf9bb8f9d10f",
        "cursor": {
          "ref": "691b3b1a-e147-44b2-a3a3-0fe5d88d2502",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "792c5692-411b-4ec4-afbd-1e23dad5795c"
        },
        "item": {
          "id": "b8ed9294-557f-431f-9645-bf9bb8f9d10f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8be479f2-e348-4184-9111-0f17f4ab5947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17abf89-a75d-40d7-b9c9-14af3c6303dc",
        "cursor": {
          "ref": "afd2cd1d-e9da-4ef8-83c4-886b7ed764cf",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0ccc3f39-6107-4ac5-8217-fefae74ae756"
        },
        "item": {
          "id": "d17abf89-a75d-40d7-b9c9-14af3c6303dc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7d5fb312-0553-4890-80ae-99fcf53ad3b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9132a5-58a9-4fb0-aaf8-3a649ddcc476",
        "cursor": {
          "ref": "40e1fb54-155b-4722-8e4e-dcdd5af96d78",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e1bdcd57-4354-4891-aa18-892b6f731069"
        },
        "item": {
          "id": "6c9132a5-58a9-4fb0-aaf8-3a649ddcc476",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c1cc8918-b39d-44d6-b564-5796e1db346f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9103ba56-6b5a-41c9-8341-926ad5a6ae78",
        "cursor": {
          "ref": "48c034c9-ba1a-4e8b-a723-82e2ffe4c24d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4b980ce2-95b0-4599-bc93-04ead57c2980"
        },
        "item": {
          "id": "9103ba56-6b5a-41c9-8341-926ad5a6ae78",
          "name": "credentials_issue"
        },
        "response": {
          "id": "de41a0be-e106-4015-a423-e44801251fcd",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "32427b3c-6cad-4f61-b165-732ff7862125",
        "cursor": {
          "ref": "c2dcfec6-fb89-4340-9cee-0d1b09d03e1e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ef58926d-b638-469c-95b6-7bc72fc64fef"
        },
        "item": {
          "id": "32427b3c-6cad-4f61-b165-732ff7862125",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a1804550-90b2-4db6-aea5-a6d45ad8577e",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "478996d8-c976-40fe-b357-ee6b997a5a19",
        "cursor": {
          "ref": "5ce5b007-0f88-4471-81ed-6f1356f489bf",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "380e2174-bb89-47df-966f-b6fd4e02d71a"
        },
        "item": {
          "id": "478996d8-c976-40fe-b357-ee6b997a5a19",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d4e3f842-42bc-405c-8ac1-cd388a69fd06",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4872ea3-8d93-41bb-98b5-862a655d127c",
        "cursor": {
          "ref": "99bf1d63-45ce-47c1-aaa3-7f02811fb07f",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1ffa6875-a41f-4c67-ae58-88e2632cd88c"
        },
        "item": {
          "id": "c4872ea3-8d93-41bb-98b5-862a655d127c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1ebb007a-c640-455a-b779-430e9c25294c",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d650acbf-f688-41a2-accf-790234a1b72e",
        "cursor": {
          "ref": "cef927fa-eeab-4255-93d7-e19d43681a2b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "065e1727-97fb-4ded-835b-070dfdeb09e3"
        },
        "item": {
          "id": "d650acbf-f688-41a2-accf-790234a1b72e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a2ba88f6-8878-4186-9b1b-b277e10f3bfd",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-10T00:34:46.101Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-10T00:34:46.101Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ac3f262e-fe84-4cd8-a64b-2039d2ee6541",
        "cursor": {
          "ref": "cb67a283-bb4e-4fcd-bd00-4a01a679137c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5d88e94a-3b88-4528-95cd-fca4165a531b"
        },
        "item": {
          "id": "ac3f262e-fe84-4cd8-a64b-2039d2ee6541",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f755bd7e-2ad3-4f63-843f-086562cd7627",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5ad1fa-fbb3-402d-8e98-0978fb762613",
        "cursor": {
          "ref": "4bf71563-563f-4925-8d32-690969d818ec",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a36036cd-0c14-44e6-82ab-4d09876e6f7b"
        },
        "item": {
          "id": "7a5ad1fa-fbb3-402d-8e98-0978fb762613",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9936864c-2e37-40e5-a7c0-96b5a5c1f871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b21f97-8610-4b1d-9485-8a43f210c378",
        "cursor": {
          "ref": "cd4ac945-65dd-4755-87a4-ee8758eb3739",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2908d72f-f656-4582-b4e1-aeedc08904d6"
        },
        "item": {
          "id": "d8b21f97-8610-4b1d-9485-8a43f210c378",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "31e5c22a-b194-4406-81ca-30c74e1ecf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912d94b9-62c3-4a1d-bbde-fa5caf5b54c2",
        "cursor": {
          "ref": "a81608cf-31ab-4c2b-9a09-0751d7ada2db",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6753fb93-6441-4bad-9ebb-48dd84f04981"
        },
        "item": {
          "id": "912d94b9-62c3-4a1d-bbde-fa5caf5b54c2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2f5e1d9b-54ce-494a-bfb9-c083d3fa3652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18fea51-96f6-40c2-bb20-5c583a8a4b5b",
        "cursor": {
          "ref": "0ea8a1bf-c6a7-47c3-af6a-e9754562af07",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "754beb67-d6c8-4d35-aea3-f306e1548dcd"
        },
        "item": {
          "id": "f18fea51-96f6-40c2-bb20-5c583a8a4b5b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f526dd6a-5d04-466c-bcbc-f3f070157c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d347f2-f568-42e8-beff-bf9ff4918c01",
        "cursor": {
          "ref": "1deba3d3-7d62-47c1-b9c9-b37de3632520",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5fc30a57-2462-4248-9e79-ff5d71856429"
        },
        "item": {
          "id": "e7d347f2-f568-42e8-beff-bf9ff4918c01",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "214a7cc1-47b8-4d6f-9008-ca38df754e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aecc98d-6c5b-4a44-8d17-0899d951569e",
        "cursor": {
          "ref": "2b908eca-1277-486d-b7ed-c73acd2e2308",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "be0f89e6-b2db-46f3-bf71-225de67d46cd"
        },
        "item": {
          "id": "9aecc98d-6c5b-4a44-8d17-0899d951569e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "84d447d4-3742-459d-88fe-b48d06672868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e953973-d6a6-49c2-93ca-677b520cb79e",
        "cursor": {
          "ref": "ab31383a-c2e5-4624-be84-aa6eace16120",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "086b2cae-7ef5-4f5b-a65b-c06a00f75c48"
        },
        "item": {
          "id": "1e953973-d6a6-49c2-93ca-677b520cb79e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6b870763-672f-4d44-bd18-38b8ed35b207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0e465b-6d03-41ed-9aea-e5e621f129fc",
        "cursor": {
          "ref": "6bf957e9-b367-482c-b6d5-f29bd160a013",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b5f87cc6-db38-4f66-8312-4817c7a14d0a"
        },
        "item": {
          "id": "fa0e465b-6d03-41ed-9aea-e5e621f129fc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2793179f-af7e-4371-aabb-a2d22dbcc066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9eb244-636e-4533-9562-3beb6d2d8458",
        "cursor": {
          "ref": "39593213-77d7-4b37-81e3-6258870cc376",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e788807e-6d26-448a-b2f4-a9adcb602bb1"
        },
        "item": {
          "id": "2c9eb244-636e-4533-9562-3beb6d2d8458",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "406637ff-11bf-430c-97cb-fc86b46804dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cca6d1f-8473-421b-9e79-73eb6a71486d",
        "cursor": {
          "ref": "cba5f321-5017-4e5e-a858-6af65c24a40c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5b7ee97d-2120-4db4-9e68-83b46fe1bd2c"
        },
        "item": {
          "id": "4cca6d1f-8473-421b-9e79-73eb6a71486d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bb182137-37af-4b31-b9d9-ad654b4f4052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7fc6c8-cd08-4256-afe3-9e5f6e0accae",
        "cursor": {
          "ref": "4b0adefa-c797-462b-b55c-e26806c40c3c",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7a961c32-1b08-4655-9f68-5e2396cddd11"
        },
        "item": {
          "id": "ab7fc6c8-cd08-4256-afe3-9e5f6e0accae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3648973b-9901-461e-ad9b-7f4f34386293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4d8776-2057-4393-9aba-ccbbaa599219",
        "cursor": {
          "ref": "3aeea65f-901c-4194-902c-d1f0f0cfa000",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e3947c28-14f5-43e3-8087-a1d98fdde86e"
        },
        "item": {
          "id": "2c4d8776-2057-4393-9aba-ccbbaa599219",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e2f0c101-d922-46fa-a0a0-aae99c5c0a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299b58d1-32ef-4907-917a-1ad4cafb5786",
        "cursor": {
          "ref": "6990440f-189a-497f-b2b2-c1fe77a9262d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1102246b-f6f7-42b1-bc34-f8358b48c834"
        },
        "item": {
          "id": "299b58d1-32ef-4907-917a-1ad4cafb5786",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c4d93bea-81a8-4db6-ac29-21fde69e4960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a52811d-26cf-4505-83c6-0ea8272ab123",
        "cursor": {
          "ref": "bf4c1565-7979-44a9-b423-8e9ff1f16b9b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1fb3eeb7-a8ac-4556-9a99-6240a0b4a4b1"
        },
        "item": {
          "id": "4a52811d-26cf-4505-83c6-0ea8272ab123",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6eeaa6e6-ca06-4fd8-a3e0-5510b3b86c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645ca933-9d15-498f-9e67-97df6808c4cb",
        "cursor": {
          "ref": "59b9da23-a7cb-4d5d-8840-873fccb234b3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ca913953-921d-49e3-b813-c3cb8847fab7"
        },
        "item": {
          "id": "645ca933-9d15-498f-9e67-97df6808c4cb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "77a7c318-b4e8-4054-b129-be57a2fa04d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72718fa0-e1f8-4df3-b6f7-acc25d484c30",
        "cursor": {
          "ref": "e7845e4c-1e51-44a5-bd35-b728ced38005",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "43822b5b-6213-47fe-84ae-60cf176dd32b"
        },
        "item": {
          "id": "72718fa0-e1f8-4df3-b6f7-acc25d484c30",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fbf6d77a-3bdc-44bb-b453-92ead9f1e162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8c4ded-9142-489c-a7ae-200d228b5739",
        "cursor": {
          "ref": "d4080478-c20b-4bd5-b5e8-8317e72c40f4",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "51218840-daad-4c30-a324-0cee93294c23"
        },
        "item": {
          "id": "8d8c4ded-9142-489c-a7ae-200d228b5739",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5314ded7-3d4a-4577-b93b-12d5ae32eabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df02fa4-c59d-4d55-b40d-172f7837831e",
        "cursor": {
          "ref": "c64f54cc-a77b-4e6c-9b28-2098b7adb7f6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4acaac74-be24-440a-b2f9-377194144054"
        },
        "item": {
          "id": "0df02fa4-c59d-4d55-b40d-172f7837831e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6b2a83d9-f38c-4f7e-b427-5ff2c9216e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56633c5-c8dc-40d5-b056-a627b7fa22c0",
        "cursor": {
          "ref": "42b0e4b8-323b-4a22-a230-4601930a6b17",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1cebe151-abe7-498d-ae53-307ea487e2e1"
        },
        "item": {
          "id": "f56633c5-c8dc-40d5-b056-a627b7fa22c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b61a7bf3-9802-4d3f-b40a-811fabe5f863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a973ded6-b6f3-41e8-a9e5-60b5b8b64545",
        "cursor": {
          "ref": "a187b4b3-b9c8-4908-801a-13428c73738a",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "88c67395-0541-4cf8-8263-9c0ea9f0617c"
        },
        "item": {
          "id": "a973ded6-b6f3-41e8-a9e5-60b5b8b64545",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d2a81713-6a31-4bc5-96bb-2bd094079eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25dd36c6-f6f7-403b-896c-7c010ed3d9d0",
        "cursor": {
          "ref": "f67032be-71df-4003-97ed-6f4bf68f1e15",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7b226499-e60f-4f1c-8f9f-c5e8573c6cd8"
        },
        "item": {
          "id": "25dd36c6-f6f7-403b-896c-7c010ed3d9d0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "49257e0d-1ba0-4a18-bc84-b8816c4163a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb072b7-ba62-438a-bc2d-cbecada77d5a",
        "cursor": {
          "ref": "dd8e0e47-b364-43e2-bbf5-9b83d5401238",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1e237999-c0e6-455f-aba8-4f92c1baab90"
        },
        "item": {
          "id": "bcb072b7-ba62-438a-bc2d-cbecada77d5a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3c02ba60-dd30-40c6-859c-b96a138febe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11dad0ae-a22e-481b-9eb3-c572f44e04cc",
        "cursor": {
          "ref": "90f813f6-3c60-4539-bbf2-2c38ca23297e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1d1a6d54-a297-4675-a835-6ab1350097c9"
        },
        "item": {
          "id": "11dad0ae-a22e-481b-9eb3-c572f44e04cc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1d986134-9b94-4b5e-9b6d-0a17bab9080e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97a4fd0-e75e-4b8d-ab31-894c6f7d3146",
        "cursor": {
          "ref": "0c73007f-4ae6-4c46-af6f-3a0afe198626",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ff83c8ce-79dd-4448-868e-1c25eb781bb6"
        },
        "item": {
          "id": "a97a4fd0-e75e-4b8d-ab31-894c6f7d3146",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "314d6ae7-1416-4e01-92b4-0419ac9ea52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f38447c-c475-4ae5-ba34-611a84ab4e81",
        "cursor": {
          "ref": "c7f54db1-c097-403e-a251-80cc052292ca",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "691bacca-97b1-453e-b82f-6ba7cc8cd52f"
        },
        "item": {
          "id": "6f38447c-c475-4ae5-ba34-611a84ab4e81",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f272f8f7-8458-47a7-8363-8b489d2bd968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c3f802-d98f-430c-9e44-b97c47ee5a95",
        "cursor": {
          "ref": "60016b37-bc87-4d44-9cc9-8e7d3780d0a9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1ea69340-dd78-4467-82aa-7352fdbbc079"
        },
        "item": {
          "id": "a6c3f802-d98f-430c-9e44-b97c47ee5a95",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dcf1bb1a-3d24-44ea-b34c-288218adb7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06991855-922e-4082-9043-8dac1da24da4",
        "cursor": {
          "ref": "73402143-3c6d-45c2-b632-a6d291e0a23c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "184553d4-9971-48f1-a6ea-1648b59b6450"
        },
        "item": {
          "id": "06991855-922e-4082-9043-8dac1da24da4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1afaab02-3b60-4ccc-8e70-f7bf7a433176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8071a861-b14a-4dc0-81a7-a69d3d1ead59",
        "cursor": {
          "ref": "b2887c0c-f54c-475c-a121-21030bec1c01",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0ad167db-a316-4578-b8a0-72cf9d7887c3"
        },
        "item": {
          "id": "8071a861-b14a-4dc0-81a7-a69d3d1ead59",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4f30d9a1-917a-4a0b-b253-fa9a630ecc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3adcce-311f-4ed8-8761-41655632d852",
        "cursor": {
          "ref": "94dba2e5-622b-4b5d-a684-7ba4eb1c00a0",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7b73eeb1-e0e4-4287-bfe5-9a66888455bf"
        },
        "item": {
          "id": "fb3adcce-311f-4ed8-8761-41655632d852",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "25655653-2a54-45b0-9ce1-4d6e0a903fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86555f27-e221-4dbd-bb07-e78a0e8e896e",
        "cursor": {
          "ref": "bccc3688-ee05-41a2-b8be-2ba40ffac073",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "166b456f-9f30-4f77-a452-d2bc87ca4f22"
        },
        "item": {
          "id": "86555f27-e221-4dbd-bb07-e78a0e8e896e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ba42bbb1-7ad4-49ef-8541-f6b5734d9bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a887b5f-b6ae-4138-acd0-6116c430d634",
        "cursor": {
          "ref": "58efd96f-db0a-4f3e-9a5f-61eb5a7714cd",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2181ca69-4637-4e79-88e9-831195ab03b8"
        },
        "item": {
          "id": "9a887b5f-b6ae-4138-acd0-6116c430d634",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e3fcc965-05d9-4693-9043-84867a519462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dbea56-64fb-464b-84f9-014abc36812d",
        "cursor": {
          "ref": "5bb9f368-6c46-460d-8c88-8159c6b0cd83",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8099e05c-5330-443d-b73f-4df4cb7fc6e6"
        },
        "item": {
          "id": "b0dbea56-64fb-464b-84f9-014abc36812d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2b526303-9e94-41e7-a5ce-ab3736becab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8316e92e-3f18-47e7-a5ed-1f1e35a50c2e",
        "cursor": {
          "ref": "9069b843-c6a5-42dc-a21c-1722d73689c3",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2c10e1b1-9113-4d0d-b87f-5dad3347605d"
        },
        "item": {
          "id": "8316e92e-3f18-47e7-a5ed-1f1e35a50c2e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f83f23bd-e6b4-45a8-b5e3-147916e26ee3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022674e5-36c1-45d5-a268-47cbebc579cf",
        "cursor": {
          "ref": "b3bc8711-d932-4766-958b-9e1945e5a9a5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8f5634e9-071d-4ad2-b25b-dc76324ca259"
        },
        "item": {
          "id": "022674e5-36c1-45d5-a268-47cbebc579cf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8ce6a07a-e9c4-42db-89f5-75df0ad11993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bf7bb6-27a0-494c-bbd4-cab6083a49ef",
        "cursor": {
          "ref": "7a56d497-9755-425d-b3de-bed2cdf687a7",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4faddb7b-b7f0-4dec-a9c6-be6bafb34002"
        },
        "item": {
          "id": "22bf7bb6-27a0-494c-bbd4-cab6083a49ef",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5d42683d-929a-4acd-b0dc-5c82bac14fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6303007e-53ad-4f4a-a123-3365fedb282c",
        "cursor": {
          "ref": "8115ca11-1fe2-42d3-803f-d102c21536c4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9cd432a6-6db7-4ad2-bd3c-0e23f66ce545"
        },
        "item": {
          "id": "6303007e-53ad-4f4a-a123-3365fedb282c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fa5b27ee-10d9-44fa-bf00-9a9cfef1fe26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8277bf-7048-40c5-bd8f-0eebc1c22489",
        "cursor": {
          "ref": "e45ffa9b-b0f4-490c-a732-320f2754e2da",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d7d3ae9-31df-42b3-8e4a-bdce260ba475"
        },
        "item": {
          "id": "7f8277bf-7048-40c5-bd8f-0eebc1c22489",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d17fee2-b7b9-4047-bb1b-dd771017d87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f659b342-790f-41d0-939f-3277b64588dc",
        "cursor": {
          "ref": "1120fa4c-eb77-448f-bc11-3d202894c8fd",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "19e0038e-f300-4f02-81bd-ddd88514e7c1"
        },
        "item": {
          "id": "f659b342-790f-41d0-939f-3277b64588dc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "49aa43b0-a6a7-41c6-90ea-5f1200e9ba93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75729b80-2892-406d-b401-6ebf76ea65c0",
        "cursor": {
          "ref": "e6a4da01-4849-4f98-8600-978c524e72f2",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6c7bbf2b-c37b-42c0-93c5-9f14ab4fe288"
        },
        "item": {
          "id": "75729b80-2892-406d-b401-6ebf76ea65c0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b63e920f-53da-40eb-86eb-a345bfa785cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a11a36b-02a1-415b-b075-9c42cde315d3",
        "cursor": {
          "ref": "a3c0a454-6eb5-4960-b8aa-11afa0d86611",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ce107b0a-174b-40fc-950b-592c45a7c67d"
        },
        "item": {
          "id": "0a11a36b-02a1-415b-b075-9c42cde315d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4dea04c4-2d36-4263-8585-fd35e5a84302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995cb834-8d53-4748-82c9-75cfe27fe4fa",
        "cursor": {
          "ref": "b70288b3-40f6-4e6f-9ffa-5635e236da92",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "57443d0d-15b8-4d99-9548-3234f161fdcc"
        },
        "item": {
          "id": "995cb834-8d53-4748-82c9-75cfe27fe4fa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9ab90503-b1a7-4107-9165-fc5df4370e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22a5f55-f5e2-4285-a56d-5381e3403759",
        "cursor": {
          "ref": "d19dd525-6011-4a5a-b9bb-f73fc76e8a56",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "982014cc-1c02-45b5-a402-79060c36e0bd"
        },
        "item": {
          "id": "d22a5f55-f5e2-4285-a56d-5381e3403759",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "969c8bea-5c4b-4d13-a305-89349f1a0797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa4f792-8d52-44fe-9205-fb097b61292f",
        "cursor": {
          "ref": "fae03754-fe4e-4d19-845d-899bc7eda839",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "55aa7523-c166-4584-885c-e811cb0fc8db"
        },
        "item": {
          "id": "7aa4f792-8d52-44fe-9205-fb097b61292f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "10e9e18c-f831-4ccd-a2f2-133971c7f0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3f5877-c685-498b-a1eb-e59aa41f31f2",
        "cursor": {
          "ref": "05aeda78-3170-45a5-a089-3e5e78f553eb",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "22fcc7bf-93af-48ca-950c-4784763456d9"
        },
        "item": {
          "id": "5f3f5877-c685-498b-a1eb-e59aa41f31f2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c36cc446-f60c-4c50-a7d8-1cc335cb7038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6c9714-f4d9-4871-95d3-dcb809d35600",
        "cursor": {
          "ref": "00ed79f4-cb30-421c-b9f6-2a51358c6891",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8bb00219-530a-470f-ad6e-32e2d10b3b76"
        },
        "item": {
          "id": "bc6c9714-f4d9-4871-95d3-dcb809d35600",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8f957249-8ce7-4bbc-b5b0-2321aeae4a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658d2a8d-7222-4048-b369-f7eb67472761",
        "cursor": {
          "ref": "0fc99752-b309-4667-b64c-8ea71b32ed17",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bf8967ab-b32a-4f0e-964e-847c0895735d"
        },
        "item": {
          "id": "658d2a8d-7222-4048-b369-f7eb67472761",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "331efca2-ce83-4eee-ba97-7bb3e97769d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27aa9aab-c9ba-4a23-8098-7bf7d287efa4",
        "cursor": {
          "ref": "650b1629-8f01-4151-9c17-8c806d3be621",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9f8442f6-042e-4abf-abde-de0aabb6f6cd"
        },
        "item": {
          "id": "27aa9aab-c9ba-4a23-8098-7bf7d287efa4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4a2881b5-a0eb-4fb5-bc34-dac239cc5898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60215f10-2989-4217-bfb6-08b451d81d06",
        "cursor": {
          "ref": "5a7a9ea0-a355-465e-b627-fa86d5a53113",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "495b8572-ba68-40f3-9759-a07617bab418"
        },
        "item": {
          "id": "60215f10-2989-4217-bfb6-08b451d81d06",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f167ff29-87e8-4675-ae79-78b919518159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e86784-0fcb-4e7a-af4f-09cd47e80edf",
        "cursor": {
          "ref": "eca94153-b7d9-45c9-a9e6-da505453d68f",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0c643b16-5893-4107-be72-35f432a6f9d7"
        },
        "item": {
          "id": "48e86784-0fcb-4e7a-af4f-09cd47e80edf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e1596870-aee1-4e87-932e-af4fb46c8d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41418b79-4654-4eb4-b573-487267466da4",
        "cursor": {
          "ref": "93ffe8b9-3608-43a9-aab7-d49e7f064d8c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "42037088-e1c3-4f0a-810c-083020d806b4"
        },
        "item": {
          "id": "41418b79-4654-4eb4-b573-487267466da4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c4f4eac6-882a-40e2-99b9-f08614df305b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e434ebe0-539b-4134-85d9-59b27b073e55",
        "cursor": {
          "ref": "bfaade0c-cd70-4328-bb65-0675dbb3b058",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3d1e96b8-5382-4558-994f-7f6097a0bd81"
        },
        "item": {
          "id": "e434ebe0-539b-4134-85d9-59b27b073e55",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "70603f85-f309-49b9-87a6-05a89e22fc34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a0ccde-1093-4c42-827c-f313b39f1d7f",
        "cursor": {
          "ref": "8a160713-0ac1-4ff3-b782-5124c8d35e90",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "74b55b29-f533-4203-ae9d-51c23f52ea06"
        },
        "item": {
          "id": "b2a0ccde-1093-4c42-827c-f313b39f1d7f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8b051813-7224-4e85-92e9-1178d60315ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643a77e6-0bcb-43b0-96a3-4832b59e161c",
        "cursor": {
          "ref": "7fb1ea0b-beee-46bc-aedd-949ee72eec14",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "42edc6a8-acd3-478e-927e-a21561cc6175"
        },
        "item": {
          "id": "643a77e6-0bcb-43b0-96a3-4832b59e161c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4f78791f-ab51-4930-91ac-126593522265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad881a97-b2d5-4c5a-afab-f720182a5f66",
        "cursor": {
          "ref": "f19c9e8b-2cf9-4e46-a276-6c4082e343f4",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "09df4432-e44e-4dbf-a3ab-f779b8e90b7e"
        },
        "item": {
          "id": "ad881a97-b2d5-4c5a-afab-f720182a5f66",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "16772319-c547-458b-a7b4-b9bbff5646fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673979da-4ed9-4990-9d2a-59c86237674d",
        "cursor": {
          "ref": "74621215-bd84-40bb-a4ee-a42010caa8cd",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bb6e51b8-9950-425d-89a6-c5c879e9ac04"
        },
        "item": {
          "id": "673979da-4ed9-4990-9d2a-59c86237674d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "85d6775a-59c3-452b-8a4c-efbb24f917f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c1d237-78d8-4ee9-baca-1318baf5e762",
        "cursor": {
          "ref": "82f898c6-6cd6-48cc-bcfe-8155454970dc",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "53417dd8-f94f-4c94-a9e8-d66119b7fded"
        },
        "item": {
          "id": "29c1d237-78d8-4ee9-baca-1318baf5e762",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8d317033-bebf-427b-974b-e5245722e702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19ae976-8051-4352-8da7-b12a362e0f9a",
        "cursor": {
          "ref": "2c4dd0c9-e983-4f9c-91ba-03d7b830fa21",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2ed26aaa-73fc-427c-9c4f-1fc8f5968367"
        },
        "item": {
          "id": "c19ae976-8051-4352-8da7-b12a362e0f9a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c774f8e2-5ac8-4a43-a646-c2cf9f502ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac11e9-9e39-4ec4-acb6-9a8089a4fb35",
        "cursor": {
          "ref": "a0cfc08a-ba01-4bbb-9d28-3dacff0160f5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e5d7d164-034b-469b-a40b-7e55b78d293a"
        },
        "item": {
          "id": "4bac11e9-9e39-4ec4-acb6-9a8089a4fb35",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ac141897-7e1a-4b84-a26e-087b10dd5402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b72e26-ee7d-4b1a-b117-8d0f7d429281",
        "cursor": {
          "ref": "df0c5695-23bb-4060-93cc-5025f9a3af36",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "40372f63-fa21-4cc3-b555-655940002d5e"
        },
        "item": {
          "id": "98b72e26-ee7d-4b1a-b117-8d0f7d429281",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ad7423f6-affd-4776-b2fd-437a20fb6921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3134e9f8-5b26-492e-94b8-18633b09786b",
        "cursor": {
          "ref": "1f64e4df-6c85-488f-8824-2f68c8c2278f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6a1a74e8-7ac6-47c6-9d9b-ae17bbb5ea86"
        },
        "item": {
          "id": "3134e9f8-5b26-492e-94b8-18633b09786b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fc8a888e-8800-47b5-a93d-5f26364cab3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ab7ee5-5057-495d-8191-1c2892920e05",
        "cursor": {
          "ref": "f8824016-2757-4065-b6d7-cb6baf3165e6",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9eed8774-22e4-43ca-9420-7a2fc1e280b7"
        },
        "item": {
          "id": "02ab7ee5-5057-495d-8191-1c2892920e05",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "81785bb3-17ad-49c4-823d-fe8d0ea0149d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9bde90-4657-456d-aef1-80412e88eb38",
        "cursor": {
          "ref": "98019a78-f364-4788-bb5a-50d2ae50d2ca",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "93bf6845-38df-4219-ad27-cfc73c774059"
        },
        "item": {
          "id": "9a9bde90-4657-456d-aef1-80412e88eb38",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f0110adc-f997-484f-809c-47063931c55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc7c841-2dd4-4019-be40-aae63ae4b5b3",
        "cursor": {
          "ref": "8378ddcd-20f8-447d-af9c-24355a8c588d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2d64f49d-fe49-4897-a0c6-8621fc0dda27"
        },
        "item": {
          "id": "ffc7c841-2dd4-4019-be40-aae63ae4b5b3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "804cdcf4-6c4f-464f-94d7-937b8c089b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af449a30-f2f2-470e-a0b3-6846183aadfc",
        "cursor": {
          "ref": "f691defa-9a86-4054-a9a6-2522d614c180",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b6285712-e00e-4e8e-ad04-e392bfccd0e6"
        },
        "item": {
          "id": "af449a30-f2f2-470e-a0b3-6846183aadfc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "407480f4-c46a-4b59-b8e9-ddd76df362dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f05a9e-a28d-4dec-b9a2-485057306387",
        "cursor": {
          "ref": "0b468d25-b874-4f24-b056-f78d43c6de9d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2b2f84b-b0ab-4344-ade2-ec6ee9395cf9"
        },
        "item": {
          "id": "63f05a9e-a28d-4dec-b9a2-485057306387",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4c027ba0-37af-4c3c-b198-78693bd13ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3bf915-2308-4d64-840c-c54e060c2f2b",
        "cursor": {
          "ref": "de61003a-5c39-49d0-8938-63a2e4a00371",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a96a5d09-fabe-45e9-b022-404d11a0ef45"
        },
        "item": {
          "id": "7c3bf915-2308-4d64-840c-c54e060c2f2b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "32e83efb-4f14-442a-a1e5-74b4caa279fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea66857-c18a-4b6e-90d1-2df2008b0753",
        "cursor": {
          "ref": "2dc0434f-0831-49df-98f5-ceaad9fad14f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b70b04ac-dd39-44a3-b8b8-e9de173a0ee1"
        },
        "item": {
          "id": "6ea66857-c18a-4b6e-90d1-2df2008b0753",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "068a0466-1b1b-4b70-b965-fd72e454e282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e3da51-3894-49d5-b6ab-04fbb3561d23",
        "cursor": {
          "ref": "5e746123-7f28-4656-85c4-69b278f16ce9",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7901ee20-7314-4559-9c41-c08b5b4c6720"
        },
        "item": {
          "id": "a0e3da51-3894-49d5-b6ab-04fbb3561d23",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2c2c18b7-1163-41b9-a56e-0866b287b250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6b099b-6429-455b-a9ce-fed38a02350a",
        "cursor": {
          "ref": "5a1105d9-ddce-46aa-938c-37fac247de33",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b4ef5f4f-e521-4fdc-a87f-5f5ba8636e85"
        },
        "item": {
          "id": "ff6b099b-6429-455b-a9ce-fed38a02350a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "330333a8-4141-4676-bd69-a47a2db609c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671806aa-9a65-44e7-a15f-0511f605f013",
        "cursor": {
          "ref": "0a9f6bc1-2064-4dc5-bf9d-a822e778fadf",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "77d56c19-1a34-419f-ba6b-3d83a17cc460"
        },
        "item": {
          "id": "671806aa-9a65-44e7-a15f-0511f605f013",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a88e9be1-e354-4a9b-9c3b-8dba1a0b06a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d36e37b-7b71-4679-93f5-d2ac303191bf",
        "cursor": {
          "ref": "0211fe6a-bc40-4ee7-8cae-d742de0d3878",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "faede9fb-7e38-4b4d-85b3-c0eddb63a779"
        },
        "item": {
          "id": "2d36e37b-7b71-4679-93f5-d2ac303191bf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "95ffcf96-9b77-48cb-a33d-d1f30c97fae1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da68e528-a23c-4807-b051-dfb1c424df66",
        "cursor": {
          "ref": "2267a406-f548-4176-b426-21ad1f04ca23",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c4b46f64-8cb8-43eb-89db-17e28f9a0096"
        },
        "item": {
          "id": "da68e528-a23c-4807-b051-dfb1c424df66",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7e0471b1-a9a7-4bc8-ba13-ab58badeb0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c862705f-c861-4853-a5ec-6275cac6a996",
        "cursor": {
          "ref": "6c8680d3-7479-4365-9e41-5cebc98362d4",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "50639d54-a114-4122-a4f9-06cdb7ed8fe3"
        },
        "item": {
          "id": "c862705f-c861-4853-a5ec-6275cac6a996",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eb8a8a32-0961-4151-95ea-de6c8436f68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f2a0fa-03fa-4244-aa3e-58e90411e688",
        "cursor": {
          "ref": "b9ebc715-b24c-4693-88a8-d6f6d2adbd78",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "784b7b63-2d05-4325-b564-a8b4885fbe58"
        },
        "item": {
          "id": "d7f2a0fa-03fa-4244-aa3e-58e90411e688",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a33ffa85-6213-496c-8d28-c848c2cda141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41841721-6ae8-427a-bc57-c57f26f1d65a",
        "cursor": {
          "ref": "ea99751f-b2fa-430e-a336-ceed894a615b",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c2407028-5770-4e58-9552-556096ac757d"
        },
        "item": {
          "id": "41841721-6ae8-427a-bc57-c57f26f1d65a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "119c1f56-0e77-47bc-a297-1aa6b5f0cedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e377b46-fb34-435d-876c-7789c819d90d",
        "cursor": {
          "ref": "1871b32b-8723-4ad1-8c7b-8f04360c8f80",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d544e237-74bf-4870-8d09-e3a95cc90a47"
        },
        "item": {
          "id": "8e377b46-fb34-435d-876c-7789c819d90d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9597a0e0-549c-446b-9e64-59681387c99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d54aa9-43c2-471c-ae46-cc68d1af57d4",
        "cursor": {
          "ref": "2d4943c3-6b81-49b6-b74f-7a2856eafce2",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f29a22b9-d2ef-443c-be1e-5603524f9e9d"
        },
        "item": {
          "id": "39d54aa9-43c2-471c-ae46-cc68d1af57d4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3e9b835e-2a46-4c72-bd26-dec395ad8c89",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d8a83c42-48cf-47ea-ab3e-18a43cf0a743",
        "cursor": {
          "ref": "81b230c9-ccf1-43c4-bb8e-944f65415c41",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5ee93a2d-be17-4205-a81b-62c8d8afac0e"
        },
        "item": {
          "id": "d8a83c42-48cf-47ea-ab3e-18a43cf0a743",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eda51615-fc85-4933-a0c4-0fc692554085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252468ed-1f9e-4036-99c5-0bc8064d1549",
        "cursor": {
          "ref": "708b403e-a8f8-4595-8253-f2ff30ac16bf",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a2ea37ed-9d74-4881-863f-290e875f2127"
        },
        "item": {
          "id": "252468ed-1f9e-4036-99c5-0bc8064d1549",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ed65573c-bef0-4052-b09f-303b30a6b27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ba0031-4e00-4fb6-90cd-4243faf501d5",
        "cursor": {
          "ref": "b9b9b96f-a1b3-4d6d-aa04-bbdf98ebc257",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4c2ea2a7-f890-4e54-a78a-6a39d72591f5"
        },
        "item": {
          "id": "70ba0031-4e00-4fb6-90cd-4243faf501d5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "416dcbab-3010-43b3-bf76-58f3fd02e358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579b4254-9ab7-49ae-9521-5315eb018b46",
        "cursor": {
          "ref": "87af47b6-36e1-4c5f-be9f-a6e652e19f07",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0701792c-f86f-4c4b-9fea-cb51d687c961"
        },
        "item": {
          "id": "579b4254-9ab7-49ae-9521-5315eb018b46",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c2f23abd-8b5f-4ad1-bf0b-756fb61ddd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fce7f23-e865-4594-a15c-42d24eb926f4",
        "cursor": {
          "ref": "0e16f5e6-131b-4065-ac7e-4f6c574e1d13",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4754381d-406f-4cc6-943c-9fbc5edca82b"
        },
        "item": {
          "id": "4fce7f23-e865-4594-a15c-42d24eb926f4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a87d995e-33a5-4823-8e1f-f13232786112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e8eda6-ddfa-4488-928d-6bbbbc15fbee",
        "cursor": {
          "ref": "bb473084-ed13-463e-ba51-cd80f9743009",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "04a4b609-350d-4a4d-a80d-35864e823b2c"
        },
        "item": {
          "id": "21e8eda6-ddfa-4488-928d-6bbbbc15fbee",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "06ea4ac1-26c7-4bc2-885b-09fa8cf04fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a98db4c-edac-4429-af00-6963c9614a9f",
        "cursor": {
          "ref": "e45cf8fc-2885-4495-875e-c30c6fe366ea",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0baf53e5-e941-48af-bfef-41b4860405a2"
        },
        "item": {
          "id": "5a98db4c-edac-4429-af00-6963c9614a9f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2906abf5-b805-4b65-8310-4ff741617b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90480b53-0f93-4738-9d8c-5414fa18777d",
        "cursor": {
          "ref": "1378452a-ec81-4200-bb72-1adb48e51cd4",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "369f4438-590b-4bca-a882-ef0aca1c0186"
        },
        "item": {
          "id": "90480b53-0f93-4738-9d8c-5414fa18777d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ea74dca3-63ff-41bb-8fd6-648d7b8e95a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81066f6f-850b-4a11-bc7b-6bcaeb8414a7",
        "cursor": {
          "ref": "c01cd11d-5223-4018-a794-90ff402a3d19",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "349d5d3a-04d1-43a0-b979-cfcd15e3fbed"
        },
        "item": {
          "id": "81066f6f-850b-4a11-bc7b-6bcaeb8414a7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fd3fac6d-6f27-435f-adf9-8c1f46694465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1c144b-75fd-4e77-b0d2-65edac364eb1",
        "cursor": {
          "ref": "d13bb278-2100-4425-a145-47889201ea85",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "089a5050-d731-4d66-bbdd-d13fd2011c4f"
        },
        "item": {
          "id": "ce1c144b-75fd-4e77-b0d2-65edac364eb1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ecc5df0e-302b-4a06-b5dc-0de2bf55809b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c349e6c9-23f1-457c-abd4-6039ee07158e",
        "cursor": {
          "ref": "4809648d-2a54-49bb-9588-d76a9dd4ad74",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fc93ce06-3fd1-4fa5-b6ed-117c54a3111b"
        },
        "item": {
          "id": "c349e6c9-23f1-457c-abd4-6039ee07158e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e73a95de-6bf4-4245-91b5-dad1eae2ea68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62ce4f4-4531-4f7d-adb4-5d3e1cab3c2d",
        "cursor": {
          "ref": "a415d871-4324-45bb-a261-8a478bc52c50",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "80faeb1e-8c2f-458d-b750-e207f04bac1e"
        },
        "item": {
          "id": "c62ce4f4-4531-4f7d-adb4-5d3e1cab3c2d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "51bcba19-0575-49bf-a345-9c7a6f0aa905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d6e6f9-f241-4e46-8d1f-7340f96f90f6",
        "cursor": {
          "ref": "bb9598e7-2b6a-41e8-b787-9a39531401aa",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "327f4b44-d965-47c0-af78-ab52bac12f59"
        },
        "item": {
          "id": "f5d6e6f9-f241-4e46-8d1f-7340f96f90f6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a0e9ac1d-13b9-49cf-85eb-4b86a2992558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62c87fa-dc0f-42f9-9730-8e13762e0f10",
        "cursor": {
          "ref": "cbfffb88-c713-4b34-a137-377a391064b4",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a516a446-3baa-4f98-af2e-6e18c721bd11"
        },
        "item": {
          "id": "c62c87fa-dc0f-42f9-9730-8e13762e0f10",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a470254e-85d5-4b77-8ded-be7fe15eaa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117c4c61-0d39-4c60-a9ca-570247da7aff",
        "cursor": {
          "ref": "998bc10e-9219-48e8-bfb0-35bc5ad94ec9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3e328b63-e809-422b-be76-b62b98fe4f86"
        },
        "item": {
          "id": "117c4c61-0d39-4c60-a9ca-570247da7aff",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "71356313-1534-406e-8e4c-a2410de26500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef4ce66-9337-48cc-9994-42595f909b3f",
        "cursor": {
          "ref": "24fc21fc-7563-40e8-ab6c-7f1660b04c91",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33ae4460-f225-4a59-861e-655be735f3ed"
        },
        "item": {
          "id": "3ef4ce66-9337-48cc-9994-42595f909b3f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b3afd936-02b9-4d97-a818-ce20e377034b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd41ae4d-a7c9-4816-82a3-97287291ccc0",
        "cursor": {
          "ref": "3d1c0f2b-79ed-4042-90e0-f30581261c66",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ac24eee8-b3c5-4faa-8dd1-b9104785eae1"
        },
        "item": {
          "id": "cd41ae4d-a7c9-4816-82a3-97287291ccc0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b0a884c6-3bfb-4881-915e-432cc9ff1536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856312af-84ab-4f3a-9548-03bb098b5bff",
        "cursor": {
          "ref": "55fb009f-249c-41cc-a890-5f460b90706c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3b4d3156-8cdd-4303-92c2-10d7e4b3ae21"
        },
        "item": {
          "id": "856312af-84ab-4f3a-9548-03bb098b5bff",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "097c382f-d74f-4270-9a85-4cf1296fbcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f55fbe-0b7e-44a9-ac0f-d22807381584",
        "cursor": {
          "ref": "94bdb8d0-4c4f-40e8-ba83-5a90aba8aacc",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fd16ad9f-b516-413b-9662-a7c8cecd4b58"
        },
        "item": {
          "id": "e7f55fbe-0b7e-44a9-ac0f-d22807381584",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a877145b-4b1a-4061-8d2c-e5f9113fdcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc35b4c-78e2-409c-91d9-7d1f85248d55",
        "cursor": {
          "ref": "dbba2596-41b2-4740-942c-e776c165233e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "30457d7c-7ac3-4eef-bdf2-1d21c581d107"
        },
        "item": {
          "id": "5cc35b4c-78e2-409c-91d9-7d1f85248d55",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ac5b5878-0e49-4e92-a79b-0ac7fcf58ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5282e785-864d-4b2b-aa99-99ed917a7c58",
        "cursor": {
          "ref": "91f78d21-f5e9-4681-b706-cf051075e5f0",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a729d54b-00f0-45f4-a1d6-e3dc580bd5f2"
        },
        "item": {
          "id": "5282e785-864d-4b2b-aa99-99ed917a7c58",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3c2c1688-5ffe-4aa3-9678-b1c8800b9a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2eb3b3-00ac-4787-b07d-60c35706794e",
        "cursor": {
          "ref": "8e1ca351-4e0e-46a8-8a04-c6a41e0f5ce2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5c430158-2245-426a-b02d-51cdf363a278"
        },
        "item": {
          "id": "0b2eb3b3-00ac-4787-b07d-60c35706794e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "83fce1b2-6a49-4997-aa1c-343611e90319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bb777a-b98d-4e5d-99e2-df6803c9dcbb",
        "cursor": {
          "ref": "ad8b4e0c-6563-49d3-825c-c13230bfaaa9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e4aad873-2638-4797-aa06-2fa5320ee7a8"
        },
        "item": {
          "id": "f3bb777a-b98d-4e5d-99e2-df6803c9dcbb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8dfda821-634c-4863-9d87-2899dd0a733d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be37710-4d1a-453e-8c62-110caaf7a4c1",
        "cursor": {
          "ref": "ffd00b41-6d8b-4ce4-9d91-42828ec44a80",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "66321cd8-3495-4b15-8848-bcb5a4863f81"
        },
        "item": {
          "id": "3be37710-4d1a-453e-8c62-110caaf7a4c1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2044b272-4102-45b2-ad28-16963e54ffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c0c01e-6337-4df0-b84f-3ade16f9a48f",
        "cursor": {
          "ref": "49b8a48a-37a5-43dc-a882-98c92047b99a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6cf86872-3156-4f5a-a9ae-274abe4a5b66"
        },
        "item": {
          "id": "c4c0c01e-6337-4df0-b84f-3ade16f9a48f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f8ba4691-cc7d-4146-8650-4d736ad0d5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91cce60-e519-41f8-8307-2e41a9bf2ccc",
        "cursor": {
          "ref": "06b965d4-c740-4cf8-83e5-841bd3437fe7",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "70583420-8dcd-4f76-8626-2e0ed84bc7b2"
        },
        "item": {
          "id": "b91cce60-e519-41f8-8307-2e41a9bf2ccc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "620906cb-a847-414c-ab2b-311050667fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20e4b73-8328-4d15-b844-b9ca9929e194",
        "cursor": {
          "ref": "9ff41545-f26d-47de-80dc-c788d324dcc4",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3b0f3950-b16a-427e-bf8a-a99045234eac"
        },
        "item": {
          "id": "b20e4b73-8328-4d15-b844-b9ca9929e194",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "62097393-5b67-4558-821c-274ef3f78e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90f752c-87e3-4e2e-8e7e-b43b1d6c31a8",
        "cursor": {
          "ref": "e91c4bab-ee19-4a9c-aaaa-1ac6305c53fd",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3e3ad5a1-f895-406d-af16-69f647876865"
        },
        "item": {
          "id": "f90f752c-87e3-4e2e-8e7e-b43b1d6c31a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "60d97e22-1a6a-4248-8f13-dbf33f1c4750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c354d2c2-4c73-4965-8c83-c05b5338f0fd",
        "cursor": {
          "ref": "3096928f-9713-4bf8-b15a-069de69584c1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bd58a1de-f6ba-4fb4-a7cd-1a61b7173c78"
        },
        "item": {
          "id": "c354d2c2-4c73-4965-8c83-c05b5338f0fd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3b999b12-55e3-43ee-86dc-41ea812d17b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6803f6dc-d8ed-4e43-b8ce-a00dc08f13c9",
        "cursor": {
          "ref": "64d0aa63-e03b-450b-aeb5-bdc0826b254f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6378b888-d085-4f7a-b763-98c7a940777a"
        },
        "item": {
          "id": "6803f6dc-d8ed-4e43-b8ce-a00dc08f13c9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fd54df6f-7020-4aa5-acaa-704aeff28c64",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "19432c61-77c7-41b9-b486-e00c18fd7115",
        "cursor": {
          "ref": "7a50fb1e-d812-4655-a1ac-5f16d80421d5",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4f78fabf-a01b-4170-aba4-9c302fa124ff"
        },
        "item": {
          "id": "19432c61-77c7-41b9-b486-e00c18fd7115",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bbe35bea-9dd7-42ee-b66e-902ff2712e09",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "39eff468-0449-4c52-aee7-ae9e339bb518",
        "cursor": {
          "ref": "23ac5dce-7c94-493f-9a89-74633ce1b444",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "14034690-8fff-48c8-8238-80d0090ce947"
        },
        "item": {
          "id": "39eff468-0449-4c52-aee7-ae9e339bb518",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6784c709-b32e-4c0c-a637-c60adf30c4c1",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fdcfa869-45c6-4746-895d-3b4a6a969b57",
        "cursor": {
          "ref": "aa0d77c9-11bc-4bae-b6e4-8735aa54609d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2a681513-687e-4b8f-a820-778cb7c58730"
        },
        "item": {
          "id": "fdcfa869-45c6-4746-895d-3b4a6a969b57",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8b908884-6c85-4b50-9685-0c5bec910201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec79ed51-0aa7-45f6-969f-4111ade2f4b5",
        "cursor": {
          "ref": "516fec12-c6ac-4718-bed8-ef320d3921da",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "adf22c7e-561b-4f7a-8df3-fab8263b0b6f"
        },
        "item": {
          "id": "ec79ed51-0aa7-45f6-969f-4111ade2f4b5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ba2f1bef-c77f-4e9f-829b-ef962b34f314",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "25c8ca19-20dc-4b16-b30c-2e0fd9d7bc53",
        "cursor": {
          "ref": "60277829-a9e1-4b16-a0c4-9ab98e5b4b57",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a0b4c48d-29f4-4520-86b2-12bc6f8fd737"
        },
        "item": {
          "id": "25c8ca19-20dc-4b16-b30c-2e0fd9d7bc53",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5b4d5aa5-051a-4c38-a8bd-c7451b35e115",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "996cbde9-96bf-4614-b70e-c24c54be09d2",
        "cursor": {
          "ref": "a6600373-e448-4e6e-8457-711fd98ed059",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fb3f17a6-017b-4068-892e-59e1c2ca63c4"
        },
        "item": {
          "id": "996cbde9-96bf-4614-b70e-c24c54be09d2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8aa22485-c2e4-49da-99f2-57d097cddce6",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ca4813c3-4d82-48ee-819e-e2ab54282c20",
        "cursor": {
          "ref": "8efc9d35-63ac-43c7-9519-259efaa582de",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d586802b-429b-41d1-bbcf-9b477c574656"
        },
        "item": {
          "id": "ca4813c3-4d82-48ee-819e-e2ab54282c20",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0d6302a6-c2e0-48d0-9761-d42432e79016",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "bba08b52-09ab-4205-962b-39ab1e8c4302",
        "cursor": {
          "ref": "b5ee52eb-89d0-4264-bb17-486f56a1fcfb",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "52ee30c2-b6ed-4a90-8a66-2e51e62b5cd9"
        },
        "item": {
          "id": "bba08b52-09ab-4205-962b-39ab1e8c4302",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "19c3b1e7-ac38-49e0-b7e0-6d48dbaedf0d",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "32564c96-e9b5-4881-b4fc-c81742c8d959",
        "cursor": {
          "ref": "d8b3b12e-e64b-4d26-87b4-21a8e9938ac5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a8e76a3e-5a6a-480c-88b4-6cce62cff34f"
        },
        "item": {
          "id": "32564c96-e9b5-4881-b4fc-c81742c8d959",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bf5f19f4-92e7-45cf-8fb9-3961c43a51c1",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "96dda754-06cd-4955-bb78-0637d0420925",
        "cursor": {
          "ref": "2448cfc1-75be-4e64-836c-cc73e034ffac",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8634565d-8ca1-46fd-b4ce-40b20882ff9a"
        },
        "item": {
          "id": "96dda754-06cd-4955-bb78-0637d0420925",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8f0e0687-e368-434f-92a3-a9d32bf80722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca23a9c0-d09b-47ac-8dc2-e49d0e91f39c",
        "cursor": {
          "ref": "0e2ecf92-fa7f-4e4a-ae79-30bae4e36202",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "de0408a9-c745-4ff5-9c1a-7b0e30690aeb"
        },
        "item": {
          "id": "ca23a9c0-d09b-47ac-8dc2-e49d0e91f39c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "71f8e395-8625-4dfa-965f-45475e796b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8e5bc2-e343-41ae-821f-c7552d277191",
        "cursor": {
          "ref": "09e65f9b-7f23-4eda-a6f1-17174946cdb0",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "12870024-a5ed-4d46-b85a-52b34e755b14"
        },
        "item": {
          "id": "ee8e5bc2-e343-41ae-821f-c7552d277191",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6a21aba0-d0b8-4fac-b74c-907702cb1d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b326381-0512-473b-9130-7d08be5b4b05",
        "cursor": {
          "ref": "80418560-e184-4735-b6bc-69de2eb7c101",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ddce2c3b-79d4-4be0-b404-afe657f38a28"
        },
        "item": {
          "id": "6b326381-0512-473b-9130-7d08be5b4b05",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ec489d79-858b-44af-b403-6fc16dfe08dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab505719-912a-4174-97a4-c6fcdb3ef2eb",
        "cursor": {
          "ref": "ea951c61-6ec7-465f-8be2-883c2edadd08",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "915a8e30-631b-42b7-85a1-d4a4e765615a"
        },
        "item": {
          "id": "ab505719-912a-4174-97a4-c6fcdb3ef2eb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dc7965ca-b8db-4c0a-be01-b61f6d6aaf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1e9a72-3a6b-4159-8ff8-46b9fcf10f4f",
        "cursor": {
          "ref": "67a9a55a-46b3-40eb-9e56-62291fe2a731",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9cade8a1-7de8-4cfb-9aa7-bfb35661fb58"
        },
        "item": {
          "id": "df1e9a72-3a6b-4159-8ff8-46b9fcf10f4f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "815c55f7-c8b1-4052-9fb7-20aade042fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8df140-64aa-4092-8903-dd5959680a0d",
        "cursor": {
          "ref": "14289393-0d39-4975-a4e3-7d6caff341f1",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bdd04f85-bcc6-4c7d-856c-a16152d47242"
        },
        "item": {
          "id": "2b8df140-64aa-4092-8903-dd5959680a0d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fabc294d-d9b2-4cb9-9ede-d1297e17d25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc39631-5663-4d57-864e-c08bf1886ad6",
        "cursor": {
          "ref": "f75d9491-c000-46b4-af6d-67225cbde8f0",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cd239c35-d6c5-4f13-b79d-1e9af1351284"
        },
        "item": {
          "id": "dbc39631-5663-4d57-864e-c08bf1886ad6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "84d74d81-c651-4c37-a2d1-ea9c97fcff50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd4a05a-cc44-46c0-9dfb-c6955c20aa7d",
        "cursor": {
          "ref": "96cd21f5-78d3-45a1-a3c4-3d932827649b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a4c279cf-5327-4bf7-b883-128575c54f29"
        },
        "item": {
          "id": "dbd4a05a-cc44-46c0-9dfb-c6955c20aa7d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3b417bc1-6e37-4a1c-80cd-415ae56cf1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704a6f14-434f-4460-a544-d719dee62b5a",
        "cursor": {
          "ref": "7d83a6de-6a84-4ca3-89a3-fa43aab02cd6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bed5ac37-c125-4903-8e57-2d6a8a8d1be0"
        },
        "item": {
          "id": "704a6f14-434f-4460-a544-d719dee62b5a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "300fe69e-7f9e-4f2a-9b87-8d2d6520a7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd518e51-ee93-42aa-ad72-3c9b2431b657",
        "cursor": {
          "ref": "cbf5e709-9609-4542-8216-2e52aa6c37dc",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "19b08e5d-b09e-4802-a3cf-96e92b8b2657"
        },
        "item": {
          "id": "fd518e51-ee93-42aa-ad72-3c9b2431b657",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "955eccb4-7397-4f8f-9609-0e0bbe1b02c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25db9c7-8a87-49cc-9c04-8e440c196c7a",
        "cursor": {
          "ref": "3604be8c-fec4-457f-a9cd-bf0a532663f8",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a2688d57-bb50-444c-b679-48fefdbf4bdb"
        },
        "item": {
          "id": "d25db9c7-8a87-49cc-9c04-8e440c196c7a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0201bdd9-0b10-4943-81a1-36b2e4fa96cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441ce10b-5ec8-4d23-a1a7-a7e0cf05b36f",
        "cursor": {
          "ref": "17cbaf5b-214e-48ca-8749-b2e40399f58a",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7fac1e45-8ea3-4a1b-ad84-886f48dfec60"
        },
        "item": {
          "id": "441ce10b-5ec8-4d23-a1a7-a7e0cf05b36f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d6ed84ec-f47d-41e2-a69d-0724e3975020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260426f7-2c6e-44dd-a1e0-a739386be348",
        "cursor": {
          "ref": "0145e871-a04d-45ae-a317-1c9c0980993e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9f627584-2d7d-4bff-a559-e7ffb37757e3"
        },
        "item": {
          "id": "260426f7-2c6e-44dd-a1e0-a739386be348",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6b819738-5a3f-4f7f-b9e1-62c255b24033",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f24a6f61-b0fb-427d-a34e-94ff0b8b0dd0",
        "cursor": {
          "ref": "07f24b08-fa17-45e5-b5bc-076c9939d8a8",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "11c16ea1-22b9-4ed9-9706-c2e55bfc4acb"
        },
        "item": {
          "id": "f24a6f61-b0fb-427d-a34e-94ff0b8b0dd0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "025a7610-ea55-4e3f-9952-44593382ced0",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4f5210fe-1680-4164-a081-d8e7b1e2a7b7",
        "cursor": {
          "ref": "1bebe5b4-adb6-46fe-a432-bac2e97c48df",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4aafb121-33fc-4d01-9faf-17e124ec8f73"
        },
        "item": {
          "id": "4f5210fe-1680-4164-a081-d8e7b1e2a7b7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "37184c37-b0b8-47c8-803f-50b38e4558b1",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c45a0788-eb73-4512-aa46-0091ab046e9f",
        "cursor": {
          "ref": "a4ad5d11-5657-4569-bde0-82cc85ec094a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "34bce039-dc15-439f-a2b4-bac6bed53828"
        },
        "item": {
          "id": "c45a0788-eb73-4512-aa46-0091ab046e9f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3394d86e-8852-43bf-8110-94eede831eb2",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7da1fa6c-175e-466f-9acb-ef4b655d5e97",
        "cursor": {
          "ref": "b38d1b67-784f-4884-86e8-9ae035235264",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "402e57dc-6316-450d-ac66-7a8ade7b3d89"
        },
        "item": {
          "id": "7da1fa6c-175e-466f-9acb-ef4b655d5e97",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "73b92b39-57d9-47ca-8bd8-da7c480c8810",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e2baefe4-9ae0-448c-a816-7dcef4c3fdd5",
        "cursor": {
          "ref": "68a1772c-de37-4f5d-ae19-2c264a5bbf4b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0b15799a-9ff8-4539-b2a6-58436fb2ccec"
        },
        "item": {
          "id": "e2baefe4-9ae0-448c-a816-7dcef4c3fdd5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ca3af01-f767-4c9e-add9-e20839ae5c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba954a4-0d26-4366-9e38-21f29880e464",
        "cursor": {
          "ref": "0c804a28-f45a-462e-a8b7-678fcc6fd2ea",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "adef8325-0a4c-41f9-a3cd-9d543359d97e"
        },
        "item": {
          "id": "fba954a4-0d26-4366-9e38-21f29880e464",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6540cdd3-7b05-4280-87e3-f4858f1b2979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f1999a-2f38-4bb5-926d-1810a8362777",
        "cursor": {
          "ref": "45b08acf-b6a4-4322-af38-070b6cf9973c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "508a3821-aea5-492b-aa67-615965eecc31"
        },
        "item": {
          "id": "c6f1999a-2f38-4bb5-926d-1810a8362777",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "25183039-9b44-4774-aee1-5c4bb28e7b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8829dbc-697d-4da6-92b7-2b262560de16",
        "cursor": {
          "ref": "ae91d55f-54b4-4d18-b37d-ba20da309b24",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "53d028c9-e2c7-4056-bbb0-352745ef81e5"
        },
        "item": {
          "id": "f8829dbc-697d-4da6-92b7-2b262560de16",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7d65252d-4e8b-4b13-9a88-c6193b38ea7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d696cd-8709-49ce-a766-602558d98350",
        "cursor": {
          "ref": "5575fa98-d823-4b6a-bc52-63f97cec2ff2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4f8f2a59-3bc7-4f9b-a5bc-55f48a64611a"
        },
        "item": {
          "id": "b8d696cd-8709-49ce-a766-602558d98350",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3ac77cbc-63e7-48dc-85cf-b509d1119c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896f3e3e-655e-41ea-93d4-9f1fb36f3811",
        "cursor": {
          "ref": "66100dbd-17de-4b9a-aabb-d76096ce53dc",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a7e40b8-6d85-434c-8867-e550eefcf133"
        },
        "item": {
          "id": "896f3e3e-655e-41ea-93d4-9f1fb36f3811",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9eb65361-a8d2-41bb-a677-49ca11d86784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65aafd01-4e7c-4211-b89f-8ab894e8552e",
        "cursor": {
          "ref": "d89cf1cf-fa08-4d38-af08-c23e43170163",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bfa41bfe-fc3d-421b-aea8-eefbbe7a4251"
        },
        "item": {
          "id": "65aafd01-4e7c-4211-b89f-8ab894e8552e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3b70f1dd-17ca-4f4f-8d8e-b3873afaba76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0adf217-e887-42ee-879f-315068fb0136",
        "cursor": {
          "ref": "72bba1b4-e2cb-4f34-a2cf-faae7d62fdda",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0c90bcbf-532a-4b7c-b187-e238b51ec47d"
        },
        "item": {
          "id": "e0adf217-e887-42ee-879f-315068fb0136",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4bf154d1-8ecc-4b59-ba1f-6e2c0c45a36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92563260-bb29-43e7-8f08-424d77e8335e",
        "cursor": {
          "ref": "78bc00e6-8d94-44da-abd7-28a7c49f4d85",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8050b66e-bc00-4c32-b291-a866b24e540e"
        },
        "item": {
          "id": "92563260-bb29-43e7-8f08-424d77e8335e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d543f9fe-370c-4c29-8c09-4d541a5757e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b65a071-867f-45ab-838d-3fffa81d036e",
        "cursor": {
          "ref": "5e422253-3e01-4581-88d5-e9c00dc58299",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "03ff3d48-fc42-421f-816c-2391871f09d1"
        },
        "item": {
          "id": "9b65a071-867f-45ab-838d-3fffa81d036e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "87a179bf-7a5c-44ca-8fda-ad5c647856b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5087fb5-41ae-4fab-a8dd-aa0cfb1fe958",
        "cursor": {
          "ref": "bd1923b1-cc84-4c7d-abb5-42b5bf941e2d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f14ea09c-064a-4b47-baa1-9ac26ec28dc9"
        },
        "item": {
          "id": "b5087fb5-41ae-4fab-a8dd-aa0cfb1fe958",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "11ea7320-d006-4e82-a756-84151f19c086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd735cb-f0f3-4a50-b725-b6ca068e57f8",
        "cursor": {
          "ref": "e5e8fe97-6444-426e-a804-e2122335012d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3f708403-a166-49d6-b20d-1c2be31b4ded"
        },
        "item": {
          "id": "abd735cb-f0f3-4a50-b725-b6ca068e57f8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "107593c1-72e4-4db2-bfa1-3eb45882af88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed8464f-5486-4bce-8ac0-55bbb2bea556",
        "cursor": {
          "ref": "16c1927c-13bc-4595-a6ad-fe4278669477",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b4c113ea-0635-4f88-abbc-bda22667756e"
        },
        "item": {
          "id": "eed8464f-5486-4bce-8ac0-55bbb2bea556",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c51ce44f-497c-4eb1-9720-9d6077ed04d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c63259-655a-496f-affe-9bdfa7402cd5",
        "cursor": {
          "ref": "45fec963-e898-4cab-b983-e9c49979e999",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "811251ea-6589-4677-8d52-e1b3860c6583"
        },
        "item": {
          "id": "60c63259-655a-496f-affe-9bdfa7402cd5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9a842cac-f62b-4560-bd58-d7b29ecd24f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19abdc63-d692-4da0-9948-02f8e93e248e",
        "cursor": {
          "ref": "6efb3f30-7067-492c-aef2-4bb70b95c60a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9618a302-b756-4716-b6e1-2c89e3fe6d9c"
        },
        "item": {
          "id": "19abdc63-d692-4da0-9948-02f8e93e248e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c4fbb24e-36df-4afc-9345-a980f3da086d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f91028-4887-4ba5-a3d4-3e7a76f32e24",
        "cursor": {
          "ref": "9e5be42c-0a54-404f-82d7-f13e71060cb4",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7a3d769d-cea2-4f01-bd1b-3ba1268106f1"
        },
        "item": {
          "id": "b7f91028-4887-4ba5-a3d4-3e7a76f32e24",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4b623ca6-f2e1-4b22-a66d-2bcdd726d63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd5c02e-d8cb-4e95-ba4a-87f2829d5a33",
        "cursor": {
          "ref": "d228d58d-9094-4aaa-988f-0d1b75a63ffe",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9dab1bcb-a519-4bb7-8564-adc213e25572"
        },
        "item": {
          "id": "3cd5c02e-d8cb-4e95-ba4a-87f2829d5a33",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9505e1d5-913a-46c1-a00b-bf67a05b0c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6727030a-a1fb-417b-af13-1e7d07f15441",
        "cursor": {
          "ref": "d505abd3-22fe-4dfd-9f73-6783f2141e38",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3a0e6ec2-1246-472a-a3c0-ce0fb6eff167"
        },
        "item": {
          "id": "6727030a-a1fb-417b-af13-1e7d07f15441",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c5eca4e3-fc29-4bdb-8ce9-58f21c93c2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1023000-8fcb-499d-9d1c-b14a5d2dbb05",
        "cursor": {
          "ref": "dfea9652-1557-490c-9862-5d59200b8ca6",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "03320055-5ab4-485a-932d-93fd20aefdc7"
        },
        "item": {
          "id": "d1023000-8fcb-499d-9d1c-b14a5d2dbb05",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9f140f68-b44f-411d-8503-83d9809d5dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2d9f79-dac8-4691-8743-bf588197efe0",
        "cursor": {
          "ref": "36decd30-cfd3-4a26-81ac-93075c209b75",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "24238ae3-858c-465b-87e4-c8e9b7a57c4c"
        },
        "item": {
          "id": "cc2d9f79-dac8-4691-8743-bf588197efe0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f63164a7-c57c-4578-97c4-b7320f59d341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665ab2e7-4a84-48ce-a18b-0fd278bc7c19",
        "cursor": {
          "ref": "2e1d39e8-8064-43e7-a3e7-ca717c0c4736",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "faf99f78-3b66-497d-afa5-6ce1dbfcff4b"
        },
        "item": {
          "id": "665ab2e7-4a84-48ce-a18b-0fd278bc7c19",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8e9431a7-7d4b-40eb-8afd-122e39732b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b56bd2-2ade-499e-8c18-f4590c31b245",
        "cursor": {
          "ref": "7c9d45c5-8cbb-4edc-9426-a3fc4f110adc",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8456f3cd-9791-400f-82bb-5e3004c4334f"
        },
        "item": {
          "id": "86b56bd2-2ade-499e-8c18-f4590c31b245",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7c1244db-4003-4b55-975b-d8fcff7cec06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207b88a3-f1a0-4a18-9af0-bbddf18ff188",
        "cursor": {
          "ref": "8731c95f-aabb-4d05-b877-c8ba9acf5ed5",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "45bc491c-a0be-4b98-9c81-e6af784f17c8"
        },
        "item": {
          "id": "207b88a3-f1a0-4a18-9af0-bbddf18ff188",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7146ed51-5184-4506-be96-da6a90fedf50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6340ab-90d0-437c-8a4b-18293c4b8a74",
        "cursor": {
          "ref": "e8823cf8-d64d-40f7-aa68-63b4fb44a5d4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e908746d-2207-466e-bab5-87f93ed0ffef"
        },
        "item": {
          "id": "aa6340ab-90d0-437c-8a4b-18293c4b8a74",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7d329a50-f699-4a61-9ecc-5820af97b1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f668c242-c3fc-4678-9770-0de00e0af96d",
        "cursor": {
          "ref": "6d683dca-3c29-424a-9c46-45f16b2a84e9",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dcecfd6a-5410-43ed-b6b9-4240452355df"
        },
        "item": {
          "id": "f668c242-c3fc-4678-9770-0de00e0af96d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "59d770f9-3436-4720-b56e-b8d8e80325a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f593838-53eb-4645-b3b8-69984b62d06b",
        "cursor": {
          "ref": "a56c6e29-b78f-4cfb-ab54-ea308391c442",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "29723254-8acb-4675-9379-62d7c4e8b62d"
        },
        "item": {
          "id": "4f593838-53eb-4645-b3b8-69984b62d06b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "937549f7-70b3-4f4e-83bb-d70a990db4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbcdd4a-6b96-4493-9067-375612bb283c",
        "cursor": {
          "ref": "e91bd175-a334-4463-b28e-7f2d9434fb49",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2df9b876-6d9c-45f7-a0fe-78b6c040b04c"
        },
        "item": {
          "id": "dbbcdd4a-6b96-4493-9067-375612bb283c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a611918a-1d94-4951-8b65-16898fc1b7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3d8610-9745-4597-9d67-090f9f947cec",
        "cursor": {
          "ref": "4d205ef2-d4eb-4339-ba3b-ace4bb4194d6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bc5dd759-c4d3-4ecb-88ef-3c2c9c9516a5"
        },
        "item": {
          "id": "4a3d8610-9745-4597-9d67-090f9f947cec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e68546bd-9a21-4a6f-89e0-76f92591e764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680b548e-387a-4c75-a609-3e7ad1f1cc8d",
        "cursor": {
          "ref": "ae32c188-3441-444e-88d0-7fb71c70fee2",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f136423f-5843-426b-afa5-1809a12bf29c"
        },
        "item": {
          "id": "680b548e-387a-4c75-a609-3e7ad1f1cc8d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "11e64f29-b3bb-4ac9-bc8d-dac21009bb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d59c27f-29d0-42c2-997b-3dc74cac24a7",
        "cursor": {
          "ref": "8a01462b-c4da-4be5-ab81-ac568db272d1",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7d0654bd-e229-4d49-8361-298fcb13c2c8"
        },
        "item": {
          "id": "3d59c27f-29d0-42c2-997b-3dc74cac24a7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3e80b4f4-4888-4ae3-bd6a-a4554247a844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d23913b-7518-4825-bb68-039ac04d1e26",
        "cursor": {
          "ref": "aa2be775-111e-4078-85fe-5afdecd07a46",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "961763c5-31f0-48bc-bc16-ada40f1e80b9"
        },
        "item": {
          "id": "6d23913b-7518-4825-bb68-039ac04d1e26",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "99f0d0e8-8a62-4991-bd38-07017cac71d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7febb60d-97a3-4cf3-9437-9a78d1766f3d",
        "cursor": {
          "ref": "8e2fa0ae-a2dd-44fe-a146-f666eb055f05",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "fe295d8e-e948-4e18-8d1c-50fba9f32288"
        },
        "item": {
          "id": "7febb60d-97a3-4cf3-9437-9a78d1766f3d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5dded507-1fdc-433f-bb63-a5552fdc5ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630a23a0-b3b3-4d75-840e-2fafe15c14df",
        "cursor": {
          "ref": "e168d2e6-ead2-41e2-8fae-2df1cc0d9b46",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cc94cfa6-046f-4168-9621-836925b4c2f4"
        },
        "item": {
          "id": "630a23a0-b3b3-4d75-840e-2fafe15c14df",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d85ed165-458c-4cc9-89aa-9a0839ea60fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e053e0a3-ba65-4bea-b4ba-e5239ee8270c",
        "cursor": {
          "ref": "ae87e132-5c2a-4260-a2d2-228af15a19ac",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "05b45da2-12b7-4350-a7c3-166fa8070790"
        },
        "item": {
          "id": "e053e0a3-ba65-4bea-b4ba-e5239ee8270c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "637ef6e8-4983-4554-bc5f-9b96dde8d706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a8136f-ffb8-4749-a240-9ab975f6372c",
        "cursor": {
          "ref": "80476bd4-4793-4067-a3c3-dc63affb87c6",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4fc54967-6dbd-4390-9148-638bfb0f484d"
        },
        "item": {
          "id": "95a8136f-ffb8-4749-a240-9ab975f6372c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0f27114b-7253-4058-8b42-cbffad862ebb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334a901c-dbc1-4ded-be87-3f56962f5191",
        "cursor": {
          "ref": "02df38b0-0847-4d62-94ad-cb3ef9927310",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "acc8a636-aac0-44ba-ac3b-88177f3d73fb"
        },
        "item": {
          "id": "334a901c-dbc1-4ded-be87-3f56962f5191",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fd66bf44-54ab-41e1-b38f-68db1f22eb92",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2aa9074b-ecd5-452b-8a08-66e15625f8c6",
        "cursor": {
          "ref": "b0cefb53-7155-40f6-867d-cfcb4016f445",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e6c0d7ad-6edf-4a64-942d-ee34809bdb17"
        },
        "item": {
          "id": "2aa9074b-ecd5-452b-8a08-66e15625f8c6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1b0c2ec7-3436-4ff0-a4d1-abdfe31791e5",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd406fa-7204-4d3b-9bdf-3381648a077b",
        "cursor": {
          "ref": "e5561a21-34e4-4acf-ad1e-cc0ea1daf90d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "999f2b44-9768-4823-bb0b-8d07fb3cf7a9"
        },
        "item": {
          "id": "cfd406fa-7204-4d3b-9bdf-3381648a077b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0fc9af27-c0ac-4241-981e-c799a9cbf83c",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a95c13e-b874-4f85-8d78-473c681686b4",
        "cursor": {
          "ref": "5faf7306-ea80-4895-a04a-46ffdfebeaab",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0fa51362-2994-4e2b-bba4-097590e6a975"
        },
        "item": {
          "id": "8a95c13e-b874-4f85-8d78-473c681686b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3b6a823f-8295-4482-bca3-5e984d69fafb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a95c13e-b874-4f85-8d78-473c681686b4",
        "cursor": {
          "ref": "5faf7306-ea80-4895-a04a-46ffdfebeaab",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0fa51362-2994-4e2b-bba4-097590e6a975"
        },
        "item": {
          "id": "8a95c13e-b874-4f85-8d78-473c681686b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3b6a823f-8295-4482-bca3-5e984d69fafb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f601848-1038-4a05-bdd4-9e5477e646a1",
        "cursor": {
          "ref": "60895aca-9802-492f-8775-238a44886288",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b1361fe0-5ad5-47f5-b0a5-863d93ce748a"
        },
        "item": {
          "id": "9f601848-1038-4a05-bdd4-9e5477e646a1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bbae4b40-b5e8-464a-9d77-835808946d2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5efbdf0-65ed-4f14-82a3-490d4fff3202",
        "cursor": {
          "ref": "eaad9139-10e7-43a4-b01f-20262ef599f6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "79b794e3-6e6c-411d-a67d-76c9a37c6d95"
        },
        "item": {
          "id": "f5efbdf0-65ed-4f14-82a3-490d4fff3202",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2b32db0c-55d0-469e-a45b-49dfb642ad85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}