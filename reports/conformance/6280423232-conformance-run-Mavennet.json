{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "82fed182-61e2-48cb-9daf-ab3483013082",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9291ba8c-0347-4dd2-8fa0-238daeb2bebc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fad8a6f-c2bf-4d02-b141-f4c4e27b16e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "608367bd-8514-451d-a41e-e898fc12e418"
                }
              }
            ]
          },
          {
            "id": "4e1dc6c8-753d-4ad6-801c-6d80f5b415b9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64bfec52-adb3-4a23-a996-a5992f840efa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2a39c0af-baeb-435d-8948-d042e9632aa7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "20a4658e-3b26-441f-8d52-0fb3f2c06f87",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d25139ae-7699-43ca-b964-8d198b3a95f0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "31a334de-6532-43a3-9b8f-c75bf77a2715",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f4689ff-c2f9-468b-9244-84ee5f643387",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82b233b4-72f8-47fa-b4ea-a0d5fe6e3577"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86afcdde-acd7-4763-ad06-0a1ddae01f59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2246b263-7063-45ed-a607-62b42feb8910"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f77b640-97ba-453f-94d3-be90cd59093e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ce1d669-5e03-4866-8bc7-79f55b5413cd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efc5c39a-ec41-4498-b9f4-cad68c928c46",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "76ce526e-ac0f-4128-a832-74e266f9ba92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60374faf-67d9-4b51-b5fa-834b160a72b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24b7762c-7d4c-4477-b812-77dc002052f2"
            }
          }
        ]
      },
      {
        "id": "18f58c9e-0000-4fa6-a21e-2cdf3d155890",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c49433cf-273a-47d8-be12-3b93176330b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4ae4b71-5b4c-4671-8528-43a59e0f6aa2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fa1f70d3-b673-4d50-8dba-71a46cb2bbee",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2cb5ee-a062-4393-98e4-87d7dcf4de11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38326f03-ef9b-4cfa-80c4-3d995439000e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bc0025-862e-4459-9ef7-27bb95ecda1c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e178563-6b90-4e39-9f9e-a2513256974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a690328-d0e5-4312-bb76-729ae5d2ec0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac43e0f-686c-4847-bcfa-7bc6dd15bf3d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45e88a1-66f0-4486-8738-21db4643472c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3630dd1-8f26-4de8-a629-41565f1803a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b9e378c-9dcd-4ae7-976c-cb1b441f2b7b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1165c869-7dba-40b7-ba95-1301f2c1fd7f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdc43fc-786f-4e4b-9155-fdcdcd42c8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80999b74-8f86-47f9-b8f2-19921a37db45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6e7f99-bfb1-4d93-b206-504da593a7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27f8927-3c90-4ada-8ddd-085c4ad18570"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9696e38c-9f01-4885-b56a-6a6430444403",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e043430-6e8f-4e40-8102-0e52c5515a11",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5352c09b-454f-4f8a-aa66-df84b0c8c9f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "425aa211-9ae9-4898-9965-4e361234c5ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adc1d662-c22d-4164-95d4-6047c5d25bbf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d50ea9b2-4a6e-4c63-9916-4ab5f78b92c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7434c549-d56d-4e04-b41b-0f6f3d736e66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0206c338-415b-40db-b795-fcc01c1c9662"
            }
          }
        ]
      },
      {
        "id": "630eae60-8b13-4643-a25e-6e0e2c99704b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cd6d9bfa-a487-489c-b207-67e0efce95af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "055f6811-7bb4-41f3-a4d7-1f615a73798e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "680bd54f-cb8d-4526-a196-200398394aee",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44daaa10-b6e3-4b78-8bb7-119d4c43aafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34e59e9-1b79-433d-93c2-e7283946b1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0983162b-a8ab-4e86-a39b-b5ca44369c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac85e69-d139-4267-8a22-5b0f7f7b0260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4e9509-e098-4681-8eea-0773a9e79fe4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38fe757-5ff0-47cc-90af-edd56195148a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7935cb-16e7-4d3d-9635-7e37d1016e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4054db-35ad-4a1e-9da3-ad2ece90cb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ef90542-b647-4d98-b4d1-e13ed6df8603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06af1d05-80de-4c59-8014-544a0644282a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5a0462-fe91-4aab-8dbc-70fb01798fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f060c226-9e71-440b-b1a5-b49f3c800db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e40a57-af09-4ab9-bc83-a75755d6fa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a006a98-ee4d-4457-b350-07265e50ffd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc64bd2-ed11-4ad8-8c5e-3bb2f40eb2d2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261f1266-f41c-4e17-9a2d-65b8945f72b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cb9ad2-7e47-439f-befe-e25baae945d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325e639f-75b7-499d-9db9-0c589f4b9ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12ca0d25-1bee-4535-a696-6caa69d88d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06c9374-ef18-475f-baae-cc9e41100ff7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce7ab79-162d-4c1e-9481-fb4f15dcea5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746b74f7-fb23-449e-b5b4-cb2a9faf0883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccc2a2e-ae0d-467b-bf06-2cbe01cf0d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab3d4926-760e-4773-b51e-922286fcba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20119a2-6e13-4fba-b756-66c697553034",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad94693-994b-4e49-8c24-669de1696c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7ffdc7-7e05-4812-88f1-2065ca2ff408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0438744-bc77-4e4b-a97e-c91252358174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea02d622-9f6f-443c-891f-86c20e491704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a74efb6-5e83-426a-8eb8-05e5959e0c1c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c53fc5-42ef-4050-95a9-eafddb2580a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d0931a-b019-4079-a014-18879df9967a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff98ed7-39bd-45f9-a09f-0a0b9d349e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c5e33f3-9883-4fff-a669-410231db7ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6abe35c-59f8-46bd-9c16-89ed2fc42391",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f44808-d53d-4efc-aa70-475a2b181263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b25e77-a975-4c2f-b92f-7018d0a17158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e7f0a3-9874-4689-b396-e3426bc8fb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67220d9e-a899-42fd-b714-be30928ad636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306cb90e-aeb5-42a2-bd50-f38d4244952c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4958eead-b886-484d-90b0-97fe06da1f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f826ca3c-af3d-4ab2-a40a-7368eaf8ac1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0ce8b3-038f-40eb-95f7-181b348ecb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b75b4a5c-20dc-487d-bffc-d6011a9feb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b6b6a4-2131-41a0-b833-650ebea164d3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c41e92-cd10-4500-9610-1cfd09bbf4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28e75c9-28e3-4562-99d1-941b3ec920cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e66a2e-06db-43b9-bfdc-742bcd00c0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6f57cc3-3b8f-44ba-ae21-ad249626a247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e55dff-2c5f-4f6f-a759-bf61de898142",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ada333-bd97-4b99-b83f-70282473fc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4fb5b4-49f7-4f8e-a45d-70bfcc9057ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d58c356-6590-48b9-8fdf-cd63d3953cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c888bdd4-164b-4465-89f2-f22b4ac1781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8522b76-11d1-4cd2-a3c9-aec52d9d34c5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e50d767-f736-4fbf-96fb-798424aad085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b805b2-cbba-44ad-9b0f-a143d12b87f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a79fb6d-7ca8-47e3-921f-64e867eae00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95fd5efd-2ac8-4f5a-aa11-078448219972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a095a48-bcff-46c0-a275-74a7afafa391",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11e4737-4e69-413e-ba81-0c7d47305ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b193dc3-6c42-41b1-924d-ca418ca91d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9523eec1-1581-46c4-82b5-d7c32ec8fd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "949b1bfd-abc1-44c2-be7d-d8348127ef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4875aeec-df7f-4e5c-907a-efd0fdea45c0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7215fd1-72fe-4e9c-a15a-823090b16b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade062c8-b005-4cfc-95f4-5dbe75367a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bd2aad-c615-48c8-8203-7bf2dea8f79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b552b1e0-6b0c-4174-950e-23c2a9ee079b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1abf23c-4c37-4374-85e1-267b174ae2fd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21895adf-9aa5-4047-a06e-edbcd533449e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bca718c-b2e7-47b9-8e3b-919c0ddcb245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a43039c-9052-4801-a68e-505432187e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e03916f-7b3c-420b-a2e8-f1ad06c3cd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c67700-b0e4-46b3-971b-af14c81af694",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4106d42-fccf-4481-89d2-b627a6958a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f4705b-5d82-44de-84bc-cea24b014eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb70ba5a-4e6f-4a84-a753-11e7204db820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b89f7d2-6ffc-4648-a146-a829b1ed30b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c21781-30f2-4364-aa11-deaea3084c7c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc672c2-5d09-4e5f-9a54-061f41b6c36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e3d818-d8f2-4bf9-a40a-bd087d9bdd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa15b088-ba25-49e1-8ce7-4d6c71d4bde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "023f3173-34d7-478b-b0e9-ce5577be74be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f04d11d-4fc5-49d5-b74f-13018922f01e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e8d19d-5717-483a-a4f3-789fc9de638b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29940330-7964-4edf-a8e7-ba152d7c9ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26364a49-f92e-4cc1-8d2f-5b06d54bff8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6b11f9-a141-467a-ac08-a3ce06bbf622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35f7bd4-21f4-4864-b9a1-802bf90540be",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2725616-178b-4fd5-8bd6-8c5b24d442ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a57ca1-bb28-4127-919e-dfab6348b6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa23762-f6ff-4d2f-9a93-ebd2c643687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2869410-69c9-4c30-a068-9c0583b3b970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4b5186-5383-4ddb-b567-0dc8060736f5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6ac917-b748-4c5c-901b-b6db239ca619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834899bd-3ebc-49ad-8794-a8829cc6352b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5f08d6-a7a5-4910-a398-8ee62377449b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58bf846f-6ad8-414d-8844-7ba2723aa105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747c3fb5-782b-46e0-ac83-5fb3ed14df1b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab87bfa-a33c-465f-a6c7-1a11fb4aae1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655af5c4-fbdd-4d4d-8eee-db39f043b86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c676f70-b1d1-475d-85a2-03ee4d771894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab7f836-913d-4164-a155-7901eaeb56f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c8e507-788a-49e1-935a-5342c5f58165",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03b87dd-57d9-4cbe-801d-2ae8d2140053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a5e794-3895-498d-b8c8-555902d74782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336cf93e-7d0b-4dad-988e-600368829391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d273a130-4b26-42f1-b594-28168c381613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2d4a5c-c1f0-44b8-ba1e-87b39bd1d8ba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4576f2-b7a9-4e9d-a268-affbd013acc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5044b940-7d03-4841-9e36-bc477a4c9e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1900c7f-2dcb-49ae-83a1-efd2e50cc474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67dd5aed-bf36-4ed7-9c98-64fb16fc8c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2aaad0-31b2-4bab-aadf-e5c60597e16d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93703af4-4eac-46aa-9854-ed70dbeb37bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff375bd4-3a1c-4858-af5b-1d0612e00862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9036a25f-03b3-4cd6-831f-a22212739936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1b117a-3cc1-4b59-b7aa-86319d787224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d8057c-921f-4011-b495-b6ff94afe09e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe45538a-be0b-49a6-82ed-c0d49966e817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2b9b80-c157-4112-9301-b8400c319cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dd8e7c-88ff-4781-a413-1d705050f3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe75e4e-b913-4a34-9c80-a4ba6b81313f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad71f860-0a25-4dae-8477-386743ab84b5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7778dd8-ae3f-44ba-ae43-13242af7ba8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dd0cb6-f020-4cb2-8e0a-f47f9ba02277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1414ee52-9e77-4f59-8423-5f0a232fb60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25885ce2-f40c-41a6-bd9a-2d793b5fc1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e3326c-2ab5-44ee-b660-550ff534c187",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4dc49e-6db8-4a83-b91d-b0a77e798a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af42a15b-f521-494e-a969-8cfcf3d28f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5146129a-c37a-4a35-8bad-a0a2729b8e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ba61f8-32f8-436b-bb47-f309c51a24cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab58065-5b15-41be-968c-32bfcb6ca0e4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5678bf-552e-4bfb-ade6-c1bab6e5331e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10071813-7587-40d4-9eba-346af1589118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546a60ed-e0db-4363-830f-6fbae6137af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f829e7e-a0bb-4f31-acd7-c1e5deb46924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc25da1a-c17c-4475-97f9-ee2bf3b50a3a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada5c4ea-39b4-49bd-a159-c427372f5593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512b109a-0dd5-42c7-ab1e-12692e552a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f69098-672f-4470-8dc1-de34b0956612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f9b3e3-99e5-41de-a257-8c9f5dab5ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af66e38-9622-4c11-a76c-08a363eeadcd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5b4391-bf31-4916-b209-594ba363e445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50493aea-4302-4219-88a4-488ba6c940a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f7ee06-7b82-437d-8a86-b2baa5f08334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "acb469a0-baba-46e2-8610-ed5cae4899c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76debf2e-bae4-441e-a1b6-ed14664afbd3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dae9ff-3158-402e-8446-fe67e4e0b581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142a5cf9-0030-40e7-ab93-8bcae160ed47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a32a06-97d5-46ea-a8dc-0b4fdea719c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6158f121-f04b-4620-91d8-0d47537e54e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cfb4fb-ec94-4293-8fec-62fe562b385c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0831a01-e620-470d-93f2-fb7c21ee4f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523bb3e4-ef1b-47a5-a824-1e3ee92bc0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb63d7c-9023-44e2-99ea-8acac4d194b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08e49d9c-b2fd-4058-b2d4-db98935599f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec87117-4560-4514-9311-283607761acb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da9f519-bb33-48cd-9d20-f8158aa4389c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933fbd97-4aa6-4c6f-a8f8-54cac955687a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8de126e-5396-4632-b480-70136b3cfa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c14ef96e-f7ec-41fa-b105-924b64c3e128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f306c2cb-4fbe-4f7a-9699-205f325512b4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc2de4b-c73c-4d88-b28b-2f80813498e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f642a3-0225-4cff-97f5-f179f7f475bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d12b76-7b5c-40d6-8ded-487ca4e8548d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4351103b-a712-403a-8ef8-685e0ebc202b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17847c9b-3b42-4c2b-81d1-92b38a21cf1a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4262cc-95ca-4cc9-8dbd-473fb127283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf9a009-77a9-4e8a-b763-f4a06a134ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2bf340-1ec7-425b-a436-ce0a7e0f4975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0504a3-7175-45e3-a1f0-cac2ab9146d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b603d1-ac9c-409c-ad63-518bd19a27ab",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab15e55-83d5-4ab9-b5a9-7f7337560db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7da481ef-ec7c-4674-aa51-4c04080fe276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6a6c9b-c0ad-49a6-a88d-c271133f9eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11b46d23-b20d-4420-ba5d-508b4ffe9630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e57b1f-aa15-430a-87c8-83ce6b39570a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536188a6-8cf1-417b-80ba-2fae9fe5f9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7ac4e8-67cd-4fd6-a5ea-4676136ea5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ad6b13-1db7-4275-92b8-4aac2b0657cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eca1a302-872e-4322-8281-ab4895f8535e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74687139-d73b-4871-985b-5f857f793cf6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e07e67-f7d3-4d07-80c3-a4f3104e2309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7e7161-6980-4fa0-b867-7a6dd787f519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e68ed5e-99f7-4590-b36a-66985da22909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1e6332-71c1-4163-82ee-f50919588680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1c6e9a-c333-43a4-8467-9039af3ccbf6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce0a6d1-98a2-4dfb-adb1-2e49f2665377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e2c00a-4801-41e7-90f9-bd5d0ed6c3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100ceafa-c819-454b-a1ee-a955e04bc191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "22d2a9ac-4104-4d6b-8e0e-46e02175a56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5efb629-2c22-46aa-8b05-6007e9b94a21",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7be0c0e-7321-4129-9dfd-76427ab5acde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13b2f09-7123-4712-a73a-d759a07cc4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acd86fb-00c3-4733-8abe-edb042b59809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8a414b-05ac-46b0-8eb6-733032061849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12f4f85-dbe1-4c74-b979-eabebd1e10a7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcc1f59-00fb-40e5-bbf7-82c10b26666e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a085944-4685-4dee-8d88-3ad971335308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43feaba-8e1f-461a-bcb6-f16c702ebcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b08dada7-84c6-48a4-a14d-bd275cd4f28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90a416e-631d-40f0-8d21-4e5a55fdfda7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a9ee0a-19c3-4bee-82bf-41e4ceb37af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff43f849-edf8-4a64-9b75-fed105ec0eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edecd07f-b644-46c4-b021-3f13eea4d964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "537732f6-9891-45f2-a4a5-6e4acc8aeeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fae1321-0774-42f5-b827-911ea89a5e2d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a5503e-9530-4a30-baad-34d44d3db773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdaca661-2ad5-466d-858f-7e4ba849d34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515c525e-7c52-43a2-88d2-04be0c87ac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "01deeb49-b2d3-4080-a127-fd7f5e6e5507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6cc64f-fb93-4b2f-b7c9-80efbf436e8b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d458503e-e6e8-4e4f-a6ae-832484694caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edd96b4-1539-49ab-aa8c-3cafa97afa24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36435906-3420-4869-9629-f4adc3813dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bdbae55-332a-43d6-a87e-bf760faf60f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5db3a0d-13bd-49c6-8888-a34415f5e811",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e34450e-e476-4733-b2d2-fcbc11d6867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233ef991-b6bb-4294-b629-860cbf53ce92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256fc4d4-2690-4ed6-8862-f2966e41c1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69770639-55aa-4ce8-bda2-860ae743d31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788ead7e-0ef5-48c2-bee1-5f3a005b5883",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c595cbd-a181-4ddd-9f9b-abc4aab1ea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8713af-c727-48e2-8665-50c1b4e2f29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84c1847-0454-4023-b386-bbb74c8a44d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6ec146-69c8-4812-8562-b6b0eeffc112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fc0f52-263e-46fb-a6be-f935d9c9a60c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8a7ae2-e78b-4277-bb79-802e635d29fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8817d6f-0e1e-40c8-b40f-2c3a7f365100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b413b953-33d3-4b20-8af2-0ccacb019a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb384668-733e-4dbf-83b8-a39fef06347a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386fd43b-49f9-4059-813e-86ec2ff163eb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68efea70-8939-4315-b162-33768c7345ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f5d68c-5c91-472e-ae62-7a546980e722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2710d2-b3bc-4d52-9378-08907aef3224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "245e42c5-45ca-4426-a743-adaf32f93b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697746d3-73a9-409b-b7f4-2fb39b3256af",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0fb58b-3ee0-4460-9764-fcc6b2723205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfe3ae5-c6a4-412b-8859-ff143e4c2be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eec0ef-c367-409f-a9b2-0b497671bfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3959dffa-37a2-4de4-8ccd-d51756bebb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f72df76-b981-47ef-9b70-80cfb1a1e659",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb06c311-9ba8-49ee-8def-6ac2a09a5d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924cfe3a-235c-4a59-b838-e8d7d59b4e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9124999-fe8b-4e09-9d94-19dd9c38f8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "087b724b-5b06-4770-b7fb-105ab9033341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f0b520-4a89-4af2-875c-e9e67da28315",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1283ca-6d74-4584-bc2b-a14b35582528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cc7457-e703-47b5-a4a1-004254d70a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b706622-98ce-4e5b-bdb0-6d57a7e61b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc62047e-5cc6-4a57-9f1d-5f3a2f51e5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1181b5b8-365a-45ef-b047-ed9ae9f1e280",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de23d079-326e-4e30-8e90-f5ad83261c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fb696f-3f3c-4ae7-8127-17d7a4624997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3decdb-924b-435c-aa48-d19520f849c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9829234b-f72d-41fb-8d70-5d4a4b5e271c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b19b35-1b45-4308-bb2f-09c94256c650",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a069b9-f62a-42ca-9939-d4af474a45c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07d7d4d-9fea-4b4b-94c8-015842594bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c631089-2a51-4c46-acac-4224d4117c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4a3813-0869-48ad-a45c-bd283cba54ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc35a3a-f2d0-4c37-a2d0-54e3dd89e239",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf196e05-7a0b-472c-8165-a8a3057be446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4213407-7fe2-4fc5-a517-d165cc03d37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8816723-6b90-4889-8ec4-ce4560bb101e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5ae7cb-d95e-459c-9d35-3e3872d76026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b13b01-f84a-4e42-ab61-1189066c99d3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fdf600-9600-44bc-9d18-a5abf300fe3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0cc671-af46-4ebf-b85b-68d70014f1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d10805-0642-43c8-b1d0-61412819d786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5dd826-1df4-4ac4-a672-7e75bf49365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82398235-9976-4f1f-a8da-062587a425ca",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44354133-03a5-468c-a9e9-b22629f5153f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0af5a0-f85e-42b4-8b64-5ec78d361e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2e2fb0-6915-4be3-adb9-de5e189b4026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff84abb-c213-462e-b8ff-7d9d2b093f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90326fab-f990-41b1-91ce-181f9cecbabd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033fe44b-31c1-45c5-a883-c7ad1eacd0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91e169b-61a6-4f6a-812c-ebe18dd1ded3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee762dc-a1c9-42fa-b09b-db1f118a0b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb322871-9788-4efb-9de7-d4617a090b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f4f3e0-604f-4698-8295-befca47096c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3571499f-ed24-4870-84b5-6b4fa648e9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420e64e6-770b-4cbe-a127-d5333e2f05bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6163f891-432d-46ce-ab64-1c9ac8b0c3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b558330-5a48-4701-a72a-36203a1e5a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc468c1-c38e-408a-8fde-6c863bb1e014",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52c56b3-53ad-401b-aaa8-fa432701a5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7178d954-e856-409a-b871-9e413ef2dc91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70de9f1-fb7b-41e4-93c5-56b95c221df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1676ddd2-23f5-44a5-8df0-7aa70fe1fa0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4445c8-4162-46bf-892e-708d58e25a28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a0436a-190d-47ea-811a-c0a79ec6fea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1acb176c-2639-4dbe-b1a1-7fe0cc077dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76315760-af71-4334-ad06-842104a7c0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfbd38b-c0ad-4b03-9bef-44979362af25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3515efd6-21d5-41ad-81a0-5b919d5447ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1cbaaf-6ec6-4f63-9170-bb9701328800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d952b63-63d5-4313-aece-8ade125b1341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362168b8-db68-4f55-a819-2e939443b25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "08e193c1-e365-4612-bf28-09d52e90abd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133a6aa8-22e9-4ca9-b460-476d5302d104",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6915c2c3-626f-4ca6-9033-9008e11eeebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd4f2e6-8e88-4d6c-8aca-630f4d7e35d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08411ed-cfd5-4d0c-9313-5aceec7fcdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b32de33-2900-40f3-8504-eb2acc1854ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7643cf6e-6aaf-45e3-bcc7-ccc7ea3f8380",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcc734e-34db-4151-b8ff-26eff3b5c805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d64ff0-e44a-488f-a9b8-fa92ed10d3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620f1920-de56-4b7f-bf79-ac88ebe17e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a73aa13-d8b1-4dbb-9ae2-21370c7f4058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fa2a08-c111-4e27-8e65-a5f12e460300",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4586ce-be45-4ad5-83e8-2421330bb5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ba31e1-a6a4-4fd3-8838-b1a26f0050c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ba677c-4644-42ac-8479-433428cbf1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3624856-2a49-4815-bf2e-de5b86ffe3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9a806b-3052-47cc-b591-ccfc964cee2a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc6f72b-16e9-4b70-b83e-62dd866a9461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcc754e-f0ed-4f30-9b79-50b02da388bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3775a1c8-c175-4e00-9d3c-9194d4350f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54d8a2ce-3cb0-4761-a8d8-a938996b98d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e5446f-9abe-4363-83f4-d6b7ca9d708e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1bd770-c2b3-4d7f-a487-f6913782b4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf36605-50f2-4441-a9f5-ddaf93dd445c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12c7233-eb05-408f-9df0-4f039e6d613f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25efacbb-5ac6-4342-8d27-dbc5b836bea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9614d140-ebcd-4420-9663-d3f99d5949f6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ebe2e6-f58f-433b-913c-182264325233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd3361d-ac94-45ef-a5fb-25d29862a9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b43144-fab8-4f50-9f8f-f98104cf880f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "567a0a2d-1aaa-400c-8f2b-3dd75228d24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded16b3c-75d1-4502-96e4-8eda76d94b74",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f92326-d912-4974-9c22-8e63c5973695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2f3705-302b-43a7-b082-8d0ed56ce1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dda7ee2-c610-417b-ba21-3898b6c16f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3be50aee-b4a8-4569-aeef-e404f6d52c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68aedcbf-224d-4d0e-bdd8-2ca25516a75f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b1a501-570d-46cd-9ff7-c7fcb95de8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713d17ce-fc33-4852-89dc-b4dccc7bdc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea0a84e-14d1-47d1-b17e-4535d5ead499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2732b2b5-9147-425a-9341-8e83ca4abf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3943a851-4e64-46cd-b7b1-3b411924e68f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45532e62-6196-4966-9051-0d6d076e5f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7045208-c76d-4200-b46b-6829e8d98635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c2e2c8-a0c7-4515-b022-d9883293cbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c046a4d0-d6d6-4072-9b8b-9c16323c8abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fc4a42-6ea9-4724-a273-b84d5e44ba3c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb72a8f-aa6d-4b62-872e-108f108f3951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4def5d38-b40c-4a10-8147-800ef163b437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67e5bd6-cd59-4343-8af7-58cfccbd13f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42324a5e-fa27-47ea-aea3-2c7d17e0adf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a7abce-a872-4249-aa4a-3ce39849aa87",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01513f94-1ce1-47b2-a89d-03fda65bdebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6489030e-3223-4d9f-8f48-0f266ff5fe6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60178a55-c17f-4cc1-8f0a-c46fdf75b21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "064ec871-56f1-4a33-bbcd-7185d6c7bee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0709f1d-cd7f-4c2d-a9c3-8a37e4edb5b1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d30e9c-3caa-4e3e-8c92-f4b4580a6301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39426261-aedc-44d0-a253-071983f6759f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2e8b07-fb64-400d-9b46-c30a0039e0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a63889e-c796-4415-b368-55b6da7efca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfeaf9f7-744b-4965-91e2-d5729e0cf70a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e4e449-ed6b-4e30-9de1-c99e4cdf61e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7288834a-8526-4b47-8ca5-3b0b3f48f4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97c80c6-be6a-4c55-9817-ae1432bd0157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23252f14-27c7-4c95-ae3b-9c5e714d522d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ec9376-1d9c-4315-8231-0430939dfb52",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47d39d9-b7fa-4444-a2d1-5fbb86e9df06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0336906b-956a-4835-8bcb-1b379e94fd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a806ec-1400-4cfc-870f-6687bd9e6ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "060ff96a-3bb9-46d1-8ae0-dbb7b6ecd166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aadbcecf-7454-4991-89bf-f2b4248ed65f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a89f3e2-331d-4853-a13d-a701c3a82d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a478b2-462e-43a9-87b6-1f731199f39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534f3dec-2255-490a-8270-287aef70212a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4733722e-efa6-42f3-ad5e-8536b1256447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22dfc142-79e9-4684-b937-b890a1190e0a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fb7eb5-50f6-48f6-8f9f-0e163885edde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba096a73-44ed-4a18-b931-e5fbce306701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd963c7-cc86-4fe4-96eb-dcbfe5c264f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a32640b4-9c3b-408f-94a7-b89f5b798a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d86f9fb-f413-4634-b27a-e814b10f4449",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f0e574-7d7d-4045-b710-14cf0a9d2fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94aceb53-d68e-42b7-93e6-a129052e8229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680ef834-72ca-4cf1-b19c-d37d807f2874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d631dbe-083f-4972-bb70-02292f939181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe254d27-5a0b-4bea-9511-e80a705afff5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3b528b-2fe0-4a11-9de1-09fc12c7eae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cd6d14-8adc-4e49-8bc8-c009a18ec67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d97ae1-4f5f-4079-91de-d7af2e47aa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a8f4ef-b6a3-4123-bf1f-064ab9a61365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e617d2fa-155d-4429-a84b-ef28387322d3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0f08ea-7c11-4f17-b565-94798331fae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b65bdb-dca7-4fe6-b3e0-2f43c8e47222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693ca368-57a9-46ef-a8d7-4377a11f6809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1a635d-dc6c-40da-b580-166f6f403ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a8eb63-3451-4569-97bb-7fd66bf60b5f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42abe691-f23b-4e2c-aa15-2b077e1d95f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd746236-5c83-49d0-bbd4-761d286da314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba85982a-a0e2-4924-955f-1de9ab88b414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1520f0a-c019-4149-a064-28ca3e22cf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a61cd6-1006-418f-8dae-fa871be06ee2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95c35ff-b55a-4b8e-a30d-e6f0bfdc937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586e405c-3794-424b-a0b8-0ed45af969eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1299c2-4efe-4f65-96c2-e928bcd8493f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24299a11-6452-450d-8390-33d70659fe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834e4f22-6f13-4737-86c0-0d1e901e7766",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9074e09-48a1-42bc-91bb-ea058bba0b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db728789-db96-46cf-9c40-fb0f616b9671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df67b86-5e3c-474c-b8e7-6d64ba3db8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "154e13f5-7dea-43e8-9e0e-a0d708cbc79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4988d8f9-fcbb-498e-995c-2d807e5b276b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84697870-f02c-4669-80bf-69d2b97c836b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60140fe-9f8c-4009-ae9f-fb3726d8de95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b57223a-2bc9-47c1-a432-3710c073dd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54098463-5f64-4230-b17b-1c67bb8b6fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2314960a-c6e0-49c3-b321-5d1678e4642c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a129537d-95ef-487c-a608-3b3598a5da8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b84b81a7-02ff-4f49-8419-c314c786e6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64465012-0c07-4929-952d-8c0f07537a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9538d3-b0c3-46f9-87d5-0ab968c5aab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c85bd4a-c570-4a35-b358-56b5ee6bb6f5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce3917b-529e-4f39-8432-9ef0bb06b345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e84d37-f9a5-4abb-86ca-6b9c1432f7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfb6d25-b6d0-48e3-adeb-d4660330e0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d854ac7e-6841-4cdb-accd-12c8a9465739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c067eabe-0e0d-4bbc-b0c4-7362c72fccb0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1396553-5a99-4691-8d97-8ff746cad4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c51353-73ab-4db5-820b-241346a7822e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d7cb6d-389f-48bc-8f67-1e226cea2fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "33b72661-3ce6-41bb-b731-8efef520fa97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4aa1d8a-3b7b-4a61-9099-9ec8e9542b0b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6172ef20-405b-49cb-a942-7bcf6da29fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b56e99-9b66-4ad1-9612-97278765b63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48061f8-4ee1-41c3-af05-9a1a6348560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cac24e89-48da-44e7-9903-d1009ccf2674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f4c93e-7c92-4d89-8723-c0e46bf8a90d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5557aea-33eb-4be9-ae76-cf0d9b42a020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55c4a72-8a54-40cd-8df4-c5266f5a334b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1dc5e5-f08b-4798-ae52-3f8c8a4ccff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd001c2-1c17-4bc0-ad97-17bd60a6e572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1294a98-2d36-4002-8e3c-ea451510af1c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56eaa768-2107-41e2-8c08-9a983a141a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7920109e-2692-49e8-87e8-d03e0f67a3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a106afe9-ea47-4d69-8658-36537f7f7a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7030197-db42-4714-b98d-67eafbee00f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c793a8-4dca-4285-bfd0-5e20e1f98b84",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c74dc25-70f9-4741-ac48-d33616fd6dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0dde38a-7d09-4421-bb01-009ac3bf731b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1487a0c-55fa-4988-8e65-5446ec7eb4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1693a56c-8102-4b4a-9e6c-eadb54665c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa9728c-db11-438d-8a59-0a01a627d930",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59e6233-f130-4f69-9881-b89b8ef284c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "78212947-915b-42ed-abc0-86a64de59603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ceaa13-c360-4a83-af93-1f25b7ab0b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "40f95835-3ee2-446b-8c9b-e7a48e684950"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "242eda62-c3ef-424a-b29b-284192932f4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15012120-270a-4f7e-81ae-acb52196b16d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4d8219-bef3-4177-8e76-a0bce9ad9b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "419cc09f-b15f-408e-8644-4a9fc3e16402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c39427-1e61-46d1-8a69-4a4896092983",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4f850db-ce9d-4ea8-87a2-1bc2445383a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e6721c5-1358-4887-8aff-19099276fe55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c61b2030-9bd8-4e98-9649-249450995019"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91a4514b-fffb-4e2f-90c0-e5daff018ba5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eff15c52-a58e-49af-b4ac-102b13f5202c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1fe97d2-6fc6-40f7-82cc-754585b130ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "176fabe9-bd27-4c7d-9c1d-e86763314796"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "93063d2c-67bc-4791-8660-d7ffe3f2035f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2481ef23-76ae-4217-8255-39c6d7ec37ab"
                }
              }
            ]
          },
          {
            "id": "36bc9dec-2f47-4a94-aa3e-5e249bd9a96a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e093d4b-5900-4241-982a-7a603c41bbc5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa6cd153-d768-4374-8ef5-c1450b644e05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9e40919-d11e-484b-a1ee-2872ddf61af4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41fb5917-56e8-4996-9f9f-405ba03a21c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b8dd8c1-d957-4e29-ab2d-953ef84dc9fb"
                    }
                  }
                ]
              },
              {
                "id": "435e0d16-1363-4711-82e6-c57201615a89",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d972c21d-3487-4e8c-bea3-516e9c9ccb21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58fc46ec-7fc3-42ff-bfa5-024956d7b6ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc045964-1dbe-4bcb-9e57-67ab78ea527c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2366da18-a753-4747-ae6e-aca11655a370"
                    }
                  }
                ]
              },
              {
                "id": "4139456d-1c3c-446b-9a3d-e677581b5ddb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52cf9cd8-e30c-4eaf-8ec8-62613ec59191",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "995984f8-c0c7-4dbe-9342-0281632e8f1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "594e8a56-32c9-400d-a0a6-f2f143f78891",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "16530194-f203-48e1-8728-7825ee6c6266"
                    }
                  }
                ]
              },
              {
                "id": "fcb483c4-bfff-4656-a15d-bc6b06d94744",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5db4ef9-b8f4-4034-97be-1b4422489eb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3dae2cf9-40d2-4997-8f4b-c7763d82ae0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c150515-dd45-467d-af28-13dd54cc6a67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8e736cea-adb9-4a34-9b5f-43379e50f4b6"
                    }
                  }
                ]
              },
              {
                "id": "b53b81f5-8802-40f1-b690-5218117ded8b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed52d3eb-59fd-4b84-a0b4-49a30df1bb08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad0749b6-f762-4912-b366-002bdfdfc907"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd73bf50-b575-4bc8-aa76-aba4087931c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c2cb5476-ff06-49b9-8303-495a5de44a4c"
                    }
                  }
                ]
              },
              {
                "id": "8539b484-4346-4cb9-9b70-3179a26c6986",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6a4bacf-c23a-4cf2-a0f9-a7ce073e5f54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "856afb1f-b5c8-4226-a0c3-16ea52d8f3b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b94e053-677c-408d-b71d-5a7f7c284692",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a5dab8a-66bd-4781-8bd8-854040a30078"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24c220eb-cc29-410a-acab-eb711be4028f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d642179e-2e30-47a4-aa58-6d6044ba2435"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "864ecf79-1948-4ad4-99ad-ed9fba41170e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abf3879f-b948-4ed6-98c9-da8aeba85b32"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c40d29c7-a905-40fa-bfce-d752df65b72c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a7e24d23-b881-4865-b7db-f783c96d2d51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2acc82d8-6cea-47b1-8758-f8a883ece020",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa0ac89b-cf6a-4709-93d3-7651680420ab"
            }
          }
        ]
      },
      {
        "id": "3974c54c-cd16-4709-8d1c-c2af8aa61982",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d758fcc6-bcf8-4a6b-8c5f-d2949c314fdc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "993e6f2c-5df0-4c3e-b64b-de4b447afe27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7572160d-6e8d-4d7a-ae06-410a46ca29f5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277d4bfb-48cf-48d8-a51f-131ad42d55a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8672f1b-10a9-42b0-8b56-f818b72f388a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36eb5962-c77c-4653-8b5a-a56404955928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c774242e-1e4b-47c9-b2f5-5bfbf61771b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964772d0-b5b2-4732-9b2a-7e4b5f96d8ce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3342e7-6c32-4d5b-9d97-4aae8376d089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed215d7-962e-4414-b716-c558791b673b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88c5bf9-75e6-4da3-b914-c89cf10848a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e76aad1e-e1c0-4b12-88a4-821835b0cd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b7d6ac-bbb0-42e8-b13d-2dc38168b030",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91591eaa-1cd3-4c3a-8e9f-4f21256a9b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430c3f3d-589c-4695-a0ff-70b74f3ef7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c45b23-db41-425c-8d2b-01cd10e47a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63a2a4c8-0933-4435-b1ec-c5d9e79010a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa70008c-0a5c-4536-ab53-6f00925a3bed",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4438aa3c-91b8-473b-8725-eac26b0e9b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135fffb8-40ea-4b2b-bb42-26fea3819421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22c3354-1d26-4f49-b28d-aff6537b8fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23e91efd-099b-4d64-8df1-742cb6c9ec79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b3a367-88b3-437e-9b92-64a1e705e8df",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1d4a67-547f-4521-a719-534e62c2c439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b315fdfe-b729-49e6-8403-bd7801177678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e63d1f7-acde-435b-a5bb-9f2109d0fdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29798a29-d1e9-485c-bf3d-2bc0b10d2406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e68d9e4-dd14-4840-b6bb-32d09c97aa06",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda7ee17-7b39-451e-b70a-f220bda8f050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a04430-fe2f-415d-b81c-442f44e0dac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880f3ebc-450f-494a-9c45-bc1192cb7900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4150d8c-3aa9-4de0-9359-890496aacb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14773b65-ba77-4da7-96cf-1a3159f74bf9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b2e8d1-1e74-4e92-b8a7-4593d9c96468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ca2832-8361-458e-a3d3-7db5ac26981d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c3f0ca-5b5e-4cc9-b340-694303df3dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb39cc10-0f41-4311-a88e-c8604cfaed76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001c253a-7b12-41b3-a264-be66efad2f84",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba68629-c0cb-4788-b9ee-554c66e95c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dd1e47-fdc7-4a51-85b3-c0cdbc7a71e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a0ed39-e885-4cf4-b316-8b8d09559f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5abfc98-b934-47b7-afd5-49a87827a45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aea1ad-1313-4662-8fa8-562fa6cac581",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9772ce52-bcc8-433f-84aa-695eace81066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e03a57-4e3d-4293-bb5d-993da9db15bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c816ad95-7212-465f-8c25-9b3d0e56b1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be643be3-e115-4232-8c94-ccb914bc0535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a88531-ddff-47e5-a21a-960b5b1a09b0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c30d827-a014-4e35-80cd-6462c58f09da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43fa74c6-b303-4f19-9f9d-ca2fb0c9a118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6580d380-730a-47f5-be96-22090d4d777a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d731db-2e71-4452-ad21-88ec23f85550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19072472-e390-494a-9a0a-950e233b4b24",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52eddb71-5f77-4243-bf43-177546fd9956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d7ce3f-8ac5-4f40-b108-0a2cb5b0230b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632826d7-91e5-42f6-865d-a7fba647c8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ade480c4-6055-4c98-97fe-a7fa6bcb5c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1dfcd8-e10b-4e2c-a3a4-51ab16ec6ac4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db797308-9c12-4d07-bbdc-33903c55cce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1badad41-5e70-49fd-b053-6b06c591c7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb29081-8101-4ced-8d7e-2c5761b5baa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61086a7c-8722-4247-85e7-e0814fb12cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d39361-a95f-46ec-a9fe-65b61ee2ba85",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04236a5f-f812-4b4a-90a7-236b375255cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977c8ab9-decf-40e2-85ab-a7880e3448c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2279aa08-6993-45a8-a533-bac87690443c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a94f5ea-d6b9-4be2-ad47-565cb1713f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5dd8fc-e093-49b5-9fc3-9c63b34f5f51",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51e5079-89af-4bf3-ae92-a8b478bbba0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33576f0d-b1e1-4a53-b10d-d4189202318e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a64c7d-1988-4872-bac7-55aa874fec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "32260069-a01b-4a22-8862-8005b92a3a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1be52e6-59df-4f85-b2d2-b12d03764a7b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3bc983-ea79-475d-96c9-2f7dca709334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fbe5e1-4517-4ac2-83a4-93f14c1ba740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f40113c-945c-4b62-a771-25f76ca3301e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "75775be9-4ae1-40d5-a80b-edd9141e767b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc0c21d-096b-4d6c-877d-a3f770743645",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cf4326-03d2-4bca-85ec-a8b6759b3ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852ae9ed-4243-4b68-82a4-4fe4b3eeef4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b1d23b-c367-445c-ba4e-00d601b39487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "feba0469-8dcd-4da8-977a-ae7e618ee0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972e9904-bdd2-400d-9daa-e2f1aa2b0ef7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e57cde5-fda6-4c8c-a076-4013b86bae14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29fd5a2-2bbf-45e3-bfa4-dce111b22dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8a3adb-99dc-4ac2-8624-7835c882e71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdac9644-fe6c-4984-9989-cb456c558444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafce5a6-0872-4797-88a1-10984d029bda",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dcfcbe-8423-4407-bc34-a06c7046bf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27baffb-9f5e-4a6c-a388-fa684536c581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002d7854-59cd-4cae-859d-13ed777a323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0a9d9c-01ed-408d-948e-814380a22c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d50595d-9eb9-486e-92e8-cda76d6058a5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b058dd-72b8-45b0-9e40-b529bed9f351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f5eb9a-ed2f-4775-ac76-0efc2424933b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2b5066-1daf-4a7e-8741-0c66acf5493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb98d2c-93b1-457f-9f76-66290d068568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ee6501-266d-4133-b744-810b89b46478",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0f4c09-213a-496b-a1fc-4274f8dba5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff87b651-c010-4561-817d-9d1d7a5c91aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099f07aa-0e77-47d0-a48d-84ac67a5284a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3800ed0-b620-49f1-a34c-0c47ac94ee70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa100f7-58d9-46bc-a93c-5276bbf9cfc4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b932ca-3c74-4353-a5e3-ac59d953ef75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0e6a24-4922-409e-9048-e9b3f0b38306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d1e697-3b3f-44dd-ab2f-6d9cc277886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35900de2-2e65-4c37-b1cf-db5cb6a10aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2d67b2-6459-4a5c-8549-aea74e3de057",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63eebeb4-2157-42f5-9f9c-f96905941fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffc28a2-a035-4ff5-8639-6e0079e199d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650bc525-0439-47a3-83af-deb3fc078cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7792b5c6-7778-481b-93e3-ba9b38a2504b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0001140-c337-4f04-8381-0b54932e870a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794d29f9-3256-4831-ab72-920439c9c2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b469d9-e7b1-48bc-9cb5-872e788fe4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3fcb69-764d-45d3-a52b-07dd79a5d192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c36fa7e9-594b-48cd-b5f9-8386bb82fb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a823b3f-21f7-4405-b8cc-c5c56145e030",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054edb24-e3c9-432e-a2a9-da7fd10caccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74e7c6f-2ce2-4ed2-8419-7ca010123701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf591d0b-513f-4582-a4e4-829b0ad679d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb74080b-14f5-4acb-9e91-1fa966aaf1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bb4ecb-dda7-45e4-93ea-5c27daa37b18",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcff5b8-1a23-4dad-a74f-e993cfa5efbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3fd4f1-195f-4545-ae1c-575645ef293e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072398bf-f8d5-423f-b197-81e92dd4d215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "059e2ea5-9a83-4ea2-b98f-08183f2f82ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badac7c2-c069-4737-9f94-f05b261c47dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d261890-ebde-47ac-92f9-c3fa6d3b65fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b38c194-6ee5-464e-a3c7-0e2610c512f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb19c73-993c-437a-a5b2-9b785634c7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e351491-aca9-4a6f-8141-3d9214071c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea7b532-7c44-4e33-b6e7-e54aaf71a380",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bf3d98-cab5-4b31-82e6-1792ad830490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01503882-cf26-4ea0-ab66-309ccf62e297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88c9dea-03d7-4be1-bd61-876431a3263b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba8eca5-0326-4263-b318-4415720a7291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaee3791-9765-4e15-a664-bd336af8aeec",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed25bbd-f698-4db6-92fd-7c9496eabd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec7f9663-711e-4ed0-ad7e-ff5a84207a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70451bc8-523e-469a-93ce-273c750c11ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "570f1e07-87c9-491e-92ec-b4ea81dae347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539b132a-ca5a-49cd-8b1f-2c16c727b623",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57da1c03-c19d-4df0-901b-1ffa1547ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc464f65-fbb6-40ee-b007-71dc3db611b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e957faf7-a16e-4ce4-92e1-b94c41dde37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8df0956d-a6bf-4f07-8707-10c8c0b31452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1871ee-2228-49bb-8b82-691acd0864df",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b566156d-5f30-4d8a-a5e1-a6e05d350e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bde0e34-4ab1-4770-a6d4-8a731e8a364f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75147168-5502-4845-b790-68d5747b3efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2d0c2e-099f-47be-a02b-84641dac6e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8778e14c-b8c3-43ce-ae48-f68158ee17bb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77ade33-e150-45b6-8b43-27616f1ccf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6aeff7-96d3-43ad-aa0f-1b121e0eaeb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd3e350-1c69-4fc0-aeaf-0d72fcc4916d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7acd7369-e5d4-4e9c-8aa0-4dc49f48c0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd70a1f1-a13b-413f-875f-e7bb72926c8c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685cc73b-fe0f-4ade-a679-3df4df599c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b6c28c-4701-42d8-9f9e-5ed6a2310bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addc0cae-a0e8-4cd9-880f-fa638108e97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78a9aa8-6ddc-4740-a1e6-c01c1dc03d75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7cb1e9a2-8924-40b9-a565-bd89ff47c025",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36d5b929-489a-43c8-bf7d-28ddf2c476b6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc57008-d030-4121-b2f2-4648054d088a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "abf2a20d-729d-49dc-a55d-bc8f467bf4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163df644-3a68-41c8-b369-04ac35ec27c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed0475fb-fcbb-460c-a689-efab25a2f922"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47a6d4bc-7ef4-48bd-aa1c-84f6cd280cbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84051777-5ff0-4a41-8087-d700927a885f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6c64b83-c22d-4bcf-a23d-4754bf01a869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05976f0b-ea4e-4af4-98b2-3b0c7d1916e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fb9977f-e4f3-454a-a6a6-2e1e827ee7ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd4f1fd4-7915-44a4-a390-3c1d7ca93aff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af0cb7e9-c6c8-4baa-8743-aa37f1bf16ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3943685-8219-4337-bd02-78d9932105aa"
            }
          }
        ]
      },
      {
        "id": "00f38996-d254-4b48-85ee-7f24be719f0b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "38d7db0e-f729-418d-8d9b-d5e97b51def2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2929c8e8-56b4-4fb6-bcb5-a4082cdb04cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44d0b362-c7ac-45f3-aa4b-5567f351ba63",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1eeedaf-f100-409f-a09a-3cba07068cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd45669-d146-4157-89e1-90314e85a336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bcbb66-4c84-42dd-bd46-fa2a6ac41743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2434a4-8439-49dc-b300-5fda8db6591b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a5c22b-9653-4e28-86ae-7aa48ca8ce60",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58853ae6-7e53-4a62-afae-57c6cc9bd11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8804550-1f0e-45b8-ae43-e75519b175e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79290419-85d8-4655-b1ea-b3d6ffed3a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d649f3ed-0a08-4317-9043-8e051b164a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358bb4b0-99cb-4169-a732-89540c02d95b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a0aa38-99bc-4edb-a325-9ebfd90aa94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402feec5-b014-416b-a399-28ddff3671f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61658ab7-01f6-42e5-ae4b-a86ef20cd0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b04c43-d968-485a-b40c-62b5afcedb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de39403d-948e-42fc-8aaa-babf07896bd7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d5941f-c803-4521-8335-d37e6ed5a441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1efda4c2-963b-49b0-8706-b3912aed4dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b571435c-6841-42a1-be08-fff65463e2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1249ee41-d6cb-4427-9996-e98fb1eb6b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fa2f9f-0191-4914-baa7-3fa5b0a70062",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f55958f-d0c2-41a3-a8a4-cdd0b149bc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab0ae77-25c7-4e68-95bc-b9a67afec503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8822ca3-4a76-42b7-b375-809070280711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4baa5b1f-8f5d-47ed-a68d-c61de8d001b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fb4c3e-9d2c-4748-98fb-229b980ea9d6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf1b563-557b-4c3c-a0b8-e21fcb298331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2825443d-a318-4317-bb29-7586c49acae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd07c29-0c28-4e07-a3a2-c221852ddbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "15421985-3917-4b18-b3ca-7074c915098c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5974290a-99cd-423c-b984-863e812109ac",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d682d212-7f1f-47c8-a917-e99ca82584c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f462c955-2cce-4d48-83c6-0cf7d1ae94f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ef935e-63be-422d-9f01-a18b7a556243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "80967666-1cc6-4cb0-aefc-da0a707d3b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d24ffbe-2e2f-497a-b53e-526c97bf9c99",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db42e0a-66f3-4706-bff8-b3fd4301f707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f34e9a-b72e-4b22-b8a8-cc10c0b41095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354d14d3-6082-4f76-bff8-32da72ebfde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72185eb8-aa94-444d-961c-dd8197260d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c120fe40-b35d-441c-8c06-ceb1de392e13",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72e6519-bdc3-40fa-8a4b-1c71765ca03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0446fdd-7bc7-41b1-9c98-1704f9cbbc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f407b560-29bb-4103-9495-3c3060e914c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb3d3eb-fb7f-4da1-b091-9bc820cacfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad4d5cf-604e-4f52-9352-b3805f938859",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19eec41-8731-4b82-9fcd-861221e7794d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e5ded9-679b-4f50-a79d-def3f34f1c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7cac44-80e8-483f-a21e-7bad27901cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fac030fa-85fe-4502-b3b3-a4f04532aefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4d24f4-74f7-4fd2-8d38-50902ee19208",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29d0881-32d3-48c6-b9ca-d56d85504043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f588f993-c910-46b6-ab58-d3cb54a2ad17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d998b3-d060-4270-a8d9-f3239ed6ec94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec0c942-23e2-4111-9db5-d56be9ead45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f41506-78ad-4d59-9d50-7f182defa729",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1445dadf-0bf4-4dfc-8f62-8ec39da00d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5c043a-80cd-4b3c-93c0-31650c5dd378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaca20d3-4576-42c0-a33d-40eb4515bbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "958035b9-6720-4d43-96f6-73656f2e16b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70366a65-85b0-49f4-b055-1bdcb8152c7c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4098e81a-e35c-401f-a3ee-e0fb1f8710a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963d2f8f-c397-4356-97ed-b347d48e6887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947013a7-eceb-4cda-bfc0-3617ebc490d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "118c59d8-439e-4b0b-9d16-6a263d30d163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbdb287-d591-41c4-bd37-f4f4550d9f0a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b193292f-2b35-4391-84f9-9edfa7cd8331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05162bdd-4e38-4733-b44e-1a3b897d2825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42038d74-52c9-493e-823e-ea6ae8eb19f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b9f2ec-c4f2-43e4-92bf-b4536f32e68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43816e16-b3f8-4068-8fb8-b56f6223fd44",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cceb708-cffe-4cc8-99e5-4f68793c8e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae63e345-6864-40d5-a3ac-15944ccfcfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15783048-58e3-41e2-a89e-52b0f3390f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3376b471-4a2d-49e0-b8ac-f1e46187f8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f20b1a0-6f52-48e4-8109-df5fcf53b888",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e970c883-131d-423e-ae3f-a22e0b21f16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0c3ff9-5dcd-4ffc-93ea-cf5cc2ff047b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c01930-8e99-49d2-9155-578af2891813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "12ae80cb-6861-4720-bf25-6c8504aabcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3be3b06-9285-4fb8-a6d3-67689494af42",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9038be5b-d8e0-4dc2-ba35-1f3d1c245bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f77e9f-d030-4718-ad79-da277569c211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f752cd-f0d6-4763-a381-4eef81118570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2007a8be-c68a-4bfe-9c63-59b5d7601edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcf06a7-b28d-4b5a-858d-5e9da7b580d1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3429dfcb-68c7-41f7-a00c-683c172fcab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa43e7eb-d923-48b2-b199-9d327cc78b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6553a51-8e1b-4604-9cfb-03effdf6b3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0298633b-6937-4fc4-92ff-7c8b04e31666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fc1c2c-ba5b-4f8d-a275-6355219654ab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a11c411-256d-41eb-894d-df6a9c262639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf55dea5-9b53-4eb3-9bea-854019103b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91ae755-f2f2-46b7-9fc3-9bafd2ebcbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "946c0810-cddc-418a-878f-06366c0ca6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86922b51-450c-4d76-aa59-753fe79ba0ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cb6822-37a2-4cfe-9b89-a1203da29061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1ca89c-52a9-4a37-94cb-c388ff71bd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0c5c27-d6d6-4bf1-9eda-2c6ba4506bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23c5ae7-87d0-4402-8a58-8b3e61a03f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de797535-4850-4903-85d2-48e85ae21dd4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1f5254-e644-4122-85e3-fef7e33d27d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cf0d2e-fc10-4750-838f-62205255af72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d124c636-8f82-4f9e-8a04-8a30b8f9376a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "310ca3a4-f10c-4b5d-8f90-23359df62d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acdddee-05ec-4050-9d0b-aaa8eb7accf8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a8af7f-e106-4f4c-bcc3-410f9fccd133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd5c17e-7f25-4d85-9c19-dc4768faaf02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2832a73-bffd-4d5a-88ea-43e030f7f7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adaaebda-7fc4-4caf-ae51-b41468a0df6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15367381-9cbc-4295-b876-ed688b0fc2d3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d74f18-cca4-4e13-940c-1fea73483fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b6ef76-5203-4616-bbfb-75dbb3d8ff13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f2ff33-b13c-4d79-bf76-44157c7b3c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf20fec-1042-43f8-a465-92066b221ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801dc089-11d5-4d06-ab0c-56b708eff9d5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d5b414-a28a-410a-86ea-42070535e1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c17a358-8ead-4825-8b5e-dd9563d4bf70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91c532d-c558-41c3-b74a-87652062b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d528f28-7d81-4859-9465-dd8395464bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d7ef68-2856-49aa-acf3-b140363970a1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5ae9f7-1339-42c1-ab11-0ea30bc80b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497fb5ed-7d76-4b1f-8b6a-d25a314e4060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880548fa-faba-4326-8317-5e25c310aa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82bdf1d-527a-4aff-a7cc-429d7e1436b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d42ee22-8845-4cbc-a1ad-e8f62bb59415",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f42c02-ca1d-4468-b573-617663b3c339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e57a3dc-3448-41ea-844e-601167ceb2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd2ce04-8dfc-408c-b0fb-5ca512246d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07293c98-a6fd-4ffc-922c-4b6a73958ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff8bb0a-8ead-4080-951f-060099f78fd0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1289d07-b2c5-4abd-a402-11bb09f278e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcbf7109-1998-438b-9e68-eb84abf9ba66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e988a6-7257-44ea-9349-84e6493a98af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca08fb7e-2c77-46dc-bef6-a2c1ed66a60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2668cc-43ad-4bc6-aa16-1c04b7d8e96d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1474fa7-244e-47d0-881c-5f1d4feb0b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e759116-76bf-459c-9d3b-09d809bae83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36705cb6-6aaa-4f6d-9621-0e66dd89cc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39ef683e-2af0-4965-9e01-651eacbf6a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab56ba14-b5ef-4a3d-87b7-6f2abeeea58b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c37a67-bf06-43d4-9a6e-8991e05ed573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be50a0c6-473c-4d14-a333-880d49ddcd84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde621e9-ede5-4cb1-b5d4-0daaffd7e3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd1c102-6be7-4c76-a7ea-0c21d5c5ec8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13a087c-19c9-4c62-a9be-2d6a7a5dac1d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa7b157-ad3f-4bca-a8eb-763ee903f4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e0355b-8252-4682-ab7e-82489a3cb024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee972427-2d27-47ac-aada-93cf5c7f0691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff4e1a0-d618-4a2b-80ff-e7deecec7855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a1e1aa-1b76-4c3d-a7ac-173d3c2ec0a3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dab9d14-b7e7-4271-b16f-aa7624f16106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a56801d-a14c-4f8c-bfc6-e49955856b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6effbc4c-d452-48c4-8cdd-76d82e59b9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c23d6f5-9302-45af-b19c-069997bf7262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d35d86-462f-42b5-9913-7e836c303421",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a15723-ea34-4dfe-851b-e371a289fbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0efdc5d5-11a1-4418-9ec3-c9456cee3198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0feaec26-828a-4b3e-9d85-610a1af11582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97ed75ab-97de-4d6c-9bc6-d1816a6fa62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274f2433-191b-4db8-8d71-cacaff768d07",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065a7382-32db-41ab-a15e-163bb3cab8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30b7608-50b9-46fc-b362-dc38481b9172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e1d37c-8aea-467f-835f-49d86adc2a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1d2a37-9a5b-4fdc-9f14-d62bae57b804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45ef523-cc43-4741-93f1-ad6ffc28cdb6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a5ded4-6bcb-4c31-9741-d49f53619b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d2ffb3-d1b5-4da7-b59d-33eabaa9eb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3987ce25-5ec3-4d21-bf5b-c01fb2090260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ecb72f3-72e7-43e8-8328-29d5e0704318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acda8e0-1b12-43fd-b35e-702873c5fc93",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3491bc4e-653a-4e23-b1a5-6276470c85ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc821851-e5e7-458e-8cc5-6221591bb870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc244e6-9014-433f-b5b1-096bd9bd376e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4aa9d77-e55e-404f-a1b4-9e5ccaa5bbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534d3678-df78-4ef9-8b68-6d59a0fefa8d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10b3cde-3584-40d3-a44d-aaeaee507430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5102adf-da70-4431-8655-30da29c40f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ac5cd4-4557-4285-a20c-3618cb59baea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52262c48-d720-44bc-806d-ddf17f81fdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a420b1d3-ba7b-43e1-ba76-d8c8e73b4608",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fab08e8-71e5-4351-8955-7c409abfb062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990bb53f-5174-438c-a6ec-6c1864b69ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f22aec-f0a7-4ceb-9408-7640745cbfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daf76089-7f9e-45e9-b60e-b06772341763"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "124b4f21-36d4-4436-9fde-56462b4211f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4944377f-5244-4c3d-8c06-576bde157734",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddf237d-3d3b-4465-b27e-1d7d34175ec1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5edb82f5-9654-4cb9-ab4c-edd66555b38e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8235575-041d-48bc-8de9-fa83f70b3fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3e96825-125e-4c13-ac8d-0c54bbcda242"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21e68088-dd21-4db6-ba29-89a1368ff9ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ab2c5c1-24df-4896-8d5e-8304fd3fe315"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b97d29e9-0eb3-411e-b602-4f08d0c82442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45a2ba6c-449f-49ed-975d-c5f6966e4847"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b72b2662-654d-4c7a-8278-0c715abb062b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "29b8978f-99b0-4b30-b208-d586b5382173"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41d69778-4248-4f15-a5ff-4a3a2a60d7e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc754f40-bde8-45d3-9abd-bfffc2d37ac6"
            }
          }
        ]
      },
      {
        "id": "5d08a1d5-63ec-484d-b47e-3cd188f3d241",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "69978dda-5c1d-4dd0-8197-54399d98b03e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "133dda08-791f-4335-93e9-cf86c0e33032",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "09baa205-d50c-40d2-8a18-210fbf9fe546",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b061a71d-4e3f-4354-9e4f-06e8e97180ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abb7746-caf2-4183-a2f0-cec3745e14c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b8f20c-beb1-44de-9e35-05ecd90c64f6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8128b274-c711-4a49-ade8-60eac98e2d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53971de-7671-45e4-8483-c0c24a8d416a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117b8958-885f-4846-81b7-65908aa87c27",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08202993-2595-4709-a832-8523e3495550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcaf8870-c3ce-4dd5-a00f-d7aa7f903233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607883c1-4556-40ac-b2a3-561f6681d3c2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748f128b-4dd4-4bfc-927f-7afc298f8227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e3d1a4-648a-44c8-8b12-5f9db2e1bea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320fd928-218d-49ab-adc3-8e316ca6f5fa",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a59f49-a95f-4d29-ada3-3bef3df40cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea08098a-380d-4c06-a97a-54457c3f28f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07aa3ab-40df-4d0c-b75d-751a88ef6199",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074ae025-9564-4dac-bfc9-c30c2b701a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f938920-4c91-42f3-9fc1-0b1db6ee25c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121cc360-3006-43fe-b410-4936b15b3705",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12546d0-87c1-470c-ab89-21de40f8b08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add92c30-c219-4b5e-8840-ddf1bd0325c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87bd74a-1b50-4c44-9ba1-402e10b02509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07e4763-d26b-4a34-a792-86fc81f2474a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f1df16-b328-44a2-a629-43d69a3fd5ec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7691021b-6f74-4133-8332-3158f8acd400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0563a28e-c44f-488f-bfd0-75c4c84a457d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2327a2cd-8c4a-441f-86dc-24569b93e719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48a024e-3ec5-4a4c-af5a-9348f78c9c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9e485c-0edf-4231-a686-89b6f1828bed",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65896ba4-a2b4-4212-a470-2605848bd69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a1b6b9f-c51b-4c45-85c7-f0958191ca57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f3347f-6bb6-4ab4-9201-536b3461ad44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb1cea6-79dc-47a5-ae37-41f6ea7b7a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3b5aa0-321b-4e7a-affc-5924c95a30a7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcc7b88-086a-4a0c-83fe-28e5f13809d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d820e9-e65b-4483-aed0-43f90d9d45a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b89abab-a7b2-4106-b6bd-83922628ace4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c6cd6e-847e-4010-aa7a-cdcc0704cb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124105b6-9b71-48a1-8b06-5b5a9e920a6c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfae03a-36db-40fa-8745-0bcce219267e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4afb125-272a-4d09-bcf6-dfc6bb6230e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb0c619-6c82-4c74-aecb-7158c50dc49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e2dc30-5533-438c-be5b-ea207d910a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02f91fd-4b81-44ed-aa5a-63d095bb6229",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546c013a-bf38-4fe2-9e54-aff9a3c9372b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963dca2d-af5c-4bb0-bc88-d2940fb9f027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ef9bbb-793a-4119-a794-a75f358374f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ae71e0-965b-4b76-be10-fdbb33bf4d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38839a76-e688-4ac3-bd9d-f19163938f7e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfcc6ac-af80-4778-900a-604d0bf386c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccbac7ad-adf8-4a41-8833-89b14d11bdb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17013b37-efec-48d5-bf2a-571e8c8e6c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247cc070-0db4-46f2-8ecf-df15f1c96ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ea3cfc-1b53-49e2-945f-bb0093f12c59",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c585f4-68f1-4019-bce6-ad32906f3332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7824fcda-fa16-4fa6-a4c8-13ea1bf2c548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae80e169-a80d-46a4-b0dc-1997ff7d23ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e42124-e581-431b-b26e-4315f3cb1e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62acc22-153b-4031-9b12-2ab8646fc8b0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6531dc47-bd99-484d-97f1-97bca4f93bcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50930be-dabf-47ee-9cc7-568fb276786c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef70ffe5-83a7-4a72-b53d-bb41beb0561d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99240c8e-7b51-42fa-9a1e-f96cdf707d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0393a8f-2f77-4b22-a555-bb67fc81bb3c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b394b844-2414-404a-b873-6399ac8cc477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78fcf669-b70c-414b-a7d6-b6f211d422fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb08435-c1d2-43cf-9b48-658982777ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252553fe-b387-4511-8679-36bc1d432515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ad3155-9f16-4e66-b22c-39cc7211228b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceccda0a-860b-4801-a9aa-1190740749f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927b81b4-2d9e-4bae-95a0-5ce6e5d5c95f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dec48fb-8ec7-4b45-bfc3-efe47a1a5b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cef0a6-e02a-4b62-920e-8f2702543d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbd0f48-fb7c-48ab-8552-95095e26ae7a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e98cf0f-fa1d-4d6a-b64d-0f22b92a9569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad4eadb-ed2b-4b87-9de7-07a90a286a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115f1df1-6640-41c9-8d6c-e3a7ad019522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf63dd7-b192-43c8-b1ec-d9c9a339bf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdb846b-af77-4270-950b-bca6c1332ca7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e1c6e4-4c19-4791-932f-541bba1c9969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4e965a-ad78-47a4-bc52-5e31dd04cc2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1262dc8-2f2f-47d5-85c5-9ca4389abe7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67aa043-590d-42b7-b298-1f21f6ebac4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e4d3e1-362f-4272-a065-5a8bad0e1b13",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dd9258-aa25-4a21-b978-81e6879ef87c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfbcf81-bd3b-4680-b885-cfc99dbd2a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161b0658-6c47-4e4e-956b-7810033dbd65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4421cd04-17ce-4f7f-89b0-8dc5896ae5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6563cc19-1976-4275-87c3-baff39b0f2d9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d2a368-2f2c-4b75-88f7-10a531b15b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf3e7a01-4fae-427a-a255-bd051172e8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67daaf43-ca89-4e76-a3b8-b5450f94d1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1981f6-2409-4bb2-af4e-9a0d490edc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b00503-992d-4667-a6e3-2b0050c92cc2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f526e030-9b75-47df-9937-70a431a9ae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3438da-318f-435b-93b7-7116cde839c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9942fc9-3ebd-4d96-bea5-d6cdcc46ed2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0638b815-0b1f-41c2-b10b-2cb85bc792e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f46add3-bbb9-468c-a0ce-e6b43906af2c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3090005f-4f8f-4387-8b06-406c97114252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bfdc62-9617-4de2-9ec8-cca8e5be646e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db187ef-67e1-4a9b-bb6d-27d308ad37e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c1a978-5152-4ee7-a391-c99c0ce436eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b065458-e904-40da-a804-b5fbefb5f3c3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc1cff7-25c9-4e04-919f-50a51b3e6b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b5078d1-6e68-4b5e-acc7-b6e16000ae48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6fc4f0-4a69-488c-a7a6-038a5058491c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3efb68-4cc2-4cba-b6e3-afee4006b762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c7be93-67f6-46dc-b8b3-21e4752d0ea9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b56a0bb-c8bf-4ee1-a7ca-121c94a9fd3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c6de3a6-7d29-4bbf-95f1-841ea0f9870d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df795e24-43bd-4dea-b12d-7dfedc92c14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9220e5-941e-4691-933b-52bfe77c4c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b11c8a8-a475-4de7-b658-3c879b98cd33",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbba226-a509-4e7f-a44d-1f6a3818649e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "765c916c-ed47-4486-bb6a-9dcad976c012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cba9fe4-cdc6-41ad-af3c-f21980e8d2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10438abb-114c-4edb-9d14-472c5ffe75c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a633d6-879b-4e85-83a7-4d722b526b9c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2715f943-eb1d-4d8d-b049-0d9d613dc259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c1e480a-8e07-4989-9f04-594705377666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9473af9a-45da-462e-9776-216f38c56286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c02237a-3a59-45c2-8d05-89223bf24206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4ec910-c89e-4aeb-bfa3-55a5c9038b92",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8057e42-bdf4-4007-9242-5ac0ad314932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3f4bd6-f470-4f49-87dc-0f0df286f212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00862a73-46ba-4ba1-8ddb-8d4e4847bfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfd79ac-de41-4548-830b-8575cc546b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2502b837-9688-44b7-9331-32571ee74925",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed0477e-e732-4741-be1c-f5849d81a093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0854b538-fffe-4a45-912e-015f1d72f482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fde79d9-8809-43ad-9387-132eb85d9f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22979573-1ac1-411e-8835-f7778c2e9261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e8c5a1-31ad-4e78-9907-ffef9841c21e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b71c9e-89db-414a-b601-93f7eff120b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ff914cf-69a4-4bb6-8a99-2e6620b994fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dd02a7-2fdb-456a-96fe-fd5f98748260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55087426-33e9-4ef3-adbc-0062bc410b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa905a69-89d9-4e37-85da-fc7856304e9a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c869fbc-37cf-4783-a000-5313647a6e5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79a1062-b737-4d78-8ffc-826d346d2764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dabce39-4288-47eb-bb2f-2b50a6b98ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b412f73e-ec8d-4793-aa93-d8a6b6284652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcd98b8-4564-4664-b4dc-5f350ee97a36",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a51228-b3d8-469d-ac18-9fc5c584122c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e96092-8d1c-486e-9358-46b9e0b6499f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58857dd6-c4bf-4abc-936f-5ebc253172ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03be944-5989-4d39-97c4-34c5b282fdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c308fa4a-109e-4f7f-9fc9-1c9512804765",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9adb6f-30ce-46c8-9406-a5d6d3d8493c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2077e2c6-47ae-412c-a750-583e71cd8017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c68193-40e6-419c-b22b-212631b0b484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1dc295c-73ce-4a27-8035-e03e1750ec30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b598e3fd-9916-4ea6-b793-1d5bf82b3ef6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1245f2-5472-438f-8336-8d3cb2247d0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fad2e2e2-791a-48cf-ae48-d6c9b6a97514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dced9f-540a-4b42-beaa-3dc363792e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41374e0a-2477-4ce8-886c-53de4359b1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32de626-d2d2-4a20-9fba-85862cdc53e8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629e6f92-bab7-45e1-8406-51c31974ef1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d04640-6748-4871-81d7-4b4a4efe9fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda18038-55fb-46ec-942d-719d6482b074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022967d0-30d1-49bd-b44a-a6f7e065fa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72753b8-73cc-4cce-b02c-f06764e8d1b5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c4b619-3953-442e-bc0a-3c63039e2097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f35113-b5b6-48db-90af-e3695e6ca45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696bd898-bd63-43f8-b59e-526de2133a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3298736b-d52b-4f62-b2a4-a9d1f02bc930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db127bf5-f178-4d22-8269-3847d376e291",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d2f820-4f56-497c-b68c-772710c56540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce854c5e-20e6-483c-adc5-3b49bfd9f761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bac490-7bd6-4a05-abf0-b291f3903d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ac69f2-51a2-4104-b367-5de42dc9a123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c77cb2-bfe5-4b63-9415-44c57dd5e4fc",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cdd1ff-3eb9-4fc2-b2ab-4805f930965e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7d8996-9a73-417f-bc03-03ec3cf9c540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36dc8da-f649-4597-b9b7-b8201c53a01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6c8c39-b1d0-46bf-bcb4-3d461b488f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b11694-8337-4147-9d9c-423631561bf4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd85b6e-b0a1-4e10-a3d8-04909bac6291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301c614e-b044-4a9a-863c-d4c57a3b73a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac0fde6-fefa-4882-947e-55982ac128c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8248a861-0977-402e-a356-ef017515be64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f21bc8-549a-4a48-9444-3c60d68fd532",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d64dfc6-1bd5-40f7-9643-8418cda2e365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c64be9-74b8-4dc4-be7e-cb913cc76faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8d6204-7c69-456e-9687-a275fbb26635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffdc124-6c08-4985-a584-f6e2bc486dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a80ba1-4e35-4788-9714-4f2e94d2f2a8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e58ec8-1244-4cf7-b862-772962c85470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eec6591-615f-4460-b95f-93281b92f796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e33087-2bbb-4e09-973f-97a19792fc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f34a5cb-f502-4c59-af0e-d168ae288914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c3dd3a-bc6a-4220-a835-c7d565f6d6d3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c79baa-e158-46c4-b0bc-6f6dd1e89646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d807987-a38e-45bd-a003-e99046135d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a33c48-feed-423d-9ca0-b526dc2494e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8657af6-5063-42ac-a495-67b03c7fc110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296b3f38-b9b5-4c71-b990-d8918d1a89bb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b316e4-5428-42d4-9e1c-e2dcea79131e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7125b0-68da-4558-9123-1275ef521630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bfeff3-365f-4de4-b1b8-928a9aa59450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0196c3-ebd3-4743-9586-91e4a00c0cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0c3397-f705-4dfc-aae2-1addaaa09ac6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2318a9-fab5-4f42-9da6-445e57094f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d062017-265a-4264-88a0-dfa41f81035f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c4c73d-3d3a-4e66-85d2-d81b1cef505a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5375829-4f5d-4af9-9fd2-5c91a276f5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccb5d8f-4c1b-4b78-b9d6-0fabcfb0d701",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8de0a9-83e2-4edc-bff6-7a1e14ac6ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500a1223-cdf9-40d9-bb3c-25a8e35af09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdc71eb-ebc6-47b0-9f72-e8824c26106c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9e162d-a3a9-40fe-b83c-b372929f90d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cd7168-8652-466c-a0f6-d2d67850dd24",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c8ca15-e34c-4bd5-b44b-53121c91d344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9ed95c-385a-45cb-9760-1e939ce6725f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e04b60-7690-4e32-bf24-7d31abb34698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675ca790-9f5c-4fdb-8c11-7c556636aaac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fc6c45-55bd-4e3a-9b27-88cecb9405b5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737437d3-6c70-4123-9d2d-530ab19ce51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe307e5-11b7-474f-8926-8017d45ef945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c93457-3730-4007-bf15-2884df41088b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce486d6-984e-4aac-833a-3e509156d32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84eafaf1-c9c9-4c46-a563-cf193a0e71e4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e242e82-2ce6-43c5-a6a4-b3e4d1ea8601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcb651d-a584-4914-976a-ad62a983b561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b51ea00-ee1c-467a-8db0-47623243db75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d94bdb7-dde8-45a6-b851-6ee524d51b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25ce8f7-4027-4fa7-9937-ed05ed798c21",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01388989-b306-43ac-be59-5df7581af4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7839dc0c-0ed2-4805-9e47-81081b852c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f82e2f2-896f-42f5-9467-4a7aef42109e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb799fd-3ace-4bd7-af1c-f28a74cfc7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a47c6a-6842-413d-a2d2-05e4c2bd926a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5921e112-4176-4faa-80ad-867cb2c85e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70a5529-89dd-4850-9a8b-b514cb27baca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db11f17-b506-41ee-9b21-8263407b4c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b5e03e-8e92-4404-8f79-b6dd30acc04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7813da97-fb5f-48fb-8f1f-3cb9f032472e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8776c8c-92b5-4099-bd63-3fbae677da67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2ba204-aeb5-4f61-92ab-b5ccdd6b4154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8197430b-3d30-4cc8-b1d5-870e9b6127f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22a9ab4-4bd9-4f40-838f-cf63191c59f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a414c792-b079-481a-ba0c-65960aa379fd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73aa9357-e713-460d-9ecf-91bde53bfe42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfca5e2-5611-43bb-9017-23e1b2d29d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd07d0bc-b999-4efd-99f9-04051780930e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6762c98-3adf-4b66-9aa5-59d0695b94ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f15fccd-bcba-46f5-b3da-144d82b46884",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6834e67b-c06b-49d5-8b10-a870e1a6d813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8d00e3-1949-4129-9a99-6e3fb8351f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1bd07e-1af1-40e9-9e68-463df9ae2460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f88bd6-a292-4ea4-b539-f301f3826d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f767cf99-1caa-40d6-a326-dae8961e8fc6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b536a5-e4a6-4c64-affc-de85f4046e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94c35c0-fdf2-447e-bba4-6473606ca845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d483eb24-abb5-4526-84bc-b13835db972e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f41d86c-cd71-4c6e-8030-49d97f29f996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97b98df-787e-4d11-8828-deb46bba9636",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08af27e-ec01-4d56-8f1d-833e997caca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403a3f72-0d92-40d9-a398-2a052f8d6996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc02444-7fbe-4678-83c7-e0516af61a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5f685f-1781-4e16-8b22-c8554dc924e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44a6e95-0345-45be-b6a9-9e9223258408",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c792f3-e2ca-4f0b-bc3c-d0b6691439a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38972e3-c5d6-4e59-a275-8a4dea36e07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded2b325-4937-4054-b11b-e4136c0bf239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e943df-4adf-480f-9afd-fd09490dcc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11be410-fe88-462b-b612-2e6fdf5a2b64",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215c721b-59e0-4cdf-81ca-f58622fb1cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0665f334-8c32-422b-a01b-6e6f39d8f7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b540fed5-0064-40c2-a87a-80892a14750a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4904faa5-0606-4ae7-a983-6d13cef45719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d350ef57-0f7c-4800-b313-18a5c769e007",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e21663-3476-4566-958f-ca3d75e969c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80bc830-82c3-48a4-9875-e2dbc7545d5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc70d8b-79cd-49a5-b9e4-824ccec520d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e38e8ca-203e-42b4-9f66-24b84da7e80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6d5c95-8519-4737-b0d6-4cfce9f45e3f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b4cec6-d736-4e83-b7a9-799ae67a9e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaeafa2e-cbb4-43ad-8498-cb92a0428d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ff0bb7-0d38-4d87-8c3a-948661f6f520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315b8384-02d6-43df-9ab0-1916b04168c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d2f585-3729-4034-911a-d4202a6cc5d2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6028e632-ce6f-47a4-aee5-115418c589f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e490ba-28d6-4fa8-b3ec-4a2cd5e89504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17377278-2d86-44b0-b563-76abe974a345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c621542-cbdb-4166-b567-281f17f5f88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1619302-cb55-4c8a-8c89-491124647a61",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70659539-2153-46c5-843a-8fe08c2a2a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ff0b18-8f4c-46b7-a913-e0364a1a9059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e10975-e38a-437e-a5ff-86e260be5939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc2561f-e0cb-448f-bdb8-9281c8a845dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feba77e6-8812-4059-a386-8c9b2b7f332e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94efbbe9-f0c1-4541-87c8-7c420b28c685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12abf572-5120-46ea-8ff7-a6657f8c9d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfb33f9-2022-4f96-b552-be321cb4160b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da069479-ea74-4f8e-af15-e53d389502e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4019d44-177e-480e-b09c-be35e7f3c63c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858762d3-5f69-4c21-b66f-6ddf610145ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02791dac-87b1-45c0-8f88-4be4ec548ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ab8e05-3c80-4cb9-ac8d-4e0a24e2cfca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c639d8b-dab2-4466-94e8-ac232a1c1e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcc59fa-d46a-4353-8a2b-ddb9c121e2f7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f06695c-1d61-45c6-a604-40e93a3d2a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6b34481-164e-41a8-822c-5014f4a86f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ce38dd-5d79-4bba-b965-935a9b5b8c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36925e8-110f-4d7b-9ca5-c36ba86aeac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624a4d16-0b92-435b-ab31-c0a1f8e4707f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee670e28-3fac-4a81-9697-fa3dd244d1bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a8ffc4-4150-4e9c-bfc3-e11bd2bc097f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f0f9c1-d889-4712-aa85-cb3f67d72d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de12f05c-fe1d-4779-904c-231e5582b95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7cf66e-39c3-49c7-baaa-8951797f6891",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a83cf57-ec2f-4ad6-8e7a-2c597eaa64e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75799e2c-ec78-447b-9426-00761084a99b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce73353-06f8-4c3f-906a-e4e7e4c037d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b09e590-2c0d-4751-bc37-ecd6c00a3bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de5617c-fb54-4557-9453-b0d835a451c0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1a4b98-aa8d-48ff-be40-011a84594f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "522c09b6-2456-4ed7-bf3e-4f8f552c5a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdef1c4-dab0-494b-9d33-65e6a5a7649a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d4e05a-b684-4210-9298-84043afdd50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903c3c95-4cb8-435b-b21c-a5963e237924",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1076b7c1-c27c-47c0-b522-0dd6dfeb8842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9496db4a-1069-42ab-ae0b-6b9b12e24ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e653888-887c-45f9-bf75-395d51ee8cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2ecb94-5af1-481d-acbb-e25ac528b8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b016d3fe-8fb7-44c4-acc0-fd7bcb6c392b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1c3115-36e4-4edb-b66f-c8fe454f82e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7063a94-bb24-4d49-9796-3b4965ae9dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6124bcaf-eff6-4358-a408-ffcb620fca67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1397c7a4-1efc-4553-a1f8-e18171736078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34c6ef4-ce19-4c8c-80c6-fe626c02b8b8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc077fbe-e8cc-4c56-a39a-f4bc02a7e1be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddf50c4b-d1e3-4b44-8e00-93ec3882b36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db718de3-f485-4ded-be93-4fc5f83287e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deaf69f9-a526-4f66-8878-f97d1a6c9ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3759f1d6-e279-49d1-be9d-fd97841cc6e3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7449880-0811-474a-9339-77a3d222ca48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9cad12-da58-4bcf-adc3-906fde53ac01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bdd567-2834-473f-8a79-aa3548a59b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34cf822-363c-43af-a31f-ffc1f471f579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a58f7f-2393-419e-88ba-52acb96b3de6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e92a77-9090-487b-8e58-76c65f2910c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffbc16a7-a6ef-4250-982c-06c8e79aebf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac83a20-ac55-40fa-94e0-1ac81943064b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddb017b-875d-461f-b9e6-8621ab10c633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434c3406-94f8-48c1-99f4-537dba081e6b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c36a11-c3a0-4cd7-aed3-8e2ed4284168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80314ad2-af6d-4d6a-af95-2ff894ef97fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99bc57e-422d-41d1-93ad-d3ed7e11c25d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5b1a93-08d5-437f-a716-dbf35a4cace8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e64d2a-3574-4560-b0a8-0d1e75a71658",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c2e7a9-6df3-466e-9f1e-0e1374a29db6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d9c0ad-a878-4970-ae5f-5ce9ab255044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fa2160-38c9-46f2-bf94-0c9e07902eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df9b808-7d7f-49c3-99a3-54d177bd8378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f91ccac-6fee-48a9-9673-52082059911e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d308748-cc4a-4d57-9a56-da8af2b8cb22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e46a2f60-c822-41bd-b163-0b97562ea28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8666e00-9058-49de-9ef2-291f4e6bc8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d1c358-8dda-45d2-80c1-461aff1ef397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ae768b-0986-42a3-8e0c-e72b4dbae1e6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e7b255-7a37-4836-aa80-924a21632e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffba8423-9983-446a-a59e-57fcfcac9fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d8f57b-fd30-49ce-a5bf-7a93f18acbf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53348b2-9227-41e4-943b-a06bd0ffac00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8fcfea-3caa-4cfe-9fa0-2e96ef8df4d4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47689ee-6e48-4630-9daa-d1dc1274a143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74ffa066-6d43-4271-b7cf-84cf5c540d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e91f869-d3ef-4e26-a172-f8dbe83f52f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c712eae-6d0e-43a9-a78a-131333a9556e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65840b3e-dff1-4119-8b06-c207fba82900",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cff00b-cdbc-4b35-bbeb-b96fceded6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7e8118-1025-490e-becd-ff048e251ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11e9172-f957-493d-9ab1-1e2adeffde3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82446871-f312-4443-becc-03d4bd9f1f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf57b18e-a70a-4ead-9bf7-e50963ffb59f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936f2f42-2996-4ce1-8dbd-8aaa4d922d4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "491e871c-f5d6-41dc-a8cd-6d709226e2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7741cca8-2900-4356-933b-a355edcf1677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f753328-f1c4-40c1-82a2-ab2898e16b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bf1fe8-31bd-4479-9821-b72f8563f999",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68910229-5bd9-4392-ad24-2e87c38a5d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72bb886a-60ab-44e3-944e-e76f7dc6b3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59033425-d4dc-4999-9b49-c3e5a71f5db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61e732f-67b5-474a-bc4b-d7b013316687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119fcf9d-a062-4c4b-aaac-23743fd4e990",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e21632-db0a-4c5f-b2ac-84716e83308e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198359ad-7de6-4069-b308-49636c87a44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9711335-b030-482d-97d0-2de457fad6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c451df-01cb-4e32-8ef2-ee61cbf87e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d75e612-4a49-411a-96c2-020f646bdcf2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e23c7a5-19b7-464d-9445-c74a149d05d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24df361f-9fd9-4bcf-b2d0-124067b61511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa79d8ad-8b6b-467c-a2bd-8eae545d948e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72dcf98-d4bb-4a0d-9371-014e2c636def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7762243f-120e-46c4-bed5-2e2e6fd53a44",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21312631-d2d0-438c-849b-8d1b1aa439d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "864c84f9-77b5-4192-ba96-425fda3ac4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1315108-2096-4238-bfd3-1587d66e5654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8bef1c-9cb3-4c1b-9ce6-a3793f45ee1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46e6089-7ce2-4f80-8f41-261857242e3f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612e1a25-b25b-4054-a9ae-100d1aac2e59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe7e104-6e67-420a-ac03-6ceb0eca98a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c1cdbd-499f-4e3e-a5ac-e9b2901f5208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea9acfc-710b-47ec-846f-8b13c26cd9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451b79c0-bfdb-4772-9d51-950f299007b7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d8b8e5-f57a-4686-81a5-50f89bbde341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18b9dcf9-c78e-41e5-ac31-c9133564eb65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85ddc98-31a4-4cd4-961c-c34ef00d06f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04528fb-51be-4607-b882-b0d5abacb1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314e2aae-298d-4c66-b5ca-9522dcdeb2a0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961adc26-6429-4125-913c-2ee63fe4b2f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f824653-5b7d-452c-aeb6-b3ccd216a38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf10ef80-f367-4381-8a2d-9d84a1b9c3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3400028-62d9-486f-ba5d-c12a2254dc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895e5d8c-b16f-476b-862b-1fbeabd6dd5b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b12ece9-be6f-4148-bfe1-2909d90d52c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deb8861b-ea35-45ca-b8fd-dfb69cf688af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca143ba-35aa-4e0c-a17f-e8e2e9cc066f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6bc54a-b174-4c64-9930-45734c80c331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e349e55-0cff-43f5-ab7d-23c15b64d472",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d387b8b4-dc65-45df-b26a-7b64529e2bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e1555d5-3420-4807-a70c-70c264d0a2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d2f4da-2cde-43a3-b1c1-7f114c8e55f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f1f395-015a-41f8-92e4-de3f7d40307b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855d8490-89ca-437b-b511-b3c8b8282415",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6043629d-2e8d-4238-bb96-515873535a42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e30b75-3e66-4a4d-bcb5-b2c3672e5cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380c1300-371e-4512-9257-d62d5d6d5c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc60a8a-4232-4338-a86e-b9c9ea9d0627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a61dc94-29d6-4490-b4c0-d7c7f3cfb966",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7babd95e-bb68-4910-9691-6139da1a5f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71bd23aa-8677-47fe-92e4-9f6c7ff3b7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036e05c3-61ef-4eaf-a7f9-21c47cff7843",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49136764-11e5-4022-9cd6-26a1f1da893b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e30b4f-d490-4eb8-9171-59ab6c6067e9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fdfe4d-1cab-4c5c-87df-384d38f3ae1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8af6dd-45e4-48f9-9278-164d77ef2694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b881d774-2eb1-461b-b0e6-7e6644f8c03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7259fa5f-f01a-4abf-8e8c-38ee892d8aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d8adc2-f1c1-4301-9f4f-7296c462b1d6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b555df-6133-426c-adf0-1108a87e8804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92160b52-c009-4458-bd2c-0b68b87d360e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81eaddea-d26e-4132-ae8a-09ba04eb929b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102db192-89b6-4426-a4da-5c90f4a1dee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15db07b-619f-498d-9cdc-fea233e0e6ab",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81adb01e-c785-4837-bc58-c90fac5df018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273ccd2f-f0a6-4eaf-960a-d047c26ce529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab0246f-6e6d-488d-afc8-84c3f5ec60dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51ffcff-bab7-4d5e-84ce-e18df4a1a860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e188db98-39de-4b6f-8736-f0fa29052f09",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240b010c-99ea-4548-926a-49eb59e76871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f652738-5b5a-4c87-8a40-3d0d4672f3a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25403d8f-bfc5-4d6c-95da-64b9985f51ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e329fa-9502-4ccb-bb83-36b3f2571d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0132c9-2e5b-4665-a000-cc9dd9f9ed55",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8a1b75-b884-47f3-9fad-0f6948a5e7ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc802e22-1629-40e9-9580-4d41a6ea791d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c141188-260c-4622-801f-06d7e1d50c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208eabd8-8854-454c-b94a-c583a46ae077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32463b1e-0996-4777-bfce-3dd512bf18ff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046381a0-2ec1-46a5-af8f-886b3d7e1fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80f3c26-7dab-443a-9a78-a37c2d5167a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddb98e9-19fe-4fe3-a1fe-db72cf362633",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2876fbb1-f630-4e8b-a16e-ab01a5bf33f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8915b0b4-d1c2-49c7-aabd-01e4c3565b68",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077789a3-6d6e-4e76-b349-bbac939f3943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b92f4ab1-2804-453c-b8d8-e95b64000a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bb9e5d-6544-4cb9-a47e-55f6975d480d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcfabcf-b6b5-481b-aefa-1e0653c268fa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b42d7bb-6ac1-472d-9fde-3325f12eb174",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38431660-a446-45cd-b96c-175241e68a99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f818f136-8ae8-4de0-91da-c393723b3267",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd358a48-a258-4711-b756-86fbbdc3d103"
                    }
                  }
                ]
              },
              {
                "id": "062b13ba-bc50-4deb-bec8-fbbe62b87643",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d6d563e-97d1-4a61-8c9b-fb25b9bd1ee0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e758fd4f-252d-4272-8a6f-5edcf7c2bda3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "887b3358-f49f-4d66-8678-b232ec0e8528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6774d6-993c-4cdd-bee8-9481de3897fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1aeace9-0457-4958-b1b3-6c46160a774f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c99bd22-0ca0-4e5c-bc4b-6e78831952ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a0b38d6-29ad-4d72-9997-d4f21910868f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cacfeb65-0196-4a44-9555-3389a583ab2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5efdc94b-965a-4eeb-a044-9da3657f3c09"
                    }
                  }
                ]
              },
              {
                "id": "15626276-b4f5-4885-a518-2f815e8a0fb3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c4c608a9-4245-446c-9389-07d079128037",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8666b6c-b61b-4b6c-9d3d-6a32220949fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8d277a08-f4f2-4a89-93ec-e567a278e3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c5697d-70b0-4c54-b706-4562558e74ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba4fdfd-dadc-4456-a74e-1b0d4d1dbb13"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c53d2abe-7ed7-40e6-b73e-e689ea8b4bf7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38383652-0a23-4bba-a4d8-280c84b0e68b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32f4789f-3a62-4a75-9813-ed0aaf2eb723",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2720e02-a080-4856-953c-fb2dfe26be10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a3c0aba-70ce-4ad7-8861-1aa5a150426d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "300c2691-1f4f-4fba-bf4e-0a89dd4f3f1d"
                    }
                  }
                ]
              },
              {
                "id": "32e145a2-d9b6-47ae-b298-b7045b40863f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f2b50fa-af02-462b-8363-62f416d4de93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4154f6b6-aec6-40d5-b6da-faf79a53a2cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c944729-69e1-4877-81ab-0380220a7c4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d7e722a-be42-400a-b031-786b773c0ccb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccd0250e-5f1a-4763-8f3d-5a6f22a39b9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "13d522ef-2cec-4c22-a74d-9ab5426d43cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8965d887-10db-431b-9694-d1c160a91da9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba612804-db4b-46e0-b91a-8b00d32499ea"
            }
          }
        ]
      },
      {
        "id": "f2f226d7-3eba-47af-a229-460fc9f308d5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1c529b9c-7f32-428d-9784-808878142074",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1379bbfa-0ebd-4ae0-883c-9d238dffc281",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "531d7f7a-6ef8-4cad-858d-995f4ba0e538",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48eaee5-4500-475f-bebd-f764e81fa676",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6eb88002-4baa-43f0-849a-80dafdc00a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ea0140-9699-4ffd-903c-8dc104704279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3835a9f2-9a53-43b7-a980-ce58ae45a4af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8bccd13-fdcc-45a9-8e61-23885c299c9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "656b5c28-5667-4dac-b145-222365fd6724"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a50259e8-75ff-45e7-a730-60c8aca5c870",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "885e1c7c-889e-46ca-9eaa-d6e7eaa0e1bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f1fae04-d12e-47ea-942a-433d6f89fbca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "62ee4eea-383a-4592-b50e-b4cd4210c264"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28378e95-1c9a-49a5-92e6-fd6b6dd1e6f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bcb6bec9-6de5-41a5-992b-fda083deab9d"
            }
          }
        ]
      },
      {
        "id": "4dbb938b-cd6f-4f2e-a0d7-788536393604",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fc640294-f00b-4e0f-8bf8-190315d8995f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e89b14d7-e303-4446-9d49-105e1745ea77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d8e31e6-a5e3-49d2-9ff2-2e38ab80183f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6520d098-df83-46e0-bc3d-1febdba8d2f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37dd6412-2dae-4d43-8e26-69c105de7c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a901ca69-fdda-46d3-9522-0b25f6a047a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33472e05-203a-4a8c-92f8-35be0a7108aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8668e573-e531-4ee4-a208-1599a5077a9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4349b67-f6d2-4db4-8f7f-2990053e757c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5c806f3-5387-46fb-a290-4d1041446aab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80af93b3-617a-4a2d-9357-4494b13cc6be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f309dd3a-2022-4366-ac34-eb5f9866fac5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a72eac5e-edac-4beb-bfe0-33b9e28e1345"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc1a866a-f836-4e67-90a2-f31c1c69a512",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea79208a-d456-4209-87d2-6d10a4eb8bd8"
            }
          }
        ]
      },
      {
        "id": "2a6940ef-5fa9-4db4-bcab-47206740cb8c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "673ef3b4-6e6e-4c01-93eb-927abc4dd598",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf2ac151-f384-4499-b05e-5a87e0757b73",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf43e4e0-c06b-4f91-89fb-058acae8cbc5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31618f2c-dacd-4dc6-9636-05cf70b32f8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc72fe63-cc76-4f32-ac85-84ace608c891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ab3f00-39d0-4910-b3a8-6296ccd547e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3df2e00a-c05f-4597-840f-b4087c8484fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "780dc960-0c35-4164-8dc7-c0124a3ed72c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b434f700-0f70-48c1-a9b0-45dddf720963"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f6f3935-ecd3-439a-8129-51348550c197",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fd39c20-2168-481f-bf40-224eb4b56766"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3eb048ac-0546-49c5-93f6-000fbeddb8c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7c0deb30-a760-42fb-a5f8-1bd2df80858b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "252dd638-700c-4039-b524-3867d2f3124d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "962dd4c2-5880-47b4-9e1f-16cc159d5b29"
            }
          }
        ]
      },
      {
        "id": "c4e7d21f-bf4b-4dbc-9585-423362062c91",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b2b7fdb-46d8-49b2-926d-8bed46aa027e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9a4f753-42cc-4ce4-8729-d6eaeb67a707",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9ac0f8ba-f335-4ccc-aec6-96b61c207278",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdd485fb-cc81-4ee8-9ef6-10d8e030726a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2c42e49-cdd8-4f65-95f3-181bb6d75222",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 277.47183098591546,
      "responseMin": 8,
      "responseMax": 35648,
      "responseSd": 2116.17238073394,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695429114728,
      "completed": 1695429208017
    },
    "executions": [
      {
        "id": "9291ba8c-0347-4dd2-8fa0-238daeb2bebc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2b4b9532-8632-4a96-974a-cbedb69db500",
          "httpRequestId": "dac48502-1c93-4daf-bc7a-c058962c7c63"
        },
        "item": {
          "id": "9291ba8c-0347-4dd2-8fa0-238daeb2bebc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "523dd837-9060-42cf-8c6c-c68ba971da4a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "4e1dc6c8-753d-4ad6-801c-6d80f5b415b9",
        "cursor": {
          "ref": "921934bf-7202-4eb1-80ed-b2761b16ea57",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a95a086-8e3f-4971-802f-c2102720fd0c"
        },
        "item": {
          "id": "4e1dc6c8-753d-4ad6-801c-6d80f5b415b9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "10d2e697-3b5c-4a0f-bae0-8d9b86ed4ef7",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "31a334de-6532-43a3-9b8f-c75bf77a2715",
        "cursor": {
          "ref": "7f00d353-b5eb-49cd-bce3-3bc4057cc3ca",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d35de44c-eafe-4166-a5ac-462bf3ebb872"
        },
        "item": {
          "id": "31a334de-6532-43a3-9b8f-c75bf77a2715",
          "name": "did_json"
        },
        "response": {
          "id": "e933e6cc-d5a2-4bbc-9ad1-39394db69dc2",
          "status": "OK",
          "code": 200,
          "responseTime": 717,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1f70d3-b673-4d50-8dba-71a46cb2bbee",
        "cursor": {
          "ref": "28a5b358-6db9-42e5-ac7e-d756af349057",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c2aab0e-0558-4bae-81fc-84d8b02b6d7e"
        },
        "item": {
          "id": "fa1f70d3-b673-4d50-8dba-71a46cb2bbee",
          "name": "did:invalid"
        },
        "response": {
          "id": "ce832938-2720-4f95-8a77-bcc945f96536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1f70d3-b673-4d50-8dba-71a46cb2bbee",
        "cursor": {
          "ref": "28a5b358-6db9-42e5-ac7e-d756af349057",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c2aab0e-0558-4bae-81fc-84d8b02b6d7e"
        },
        "item": {
          "id": "fa1f70d3-b673-4d50-8dba-71a46cb2bbee",
          "name": "did:invalid"
        },
        "response": {
          "id": "ce832938-2720-4f95-8a77-bcc945f96536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bc0025-862e-4459-9ef7-27bb95ecda1c",
        "cursor": {
          "ref": "79511c4b-c385-4044-a3fe-841a3127a16c",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a9e31977-960a-4b82-8432-c295ee6ed710"
        },
        "item": {
          "id": "45bc0025-862e-4459-9ef7-27bb95ecda1c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ec2bbdfb-b8f4-4309-b805-07d9352fcfaa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35648,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac43e0f-686c-4847-bcfa-7bc6dd15bf3d",
        "cursor": {
          "ref": "06211fa4-d3b5-4cfb-ba21-1a50aa4f3236",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "860490ed-af49-4e55-89cb-a804c9f6cf52"
        },
        "item": {
          "id": "0ac43e0f-686c-4847-bcfa-7bc6dd15bf3d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0ba229ae-649f-46b7-86e8-7876150459a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 113,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1165c869-7dba-40b7-ba95-1301f2c1fd7f",
        "cursor": {
          "ref": "f75758cc-a6c8-4d3c-a0a4-c4ac91b0cc50",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c6fd746f-ff4e-43dd-9d2e-a19ba8023b11"
        },
        "item": {
          "id": "1165c869-7dba-40b7-ba95-1301f2c1fd7f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9d783184-faf9-49b9-b9dd-9021961fd07a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e043430-6e8f-4e40-8102-0e52c5515a11",
        "cursor": {
          "ref": "33937cfd-da64-454c-b34f-2c6ca6359e1a",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5e1db4b-76d5-4a38-81b7-9668d6a9989e"
        },
        "item": {
          "id": "5e043430-6e8f-4e40-8102-0e52c5515a11",
          "name": "identifiers"
        },
        "response": {
          "id": "9ecbbadf-c95b-461e-a0ca-a06cc95f5349",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680bd54f-cb8d-4526-a196-200398394aee",
        "cursor": {
          "ref": "2ecfebb4-fe45-4d71-939e-0f2d4e7485d6",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f370f3c5-1ffa-4ae0-8505-36ee6b48b17b"
        },
        "item": {
          "id": "680bd54f-cb8d-4526-a196-200398394aee",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "81c1b5be-88ae-443c-b32c-13bce8a36559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4e9509-e098-4681-8eea-0773a9e79fe4",
        "cursor": {
          "ref": "2e80c273-72ea-4544-8f25-aeeae32c69ee",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "177406f1-c094-424a-bc61-a812e782d828"
        },
        "item": {
          "id": "ec4e9509-e098-4681-8eea-0773a9e79fe4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "430ac521-0286-4d69-8810-b50358c65d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06af1d05-80de-4c59-8014-544a0644282a",
        "cursor": {
          "ref": "24e1d2d1-18b8-4eda-bb70-8123584321d9",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3320131a-893d-4a01-9d66-f60bdfd5e5e6"
        },
        "item": {
          "id": "06af1d05-80de-4c59-8014-544a0644282a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7c1cd38e-6ca3-4d4c-9d09-42164065b047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc64bd2-ed11-4ad8-8c5e-3bb2f40eb2d2",
        "cursor": {
          "ref": "a96de9b0-8e27-4fd1-a9af-193ae969d460",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "94dd5281-027c-49df-8e82-245b1d49b83f"
        },
        "item": {
          "id": "4cc64bd2-ed11-4ad8-8c5e-3bb2f40eb2d2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1fa05945-5a44-4a5c-b306-5e595cf8279c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06c9374-ef18-475f-baae-cc9e41100ff7",
        "cursor": {
          "ref": "29814c41-bfb0-4d11-99ef-63c3a50e0bb6",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f11e4e21-a1b9-47b8-b15b-cb1eeab73ada"
        },
        "item": {
          "id": "e06c9374-ef18-475f-baae-cc9e41100ff7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ccf19b83-33c0-4db5-9774-337e9805201b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20119a2-6e13-4fba-b756-66c697553034",
        "cursor": {
          "ref": "deb6bce4-c025-4897-9c61-f2051a5ba862",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "94b309e5-5c26-43bc-9dd0-d7b65d00da9c"
        },
        "item": {
          "id": "c20119a2-6e13-4fba-b756-66c697553034",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8b48758a-5e05-4279-a2fe-dcb4eb4974d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a74efb6-5e83-426a-8eb8-05e5959e0c1c",
        "cursor": {
          "ref": "18b4280a-2c92-4573-ab56-2061ea79b23b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c705752d-9311-4750-9ecf-2b5946a29af7"
        },
        "item": {
          "id": "5a74efb6-5e83-426a-8eb8-05e5959e0c1c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7e73f495-fbf7-498f-807b-e9b101f84bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6abe35c-59f8-46bd-9c16-89ed2fc42391",
        "cursor": {
          "ref": "4baca076-cc70-46fa-90e0-cb7355ef3bb9",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3206e00c-7ddd-4dcf-bc92-409811c4aa0b"
        },
        "item": {
          "id": "f6abe35c-59f8-46bd-9c16-89ed2fc42391",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d38c5125-60d8-4dce-b83f-8655f7650e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306cb90e-aeb5-42a2-bd50-f38d4244952c",
        "cursor": {
          "ref": "34ae104a-982f-4996-936c-9d4c9bd333b0",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e28839da-025f-488f-800e-96d0d4a85c9f"
        },
        "item": {
          "id": "306cb90e-aeb5-42a2-bd50-f38d4244952c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3af3ddd4-549d-44ab-b897-2aa73ff92b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b6b6a4-2131-41a0-b833-650ebea164d3",
        "cursor": {
          "ref": "1e99d74d-c14a-4b46-9b47-5ee90ae25350",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2d03e58d-7721-4bfd-953e-9d2bb757b64d"
        },
        "item": {
          "id": "b3b6b6a4-2131-41a0-b833-650ebea164d3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "68ccaaf4-e3ac-4101-8474-2b1f7870f919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e55dff-2c5f-4f6f-a759-bf61de898142",
        "cursor": {
          "ref": "6e054873-79b3-4997-889e-a0b045902c45",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4c8493c9-a997-4f50-9250-b1549b4e96fe"
        },
        "item": {
          "id": "07e55dff-2c5f-4f6f-a759-bf61de898142",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "99ac2152-6d15-4ba3-bf21-b963c458343b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8522b76-11d1-4cd2-a3c9-aec52d9d34c5",
        "cursor": {
          "ref": "7aa16f38-6182-4514-b2b8-a54921826462",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "56778e91-6f2a-47b0-b699-82c3239635eb"
        },
        "item": {
          "id": "f8522b76-11d1-4cd2-a3c9-aec52d9d34c5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7fd0474d-c464-47d4-a984-286b0627c141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a095a48-bcff-46c0-a275-74a7afafa391",
        "cursor": {
          "ref": "3ad0530d-4dd3-4e0d-be0f-cf683c10d3e0",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2f1cd1bf-9d15-4053-9472-9589f1c7c375"
        },
        "item": {
          "id": "9a095a48-bcff-46c0-a275-74a7afafa391",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "993a2406-ee23-4d3a-bc9f-2a34750e666c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4875aeec-df7f-4e5c-907a-efd0fdea45c0",
        "cursor": {
          "ref": "2e867144-1178-4db2-8267-6b92a8da62f7",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6f0d8ced-21d0-4580-83ec-d08207051f58"
        },
        "item": {
          "id": "4875aeec-df7f-4e5c-907a-efd0fdea45c0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "aea746f4-e858-45aa-885c-3da27eab74c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1abf23c-4c37-4374-85e1-267b174ae2fd",
        "cursor": {
          "ref": "78210616-c594-4892-8257-6b572a7c71b5",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c0731170-6a30-4d2a-9b1e-b7009237bc03"
        },
        "item": {
          "id": "a1abf23c-4c37-4374-85e1-267b174ae2fd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "60f269bf-7062-4566-b49a-033c8edd33f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c67700-b0e4-46b3-971b-af14c81af694",
        "cursor": {
          "ref": "bcde7396-4d57-4da0-a64c-3fb2eb80c37e",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8cb0b8ed-3e25-493d-aa7b-c4dd75ec67f2"
        },
        "item": {
          "id": "00c67700-b0e4-46b3-971b-af14c81af694",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "32ea8b08-765c-4760-9927-33b7973bfadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c21781-30f2-4364-aa11-deaea3084c7c",
        "cursor": {
          "ref": "b4236458-6cc3-4d0f-a3be-c5d0ea473673",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "77236d3e-e9f2-4d7e-b33f-c48bc73c975a"
        },
        "item": {
          "id": "62c21781-30f2-4364-aa11-deaea3084c7c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "454ad21c-aef3-43ff-b6e9-83819befa1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f04d11d-4fc5-49d5-b74f-13018922f01e",
        "cursor": {
          "ref": "12a932b2-4c78-4010-8e96-658039751f12",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f45ce966-b5b3-4646-9bf4-782a9d4980bf"
        },
        "item": {
          "id": "0f04d11d-4fc5-49d5-b74f-13018922f01e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "12afeb6a-97c0-4ab0-a56b-d16537ec69c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35f7bd4-21f4-4864-b9a1-802bf90540be",
        "cursor": {
          "ref": "0525eefe-a626-463b-b2e0-9c25d971f411",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a01fbdfd-0b90-439e-b99d-80c0dd2d3dd6"
        },
        "item": {
          "id": "c35f7bd4-21f4-4864-b9a1-802bf90540be",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0e76a4f5-80ae-485a-b0c1-a492060c8391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4b5186-5383-4ddb-b567-0dc8060736f5",
        "cursor": {
          "ref": "1c64cb5e-3489-4ae2-90e0-740a37ad8c12",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f40529f4-221e-4585-9050-06c54b66993c"
        },
        "item": {
          "id": "5b4b5186-5383-4ddb-b567-0dc8060736f5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4b6fddaa-e52d-4e31-b65e-51246b0c84be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747c3fb5-782b-46e0-ac83-5fb3ed14df1b",
        "cursor": {
          "ref": "58a2ee9b-b5b7-4862-ba64-a85a16ae7333",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d86e5520-bf02-412e-ad9c-7dd76661a17f"
        },
        "item": {
          "id": "747c3fb5-782b-46e0-ac83-5fb3ed14df1b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b52fab22-0c31-46a7-8844-b7ba402de890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c8e507-788a-49e1-935a-5342c5f58165",
        "cursor": {
          "ref": "ab98e605-c094-489d-9129-2626542494ea",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b36c46e1-93a4-424e-9ef0-d15c2b911d77"
        },
        "item": {
          "id": "98c8e507-788a-49e1-935a-5342c5f58165",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "55bff1fb-eb8c-48a4-82e6-dbafc77e31b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2d4a5c-c1f0-44b8-ba1e-87b39bd1d8ba",
        "cursor": {
          "ref": "9d2dbee1-4149-46d4-9f7d-19faaa1ede45",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1d82082b-d473-4353-81af-0b44dae7e976"
        },
        "item": {
          "id": "cf2d4a5c-c1f0-44b8-ba1e-87b39bd1d8ba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "91864b74-7654-4959-9540-c59b4134bd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2aaad0-31b2-4bab-aadf-e5c60597e16d",
        "cursor": {
          "ref": "28fd9879-1060-472d-8c47-55bfd23e44f4",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "093bc6aa-adc2-4aa4-ad95-ef21e75a3e04"
        },
        "item": {
          "id": "ea2aaad0-31b2-4bab-aadf-e5c60597e16d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f8086e83-996d-4764-a938-401509d9246b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d8057c-921f-4011-b495-b6ff94afe09e",
        "cursor": {
          "ref": "0730fb14-b260-4331-b029-e2723007559f",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a6d6b349-1a37-4207-93b5-1e0a72d54377"
        },
        "item": {
          "id": "a9d8057c-921f-4011-b495-b6ff94afe09e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4c3961a0-2e01-4789-ba2a-6048b6eeabd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad71f860-0a25-4dae-8477-386743ab84b5",
        "cursor": {
          "ref": "e5fe8105-1b28-4aea-904e-7d427037a8d4",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4acd2c02-ecd0-4a44-bc4b-3687dfaa3195"
        },
        "item": {
          "id": "ad71f860-0a25-4dae-8477-386743ab84b5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "63fb8f94-73e9-4d0b-93de-9edc012af038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e3326c-2ab5-44ee-b660-550ff534c187",
        "cursor": {
          "ref": "b3ebb1a4-96a6-4d50-bb65-7a9d6f1ff4d9",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "43d386f6-5df4-4f8c-bdd5-7e35070c5029"
        },
        "item": {
          "id": "c4e3326c-2ab5-44ee-b660-550ff534c187",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "42858e70-ddc9-40cf-8b8e-45457b58fb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab58065-5b15-41be-968c-32bfcb6ca0e4",
        "cursor": {
          "ref": "0b2a2518-caa7-407b-8ce2-4b34e6a65b9b",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "618d683a-814c-4e84-805b-753e8831dc08"
        },
        "item": {
          "id": "aab58065-5b15-41be-968c-32bfcb6ca0e4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0c4d5101-ecbd-47ee-8d05-c892fef9a952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc25da1a-c17c-4475-97f9-ee2bf3b50a3a",
        "cursor": {
          "ref": "8cfe39a7-e37f-4249-ae4a-8e833dcaa000",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "61ef4571-0d2a-4da8-b92d-74615f77edfc"
        },
        "item": {
          "id": "cc25da1a-c17c-4475-97f9-ee2bf3b50a3a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "12f75d30-2ead-47b1-9404-066027bcb447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af66e38-9622-4c11-a76c-08a363eeadcd",
        "cursor": {
          "ref": "38f63b45-8907-4388-8fb7-cedf64ac859e",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ea72a39e-79dd-43b2-a4b8-9d3cfb358f2b"
        },
        "item": {
          "id": "4af66e38-9622-4c11-a76c-08a363eeadcd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "76f049f9-bb35-4167-a4c7-310e6d6ec301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76debf2e-bae4-441e-a1b6-ed14664afbd3",
        "cursor": {
          "ref": "49eda8ef-7af9-4070-82d0-c7e4b078e5a5",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f703b0d5-736d-4e98-8872-6bac72fcb515"
        },
        "item": {
          "id": "76debf2e-bae4-441e-a1b6-ed14664afbd3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ca1daa86-8bdb-45c5-b9c2-31886eb706df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a7cfb4fb-ec94-4293-8fec-62fe562b385c",
        "cursor": {
          "ref": "316b7540-bd22-47df-819b-fb8b42c607cd",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b2df0009-aec4-4a83-8399-ba6de3bd44d2"
        },
        "item": {
          "id": "a7cfb4fb-ec94-4293-8fec-62fe562b385c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "18dcf61e-973c-455f-afb0-a496262f55da",
          "status": "Created",
          "code": 201,
          "responseTime": 2172,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7ec87117-4560-4514-9311-283607761acb",
        "cursor": {
          "ref": "65a59e7a-2095-4e6b-ad81-09ed1ba94ef1",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5f6f6071-85aa-492e-8690-c82b032aa382"
        },
        "item": {
          "id": "7ec87117-4560-4514-9311-283607761acb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "590aac7e-f953-473e-8d87-1f6e940c6936",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f306c2cb-4fbe-4f7a-9699-205f325512b4",
        "cursor": {
          "ref": "e64d14e2-95e7-48e5-b947-bf73f5473912",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "70682270-2c24-4cff-9dab-ccffb4a655cf"
        },
        "item": {
          "id": "f306c2cb-4fbe-4f7a-9699-205f325512b4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "063fad13-352e-475e-b489-200291132a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17847c9b-3b42-4c2b-81d1-92b38a21cf1a",
        "cursor": {
          "ref": "8c1395be-57f6-4a81-acb4-ecb17aabf476",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0a39067c-8ee8-4e99-88bd-1bfa249c380b"
        },
        "item": {
          "id": "17847c9b-3b42-4c2b-81d1-92b38a21cf1a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b7ea5591-aae1-4f1f-8cf6-3fe017523b8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e7b603d1-ac9c-409c-ad63-518bd19a27ab",
        "cursor": {
          "ref": "064f829e-c27f-4753-ab10-2200f64a5954",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "38454eea-01e6-4ca5-8749-104510be28ae"
        },
        "item": {
          "id": "e7b603d1-ac9c-409c-ad63-518bd19a27ab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "918a062e-410f-4978-a215-09234034fdb9",
          "status": "Created",
          "code": 201,
          "responseTime": 1104,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e5e57b1f-aa15-430a-87c8-83ce6b39570a",
        "cursor": {
          "ref": "46dfa737-9743-4c0b-b93c-0b2312cb415f",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cf9d895d-9d7d-4d0d-bbfe-0b7a0413474e"
        },
        "item": {
          "id": "e5e57b1f-aa15-430a-87c8-83ce6b39570a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "81d4dd27-989f-4ae5-bd7d-2918f97feed8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "74687139-d73b-4871-985b-5f857f793cf6",
        "cursor": {
          "ref": "bcf9400f-3c9e-4b47-9885-1ea2c0386be4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a4198f11-54ab-414e-bdda-cb584116b429"
        },
        "item": {
          "id": "74687139-d73b-4871-985b-5f857f793cf6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5e3e955f-8996-4e95-847b-2b60aac6f104",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 778,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8c1c6e9a-c333-43a4-8467-9039af3ccbf6",
        "cursor": {
          "ref": "765d65fe-1b8c-4b4b-a1e7-ff609fdd6adc",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "96410cd7-6f25-4a31-b936-567e26bc8a7a"
        },
        "item": {
          "id": "8c1c6e9a-c333-43a4-8467-9039af3ccbf6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a706f54b-db3f-4408-bc51-fdd0dac8b61d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b5efb629-2c22-46aa-8b05-6007e9b94a21",
        "cursor": {
          "ref": "a8edebea-f0b1-44d4-8a6b-b813b81d5107",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5e9cfcc3-2e49-4823-9436-500f5a8d9841"
        },
        "item": {
          "id": "b5efb629-2c22-46aa-8b05-6007e9b94a21",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "aa4c61ab-0c18-49fe-a72a-6e4764f3ba52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a12f4f85-dbe1-4c74-b979-eabebd1e10a7",
        "cursor": {
          "ref": "1f9ee83f-8c1e-402c-a5f1-2379af684326",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f8d9974d-4dbd-43b9-b42b-c331dc30f288"
        },
        "item": {
          "id": "a12f4f85-dbe1-4c74-b979-eabebd1e10a7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a85a0a4e-1f2b-4813-8efc-6e236f29fe32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b90a416e-631d-40f0-8d21-4e5a55fdfda7",
        "cursor": {
          "ref": "e69dcb09-d19f-4da7-a11f-8976358c9a09",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "21618769-1048-4581-b4fe-634931a48e98"
        },
        "item": {
          "id": "b90a416e-631d-40f0-8d21-4e5a55fdfda7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a9610b87-4753-4c4e-8124-df01b23e2c13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9fae1321-0774-42f5-b827-911ea89a5e2d",
        "cursor": {
          "ref": "c7b44cc0-18be-4baf-a9ad-aae66278ed62",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "98d07b76-39ad-4571-8ca1-d53d596155cb"
        },
        "item": {
          "id": "9fae1321-0774-42f5-b827-911ea89a5e2d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a4d6fb31-af8e-4901-925b-c4ac5662a950",
          "status": "Created",
          "code": 201,
          "responseTime": 985,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2f6cc64f-fb93-4b2f-b7c9-80efbf436e8b",
        "cursor": {
          "ref": "484cccbe-0ff7-4477-bae2-70f6f66547b7",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d7c9c00a-63fd-46ac-9998-26bd0adcc9f8"
        },
        "item": {
          "id": "2f6cc64f-fb93-4b2f-b7c9-80efbf436e8b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc46d0de-a545-4957-8910-a546071eb87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5db3a0d-13bd-49c6-8888-a34415f5e811",
        "cursor": {
          "ref": "1ab14a9d-9d2e-4dd0-8913-fefa29c6783d",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3d5b606d-7dbb-4b80-9534-df9001bb7e52"
        },
        "item": {
          "id": "e5db3a0d-13bd-49c6-8888-a34415f5e811",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "790e5c56-ddbf-4193-9f93-5e81ef91554b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788ead7e-0ef5-48c2-bee1-5f3a005b5883",
        "cursor": {
          "ref": "7bc40618-c894-4901-8e6d-07d5f2261eb5",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bd8a78cd-ddd1-483f-be04-d01c0f26bbf4"
        },
        "item": {
          "id": "788ead7e-0ef5-48c2-bee1-5f3a005b5883",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f890a337-47a0-4494-96d2-8243a3c7830f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fc0f52-263e-46fb-a6be-f935d9c9a60c",
        "cursor": {
          "ref": "8764735f-b446-466a-aebe-3f0213fb8b75",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a92d45a1-457e-4320-97f0-4bb8cbd183e1"
        },
        "item": {
          "id": "c5fc0f52-263e-46fb-a6be-f935d9c9a60c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8496480c-6ba7-4839-9fb9-c7d68fa6e431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386fd43b-49f9-4059-813e-86ec2ff163eb",
        "cursor": {
          "ref": "9684aac8-bb06-4f4b-b157-72fd55f0c799",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "802c7e24-f611-4cd1-ad09-c7346cd98450"
        },
        "item": {
          "id": "386fd43b-49f9-4059-813e-86ec2ff163eb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9e847c6f-5b27-4e2a-b907-88aa108b790c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697746d3-73a9-409b-b7f4-2fb39b3256af",
        "cursor": {
          "ref": "a3f15a6d-254e-4f38-af36-fd31557d3dab",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "218660ca-cfdf-4cff-b889-fe4591a7fbfb"
        },
        "item": {
          "id": "697746d3-73a9-409b-b7f4-2fb39b3256af",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1e8d2e21-72a2-49ea-bf74-b7c407913162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f72df76-b981-47ef-9b70-80cfb1a1e659",
        "cursor": {
          "ref": "aaa554c1-ecb3-4048-81da-3fe7ce996c83",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "50fd148a-4f46-407e-98d5-9c47b1a0b4c6"
        },
        "item": {
          "id": "2f72df76-b981-47ef-9b70-80cfb1a1e659",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9c196fa5-3862-4dd6-bf5e-1c7c8cdb8577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f0b520-4a89-4af2-875c-e9e67da28315",
        "cursor": {
          "ref": "3a99f623-a45a-4acf-8317-6d677ce3a6ff",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3f794106-8cf9-4692-b77a-b610e407f8aa"
        },
        "item": {
          "id": "71f0b520-4a89-4af2-875c-e9e67da28315",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "99d26d70-3e72-4f37-a112-f4a7a85a5667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1181b5b8-365a-45ef-b047-ed9ae9f1e280",
        "cursor": {
          "ref": "339f465c-a023-41d8-b6b8-345f5e6152c9",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cab4a755-b658-4a41-863a-364e69649274"
        },
        "item": {
          "id": "1181b5b8-365a-45ef-b047-ed9ae9f1e280",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "78206355-43de-4b1e-9f6b-4631498f6e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b19b35-1b45-4308-bb2f-09c94256c650",
        "cursor": {
          "ref": "6fd1f74a-b65a-4e27-ab8c-1d9c9f4a6ad6",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2a311ed8-d442-4b5e-98f8-64a8f6dd0510"
        },
        "item": {
          "id": "09b19b35-1b45-4308-bb2f-09c94256c650",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "114c7c43-adba-48a3-a20c-afdecf18eace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc35a3a-f2d0-4c37-a2d0-54e3dd89e239",
        "cursor": {
          "ref": "0d9c6aca-c006-4488-a440-2d179000f321",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "de8daa2f-aed0-41f1-b147-56ff92b45b2a"
        },
        "item": {
          "id": "7dc35a3a-f2d0-4c37-a2d0-54e3dd89e239",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d88295a5-934a-4e9e-bec2-b8ea59ad33ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b13b01-f84a-4e42-ab61-1189066c99d3",
        "cursor": {
          "ref": "c648310c-a927-4ba6-8258-cff7b07e7462",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ce02a462-d1c4-471d-923e-ca7a145f39e6"
        },
        "item": {
          "id": "c5b13b01-f84a-4e42-ab61-1189066c99d3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bfe13c8e-1c38-4db7-96be-8b5ae79306a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82398235-9976-4f1f-a8da-062587a425ca",
        "cursor": {
          "ref": "3b0401cf-2f56-438f-a3f1-e6ac22a456b2",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3e62dd97-3a19-4681-a9b8-6fd9eb557b44"
        },
        "item": {
          "id": "82398235-9976-4f1f-a8da-062587a425ca",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e0abef5d-28b2-42df-926a-edcae81905e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90326fab-f990-41b1-91ce-181f9cecbabd",
        "cursor": {
          "ref": "dce68c8b-b724-402c-9eb6-533899472349",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c8825cac-5e1c-4c79-884b-8c14fdfb9b20"
        },
        "item": {
          "id": "90326fab-f990-41b1-91ce-181f9cecbabd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "862302af-608d-4365-8751-4c1e616c7335",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 668,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "16f4f3e0-604f-4698-8295-befca47096c6",
        "cursor": {
          "ref": "a3409807-fcf6-4ae7-86c3-ccc0aa51f87f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9f6929f2-7240-41ff-b1ed-93daf6b50a54"
        },
        "item": {
          "id": "16f4f3e0-604f-4698-8295-befca47096c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4f31e46b-b105-4c14-88bc-a4ed3acbbbb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 705,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3bc468c1-c38e-408a-8fde-6c863bb1e014",
        "cursor": {
          "ref": "adde0c96-45d5-4de7-b080-380041589fa9",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "44aeb9ac-d051-4100-a46a-b4a73e338fae"
        },
        "item": {
          "id": "3bc468c1-c38e-408a-8fde-6c863bb1e014",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bb9a21fd-1f11-4227-9b11-d8f630bbd5b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cc4445c8-4162-46bf-892e-708d58e25a28",
        "cursor": {
          "ref": "07fef7e5-a702-4f68-9080-ccb142215525",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "eeb08b52-bcfe-4ddb-8499-fc186fd52807"
        },
        "item": {
          "id": "cc4445c8-4162-46bf-892e-708d58e25a28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0a124180-45ba-46c8-a4b8-303a4fa4bf41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 666,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3515efd6-21d5-41ad-81a0-5b919d5447ed",
        "cursor": {
          "ref": "ab04dc30-5fcb-4e6c-9b6b-f52d03bb8eae",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b986805b-e59a-4cae-b7c5-efa00ac0077a"
        },
        "item": {
          "id": "3515efd6-21d5-41ad-81a0-5b919d5447ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fd9eff65-74f4-44d1-b3c9-aae0122ee653",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "133a6aa8-22e9-4ca9-b460-476d5302d104",
        "cursor": {
          "ref": "11ae186b-5b01-4edf-8a73-e9739ea37c40",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d4503850-1121-497a-baee-7b1e6b315598"
        },
        "item": {
          "id": "133a6aa8-22e9-4ca9-b460-476d5302d104",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "abd6f2bd-75b8-47df-bd00-f70e365bd6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7643cf6e-6aaf-45e3-bcc7-ccc7ea3f8380",
        "cursor": {
          "ref": "806936d8-61df-41e5-a599-32980c409f70",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "623b5780-5934-4dfb-8424-906e9c84888a"
        },
        "item": {
          "id": "7643cf6e-6aaf-45e3-bcc7-ccc7ea3f8380",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7d28e9f1-6cf6-493b-979b-cef410937ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fa2a08-c111-4e27-8e65-a5f12e460300",
        "cursor": {
          "ref": "f45e99bf-ce7e-4a64-a800-83598368ba72",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "35a2617e-ca90-47fe-95a9-eb371f334bd3"
        },
        "item": {
          "id": "87fa2a08-c111-4e27-8e65-a5f12e460300",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "45161736-89cc-49b7-8027-c22d5d8e89f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9a806b-3052-47cc-b591-ccfc964cee2a",
        "cursor": {
          "ref": "c6908e32-e3a7-4f30-a367-71c034ce8609",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "66224195-d3ea-4030-abad-4ca2c18adc28"
        },
        "item": {
          "id": "8f9a806b-3052-47cc-b591-ccfc964cee2a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "db437fae-0254-4a13-9067-5196f9d9f5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e5446f-9abe-4363-83f4-d6b7ca9d708e",
        "cursor": {
          "ref": "2974d509-bdb2-4de7-bf95-a405435ab972",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "28f29293-a905-4c6e-a231-4757c28affe6"
        },
        "item": {
          "id": "12e5446f-9abe-4363-83f4-d6b7ca9d708e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9a3b8fab-5d3e-496b-b445-560ef9935146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9614d140-ebcd-4420-9663-d3f99d5949f6",
        "cursor": {
          "ref": "60465639-ce53-40e4-b379-795566b83ca6",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "099214aa-1b50-423a-b3a3-0ee0382722b9"
        },
        "item": {
          "id": "9614d140-ebcd-4420-9663-d3f99d5949f6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9276126d-d541-4fd9-a9a0-0ceb005b0e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded16b3c-75d1-4502-96e4-8eda76d94b74",
        "cursor": {
          "ref": "2b4449f1-6956-4c7f-ac12-43e694e70d1a",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6b9b8154-e187-4b5d-bb17-631d7ef11a24"
        },
        "item": {
          "id": "ded16b3c-75d1-4502-96e4-8eda76d94b74",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0f1932b3-c164-4540-93eb-30a92f308338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68aedcbf-224d-4d0e-bdd8-2ca25516a75f",
        "cursor": {
          "ref": "d905c59f-97f5-41e8-9cf8-c9ce06c46a80",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bb836538-cb9f-475f-b6d5-06da3735541c"
        },
        "item": {
          "id": "68aedcbf-224d-4d0e-bdd8-2ca25516a75f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1ac804b2-25e5-4c53-aa13-e3c7d4c8976d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3943a851-4e64-46cd-b7b1-3b411924e68f",
        "cursor": {
          "ref": "f5e72ece-192c-4c0d-b9b4-4984f0ea5f03",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3f7e7af4-4f8e-42f8-957e-59d7f7a5dab9"
        },
        "item": {
          "id": "3943a851-4e64-46cd-b7b1-3b411924e68f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3a4156e9-a371-4066-930c-8619b454b504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fc4a42-6ea9-4724-a273-b84d5e44ba3c",
        "cursor": {
          "ref": "31f64123-fcf6-4c58-bfa4-42e285f6f38d",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ccbe7c6b-0874-4df8-9f96-3e61c9c96439"
        },
        "item": {
          "id": "97fc4a42-6ea9-4724-a273-b84d5e44ba3c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d5610c11-961d-4d81-8946-a7ee1897c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a7abce-a872-4249-aa4a-3ce39849aa87",
        "cursor": {
          "ref": "3da593cf-78b8-463b-a515-9ba595682761",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b4c9d406-80de-4a89-876a-69891b3f93bf"
        },
        "item": {
          "id": "95a7abce-a872-4249-aa4a-3ce39849aa87",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6ac03376-aebe-493b-b343-aabf17c698a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0709f1d-cd7f-4c2d-a9c3-8a37e4edb5b1",
        "cursor": {
          "ref": "1cd10bfa-7665-4d5f-8ebd-812d4b34d773",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "49e290fb-7c7b-4ce8-bf0f-5494f3ffd2d1"
        },
        "item": {
          "id": "a0709f1d-cd7f-4c2d-a9c3-8a37e4edb5b1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c8388fed-b35e-405d-a138-271bf3a9beb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfeaf9f7-744b-4965-91e2-d5729e0cf70a",
        "cursor": {
          "ref": "7cd2e916-fdac-48f2-aa0f-519913afcc99",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "58dfd93f-e67c-4fe0-9dce-7166d73093b0"
        },
        "item": {
          "id": "bfeaf9f7-744b-4965-91e2-d5729e0cf70a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ab182b5a-f465-4119-ae9a-6036694d1465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ec9376-1d9c-4315-8231-0430939dfb52",
        "cursor": {
          "ref": "f893d29d-37a3-40cc-b61a-d46d93a5cce7",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "12170abe-7e00-475d-84f8-b0494c5700ec"
        },
        "item": {
          "id": "12ec9376-1d9c-4315-8231-0430939dfb52",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a5baec83-ebb2-43f1-8d01-239c9540da0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadbcecf-7454-4991-89bf-f2b4248ed65f",
        "cursor": {
          "ref": "58355041-976f-462d-a21b-c080e56490e1",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fbc1b6da-0de7-4b8e-ab05-c790ebb4fc9f"
        },
        "item": {
          "id": "aadbcecf-7454-4991-89bf-f2b4248ed65f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2426b1d8-8e28-4e5a-a13b-3dd0b7e31dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22dfc142-79e9-4684-b937-b890a1190e0a",
        "cursor": {
          "ref": "60c41842-507d-495f-b1b8-e2150d27fbb0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "774e023d-7837-4153-9358-bff9e0051f9c"
        },
        "item": {
          "id": "22dfc142-79e9-4684-b937-b890a1190e0a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "85f06cc9-8b1e-4629-a5cb-bf5bf2a4f846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d86f9fb-f413-4634-b27a-e814b10f4449",
        "cursor": {
          "ref": "55c18f4e-1af5-4123-a852-70f45bc602bc",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3ebe1d25-6356-4ce2-bbfc-b64f2f558f9c"
        },
        "item": {
          "id": "5d86f9fb-f413-4634-b27a-e814b10f4449",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "500b354e-857d-4807-bbe4-7fed4b208d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe254d27-5a0b-4bea-9511-e80a705afff5",
        "cursor": {
          "ref": "f1d8fbe2-1b60-4c45-a817-e85b93dc1cd8",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a69ad6ce-956f-4ba1-aa62-1aa9759736ce"
        },
        "item": {
          "id": "fe254d27-5a0b-4bea-9511-e80a705afff5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "63be81fb-79ae-4c62-826a-e43f9f3d0dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e617d2fa-155d-4429-a84b-ef28387322d3",
        "cursor": {
          "ref": "ca3a279a-43e2-4eff-b8b9-34d47661532c",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "57c80633-d487-44d5-a9dd-2e82639d278b"
        },
        "item": {
          "id": "e617d2fa-155d-4429-a84b-ef28387322d3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2d7a13f3-02c2-4e26-83c3-f387f63cc2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a8eb63-3451-4569-97bb-7fd66bf60b5f",
        "cursor": {
          "ref": "6403726e-46ce-47c6-87c1-96c21a54f005",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9cdcdd2c-01b6-4b46-83a7-512cddc3e74f"
        },
        "item": {
          "id": "86a8eb63-3451-4569-97bb-7fd66bf60b5f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6e66859d-f361-47ed-b9d8-1a379f5e04f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a61cd6-1006-418f-8dae-fa871be06ee2",
        "cursor": {
          "ref": "e171090d-cc66-4046-86b5-fdbff57a241f",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4b6ffb10-b18b-40db-ac69-776151bfcb34"
        },
        "item": {
          "id": "b5a61cd6-1006-418f-8dae-fa871be06ee2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0890413d-31c6-4ded-953d-c94feaba9801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834e4f22-6f13-4737-86c0-0d1e901e7766",
        "cursor": {
          "ref": "7113fd28-3ffd-4f43-bcf6-99f3deb9a5ee",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "069a746f-19dd-4b73-95d8-2895959eae41"
        },
        "item": {
          "id": "834e4f22-6f13-4737-86c0-0d1e901e7766",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "032febbf-ef30-4a24-a0a4-93139f031067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4988d8f9-fcbb-498e-995c-2d807e5b276b",
        "cursor": {
          "ref": "45001dd3-08ba-400b-b01e-d259242e2561",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ff790e76-4059-4592-b8b3-79fe5fcc152b"
        },
        "item": {
          "id": "4988d8f9-fcbb-498e-995c-2d807e5b276b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "983b65b7-e5eb-467d-a0d4-ec1371849c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2314960a-c6e0-49c3-b321-5d1678e4642c",
        "cursor": {
          "ref": "7c13f529-f417-4679-8a7d-681e4f639699",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1c8440a9-5736-4d49-ac9f-556a27a93eb5"
        },
        "item": {
          "id": "2314960a-c6e0-49c3-b321-5d1678e4642c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0a64d641-78cc-4bee-a4be-3b72c9d70cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c85bd4a-c570-4a35-b358-56b5ee6bb6f5",
        "cursor": {
          "ref": "cb364455-bc6b-47a0-82f1-c92766b70f4f",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8d8afc28-e626-4eb4-b23a-d11561a388de"
        },
        "item": {
          "id": "2c85bd4a-c570-4a35-b358-56b5ee6bb6f5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fdaf3c52-7065-4712-8703-7b3c3dc77e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c067eabe-0e0d-4bbc-b0c4-7362c72fccb0",
        "cursor": {
          "ref": "23d21b36-cf8d-4591-9e0b-3dad70441277",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "47f713c6-d8b0-49cf-956f-1abf32ab883d"
        },
        "item": {
          "id": "c067eabe-0e0d-4bbc-b0c4-7362c72fccb0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f8b49f55-0257-4da8-b770-9da81f5ea51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4aa1d8a-3b7b-4a61-9099-9ec8e9542b0b",
        "cursor": {
          "ref": "6b6ee3c8-f548-45ce-98a4-aa9b35830beb",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9efc3944-0aed-4db0-a6d5-25667c2e8bca"
        },
        "item": {
          "id": "a4aa1d8a-3b7b-4a61-9099-9ec8e9542b0b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc11357a-788c-446b-94ef-c23b7c99d85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f4c93e-7c92-4d89-8723-c0e46bf8a90d",
        "cursor": {
          "ref": "5d62796f-ab40-4b92-aa58-004d3184641c",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3f36bc80-3d6b-40a8-9ceb-c76974548e72"
        },
        "item": {
          "id": "d9f4c93e-7c92-4d89-8723-c0e46bf8a90d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "17a96c74-3a56-4048-9cc4-9c24dda38b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1294a98-2d36-4002-8e3c-ea451510af1c",
        "cursor": {
          "ref": "44537ca3-8f30-4886-9a98-ee5d9f9bd04b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "655818bf-6749-44d2-bcf0-61bd9290ca21"
        },
        "item": {
          "id": "a1294a98-2d36-4002-8e3c-ea451510af1c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6c1483ec-ad3d-4943-82b4-73b291eaa09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c793a8-4dca-4285-bfd0-5e20e1f98b84",
        "cursor": {
          "ref": "c9be68ab-8b55-4a21-8fb5-6737d0e6eba2",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "50e31110-2025-474c-a5a2-ea4563fc5d73"
        },
        "item": {
          "id": "d4c793a8-4dca-4285-bfd0-5e20e1f98b84",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "38d7674f-26a5-41e8-854a-71e2b16f5389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa9728c-db11-438d-8a59-0a01a627d930",
        "cursor": {
          "ref": "ac0145d4-960e-49cb-80b3-415a91e51633",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "522d0fd5-262d-417a-9a20-62501616712e"
        },
        "item": {
          "id": "dfa9728c-db11-438d-8a59-0a01a627d930",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "46cced58-4a1b-4cdb-86eb-d5f3714076fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15012120-270a-4f7e-81ae-acb52196b16d",
        "cursor": {
          "ref": "bf0b613c-6061-4cef-ab0c-0c235f1ff8a8",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3281642b-3393-414a-99c7-2f14c558fef3"
        },
        "item": {
          "id": "15012120-270a-4f7e-81ae-acb52196b16d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f6b70ea0-7471-4840-aa0d-56232738b382",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e093d4b-5900-4241-982a-7a603c41bbc5",
        "cursor": {
          "ref": "1012b913-d788-4609-94c9-bac68a29e242",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d8468455-e4f6-4239-bd10-99631a868e08"
        },
        "item": {
          "id": "1e093d4b-5900-4241-982a-7a603c41bbc5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d166ffa4-4042-467d-aa53-a72c22d69326",
          "status": "Created",
          "code": 201,
          "responseTime": 1056,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "435e0d16-1363-4711-82e6-c57201615a89",
        "cursor": {
          "ref": "df7d767a-bd01-43d1-89c5-e53967a88f74",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0983276f-4d59-4b25-8921-05727bb03c18"
        },
        "item": {
          "id": "435e0d16-1363-4711-82e6-c57201615a89",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "421c9743-00ea-4c71-93f5-abf5e584df3b",
          "status": "Created",
          "code": 201,
          "responseTime": 946,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4139456d-1c3c-446b-9a3d-e677581b5ddb",
        "cursor": {
          "ref": "a9504b67-accb-4b31-879c-b4310a307a4e",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ac0d3163-1d5e-4194-b616-ab337ee270a5"
        },
        "item": {
          "id": "4139456d-1c3c-446b-9a3d-e677581b5ddb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1d021fa4-e0af-4a83-a1e4-3a5a758ab8b9",
          "status": "Created",
          "code": 201,
          "responseTime": 957,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb483c4-bfff-4656-a15d-bc6b06d94744",
        "cursor": {
          "ref": "3ce18e86-25c1-458b-a5d3-e4aec38c1184",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "10d8f58c-6695-4ec7-9322-e0bb1951e7e2"
        },
        "item": {
          "id": "fcb483c4-bfff-4656-a15d-bc6b06d94744",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1b1c1da7-8d71-4f8d-9a7a-24e9120b1719",
          "status": "Created",
          "code": 201,
          "responseTime": 923,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53b81f5-8802-40f1-b690-5218117ded8b",
        "cursor": {
          "ref": "4d764b2a-6171-4be3-ad05-35a4586a68ba",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4b1bfcd3-576d-4a66-a713-886de47ee2fd"
        },
        "item": {
          "id": "b53b81f5-8802-40f1-b690-5218117ded8b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ac53ac03-212a-48f9-83c9-8b2167651619",
          "status": "Created",
          "code": 201,
          "responseTime": 959,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "8539b484-4346-4cb9-9b70-3179a26c6986",
        "cursor": {
          "ref": "2aa79759-ded7-4f4c-98f1-1a13cb8963e9",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "68603050-ca35-463a-bc97-3174e56b3f91"
        },
        "item": {
          "id": "8539b484-4346-4cb9-9b70-3179a26c6986",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0e307390-f06d-4068-92f4-6842336fa2fd",
          "status": "Created",
          "code": 201,
          "responseTime": 1410,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7572160d-6e8d-4d7a-ae06-410a46ca29f5",
        "cursor": {
          "ref": "b9209626-7e9d-4c01-83b2-ef34f2af425c",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cfb5b63c-9c99-4d4a-8d73-295dbc89082b"
        },
        "item": {
          "id": "7572160d-6e8d-4d7a-ae06-410a46ca29f5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2f68a837-5ed4-404b-a113-e14a019da295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964772d0-b5b2-4732-9b2a-7e4b5f96d8ce",
        "cursor": {
          "ref": "e124352c-ef77-450d-996f-0d52a7d2227b",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "42c1c361-1ec1-455a-9c18-60ff94ba6cfb"
        },
        "item": {
          "id": "964772d0-b5b2-4732-9b2a-7e4b5f96d8ce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "32f09c03-06f0-479e-8c82-6108673457a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b7d6ac-bbb0-42e8-b13d-2dc38168b030",
        "cursor": {
          "ref": "2b10fb17-3ab2-480b-8a10-1f7c3873d9ab",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b9066ff1-600a-4009-8b46-a09e4d268d60"
        },
        "item": {
          "id": "65b7d6ac-bbb0-42e8-b13d-2dc38168b030",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7d03754d-dbe5-4276-a04b-3658e6d93495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa70008c-0a5c-4536-ab53-6f00925a3bed",
        "cursor": {
          "ref": "01e17a73-64ca-41a5-9a81-2f8698eb9146",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "acf6c261-b9a6-49fc-9c8f-714d10123214"
        },
        "item": {
          "id": "fa70008c-0a5c-4536-ab53-6f00925a3bed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "937a3357-b874-4cb6-b2f5-256bb9c8584f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b3a367-88b3-437e-9b92-64a1e705e8df",
        "cursor": {
          "ref": "1be498ee-9154-46f0-8812-1affd15601d0",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5ae2802b-f802-4f8f-a054-5b8f81b08651"
        },
        "item": {
          "id": "80b3a367-88b3-437e-9b92-64a1e705e8df",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a099c134-d88f-4c5b-8e2e-e6b50a4cd633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e68d9e4-dd14-4840-b6bb-32d09c97aa06",
        "cursor": {
          "ref": "0c2e64a2-838a-4c02-b7e1-468c9fb7486d",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6c1f2f7b-65fb-4d0f-b9ef-4573f6a6a07d"
        },
        "item": {
          "id": "6e68d9e4-dd14-4840-b6bb-32d09c97aa06",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f3643769-6683-4cb3-a88b-e06d0445f2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14773b65-ba77-4da7-96cf-1a3159f74bf9",
        "cursor": {
          "ref": "fc7314b3-05a8-4c62-9b2c-5cec53a63962",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6589aa3f-2a28-4a21-83d1-15948d0350e1"
        },
        "item": {
          "id": "14773b65-ba77-4da7-96cf-1a3159f74bf9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8532f6df-2781-4997-96ce-d4cc5e639ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001c253a-7b12-41b3-a264-be66efad2f84",
        "cursor": {
          "ref": "9b64f009-9158-42da-be6a-662acf3f5a12",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "812059f8-8407-40d8-9de1-8820b9953416"
        },
        "item": {
          "id": "001c253a-7b12-41b3-a264-be66efad2f84",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1c7cf4c3-ad80-4f0c-82db-7894a45b8b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aea1ad-1313-4662-8fa8-562fa6cac581",
        "cursor": {
          "ref": "17de04fc-a7e2-4215-99b1-5374c9a815cc",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cfdadb51-83cc-4ce7-8b7e-cf53950d3ccd"
        },
        "item": {
          "id": "97aea1ad-1313-4662-8fa8-562fa6cac581",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ad686805-8a97-469b-aec6-116ec11f4e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a88531-ddff-47e5-a21a-960b5b1a09b0",
        "cursor": {
          "ref": "02c1af44-cfd6-4f52-a7f7-301424e34eac",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bd55243c-29a0-42c0-8e1c-d043ef37be68"
        },
        "item": {
          "id": "d5a88531-ddff-47e5-a21a-960b5b1a09b0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "df3a67e1-ddcd-49a0-be0b-29df700de426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19072472-e390-494a-9a0a-950e233b4b24",
        "cursor": {
          "ref": "03a993f8-3695-4a00-b0b4-e59a2d30868e",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "18d736c6-9009-4e0d-a578-6e431f3fcd75"
        },
        "item": {
          "id": "19072472-e390-494a-9a0a-950e233b4b24",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0060a13e-32d5-4435-8af0-d9909299cbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1dfcd8-e10b-4e2c-a3a4-51ab16ec6ac4",
        "cursor": {
          "ref": "1a00f65e-8e93-4d54-82cb-9e27af8c085e",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d488bbde-5ee5-405f-a0e8-ae2f415d1b0e"
        },
        "item": {
          "id": "8d1dfcd8-e10b-4e2c-a3a4-51ab16ec6ac4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "79a34b1b-fc55-4f84-a6b0-b9433ab9a044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d39361-a95f-46ec-a9fe-65b61ee2ba85",
        "cursor": {
          "ref": "4c1f8744-9200-41b0-91f5-e8b89bd8e688",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ad7403b4-abc0-4910-9833-d4ea97b9667f"
        },
        "item": {
          "id": "42d39361-a95f-46ec-a9fe-65b61ee2ba85",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dfd96949-da39-4302-9324-0f4087c5c95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5dd8fc-e093-49b5-9fc3-9c63b34f5f51",
        "cursor": {
          "ref": "0e9cb7d8-c418-4dce-beb1-ce8121489ab3",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "532e7ecd-61f5-48b2-8bb6-a437f4866fed"
        },
        "item": {
          "id": "1f5dd8fc-e093-49b5-9fc3-9c63b34f5f51",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "413c1910-b176-49ff-8841-a6ae39f4d2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1be52e6-59df-4f85-b2d2-b12d03764a7b",
        "cursor": {
          "ref": "a499abdc-d0d6-4cfb-9e3c-7bfcf04323dd",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8c674b72-7bc4-4cd7-8b76-941449001c04"
        },
        "item": {
          "id": "b1be52e6-59df-4f85-b2d2-b12d03764a7b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "db151116-5d3b-482b-b072-bbcbfe26b276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc0c21d-096b-4d6c-877d-a3f770743645",
        "cursor": {
          "ref": "e31b110f-f0dc-478c-9d1c-4db4ee8e78d2",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8d94a32d-b5c0-4472-9971-b0c68c05c447"
        },
        "item": {
          "id": "ecc0c21d-096b-4d6c-877d-a3f770743645",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7420ec68-927b-4379-a898-76dae42923df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972e9904-bdd2-400d-9daa-e2f1aa2b0ef7",
        "cursor": {
          "ref": "dffa208c-f258-43d5-834c-06bd9288020f",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7e9232f0-9065-483b-a1e1-291e840f7a68"
        },
        "item": {
          "id": "972e9904-bdd2-400d-9daa-e2f1aa2b0ef7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ef826f94-f443-4a85-93d4-f1f88433dff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafce5a6-0872-4797-88a1-10984d029bda",
        "cursor": {
          "ref": "5cc90e99-6127-409e-b29a-22cd7b7dcfe5",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bddac640-cdf2-4753-b581-71c1f122527c"
        },
        "item": {
          "id": "dafce5a6-0872-4797-88a1-10984d029bda",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6dc6c5e2-b2c3-4825-8abd-b2f16e55b010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d50595d-9eb9-486e-92e8-cda76d6058a5",
        "cursor": {
          "ref": "72a2e00b-b7bb-4220-9842-c510c0e18529",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2c5174b3-e4bf-49ff-80e9-a4dbeb2851cd"
        },
        "item": {
          "id": "8d50595d-9eb9-486e-92e8-cda76d6058a5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "32816b6e-0a32-4f7a-b481-4f5584251332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ee6501-266d-4133-b744-810b89b46478",
        "cursor": {
          "ref": "cae4db91-f15c-4360-8f3b-54429da81dca",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f6485de0-bceb-4805-be64-8d32c134a509"
        },
        "item": {
          "id": "97ee6501-266d-4133-b744-810b89b46478",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "09047fb2-21ba-4b8b-8202-7654b57ab8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa100f7-58d9-46bc-a93c-5276bbf9cfc4",
        "cursor": {
          "ref": "141a5c87-f432-4258-a9e7-471fb3a4d8ba",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9872e1ac-1ee9-4649-9878-bf5cf81f30c2"
        },
        "item": {
          "id": "4aa100f7-58d9-46bc-a93c-5276bbf9cfc4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ededa9db-6384-474f-b384-be6f9556db38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2d67b2-6459-4a5c-8549-aea74e3de057",
        "cursor": {
          "ref": "75808b6c-1ae3-407e-8f68-20352acfa3ae",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c57e94ea-4cf7-4e2f-8197-2a1f1b3286b6"
        },
        "item": {
          "id": "4e2d67b2-6459-4a5c-8549-aea74e3de057",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6abe9623-abca-4578-a9b1-6a7bc14d9391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0001140-c337-4f04-8381-0b54932e870a",
        "cursor": {
          "ref": "f083f933-19ba-40d0-8267-7c8a235e5dae",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6b0d5707-dae1-4042-b504-49fc0af7fc1f"
        },
        "item": {
          "id": "e0001140-c337-4f04-8381-0b54932e870a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e9e7bfa8-6392-41a7-8b76-6a8d21160377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a823b3f-21f7-4405-b8cc-c5c56145e030",
        "cursor": {
          "ref": "0d96f9a3-9015-4828-83f3-e2f3bfbc89f6",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c833cccd-1fb3-442e-9f69-263a59ac996f"
        },
        "item": {
          "id": "8a823b3f-21f7-4405-b8cc-c5c56145e030",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fd003a60-6fbe-44d9-bc2a-0f92400b581b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bb4ecb-dda7-45e4-93ea-5c27daa37b18",
        "cursor": {
          "ref": "c0d2af60-7c71-4d87-8658-9066ef451645",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0ea2195f-19bf-4b9b-b618-819afe0c6188"
        },
        "item": {
          "id": "57bb4ecb-dda7-45e4-93ea-5c27daa37b18",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f5af6837-a6b8-41e0-8a9d-528fdecedaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badac7c2-c069-4737-9f94-f05b261c47dc",
        "cursor": {
          "ref": "b70eea8e-39ef-4baa-91e5-e673e891fb10",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0cf8590b-9a5a-4b4b-8833-e5e25a195d01"
        },
        "item": {
          "id": "badac7c2-c069-4737-9f94-f05b261c47dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ffae1109-0871-4d30-97c5-30ceb925264a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea7b532-7c44-4e33-b6e7-e54aaf71a380",
        "cursor": {
          "ref": "2327c53b-7ee8-4a45-85a4-b1974104dbc2",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c4056598-e20e-483d-9859-705c8e87c9a8"
        },
        "item": {
          "id": "fea7b532-7c44-4e33-b6e7-e54aaf71a380",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "46a0d733-e8e3-4348-9765-30ccd0f28d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaee3791-9765-4e15-a664-bd336af8aeec",
        "cursor": {
          "ref": "630e0979-21c4-4e5c-9593-74d31ad1bec2",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b232919a-d98d-436f-942f-11125d725cc8"
        },
        "item": {
          "id": "aaee3791-9765-4e15-a664-bd336af8aeec",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6004bdd8-4a3f-4051-8dca-7ae13344136d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539b132a-ca5a-49cd-8b1f-2c16c727b623",
        "cursor": {
          "ref": "983c4bfb-d4c8-4539-9fac-cfc8db55067a",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b539208b-0c3a-4133-9b5a-7f24ebba69ff"
        },
        "item": {
          "id": "539b132a-ca5a-49cd-8b1f-2c16c727b623",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f2929a7a-066b-4458-ae57-3dd16f8025bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1871ee-2228-49bb-8b82-691acd0864df",
        "cursor": {
          "ref": "80830437-9762-48bc-be9b-1be966adc82c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f85c718d-f764-4704-b467-1141c345a1a8"
        },
        "item": {
          "id": "fd1871ee-2228-49bb-8b82-691acd0864df",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "58cd3dab-db94-45b5-a5d5-85509105f519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8778e14c-b8c3-43ce-ae48-f68158ee17bb",
        "cursor": {
          "ref": "e516d7f2-7bca-4823-940a-641e74ecbd6a",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5a58d05e-a6b9-4f78-8d30-8e84f1c18930"
        },
        "item": {
          "id": "8778e14c-b8c3-43ce-ae48-f68158ee17bb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6b138eda-c345-4b8e-bd83-c5ad2af0f6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd70a1f1-a13b-413f-875f-e7bb72926c8c",
        "cursor": {
          "ref": "f1477fe7-0200-4710-ab14-0988dae1f646",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "34ac8eec-34e8-4200-a6fd-bd4da2da5533"
        },
        "item": {
          "id": "bd70a1f1-a13b-413f-875f-e7bb72926c8c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6f952175-d916-4cb7-935a-25a36319b7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d5b929-489a-43c8-bf7d-28ddf2c476b6",
        "cursor": {
          "ref": "3e072ecb-dcd8-4702-8195-72f857412687",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "75fac981-4854-4095-a7be-2011f4fea113"
        },
        "item": {
          "id": "36d5b929-489a-43c8-bf7d-28ddf2c476b6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d198dfbb-c2f8-43e5-8ad0-5b5e3b8a88d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d0b362-c7ac-45f3-aa4b-5567f351ba63",
        "cursor": {
          "ref": "c9f9f262-9d36-47a5-871e-6d5eea1efc4d",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b1b646c6-e6aa-407a-8ac9-a903ad085175"
        },
        "item": {
          "id": "44d0b362-c7ac-45f3-aa4b-5567f351ba63",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "14fab133-20d6-4091-b594-13b18bc6c833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a5c22b-9653-4e28-86ae-7aa48ca8ce60",
        "cursor": {
          "ref": "e9fd6a35-74a7-4d40-8735-bed6c478cbad",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "edfa3b8e-3fb8-4dad-9549-027baa6e160c"
        },
        "item": {
          "id": "41a5c22b-9653-4e28-86ae-7aa48ca8ce60",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5902c8c2-6e17-469a-907b-918a7dc5c51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358bb4b0-99cb-4169-a732-89540c02d95b",
        "cursor": {
          "ref": "c6e65692-07a4-4c2d-bf14-ad52c335f407",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "029902ef-6373-40f5-8fd2-e57c41bd33f7"
        },
        "item": {
          "id": "358bb4b0-99cb-4169-a732-89540c02d95b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bec082b7-73b1-49f0-b108-2396f549913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de39403d-948e-42fc-8aaa-babf07896bd7",
        "cursor": {
          "ref": "c833dc65-cff1-4fba-a96c-cfbf01753d8a",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "58d46756-d2d8-414d-9a9f-7b64370d265c"
        },
        "item": {
          "id": "de39403d-948e-42fc-8aaa-babf07896bd7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "da19a17d-f22e-4a1f-9425-9660fb919dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fa2f9f-0191-4914-baa7-3fa5b0a70062",
        "cursor": {
          "ref": "45ecf33d-689b-464b-a573-bf60a4eb2c02",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1d04037b-d721-48e6-a5ff-9888a12e37ba"
        },
        "item": {
          "id": "89fa2f9f-0191-4914-baa7-3fa5b0a70062",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "795adcd9-6e8c-444e-b6bb-e0ac11ea7230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fb4c3e-9d2c-4748-98fb-229b980ea9d6",
        "cursor": {
          "ref": "09cff508-880d-4a27-a010-13a61a9c4438",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "03499f97-8161-4587-b578-2f7d27a3a65c"
        },
        "item": {
          "id": "54fb4c3e-9d2c-4748-98fb-229b980ea9d6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "be8c470f-8401-4430-9f6d-89c3453fcb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5974290a-99cd-423c-b984-863e812109ac",
        "cursor": {
          "ref": "04af837e-a4a2-4ec3-9941-751b6d30066c",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "40688f5c-aa81-4238-8c90-a0bc0ae8c783"
        },
        "item": {
          "id": "5974290a-99cd-423c-b984-863e812109ac",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "570b869c-ff90-4d99-aeee-7c4d8d74f80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d24ffbe-2e2f-497a-b53e-526c97bf9c99",
        "cursor": {
          "ref": "e21e3d34-42c8-4b66-acde-16dc0b24069d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "502fd7c7-b647-4642-a5c7-ca4753d24a21"
        },
        "item": {
          "id": "0d24ffbe-2e2f-497a-b53e-526c97bf9c99",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bbc3c545-54c6-4009-a0af-e81286b3b8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c120fe40-b35d-441c-8c06-ceb1de392e13",
        "cursor": {
          "ref": "4e9eaa29-1fe8-4bbc-a773-4c1d7fd160ce",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "22775e33-0254-448a-bbd7-5033393a57f8"
        },
        "item": {
          "id": "c120fe40-b35d-441c-8c06-ceb1de392e13",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c6a5f034-d4b1-4a41-9ef2-d626c0b46349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad4d5cf-604e-4f52-9352-b3805f938859",
        "cursor": {
          "ref": "670893ae-1896-494b-888d-2d3da67898c1",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0479f403-06a7-4ad1-8fd5-4d451ad48fd7"
        },
        "item": {
          "id": "0ad4d5cf-604e-4f52-9352-b3805f938859",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7ae53438-c870-4763-826a-f8e30086955a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4d24f4-74f7-4fd2-8d38-50902ee19208",
        "cursor": {
          "ref": "a5e8119f-8c77-446a-9a2b-b061f83c11d6",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1fc05662-345c-4a2b-afe4-a646f18bcdf2"
        },
        "item": {
          "id": "ae4d24f4-74f7-4fd2-8d38-50902ee19208",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "27d3221f-69a6-4351-ae34-b77b84d34158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f41506-78ad-4d59-9d50-7f182defa729",
        "cursor": {
          "ref": "d6834693-9979-4048-97d5-c1456e09d6e2",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9ec8d7f8-5d9e-4e4b-b417-faeead6ce12c"
        },
        "item": {
          "id": "b1f41506-78ad-4d59-9d50-7f182defa729",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7cc7dde8-4fb4-4b25-98a1-90336795eb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70366a65-85b0-49f4-b055-1bdcb8152c7c",
        "cursor": {
          "ref": "05111fff-7846-4efb-bd99-26aad849d777",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c1875304-88dd-4e28-9ad4-b05fabc116a7"
        },
        "item": {
          "id": "70366a65-85b0-49f4-b055-1bdcb8152c7c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "47188ec4-080f-457b-9987-c4b7d844b960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbdb287-d591-41c4-bd37-f4f4550d9f0a",
        "cursor": {
          "ref": "ec2b3674-f71e-4cd0-9365-a71c9b3762ba",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "878b5908-437b-454a-97e2-e2867b15816e"
        },
        "item": {
          "id": "6bbdb287-d591-41c4-bd37-f4f4550d9f0a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2e768cc9-9510-40a0-9fec-c27beedd888e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43816e16-b3f8-4068-8fb8-b56f6223fd44",
        "cursor": {
          "ref": "e51a0f43-3596-4636-a8a4-1bff951ca437",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "441c2e0e-bf35-4128-8431-603ac64ced63"
        },
        "item": {
          "id": "43816e16-b3f8-4068-8fb8-b56f6223fd44",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5e83c0a1-428e-4bef-ad12-f30b9759e2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f20b1a0-6f52-48e4-8109-df5fcf53b888",
        "cursor": {
          "ref": "7ceb302c-69db-4d4c-a45d-540c757935e6",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0fb081f2-add0-4e7e-89ed-5ab6b503c62f"
        },
        "item": {
          "id": "7f20b1a0-6f52-48e4-8109-df5fcf53b888",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e62cb4ba-522f-48e6-ab0f-d02206507b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3be3b06-9285-4fb8-a6d3-67689494af42",
        "cursor": {
          "ref": "a6704add-5a15-4e20-9bd2-00e8338ba8d7",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d96bb869-0528-4f96-92f0-ae954ebd2ca0"
        },
        "item": {
          "id": "c3be3b06-9285-4fb8-a6d3-67689494af42",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7f04ecd0-4c07-47b8-9971-8e42f45d1099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcf06a7-b28d-4b5a-858d-5e9da7b580d1",
        "cursor": {
          "ref": "26e3be29-7790-4278-b820-a452cbe64177",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3341a528-1d5a-4906-b4f1-692a62d84fc3"
        },
        "item": {
          "id": "4fcf06a7-b28d-4b5a-858d-5e9da7b580d1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a7604492-696e-48f2-ba64-546f6046dd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fc1c2c-ba5b-4f8d-a275-6355219654ab",
        "cursor": {
          "ref": "9d8dc5bd-99cd-4afb-a44e-78df8212ed5d",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "66c62284-bd6b-4070-8a02-ff15d90ea152"
        },
        "item": {
          "id": "39fc1c2c-ba5b-4f8d-a275-6355219654ab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c50be0e3-dbe2-4eea-9fd0-782c7798cd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86922b51-450c-4d76-aa59-753fe79ba0ba",
        "cursor": {
          "ref": "24c1b5f3-7bbc-4632-bc01-8845def5f5eb",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "29d16c85-4217-4ab4-9348-0315d4962645"
        },
        "item": {
          "id": "86922b51-450c-4d76-aa59-753fe79ba0ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "87a97dc7-a26a-411d-9707-a0ce29022850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de797535-4850-4903-85d2-48e85ae21dd4",
        "cursor": {
          "ref": "ce7f4b6d-49d0-4fdf-843f-da630e6e58a5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6cef8ebe-e121-4121-9c30-b63df4bc969b"
        },
        "item": {
          "id": "de797535-4850-4903-85d2-48e85ae21dd4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aa0469de-c340-4fa7-99ca-9880a725258d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acdddee-05ec-4050-9d0b-aaa8eb7accf8",
        "cursor": {
          "ref": "b124749d-00ce-418c-be36-d47978a605ce",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "84634e7b-4a1f-4c1d-b4c8-b62eb9c2a07d"
        },
        "item": {
          "id": "1acdddee-05ec-4050-9d0b-aaa8eb7accf8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1902bc85-aaea-4396-8246-da75b63fa799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15367381-9cbc-4295-b876-ed688b0fc2d3",
        "cursor": {
          "ref": "d05e9004-edc5-4d05-a7fe-09fea328c892",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "46033dc1-3d11-4dec-b2cb-b0abecb10bad"
        },
        "item": {
          "id": "15367381-9cbc-4295-b876-ed688b0fc2d3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "13917b6c-95c8-49ff-892c-3e186f94d1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801dc089-11d5-4d06-ab0c-56b708eff9d5",
        "cursor": {
          "ref": "6604784b-429e-499d-a91d-5344c8d86a27",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bfa91e83-012b-43f2-b7f8-c42f8e90d591"
        },
        "item": {
          "id": "801dc089-11d5-4d06-ab0c-56b708eff9d5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c74a0261-911e-4254-bfb5-9408442f85f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d7ef68-2856-49aa-acf3-b140363970a1",
        "cursor": {
          "ref": "a5c18b0f-b889-4530-b612-1ab0af7eeae5",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "efe7e6d8-81c1-4941-9358-68402934ed82"
        },
        "item": {
          "id": "e3d7ef68-2856-49aa-acf3-b140363970a1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce86c9de-5d63-4a64-b6e7-66cdbf82ad7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d42ee22-8845-4cbc-a1ad-e8f62bb59415",
        "cursor": {
          "ref": "a384f438-f004-4ad5-98d4-6e2d640324a9",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7a43d90f-7b19-47a2-aed8-e40f5f0e0fc6"
        },
        "item": {
          "id": "0d42ee22-8845-4cbc-a1ad-e8f62bb59415",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fb66c78a-bbbc-4211-a150-899100507020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff8bb0a-8ead-4080-951f-060099f78fd0",
        "cursor": {
          "ref": "6a2f6a6d-d5b6-4f18-9e8b-f39cff620969",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e6a6a7c2-f632-4273-9802-59cf0aa08eec"
        },
        "item": {
          "id": "cff8bb0a-8ead-4080-951f-060099f78fd0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "efe1ae75-f4a9-4a12-b1ce-e442128f043a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2668cc-43ad-4bc6-aa16-1c04b7d8e96d",
        "cursor": {
          "ref": "bb73874d-5564-4f6c-b4c8-47f0152ebfac",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "73f7ede1-dfdd-423b-af15-c1165c3cef10"
        },
        "item": {
          "id": "1c2668cc-43ad-4bc6-aa16-1c04b7d8e96d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9fcaa620-bce4-43fa-af38-83cbabc3f41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab56ba14-b5ef-4a3d-87b7-6f2abeeea58b",
        "cursor": {
          "ref": "9c34e36e-8a42-4f5a-924e-92ab8b7e4fa0",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ba7babe1-0732-4307-a3e0-61c54b421bc9"
        },
        "item": {
          "id": "ab56ba14-b5ef-4a3d-87b7-6f2abeeea58b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eea7c2ea-7c07-4fe9-aea9-a7fb71a8c41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13a087c-19c9-4c62-a9be-2d6a7a5dac1d",
        "cursor": {
          "ref": "1f32bba1-3187-4d44-aa6d-87dd8a4e8c24",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "202ccce1-de9e-4743-8710-b1830d9e4953"
        },
        "item": {
          "id": "e13a087c-19c9-4c62-a9be-2d6a7a5dac1d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f417ad55-ab30-4f21-a8c4-4950d488d57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a1e1aa-1b76-4c3d-a7ac-173d3c2ec0a3",
        "cursor": {
          "ref": "59ea0149-0a4d-4482-b45b-e4e858bd84d0",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "33d9dba1-fc67-4888-bd9c-e575c20d36d1"
        },
        "item": {
          "id": "a8a1e1aa-1b76-4c3d-a7ac-173d3c2ec0a3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "437ee5f8-1e34-42a5-875a-0ee929d8bc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d35d86-462f-42b5-9913-7e836c303421",
        "cursor": {
          "ref": "ef844ab4-dd2a-4bc6-b23d-28cba6d45679",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fbbbdade-8162-472f-b73f-e1512c394b27"
        },
        "item": {
          "id": "29d35d86-462f-42b5-9913-7e836c303421",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ce5275a0-65b9-4a02-8022-16f940711a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274f2433-191b-4db8-8d71-cacaff768d07",
        "cursor": {
          "ref": "c8f99ec0-8328-4c7e-9c3a-6103c5328b83",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2b14723c-0ac5-4002-89a1-84359434a50c"
        },
        "item": {
          "id": "274f2433-191b-4db8-8d71-cacaff768d07",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a4184d1f-a36b-4634-a0cc-d0d560480e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45ef523-cc43-4741-93f1-ad6ffc28cdb6",
        "cursor": {
          "ref": "161baf71-96ea-45f5-88cd-7f9e4b4833a3",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cb1f3aba-25a8-48b2-a5cd-acd4ffc2d581"
        },
        "item": {
          "id": "a45ef523-cc43-4741-93f1-ad6ffc28cdb6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0d599873-6188-4433-bcf0-c0a2f3c32d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acda8e0-1b12-43fd-b35e-702873c5fc93",
        "cursor": {
          "ref": "470ba389-41c6-441f-a1ba-5f5e7a05b946",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "65d6b5a5-405e-4c11-9da1-6ca849db49fe"
        },
        "item": {
          "id": "9acda8e0-1b12-43fd-b35e-702873c5fc93",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a5bbbc5a-7018-47d1-8f26-55e87d425ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534d3678-df78-4ef9-8b68-6d59a0fefa8d",
        "cursor": {
          "ref": "83085b69-3350-43ae-9ee7-e2baa4ff685d",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fd6533f8-70da-4553-be6d-ff9209772e7d"
        },
        "item": {
          "id": "534d3678-df78-4ef9-8b68-6d59a0fefa8d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "36e4f44e-f0cb-493b-95ed-3f1b9504bf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a420b1d3-ba7b-43e1-ba76-d8c8e73b4608",
        "cursor": {
          "ref": "26c3a0a2-3d96-42ef-b81f-67d3264554ef",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "631c0a7a-4211-4b02-aa4c-c15513379fac"
        },
        "item": {
          "id": "a420b1d3-ba7b-43e1-ba76-d8c8e73b4608",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "33edc77c-e30f-4646-a80d-b1ed8c488ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4944377f-5244-4c3d-8c06-576bde157734",
        "cursor": {
          "ref": "e5a25e31-a39a-4b6b-a520-44ddf46192a8",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "43290396-1f01-402e-9113-373a50803a21"
        },
        "item": {
          "id": "4944377f-5244-4c3d-8c06-576bde157734",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6233067d-e6c0-4582-9e34-7439a676afaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09baa205-d50c-40d2-8a18-210fbf9fe546",
        "cursor": {
          "ref": "0a04f34e-c4b1-4b77-a23c-62286eeece31",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "05f91c8a-1879-4c7d-98f2-bcb7db08a146"
        },
        "item": {
          "id": "09baa205-d50c-40d2-8a18-210fbf9fe546",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7a50b841-e87a-4819-a687-666aa5eeb96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b8f20c-beb1-44de-9e35-05ecd90c64f6",
        "cursor": {
          "ref": "a4e81389-2d62-4cd8-bb15-f2ba901528f5",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a555e5ec-b0d7-4e81-b43c-d55c27b7058f"
        },
        "item": {
          "id": "30b8f20c-beb1-44de-9e35-05ecd90c64f6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ec5df3b7-ab7a-402c-af27-2a0f1b254bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117b8958-885f-4846-81b7-65908aa87c27",
        "cursor": {
          "ref": "81a126f3-207d-445e-8dfb-0c163063259b",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "eaa16980-144b-4302-927e-c789cbff8a78"
        },
        "item": {
          "id": "117b8958-885f-4846-81b7-65908aa87c27",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2e818793-89ed-47c4-85ca-f697c90bdbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607883c1-4556-40ac-b2a3-561f6681d3c2",
        "cursor": {
          "ref": "559c1205-b0f4-4e98-bfaa-5088efdd4102",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9ab08db0-7560-4066-8ded-9eed44b70e24"
        },
        "item": {
          "id": "607883c1-4556-40ac-b2a3-561f6681d3c2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bbac0446-5259-4afd-9b24-501ce0274c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320fd928-218d-49ab-adc3-8e316ca6f5fa",
        "cursor": {
          "ref": "da048c5a-3f66-4d8d-a4f1-f8f287efc978",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "69520d04-067e-4f98-b6b0-403249c5b30c"
        },
        "item": {
          "id": "320fd928-218d-49ab-adc3-8e316ca6f5fa",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "328a34d0-6e5d-4586-a6d1-09a3d40d2829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07aa3ab-40df-4d0c-b75d-751a88ef6199",
        "cursor": {
          "ref": "c36e467f-a44f-40a3-81ec-a5050f52f05d",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "97c67dfb-e268-498a-8871-4cdf31a15ef7"
        },
        "item": {
          "id": "f07aa3ab-40df-4d0c-b75d-751a88ef6199",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "56b1f6aa-f7b9-47fb-b75c-46e740bd3288",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "121cc360-3006-43fe-b410-4936b15b3705",
        "cursor": {
          "ref": "3957da9e-a4f1-436d-b0f1-d624541b7d35",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0885a9c0-e085-4bad-9b55-93962aad46a1"
        },
        "item": {
          "id": "121cc360-3006-43fe-b410-4936b15b3705",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ffd71bd7-dde0-4a69-a884-7c826e7fad28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f1df16-b328-44a2-a629-43d69a3fd5ec",
        "cursor": {
          "ref": "872ca991-432e-4a35-8f05-db25dc13e842",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cf9270c6-75e9-4af4-948c-1f7101cfc14f"
        },
        "item": {
          "id": "08f1df16-b328-44a2-a629-43d69a3fd5ec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b5e5fc7f-af6b-471f-a226-4b55ca25cbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9e485c-0edf-4231-a686-89b6f1828bed",
        "cursor": {
          "ref": "d1fc16c8-3f2b-477e-be74-17fa66bb2233",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "eb069f9b-952d-4d73-af61-0840ffcd24fd"
        },
        "item": {
          "id": "4c9e485c-0edf-4231-a686-89b6f1828bed",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bce79a73-1ff8-44ae-97f2-6186391c75c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3b5aa0-321b-4e7a-affc-5924c95a30a7",
        "cursor": {
          "ref": "49d5a60c-893b-4d5e-b1bf-4c76943e56a7",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6bf3ab7f-e5f0-4b13-b716-e1cafef92806"
        },
        "item": {
          "id": "9c3b5aa0-321b-4e7a-affc-5924c95a30a7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dcad86df-305a-4588-b7c6-6f70ba712196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124105b6-9b71-48a1-8b06-5b5a9e920a6c",
        "cursor": {
          "ref": "1c513c49-27e6-4eff-b004-3156452562ab",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a4171f49-91ac-491f-94e1-dbee192ba771"
        },
        "item": {
          "id": "124105b6-9b71-48a1-8b06-5b5a9e920a6c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b9825d65-b787-4219-8391-4d5e72c4bc7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02f91fd-4b81-44ed-aa5a-63d095bb6229",
        "cursor": {
          "ref": "7a36409c-a917-47a8-a9b0-6197b5a3668d",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "804698ba-c785-4adc-bae0-162cc739ce59"
        },
        "item": {
          "id": "f02f91fd-4b81-44ed-aa5a-63d095bb6229",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6a168a3a-156c-4fdb-bb36-d0d7b72183d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38839a76-e688-4ac3-bd9d-f19163938f7e",
        "cursor": {
          "ref": "042f0bf8-1c2a-4f60-8961-77f968e48888",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "774407b0-23b3-4e36-afc1-c0a776c48148"
        },
        "item": {
          "id": "38839a76-e688-4ac3-bd9d-f19163938f7e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b00f4843-d1c4-4cae-873c-457159e61a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ea3cfc-1b53-49e2-945f-bb0093f12c59",
        "cursor": {
          "ref": "d5d74d39-3a82-467f-89e0-932729a5789f",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a454345c-4a83-4a77-b5b1-adb31b5d0e17"
        },
        "item": {
          "id": "57ea3cfc-1b53-49e2-945f-bb0093f12c59",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bf73e399-6661-4bef-a31b-e90bf3d0c86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62acc22-153b-4031-9b12-2ab8646fc8b0",
        "cursor": {
          "ref": "4f64dccf-9d91-4efd-a970-d7ec97c21576",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "653aa391-80cc-4cf6-bd43-d267961085fe"
        },
        "item": {
          "id": "c62acc22-153b-4031-9b12-2ab8646fc8b0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "26f61ca0-0c68-4a04-9668-3267080588c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0393a8f-2f77-4b22-a555-bb67fc81bb3c",
        "cursor": {
          "ref": "54535413-0afc-47e4-a173-ff182de38282",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9b1bef34-03cc-4f34-914b-36d377b61256"
        },
        "item": {
          "id": "e0393a8f-2f77-4b22-a555-bb67fc81bb3c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f19295da-492b-4ccf-a619-1a3074973e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ad3155-9f16-4e66-b22c-39cc7211228b",
        "cursor": {
          "ref": "6383f339-52e7-45f1-8d5d-fd6b83cfb139",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7c2d35c5-afb1-49f0-bba5-9c9b77e62e38"
        },
        "item": {
          "id": "03ad3155-9f16-4e66-b22c-39cc7211228b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cfb94cd3-dbc1-439b-a292-34638f5a6790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbd0f48-fb7c-48ab-8552-95095e26ae7a",
        "cursor": {
          "ref": "81aec374-eded-4785-a003-adeb1b50b049",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "497b10de-62c9-4528-9203-676636c93a6d"
        },
        "item": {
          "id": "6dbd0f48-fb7c-48ab-8552-95095e26ae7a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8f9ea2bc-9407-4807-aa8a-040d0e519d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdb846b-af77-4270-950b-bca6c1332ca7",
        "cursor": {
          "ref": "8dfe6697-e997-4a78-b8cb-622ca9fa8882",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "20dd7484-ee27-498d-a9a9-fb6cbd508598"
        },
        "item": {
          "id": "2fdb846b-af77-4270-950b-bca6c1332ca7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2a7ab35c-b5a4-4ca6-83be-3e22b04b308f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e4d3e1-362f-4272-a065-5a8bad0e1b13",
        "cursor": {
          "ref": "0cd24e47-dda9-4e76-871f-0738a2483f60",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "54d5eb0b-ecf9-47d4-897c-7b60d16d31cc"
        },
        "item": {
          "id": "11e4d3e1-362f-4272-a065-5a8bad0e1b13",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d87543b1-ecb1-40a5-a532-4eac10753fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6563cc19-1976-4275-87c3-baff39b0f2d9",
        "cursor": {
          "ref": "d9d695a4-189f-4760-8b87-55bacf4b0da4",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "75a2fac6-016a-4d28-b5ff-29603f555c8d"
        },
        "item": {
          "id": "6563cc19-1976-4275-87c3-baff39b0f2d9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5f80c693-2388-4530-a5e3-2ac1fcea08b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b00503-992d-4667-a6e3-2b0050c92cc2",
        "cursor": {
          "ref": "7d78453f-8d2f-4434-ad4c-ad1983cefe6a",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "953c2316-7d2e-438c-9623-4d5bd18dfeda"
        },
        "item": {
          "id": "46b00503-992d-4667-a6e3-2b0050c92cc2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0e367afd-ea7d-4624-bc63-b4051767b2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f46add3-bbb9-468c-a0ce-e6b43906af2c",
        "cursor": {
          "ref": "b5d9c427-80ba-43dd-8a5b-a7280ff4a938",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f3cabcc1-d0e8-4020-b638-c285dd971f71"
        },
        "item": {
          "id": "9f46add3-bbb9-468c-a0ce-e6b43906af2c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3590844b-e9ab-44b0-87f7-3987fd5c4dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b065458-e904-40da-a804-b5fbefb5f3c3",
        "cursor": {
          "ref": "cc2c75c5-6896-443d-8c08-8f8b79da931e",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3d2ed697-400a-4d7c-b5e4-96290e9b0960"
        },
        "item": {
          "id": "3b065458-e904-40da-a804-b5fbefb5f3c3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a3a2b236-0bb9-4d31-94d1-b1adb4ea1383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c7be93-67f6-46dc-b8b3-21e4752d0ea9",
        "cursor": {
          "ref": "47509517-c004-478a-82e6-c929b4153383",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d9e89bda-d7c9-403b-b800-1905620532c4"
        },
        "item": {
          "id": "75c7be93-67f6-46dc-b8b3-21e4752d0ea9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "88f1dc00-b3c0-4783-a724-60c45410fe2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b11c8a8-a475-4de7-b658-3c879b98cd33",
        "cursor": {
          "ref": "a3ba8e9f-222f-4ac5-8e0e-3ff8cebd67ef",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0993e529-9c91-4f25-ab2e-280664b7b590"
        },
        "item": {
          "id": "5b11c8a8-a475-4de7-b658-3c879b98cd33",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c8d7adeb-ee47-42b8-b73b-bcbf2bb0fca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a633d6-879b-4e85-83a7-4d722b526b9c",
        "cursor": {
          "ref": "167935a7-6aba-4d4c-85df-a5a3bd8a93b0",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "15dd3bae-f2d8-4467-8ac3-acf0b9d343dd"
        },
        "item": {
          "id": "99a633d6-879b-4e85-83a7-4d722b526b9c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7870e9c2-07ca-4cbc-bf6a-2b1c298625cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4ec910-c89e-4aeb-bfa3-55a5c9038b92",
        "cursor": {
          "ref": "254c7e24-1414-4266-94f8-fff999ed7984",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "30a4540b-e151-4295-bc7c-2c8ba8a4c802"
        },
        "item": {
          "id": "1a4ec910-c89e-4aeb-bfa3-55a5c9038b92",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b1f328b1-b976-4758-b814-2f432d8b11cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2502b837-9688-44b7-9331-32571ee74925",
        "cursor": {
          "ref": "71a4e790-427b-4b01-b0f7-6a30ecf73a4e",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "51a163d8-0553-4bff-869e-f3103a74599e"
        },
        "item": {
          "id": "2502b837-9688-44b7-9331-32571ee74925",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "af5993d3-6be7-4a86-8164-c8858cb648b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e8c5a1-31ad-4e78-9907-ffef9841c21e",
        "cursor": {
          "ref": "00424108-c09f-4df7-8c3a-6eb8ae45e580",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "da8ac5cc-369b-4d27-8a04-befed4ddd229"
        },
        "item": {
          "id": "77e8c5a1-31ad-4e78-9907-ffef9841c21e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f92927e0-c109-455f-9416-3ed15e0fcc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa905a69-89d9-4e37-85da-fc7856304e9a",
        "cursor": {
          "ref": "9bd268cd-604f-4614-8854-223a470e98df",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "eed16be4-a41b-43d7-94b4-5d4e39c34d35"
        },
        "item": {
          "id": "fa905a69-89d9-4e37-85da-fc7856304e9a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5675f6dd-8feb-4651-a565-f1938c0f1212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcd98b8-4564-4664-b4dc-5f350ee97a36",
        "cursor": {
          "ref": "9c48924f-f782-4d90-af53-396901392da3",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bd19c70a-44e8-46b8-8592-07caa444557d"
        },
        "item": {
          "id": "0bcd98b8-4564-4664-b4dc-5f350ee97a36",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ebfe4a60-45e0-40dc-a695-530f5cd2c049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c308fa4a-109e-4f7f-9fc9-1c9512804765",
        "cursor": {
          "ref": "6fd7d189-19af-41c3-b189-9f743d727aa9",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2b66ba64-9722-48dc-bdab-1e8e623039c8"
        },
        "item": {
          "id": "c308fa4a-109e-4f7f-9fc9-1c9512804765",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "48beffc9-e7ba-431e-800d-4f8f4edf5249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b598e3fd-9916-4ea6-b793-1d5bf82b3ef6",
        "cursor": {
          "ref": "43af9b06-b3f6-42b3-8821-b69a300b4e1a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f93b279d-5afe-4144-a2d8-987e8c7a0388"
        },
        "item": {
          "id": "b598e3fd-9916-4ea6-b793-1d5bf82b3ef6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2cda2587-a870-4fe4-865a-8200841fedd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32de626-d2d2-4a20-9fba-85862cdc53e8",
        "cursor": {
          "ref": "f8676401-1fd2-4fe4-8364-90a71b3dc3ea",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6398def4-2a69-4252-ba2c-6dc9424aa6f9"
        },
        "item": {
          "id": "a32de626-d2d2-4a20-9fba-85862cdc53e8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "36ec7b49-425e-4453-bdbd-32ac36b6adc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72753b8-73cc-4cce-b02c-f06764e8d1b5",
        "cursor": {
          "ref": "a477202e-d4a1-4f5a-9f26-ec6f97900d67",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "938d7521-9a00-45eb-a733-e6c649e1e058"
        },
        "item": {
          "id": "f72753b8-73cc-4cce-b02c-f06764e8d1b5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a8ea9522-7046-4ee8-be23-cabd5d94b7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "db127bf5-f178-4d22-8269-3847d376e291",
        "cursor": {
          "ref": "9b228971-cb0d-4974-b0c0-75f996278fb1",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "54bca74b-352b-4a72-b17d-376a3aaefeb7"
        },
        "item": {
          "id": "db127bf5-f178-4d22-8269-3847d376e291",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "80c71e8b-6f9d-46b3-9b00-e4846776b557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e8c77cb2-bfe5-4b63-9415-44c57dd5e4fc",
        "cursor": {
          "ref": "25b45299-57cd-49e3-87c8-4cef85688f10",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e0b55561-8a49-4004-9792-7de16ad9767e"
        },
        "item": {
          "id": "e8c77cb2-bfe5-4b63-9415-44c57dd5e4fc",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7c4b3de2-4e60-4a56-ac5b-6249eecb3ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "18b11694-8337-4147-9d9c-423631561bf4",
        "cursor": {
          "ref": "d3e10ecf-8866-4407-b083-d4fd23f0caf7",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ed755cc9-6823-445a-95e6-f39995885b1e"
        },
        "item": {
          "id": "18b11694-8337-4147-9d9c-423631561bf4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dea35f71-a712-4e8a-a542-83686c22faa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f21bc8-549a-4a48-9444-3c60d68fd532",
        "cursor": {
          "ref": "dbc44eec-8c17-4c6a-9c70-92042e0b00ab",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "af8a85d9-6756-4d2c-a793-30b82c430d1e"
        },
        "item": {
          "id": "97f21bc8-549a-4a48-9444-3c60d68fd532",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2a28806d-02cf-4980-98cd-40ecd33e7480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "47a80ba1-4e35-4788-9714-4f2e94d2f2a8",
        "cursor": {
          "ref": "8452731c-1f31-4bce-bf20-a7515fb53d75",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4ed50743-e7b4-4d85-b084-292cf4e63e8c"
        },
        "item": {
          "id": "47a80ba1-4e35-4788-9714-4f2e94d2f2a8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c725254c-abd1-47bd-8093-debb794b2018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 854,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "58c3dd3a-bc6a-4220-a835-c7d565f6d6d3",
        "cursor": {
          "ref": "ffc5c8f5-9503-4cd9-bc80-05f249ddfccf",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a64ff772-a035-44b3-9a8f-c3ec4c510200"
        },
        "item": {
          "id": "58c3dd3a-bc6a-4220-a835-c7d565f6d6d3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "dadce70e-e587-40a9-9edb-17c6be03f91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "296b3f38-b9b5-4c71-b990-d8918d1a89bb",
        "cursor": {
          "ref": "cd23f4c4-5fe3-44af-a9f0-dc23aa33894a",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c0deb6f7-1677-4e22-b74d-d0646637f2b1"
        },
        "item": {
          "id": "296b3f38-b9b5-4c71-b990-d8918d1a89bb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b3bdfa6c-bace-498a-ab76-d1a850811487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6e0c3397-f705-4dfc-aae2-1addaaa09ac6",
        "cursor": {
          "ref": "54618f55-bdfb-41bb-a184-ee310b58276f",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "da2ee2ed-1f35-4742-b23e-573235492e98"
        },
        "item": {
          "id": "6e0c3397-f705-4dfc-aae2-1addaaa09ac6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "87a9abea-4f4e-4d6c-b071-a6f00ad9a86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0ccb5d8f-4c1b-4b78-b9d6-0fabcfb0d701",
        "cursor": {
          "ref": "225c4dd4-3490-46eb-bff5-ed46cd623d6a",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c36a5bca-586c-40af-b8b3-e29f7f62693a"
        },
        "item": {
          "id": "0ccb5d8f-4c1b-4b78-b9d6-0fabcfb0d701",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3fa2815c-1eb0-476c-86d3-850d5429d012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f7cd7168-8652-466c-a0f6-d2d67850dd24",
        "cursor": {
          "ref": "9856246c-713e-4278-b78a-728883150395",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "11a6948d-07bb-470a-8367-74acff4ff7d4"
        },
        "item": {
          "id": "f7cd7168-8652-466c-a0f6-d2d67850dd24",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0b7f120c-369c-4de9-90eb-7fdf59db949c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fc6c45-55bd-4e3a-9b27-88cecb9405b5",
        "cursor": {
          "ref": "7e99d469-0f51-4742-925e-a2af68676a07",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "65d321e1-80eb-47c5-baa7-9fccd9f9419d"
        },
        "item": {
          "id": "b8fc6c45-55bd-4e3a-9b27-88cecb9405b5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "35034939-69ba-4a7e-b5ba-386cc975ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84eafaf1-c9c9-4c46-a563-cf193a0e71e4",
        "cursor": {
          "ref": "6c4db123-b9f5-46a9-bb0b-74a37ec9f788",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "21528f45-7fef-4d0f-83e0-92061a47c0fb"
        },
        "item": {
          "id": "84eafaf1-c9c9-4c46-a563-cf193a0e71e4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8266874a-36ce-4c21-88df-d1b167f54770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25ce8f7-4027-4fa7-9937-ed05ed798c21",
        "cursor": {
          "ref": "0f4eabf9-55e8-46b5-95d3-ca36bd593740",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "99eb55ce-ef95-4de9-8a02-02cc61e41bbd"
        },
        "item": {
          "id": "a25ce8f7-4027-4fa7-9937-ed05ed798c21",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d73691a8-9605-47cc-8e96-57d21ebf29f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a47c6a-6842-413d-a2d2-05e4c2bd926a",
        "cursor": {
          "ref": "69607b3a-f871-4a32-9ff2-b0adfda5cdae",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "03be4974-0811-41e4-a84c-94503d1687d6"
        },
        "item": {
          "id": "04a47c6a-6842-413d-a2d2-05e4c2bd926a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9d29ba94-1893-451b-8726-f04b644013dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7813da97-fb5f-48fb-8f1f-3cb9f032472e",
        "cursor": {
          "ref": "2286ecfe-af42-470f-a5d1-cfa0d28722a3",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e80e7f3b-638e-4278-8058-e4d01b3691cc"
        },
        "item": {
          "id": "7813da97-fb5f-48fb-8f1f-3cb9f032472e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6af73f14-0545-4e07-9a7a-eeeb7b8f85de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a414c792-b079-481a-ba0c-65960aa379fd",
        "cursor": {
          "ref": "6204f22d-590c-4069-839b-71bc93658c41",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c3f27f81-9f9b-4661-839c-ec913bc13125"
        },
        "item": {
          "id": "a414c792-b079-481a-ba0c-65960aa379fd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "47b1ddb6-c306-4738-b866-a86744729dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f15fccd-bcba-46f5-b3da-144d82b46884",
        "cursor": {
          "ref": "469ae2f3-d007-4882-85e5-5960f933df48",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "59cc99ee-a256-4f1e-a24f-73177ac34817"
        },
        "item": {
          "id": "1f15fccd-bcba-46f5-b3da-144d82b46884",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fbb03bdb-0a46-4938-ac68-a9db0573253d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f767cf99-1caa-40d6-a326-dae8961e8fc6",
        "cursor": {
          "ref": "43e2b928-0f89-4eaf-91db-f89a312dd25c",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8dfa4564-e4df-40f9-9dc7-7f92c2e5d239"
        },
        "item": {
          "id": "f767cf99-1caa-40d6-a326-dae8961e8fc6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a8262261-bde8-4e28-99c0-59a5888ff9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97b98df-787e-4d11-8828-deb46bba9636",
        "cursor": {
          "ref": "4501c328-afab-472b-8b64-cb8328ef9571",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bfb10b29-e1f9-412c-b58f-d46f8e4c907e"
        },
        "item": {
          "id": "e97b98df-787e-4d11-8828-deb46bba9636",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bfc7e7ec-cc31-41f8-ba0d-ac607ba06835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44a6e95-0345-45be-b6a9-9e9223258408",
        "cursor": {
          "ref": "35ffa51e-a101-4706-bc0c-4f245a90449b",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dfdd0398-6dd5-4c86-aaed-9db6e19c20ff"
        },
        "item": {
          "id": "b44a6e95-0345-45be-b6a9-9e9223258408",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f5f421f8-0703-4afe-b6fc-1de28de96cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11be410-fe88-462b-b612-2e6fdf5a2b64",
        "cursor": {
          "ref": "fa77e3a5-2bb7-46c3-a02f-79d589dc53f9",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d22b3131-9e93-45ea-88b6-286c7652d0a5"
        },
        "item": {
          "id": "d11be410-fe88-462b-b612-2e6fdf5a2b64",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "be4d9e0c-212a-4778-8d83-c759ccd15c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d350ef57-0f7c-4800-b313-18a5c769e007",
        "cursor": {
          "ref": "4f860891-490e-4ead-ad55-43963e2999ec",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "88072d23-9b5b-4538-ba29-1874d44bff46"
        },
        "item": {
          "id": "d350ef57-0f7c-4800-b313-18a5c769e007",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9194f2a9-c9f8-44b6-8160-778c5a8b4482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6d5c95-8519-4737-b0d6-4cfce9f45e3f",
        "cursor": {
          "ref": "126ea787-d49b-4408-bc11-77d3e1c2cd7d",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1a8aa201-e7b0-4768-a808-3892aa3c808d"
        },
        "item": {
          "id": "cb6d5c95-8519-4737-b0d6-4cfce9f45e3f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7b7cd982-d8f7-40d7-a15d-4bd73ef57d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 663,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "99d2f585-3729-4034-911a-d4202a6cc5d2",
        "cursor": {
          "ref": "f6b90cc7-caa1-420f-8b54-a7cd097b88f3",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d209d303-934b-4875-9776-6f11e910b6ed"
        },
        "item": {
          "id": "99d2f585-3729-4034-911a-d4202a6cc5d2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fa3b42cb-0fd5-41c5-b22e-5f684bdc1026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 658,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b1619302-cb55-4c8a-8c89-491124647a61",
        "cursor": {
          "ref": "3c65dbac-ca6f-4f6e-b928-badfe1a7ddfd",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d1581304-c145-4085-841d-377cd2196b78"
        },
        "item": {
          "id": "b1619302-cb55-4c8a-8c89-491124647a61",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d5415743-241b-4a91-972e-7e34cd84cf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "feba77e6-8812-4059-a386-8c9b2b7f332e",
        "cursor": {
          "ref": "143e53a0-3c33-494a-ae16-c3ece8f21d95",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "24180058-b9c2-45bb-976a-666d8074b0b7"
        },
        "item": {
          "id": "feba77e6-8812-4059-a386-8c9b2b7f332e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8ead95c4-0b02-4b5a-9239-1a15a7e69f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 695,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e4019d44-177e-480e-b09c-be35e7f3c63c",
        "cursor": {
          "ref": "449a0db5-138f-4d8a-8127-19364baa6a90",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d7413e7c-8617-458d-b73c-ba4c3dad5794"
        },
        "item": {
          "id": "e4019d44-177e-480e-b09c-be35e7f3c63c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5e1529ed-114b-4c15-a3e6-21440835abde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7fcc59fa-d46a-4353-8a2b-ddb9c121e2f7",
        "cursor": {
          "ref": "59b62461-1593-48ea-a86a-a7064b73e0ae",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4c5d3850-b10c-43e8-aae7-83524d8692ed"
        },
        "item": {
          "id": "7fcc59fa-d46a-4353-8a2b-ddb9c121e2f7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "81dc1f95-8c24-47a1-a5b5-d6aaeaca9a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624a4d16-0b92-435b-ab31-c0a1f8e4707f",
        "cursor": {
          "ref": "9f865b19-d7b7-4f97-97af-315e6c07c24f",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd63a342-74d4-4b30-8ba6-f6767c0ac083"
        },
        "item": {
          "id": "624a4d16-0b92-435b-ab31-c0a1f8e4707f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5cc59816-063c-4704-93d2-168c558484bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7cf66e-39c3-49c7-baaa-8951797f6891",
        "cursor": {
          "ref": "e7e20cae-7b77-4a3f-a704-955c2829162f",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ea15696a-4bfa-49fe-abb5-412b9917cd17"
        },
        "item": {
          "id": "da7cf66e-39c3-49c7-baaa-8951797f6891",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1b4b89f6-d221-43f4-aead-9f9d79b41feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de5617c-fb54-4557-9453-b0d835a451c0",
        "cursor": {
          "ref": "bc9e89c1-af51-46ef-bb89-4ef16bf765c0",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b978934c-c59d-46ad-bf26-a82f14ea32f6"
        },
        "item": {
          "id": "9de5617c-fb54-4557-9453-b0d835a451c0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d5831fa3-5049-4e03-8795-903e673733d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903c3c95-4cb8-435b-b21c-a5963e237924",
        "cursor": {
          "ref": "63abff55-c1d1-4ad6-bc3c-661260a46724",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "52a38833-df27-4d85-aff0-ad694096ccc6"
        },
        "item": {
          "id": "903c3c95-4cb8-435b-b21c-a5963e237924",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5a0fac40-88aa-49e2-8d54-0b02a6a05f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b016d3fe-8fb7-44c4-acc0-fd7bcb6c392b",
        "cursor": {
          "ref": "40a6952a-20c7-4a31-9ebc-9a1f857eaf52",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cf4457a4-60fe-45df-8243-516b6b9d385c"
        },
        "item": {
          "id": "b016d3fe-8fb7-44c4-acc0-fd7bcb6c392b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "eeff1fb7-1b52-4070-8b2c-4590187e4721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34c6ef4-ce19-4c8c-80c6-fe626c02b8b8",
        "cursor": {
          "ref": "d6b34da5-66f5-45b7-83cd-2b83fef95e47",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d113e0b0-bb62-4866-95a7-20a6dcd61d9d"
        },
        "item": {
          "id": "b34c6ef4-ce19-4c8c-80c6-fe626c02b8b8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9f01d807-344b-472d-8369-264b3f4f13e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3759f1d6-e279-49d1-be9d-fd97841cc6e3",
        "cursor": {
          "ref": "723a9bbc-b4e1-4b5e-bf55-b2849e7ec69c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c01edda5-7e39-4b26-a226-184de1d14fd1"
        },
        "item": {
          "id": "3759f1d6-e279-49d1-be9d-fd97841cc6e3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0fb049ca-615b-403a-afa3-3bb64be99457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a58f7f-2393-419e-88ba-52acb96b3de6",
        "cursor": {
          "ref": "a93c012c-4b75-4a86-8e69-56c2556c3be9",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1ae71020-1b63-4d6c-83d4-4787efdd1c61"
        },
        "item": {
          "id": "74a58f7f-2393-419e-88ba-52acb96b3de6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f2edc08a-d701-441f-a81e-c175fe223c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434c3406-94f8-48c1-99f4-537dba081e6b",
        "cursor": {
          "ref": "d02b62e8-a69e-4e13-aa0b-42359cc358eb",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0cf3321d-f432-4d34-9a6b-eaa60cc07829"
        },
        "item": {
          "id": "434c3406-94f8-48c1-99f4-537dba081e6b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6ee82e99-5099-43a8-9334-5eceaebbc7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e64d2a-3574-4560-b0a8-0d1e75a71658",
        "cursor": {
          "ref": "8a9f23bd-205e-4f14-a37b-dd3e86738299",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c054e994-beed-4be8-8587-78b1f8630c5a"
        },
        "item": {
          "id": "72e64d2a-3574-4560-b0a8-0d1e75a71658",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e4961fe6-c679-40fc-8faa-9671627b39b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f91ccac-6fee-48a9-9673-52082059911e",
        "cursor": {
          "ref": "4dc35448-0968-4fa9-aad2-f2682eeef4c7",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fce675cd-5c6e-47ed-932f-e5b11dac3177"
        },
        "item": {
          "id": "0f91ccac-6fee-48a9-9673-52082059911e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "27324f45-0f28-4ea6-a601-627908e35172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ae768b-0986-42a3-8e0c-e72b4dbae1e6",
        "cursor": {
          "ref": "9f43880c-6ab6-4e74-b294-a60b2cad147a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8039411d-cd47-4155-b09a-f624ce2666df"
        },
        "item": {
          "id": "24ae768b-0986-42a3-8e0c-e72b4dbae1e6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3a8c26a1-9a57-4934-92d5-6234e101dfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8fcfea-3caa-4cfe-9fa0-2e96ef8df4d4",
        "cursor": {
          "ref": "d1f91c7c-071c-40a7-ac70-55fda3eb8381",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "daacb847-ad9e-4d44-b6be-d4775a627d76"
        },
        "item": {
          "id": "8e8fcfea-3caa-4cfe-9fa0-2e96ef8df4d4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1a3ee087-0b1a-4598-b605-a6d9fde09131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65840b3e-dff1-4119-8b06-c207fba82900",
        "cursor": {
          "ref": "e4424368-5f36-4102-8d63-4a11e5416337",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6766e3e5-626a-4b18-ab72-b09d9efea23c"
        },
        "item": {
          "id": "65840b3e-dff1-4119-8b06-c207fba82900",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0658308d-9c12-4213-bb44-ffb8fa2e6807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf57b18e-a70a-4ead-9bf7-e50963ffb59f",
        "cursor": {
          "ref": "c925f465-5dcf-4340-8e47-f01800414396",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "350aa298-a43b-4d3a-be36-dd76184e45e0"
        },
        "item": {
          "id": "cf57b18e-a70a-4ead-9bf7-e50963ffb59f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "57f7d3d0-72fa-4b22-9e85-041cfb75c599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65bf1fe8-31bd-4479-9821-b72f8563f999",
        "cursor": {
          "ref": "521ee628-2e31-4cba-8033-798429dc5e06",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8a6f436f-7adf-459c-842b-1c173020020c"
        },
        "item": {
          "id": "65bf1fe8-31bd-4479-9821-b72f8563f999",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ef06de5f-94c2-4aff-a2bf-82131557352f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119fcf9d-a062-4c4b-aaac-23743fd4e990",
        "cursor": {
          "ref": "6fb9e119-9c9e-4c0a-a215-8ad0d34cbd1d",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "73179cc4-c1c2-4937-9cea-dab88f7d815b"
        },
        "item": {
          "id": "119fcf9d-a062-4c4b-aaac-23743fd4e990",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e088ab9b-8cc6-4dc1-9cb1-478a903ac93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d75e612-4a49-411a-96c2-020f646bdcf2",
        "cursor": {
          "ref": "1ac451b6-40bc-4fc9-be2d-fa66faca951b",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3f1b45f9-dbb1-4432-b97a-d14798258a59"
        },
        "item": {
          "id": "8d75e612-4a49-411a-96c2-020f646bdcf2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5c080f8b-ebcb-47a0-a897-ed5e21ad0df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7762243f-120e-46c4-bed5-2e2e6fd53a44",
        "cursor": {
          "ref": "f8f4c7ea-3d45-40d9-9fe2-40f5fcfa5b08",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f15cd9c0-5af4-475d-8c67-add6387ae513"
        },
        "item": {
          "id": "7762243f-120e-46c4-bed5-2e2e6fd53a44",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4a66a562-a240-4225-a159-96ed8ec54dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46e6089-7ce2-4f80-8f41-261857242e3f",
        "cursor": {
          "ref": "1be543bc-6af1-48e6-84ad-78d792ad21f9",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4eaa61a6-7ff3-4edc-9829-00c1993fc199"
        },
        "item": {
          "id": "f46e6089-7ce2-4f80-8f41-261857242e3f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d12d648b-4a46-4ab8-b1fb-c9eb40a43ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451b79c0-bfdb-4772-9d51-950f299007b7",
        "cursor": {
          "ref": "df3a10ae-073b-4c18-93cf-096d9f9d2a17",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b1bd6fa3-f6e5-4b52-8974-07b877854ac0"
        },
        "item": {
          "id": "451b79c0-bfdb-4772-9d51-950f299007b7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "39e5ae8b-7a1e-49ce-ac9c-7d493686f03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314e2aae-298d-4c66-b5ca-9522dcdeb2a0",
        "cursor": {
          "ref": "2ae9d1df-f89a-4385-8cfd-2ae8e42fe1fa",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ede9abcb-777f-4cdf-92b9-2775632933f8"
        },
        "item": {
          "id": "314e2aae-298d-4c66-b5ca-9522dcdeb2a0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e894ae42-246f-46f9-9a2e-b90956eaf33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895e5d8c-b16f-476b-862b-1fbeabd6dd5b",
        "cursor": {
          "ref": "652f8786-6f6d-4447-8d43-3b9f98e70dd7",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6f07e3ff-5807-4279-88ed-68d3141d214f"
        },
        "item": {
          "id": "895e5d8c-b16f-476b-862b-1fbeabd6dd5b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c67d3e73-4c4f-4425-b61e-f383a35c42e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e349e55-0cff-43f5-ab7d-23c15b64d472",
        "cursor": {
          "ref": "3d43aab5-e4ac-4d84-ba87-5483b97a044f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1feb11d7-65cd-4b95-811f-512bb514ec4f"
        },
        "item": {
          "id": "8e349e55-0cff-43f5-ab7d-23c15b64d472",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9db6b7f0-0dc0-4f3a-97a2-06f764c85a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855d8490-89ca-437b-b511-b3c8b8282415",
        "cursor": {
          "ref": "6c297e0e-b8c2-4708-9a2d-0918e0c9ee54",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "247848bd-1b84-4efb-855a-47dd40de9d75"
        },
        "item": {
          "id": "855d8490-89ca-437b-b511-b3c8b8282415",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f5d4cf0d-e2b4-4c87-a564-f69e1aa25fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a61dc94-29d6-4490-b4c0-d7c7f3cfb966",
        "cursor": {
          "ref": "90135ff7-76c2-47a2-a738-6cba5775f685",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "fa4e3be0-90f9-417f-9b96-9eb7336c3cbb"
        },
        "item": {
          "id": "7a61dc94-29d6-4490-b4c0-d7c7f3cfb966",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d81c9f38-38ba-4533-b5c5-d73918790359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e30b4f-d490-4eb8-9171-59ab6c6067e9",
        "cursor": {
          "ref": "7a348280-2d79-421d-bfb7-518b6a9f08ff",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a7265833-c744-4b00-ae33-e5387eabd926"
        },
        "item": {
          "id": "53e30b4f-d490-4eb8-9171-59ab6c6067e9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "831829a0-c013-45cf-8263-931b9d73b9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d8adc2-f1c1-4301-9f4f-7296c462b1d6",
        "cursor": {
          "ref": "71321202-678e-4450-b970-cb9fa3aca4b3",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "eda04b0d-cbe0-4a10-8a7b-2964ecccde2f"
        },
        "item": {
          "id": "23d8adc2-f1c1-4301-9f4f-7296c462b1d6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "41973e8d-6977-4df6-a189-0c4a89f02ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15db07b-619f-498d-9cdc-fea233e0e6ab",
        "cursor": {
          "ref": "2ae0c1a8-3ebd-42d0-baa0-307f2d8d3b2e",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "db06bc8f-9090-4b65-9ba2-58c57e7ad622"
        },
        "item": {
          "id": "b15db07b-619f-498d-9cdc-fea233e0e6ab",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "44dac54b-ba5d-4fe7-ab10-a394b47ed0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e188db98-39de-4b6f-8736-f0fa29052f09",
        "cursor": {
          "ref": "437fa514-3c45-45f3-ac7f-a0bd9724549c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6d3f84eb-d84a-4795-a4d6-46c465569337"
        },
        "item": {
          "id": "e188db98-39de-4b6f-8736-f0fa29052f09",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9edcdb92-a5a2-43d4-8ab5-46608839b508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0132c9-2e5b-4665-a000-cc9dd9f9ed55",
        "cursor": {
          "ref": "4efda94d-ff94-4e77-95d0-ef679348691c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6c0b1ed3-9014-4aec-8e3c-9d431c1cd316"
        },
        "item": {
          "id": "3c0132c9-2e5b-4665-a000-cc9dd9f9ed55",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "447e6b46-e1b7-494f-bbdc-0b562240b919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32463b1e-0996-4777-bfce-3dd512bf18ff",
        "cursor": {
          "ref": "f55823eb-029d-4af6-be2f-46ab0e813b78",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "19506765-fd69-4682-951e-6701aa433b75"
        },
        "item": {
          "id": "32463b1e-0996-4777-bfce-3dd512bf18ff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "118b9a7c-28de-47b2-9242-d93ddd0ed21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8915b0b4-d1c2-49c7-aabd-01e4c3565b68",
        "cursor": {
          "ref": "a07464b1-724f-48be-ad9d-34bc4dfec9e0",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "07f858d3-def7-423f-9760-661990f187b8"
        },
        "item": {
          "id": "8915b0b4-d1c2-49c7-aabd-01e4c3565b68",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5874bdb9-7e55-4979-b919-3181c0f4cd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6d563e-97d1-4a61-8c9b-fb25b9bd1ee0",
        "cursor": {
          "ref": "8420257e-f0b6-4bb4-8afb-7d6da4ef70a3",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3b1c65f4-5e31-440c-881c-3cc317a1a795"
        },
        "item": {
          "id": "8d6d563e-97d1-4a61-8c9b-fb25b9bd1ee0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "010da152-80c8-48f5-bad2-52db93a81bdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c608a9-4245-446c-9389-07d079128037",
        "cursor": {
          "ref": "5bb8bebb-4a70-42d5-a959-33c97dfbda00",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "81fdaaf0-631e-4716-9612-224ab84a24b2"
        },
        "item": {
          "id": "c4c608a9-4245-446c-9389-07d079128037",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "549ab561-cbda-4def-95a4-75c28ad8b431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "38383652-0a23-4bba-a4d8-280c84b0e68b",
        "cursor": {
          "ref": "c05c808f-8dc0-4897-9a06-cfeeffb860c7",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6f0b4aee-6bd7-4cef-911a-bac3b8eddb86"
        },
        "item": {
          "id": "38383652-0a23-4bba-a4d8-280c84b0e68b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d819b3de-1ba8-4c68-ac7a-516c342492ff",
          "status": "OK",
          "code": 200,
          "responseTime": 787,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e145a2-d9b6-47ae-b298-b7045b40863f",
        "cursor": {
          "ref": "5246ae17-4aab-47a6-b5e4-f96e2195f57f",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "3e68b579-24dc-4bae-9bd0-5d1ebd5ae352"
        },
        "item": {
          "id": "32e145a2-d9b6-47ae-b298-b7045b40863f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "60dd0e15-8d15-495f-8eca-2230cb77985d",
          "status": "OK",
          "code": 200,
          "responseTime": 1345,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "531d7f7a-6ef8-4cad-858d-995f4ba0e538",
        "cursor": {
          "ref": "add810bd-325c-4fd2-9f31-b6f2e011d30b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "05c2d05e-f56a-4ad4-a844-f49d19296fff"
        },
        "item": {
          "id": "531d7f7a-6ef8-4cad-858d-995f4ba0e538",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "16f87a93-4300-4e1b-91a0-dfdc6a508b7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531d7f7a-6ef8-4cad-858d-995f4ba0e538",
        "cursor": {
          "ref": "add810bd-325c-4fd2-9f31-b6f2e011d30b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "05c2d05e-f56a-4ad4-a844-f49d19296fff"
        },
        "item": {
          "id": "531d7f7a-6ef8-4cad-858d-995f4ba0e538",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "16f87a93-4300-4e1b-91a0-dfdc6a508b7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8e31e6-a5e3-49d2-9ff2-2e38ab80183f",
        "cursor": {
          "ref": "c9f7c118-7b89-48e8-ad8f-3e768e9e000f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ecee8861-6c2b-4024-bb7e-9fb021863b29"
        },
        "item": {
          "id": "5d8e31e6-a5e3-49d2-9ff2-2e38ab80183f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b3451299-5395-4a04-9740-ffcddba12043",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf43e4e0-c06b-4f91-89fb-058acae8cbc5",
        "cursor": {
          "ref": "b8dd9de4-5458-4738-b3d3-00c745b11486",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c883faef-992c-48ad-90d4-e3f80eb1366c"
        },
        "item": {
          "id": "cf43e4e0-c06b-4f91-89fb-058acae8cbc5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d915381a-1579-459c-81a4-d7a1e2a976b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}