{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9ea271d7-2149-4259-bc1e-52cf1a8775e9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "895a3fd5-4469-449e-93b1-6150721688a5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "02694591-0137-4d2d-82f3-0e403955c9a7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "49fa13d9-1cf6-4cd8-bd6e-fca82f38bb41"
                }
              }
            ]
          },
          {
            "id": "475f1597-74d3-4205-964b-a28eee6cfed2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3187ea92-12d4-42a7-b6e5-2ad267cb8a33",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "92da42c5-a7e6-4baa-9b23-82a0ba1fedc3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0f863037-6c3f-4131-8663-600acb955c01",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e494bf78-4508-4b29-9f71-6e8c280dcf07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a87b55c8-008b-45b8-ac82-3ecf0834be71",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73dfa600-f154-492e-a800-7d451f11cc6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd29ef23-7fe1-47a1-bd87-f9295fcd5a7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "621efcbd-dcde-4d5e-9cc3-42f7a9624384",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45f785fa-6384-4538-a520-a9b76506eb0d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fd476655-c5e3-4f09-b14b-0ff1990ee421",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8577d34f-3e7f-497c-a36a-39f8bbc5a6ba"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "668c2c43-7a26-4b21-83cd-8a49312cfaa5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "caed20c2-3b57-4f6d-bcbf-850acab8c7ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "906c7bdd-4c6f-40ca-81c1-ef98473434a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09295048-7a1d-40d2-916b-7c037cad8133"
            }
          }
        ]
      },
      {
        "id": "46fcc14b-b0b9-4428-a5fe-24c237882ccc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d8531ae8-d2d5-4ce3-a378-e8b730272ec9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "185ac0e9-a6a1-4f55-a10d-3bb6a6e9b756",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "416ba451-543f-4998-9101-a448b7437b8c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36a1eb1-6726-4884-8008-219b94bfe65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fb8d625-89a4-4b42-9de2-245a7b3f4fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfaf0e6-e3b0-45b0-86d0-38dea4a71890",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5375efe0-bb0b-4da6-85e1-db20b6691cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01478ed6-5f4d-4c7f-9f29-b0820ecf3c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8bff9a-810c-4e07-82f2-70fbceb3eb2c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bbda59-b6cb-4197-bdb2-e60dea421ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "467028d6-d0e2-4c33-83ca-8ecda6e8cc63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fd90778-a154-4b05-bc03-00b63a9ac967",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f39aabba-1e35-4b0d-ba52-b7e9218e699c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c99059-6005-43f8-8430-47a1282255d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cc41530-022e-4568-ae18-8c8096eba180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01465ef-2a43-434d-9f76-c72017d835cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937fedea-bf0d-472f-8400-e99dec9e8d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef60f3ce-01cc-4eb4-b444-1e57b76ac0f1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f040aa2-4e8e-4d08-a8c7-77c860511d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8982f0da-913d-4430-9676-6acc8b2a8e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4713cf38-101a-42e5-89c4-f3a34b9e33e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bfbf480e-ad59-45e6-aedc-9b03ebf89921"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "413ea44f-0713-4517-a616-7ec4bf9e7b18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5e723ab-cbc5-43b3-b856-d3147d051f8b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edc0ca38-69f6-4644-80d0-7431959fe56d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2ab24283-7b3f-428b-8bbd-e85abb719fa4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "232afd28-9eb4-46a2-8df3-2ffe3680c97d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "26cb94bc-8b0d-46cf-80d3-d62604b9ea9e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0e8476d-8636-43d8-b4d7-f88381df84fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e8ca4ed-4f2c-4338-9f68-e65e94d51bdf"
            }
          }
        ]
      },
      {
        "id": "7cfb1292-a54d-4cb1-aabc-7cb3555809d6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5118cbf9-0dd5-4aa3-bcc3-2235959ea9a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7eba5e36-ce8f-426a-bbdc-5fd51eaf166a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "db5e5c09-26d2-46de-a2f5-59ef16e459c6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f6762f-ab2e-410b-b9d4-771930282053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661d1bb1-7ad4-4507-b664-ac3e7b5da9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b826bc-a06c-42a5-b58c-06ba72798295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb5fbc9d-d4e2-4bdf-8399-44940cd4ea00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cd6f6b-20c4-49b9-8811-67f79d04f92b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85be425-c563-4b18-ac78-0760b42793db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0487de23-a66a-40f5-8064-bfcac514995d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbb7951-50e8-438f-8bd4-3a0f88760e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba9063f4-a5b9-41bb-a41c-7ca12da66e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be713c9-c5e0-45bd-93e9-50a274e48c9d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c31d280-ea03-421b-9e4f-849c1c01b446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ce5098-2d61-4d28-945d-56564a0f024d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08673d46-2892-4f8c-808b-aecd149841e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c9c6457-3750-4503-a197-56e73380ac75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169dfb10-61b4-48a3-af3e-1d7ba8d95bfd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f4471e-7066-4e93-92c4-1367f63df3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d3907d-0443-4efd-bd9f-0e12d61ece78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56ed9c7-ee54-498a-b16a-961f6612c611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26829830-bd13-4e83-82c8-cf14b1b1a92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f677664b-26f9-4f0e-95b7-b6b24853a946",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975ecdcc-d880-48a2-85d3-acd1126a8eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344741d2-6761-4bae-bb42-76e813a1a957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed4b212-d065-454c-9789-2f8c9ab9cae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "610a4315-8f18-4728-b5b4-6685ab5e3e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c24c13-4a7b-4b32-b66f-47d14a313476",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7e28bf-6215-4272-98ea-8a0131ab0e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abad1872-cd72-498f-bcf8-f781821ee93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990617b5-51a2-42d5-a8cb-dd0b6c48a94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dca23d1-cb9d-4b6c-bbb5-eff10616a030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ce34db-3e91-4827-a271-e738eb3074d5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fb4f07-1d84-4b45-b0c0-5dccb8cb361f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e94b3a-1835-466c-b5a6-9999116e681b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b981dd-05c8-4998-beef-4ca369c46db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3afc0dc8-fb09-44b0-9e75-bed5489e3564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7194f4bb-0262-4a12-a5e3-1103cd3b718d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63097c92-7218-44f6-abca-aea0908b9db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d4c3fb-8652-47ff-9076-75b4022acefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf07fcb-fc29-4be5-aeae-6a44d573faab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dfa756b-bddf-4612-824b-cb4a887a5413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4af056-6b48-40a4-b8b2-5b9dfe448755",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441301fe-26fe-437f-a13b-176f1b702d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50decd4-7644-4a02-b086-91a29018afdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f317ac1-b18c-4fa6-9eb2-80c35617bff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f0b3405-3bd0-448e-9717-1e4c2319f4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db52f3f-2083-4600-9aaa-2d8a25758519",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c930ddc2-b389-406f-b56e-7e880804a356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d108dd-e3de-45b7-a92a-5a1c92202d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180ac037-9398-43ba-ac88-e0ed320ae062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf4844c6-7c59-4330-82be-f2da1c625048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efd0329-77b2-4ad6-b848-6a2517a94970",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854452a0-92b3-4074-a979-a9c5944acc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1adbac-4d20-4be8-b85b-b0afb7325736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daad3f9-7d06-4725-a7fd-5d41026a7940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a3e82c-1a1c-4f5d-9ce1-5c8480cdba53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d589e1-4d89-424a-a903-138637658cd8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc9ef48-8166-41cd-ae51-4ea5b1320ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0eed8b-8143-490b-997f-4b01e91d239c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb6d331-0e4e-47ce-8792-2db73bbf0e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd9c441b-54df-447e-a991-f2c22fedb3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dadba6d-b52c-4720-9c1d-8a6c1706b30a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83fea91-a7a0-45a8-bc08-8085942f3968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3535749b-52fb-4cdb-b452-3ca7ed1172af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b27547-3242-4567-95d1-c93f26a301d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "590ddcab-a8fe-49e4-b6ab-1be89520950e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78052346-1a88-45f2-948d-365d550f9f89",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0187fa-1ee6-4989-9372-d7f125f19372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d6e7ad-dab3-4e56-82dd-337e274cce0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d573dc03-e86a-4420-8807-0c27c4bb1c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bba0aedf-dadb-44e4-a2e6-f41b1d940862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8414c2a1-83c2-46b1-b67a-6429de19b1d0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dabd7fb-6ce9-4981-8457-7b0417fbda4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe46ce24-a91e-4411-86ad-20263ac7d9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbc1892-b17c-43df-8abc-79f6a41e75ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "378c9438-4327-496c-9ffc-3a6d7c0acbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca9b241-e293-4edc-9165-5a396d2705cc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c30efbd-d377-4ac7-8489-c6de8775f259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd10c1d-44a7-482f-a8f8-dc40cdd359c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161617f9-1e6b-416d-a262-98ecfd4582e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9f1a6c7-1ec3-489d-98dd-71a0dcf04a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487c3fd8-1ab1-4502-9173-089c6b9d9c50",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d069331-5947-4504-a8ed-d21fcfaf59ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d066f58-7538-4a0a-889a-0a981a43e0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbec793-67d0-4fe1-a54c-b243add9bec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caeeaccd-fcd3-48c6-85ae-dcbc1be844af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220a7b86-593e-47f1-9321-8650475f2ac6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4132238-017b-4dee-8fd3-9a5a955f16c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2881d450-177b-40fa-b458-f436b02e7ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f62530c-c99f-415d-a010-30f9e84670cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fa8e72-3ff2-4d09-b869-5c196a20bf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2a7d40-4df0-41e7-b26f-2d48ceef69df",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ec26ad-8035-417d-8808-3b82b1c64595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c333da27-7e9a-486e-a2ca-3e18e3285696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21adcc2e-e491-47d9-baa3-66414c2e3d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e88eca4-d129-4dc6-a34c-74e3de08919d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc984c6c-ea68-40fc-9440-b20a860661a6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ff4070-215a-469e-9731-e11687bbe7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0627676-d023-491d-b24c-77bbd5feaa23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ab00ca-39c7-4b0a-b83a-551ba5a62724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c4e120-5793-4620-a039-3d13bedf7f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7170cbcc-9ec4-4cb4-8cb1-7240a64d1119",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c98e64d-c31e-45be-9c99-528a06cf298d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f221d76-eb8c-466e-9c17-f3cb80f64ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0447fe1c-bd11-4016-98d4-87cc1e9e625f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bef7754-24de-4d4e-b02e-3134ccb45657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838ccb39-ef0d-404a-8f9c-8a9ed69b19aa",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8368e5b5-a66f-4de0-84e8-3a1176274646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6485082b-13da-44a1-b698-1fac7ff1091b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed69eed4-333c-4809-b75f-e5c3379d474a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aae0c10f-20ef-4938-a260-cf2c2aae5242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c980f34-9f6e-4649-9f8f-c5cd2526380e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4370f0-d9e6-407a-b5ce-cbcd482e07e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c404d9-1e9e-4511-972d-c1bc5e32b639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80538e2a-dcad-4d0b-9a4e-e9d87b614b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "104b3d79-9086-48cd-a0b6-3255d6df7f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbbaab7-4182-4c37-b933-539d75999073",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcce3b1d-74c1-466b-8108-1511193a98ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca1a85f-26ec-4236-9636-a9fa2a0fde5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f94452-b039-45ef-b380-0706da2372d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd674d0d-c7f5-4296-9832-145d4edfe719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f83353-c30d-4b9a-9f42-c09565eb7878",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9b81da-0879-4208-9152-c12d97f56fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b370e59-6d57-4469-ac51-81e7c02f9ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee5e110-7425-4f5d-bfc5-8d719f5b9b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a593531a-ab7d-4429-b659-703f70a8195d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bec244-f83b-4aca-854a-9a699e89236e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fd3a3b-2f74-4288-9ab1-6714d6610b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84fb7c50-6ae7-46c4-bae4-8ea36d56df34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d564bd-aa22-426a-ac15-1495a2465c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "652434d5-b201-4abd-8da2-ffa25989bf48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec07799-5ee5-4968-aee4-64d574be5e29",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e1fe40-43fb-487f-85fb-144fb32c86db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1182e9da-63d4-4602-89dc-90444fc49b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a29947-c2c5-4230-8839-3d15f0e4501c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fae078fb-fcb6-4de2-ba0a-5a6b2d47c663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ea1b85-c133-4857-b0b2-73b632942b63",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f39359-c204-4c34-adac-8ae65330432e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a599167d-dad3-42a3-8e3b-85bfc38cb2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9b9485-4c22-4f54-a7ed-ec33c1b51d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "350165b0-bc0e-4d22-abe4-d979c433d7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17c2170-c5aa-4e30-954a-bbe4239e9409",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c7ccd6-a92e-48c9-81ae-f7dbbda797d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e314082c-6ff6-47ca-a787-02c9cd39be86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8749ea5d-52af-468d-8792-fbc00795e43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc33473-1aa3-4831-8dc6-cd0ac391bec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5eb798-a1e7-451c-a814-fae4d50e321d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba1b645-89fb-40b6-a4e2-9a14da98a655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d47a85a-013b-4611-ad2e-0821e792a190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03c68b1-70f9-404e-ac44-5e6ec76475e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4365e2b4-25f6-4c18-8cec-3d58712705fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a494819-d158-4566-9858-0df3110e09a9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ee023f-e2f5-4d80-8ff7-3dfdc7a1571f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b897dd-90c4-4275-a40a-911513681d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dcb68f-2d1b-4d02-9b07-8b5cfff91bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "34407180-d15c-4b8d-a029-a1de2285318f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fb4cc9-200b-4dcb-b0eb-9e1060fb3edd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad7b72b-b523-4504-a713-2d2de783339d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a7922e-8885-455b-98e4-79cf46eab019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c63915c-2e1a-4922-93ba-087d38185f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5b7b2e-0bd3-483d-b574-1f96d78069ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8023b1-7e6a-4581-af41-cc7e7acabc22",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414e5afa-53fd-4765-9ac6-57ba5548bbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64381a1c-2206-45f6-9aa4-02658d9366f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a2b4d0-72de-4d39-a217-db22a2788eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "295fec3f-2c3e-4b15-9d02-4446ae703e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121acdf0-a8e1-4675-a0f5-5986860a5285",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa20c8d8-ce68-4505-b78b-75aecda35675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe24963-104f-4069-9737-469c0703ccca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d7d6d3-da1e-47bf-a3b2-646730a5e5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba0ae75-ddbc-4891-9fb9-c846381a81e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f64b09a-448f-4164-b397-2548663384b2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef1770e-3b7a-4f03-983e-7d2aace23153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbb2930-4ebb-47c2-aa79-46ea60f1a46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9e7484-6818-41d9-b8a6-0af2ad67f8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "44d6b679-1785-4494-b055-2bbfa02bd61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7453c07-eded-49a6-adb8-46167f9053bd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759c929e-096f-46a2-9aa4-4c4ba19c6274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f874b740-8a7f-41c7-b4fe-e6d804229f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f1e9cc-e234-437d-b15b-f61bb6e4d8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "892d2257-77d3-4106-9abb-4a15cfe74ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d16810a-0f8c-48a6-9e89-612ec1f1dd7c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6975ad8-3485-4dd8-8042-33c32387b3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6aa0f4c-b7bc-42dd-881a-d07f0897c769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf8d2b3-39cb-49bd-9a8a-8d788b521b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c96e85-b299-4ac7-988b-c971047bed4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae690ad7-f87d-49b8-9752-e96849e4a8db",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabbc3c5-245d-4369-97ce-c5ac85e16fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0df580-ea38-419f-9207-b4e925620f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e00995b-2940-43a1-8d3f-d0b7aa0eb12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4247f94f-787d-4bef-9c56-bac606ce4d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43910147-5f7e-41d9-93e7-c07a0cc2eac4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efe3d7e-0b2f-4280-b6ea-694c7d3c85fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c891fa11-2eba-49e8-b163-42ca9cc2d62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e2f361-eb22-4d66-a3b2-d0af5d84061e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e459b85-a388-4fed-b703-000b9faba555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3484a344-550f-413a-9939-5953e70f42d6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867f2177-8928-45a2-9fd8-1a4a1adf74fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d0c31d-5152-49bc-9897-6bd2a221c91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262ce4d3-6c44-4456-93ff-eb2e5f3042e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4aaac44-584f-42ec-9d31-3333242e6826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71156957-2b8f-45c1-8483-e2ed836c3320",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f733de-ee43-481d-93cf-9fa4f045e203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24bd37b-21cb-427b-9583-96248113e88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a914b561-3d3d-4f67-8dd9-95e15a20fb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee03ca23-1545-4d8d-9223-751814be2cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4000fe-ce4c-4b68-ba21-aa8575d6571d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b295c915-6531-48f3-92ee-63048d7b1623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af38e663-81a0-4fe1-a239-ab8b4add7b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f12d78-357d-4af1-875c-6fd4b3a4fbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9d7cc0-c387-476e-a955-5fda6cf45d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597e2f61-cbb6-4374-b303-2dd9633787d0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603e6f6a-afac-4412-b719-f09d66585e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04769679-dcdd-47fc-b605-c11370928ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee5a793-d1f2-4193-ba95-5f7b0182db0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d6f4fb-fb49-4a2c-9b35-94b04827e64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29d105c-39ca-42f5-a17d-e1cc578ab86a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf0b4e0-291f-4094-bd1f-e810dff5db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a20ab01-6a70-4bd4-afc7-2c622832620e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8bbfa5-3d4d-4385-a3e6-86f5ec27d5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c40ca8b0-1cc9-4c1a-862e-e35b2327e2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670ea1e7-f60e-45e7-b4b4-52af36ad94a1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6ce510-6935-44e0-bde9-aee5939ab457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6c350d-522a-45a0-a2b1-e0f79e0c65fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ce6737-87b0-4152-a88a-f0357baafa6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eee5ed13-dbfb-413f-85d3-0f4db340c6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd73f96d-9f03-4f48-9afa-c1e2c0cdafc2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c80507-6a2b-481b-9b91-cc95ae748e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbc9a6e-a6ff-4aa3-a98e-36e3282e2b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0d40e5-9d2d-4770-b1bd-40f7dde24864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee6fedc-1348-474c-9515-6f8c87a57f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15a5d7f-670d-4a02-9382-4216b7bc987b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f5842d-dea0-4f18-8465-7d67f7c49b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92bd28e-7951-4454-8188-165f4babf3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbb6f38-f241-401c-9d4a-26d037efc3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3943655-dae1-45a6-8100-77ec33659330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069f7be7-12f1-464f-897b-3a6d7964d036",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b42c7ae-ab8a-421b-b15f-36c860fc4602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01643ee2-695e-473d-85ef-e66632a58491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc4a9b6-ab17-4531-87eb-cc6d56440e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71d9c78-5cfc-449e-949f-930f1e6833de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197d673f-0b9b-4aa8-b06f-12d26473af0b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accd66de-c5f0-4570-b649-7a19fb326038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd39b50-83f5-41a9-9f28-ec99f031aad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9d1688-16dc-43f1-8894-2e0709ed13f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6355a4b-ed8e-4703-bcb3-7d666fca242f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b348fcc1-5184-429f-8481-094d8a8fc269",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a7df61-7d09-4e28-9782-79e004094c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6b4893-a603-4b5b-a0d4-d0c23fade2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5034102-15c1-4b23-9d83-555ab605975a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32689726-d91d-4a64-ba16-2ab2e6873e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b8af55-3633-4c65-8b92-927cf0a11087",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276506d8-663f-46a9-8007-1f222c3a8bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fe5d78-fe43-4f9e-a9dd-4dbe1f812ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135e70bb-a38d-404e-a561-c243a4cbf1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "522af8c4-f6cd-4b48-bfae-807d96581023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7afb70-eb71-4b92-a650-4d41e5f4d111",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc567b6c-9705-4e95-bfbf-3c516cff7987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37985171-e7db-4a26-9baf-633fe45b1b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37873c89-6a78-47b1-873f-0e2c095424dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "372b2329-d141-4f81-a626-554d0d65ff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fbbff5-d50e-4c51-b0c6-4768b87dd550",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1b85f5-1cca-4e50-85e1-a748f80037b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775a2cf0-ecb3-40ed-9dbe-f32fb39203fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597486e5-d56d-49c2-8c4e-abe4fc483050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf59d642-482a-426e-8f51-5a89d67cf3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7964d154-30e1-42dc-ad04-59f9d92dc871",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31883796-0ab6-41fe-b325-8cfaf1001834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef2b7aa-b2a5-4b05-973c-ccef061b4271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f1937b-c4ec-407b-b3d2-235dc1afa3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ab6281-002d-43c7-ac1f-9321000202c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60f3902-2a28-43a4-b59e-2024d071551e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a557d1-60c5-4852-9249-dcc72586761f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70039b3c-263a-4abe-8ab7-06c3721f5d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c83e63-14f6-4468-be63-6992c55d1aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a376dda-c864-4aac-ae19-ff1b7a7cac86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c0452d-0b64-4624-9ad1-c969a3f1cc84",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5480b394-9805-4f1b-aa8f-a5db7b442b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77158e2-5c2f-451c-a681-1cd9fc2ede7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a236571-1ee0-469e-995a-8d4a3e39dd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b783cb7c-676a-40c5-938f-2167bd76a77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa36ca26-1ab1-4f6d-8637-1b553d8420eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e951a65-23c1-4350-a785-889e90fa4758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb35eb68-d979-4665-9b9e-4fc04ada34f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68edabd8-bf8a-4509-b195-2d5780d1a2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f33d98-46eb-4266-b328-041f8265be7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618869a0-55bf-483e-aab0-64bafe1c4998",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95b121a-3c5c-4643-ba89-6194572251c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa51bcde-d7c4-4f7c-9d37-d8d81072aba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6668b14f-1b0c-44e9-944c-09c0aa287e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "78343bd7-3af4-44a1-922d-3bcadedf37ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3bae55-e414-4b21-8d3e-29a392efd86a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea48f6b9-9e96-443c-a314-81ce078217c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bc20e8-555e-4e7b-920e-c2a92485e2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee61eb06-f4b3-45ef-aeaa-600ba4a00f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b77f253a-e732-4e46-a3a3-37eb6d1cfa08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3abdfc2-cb07-4e23-b03b-6df29462c634",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d153e4d-6f04-4db2-aec3-614e38170831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ab5d54-c115-4dc0-b7fe-14dee268b098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1c9ddb-df95-4500-8f2e-7e43a6b15163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "88c48c98-99bc-43db-9ea6-562a4fd3aa14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2308e26a-1742-41ce-b5a5-cbbeec12a27c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eced553f-d70c-4c19-bf31-a8c73f485d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b416681d-f86d-4cb4-8300-5763777c1f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a07a13-02a9-41c4-b026-5648dc8634df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f0d731-ae15-4520-8fb8-24d613671074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2836c185-fa31-4280-902d-b010c0852ef2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bde5db9-847c-4048-9931-46d31bd34144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ca49cb-e483-41fa-b2d6-cf8d5d876f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a68df91-57e3-4308-8fb4-ccf690ad68de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "10a69a05-0e61-400a-9714-b42755b1691c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b709097c-8e30-499c-9aa7-9ab597265243",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68122b3-f19b-4c30-bdc7-78fdf8aec00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ef3560-0749-433a-a853-622bb82d6fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5633d2c5-beb6-40b9-8b8b-9c81eecc0e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f40a215a-fab4-441e-81b9-3334f26e0ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c87217d-34a4-4727-b4a4-667525da84c8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae03d384-209a-4590-886a-9b78fb4c16b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0500785-64a0-420e-92e4-88bd0c42ff7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f02f660-22f6-44b9-91dc-e3f90baf883f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf11154e-321b-404e-87a8-1b7a956d75ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ea1e84-df3e-49aa-8c40-20500ee0952d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc7a64d-9d2e-4311-971d-31d97fbe84db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a0745e-ba36-4a8d-8197-be57edd96663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22adbe0-4781-430a-8876-20fb0adc2999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0cee02-18f4-451e-9c81-180118a56230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da47595b-7101-495a-8bb4-9f11c7f8eef3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb11fb38-dd5f-48a0-ba0d-b0e37b8c0b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5895e37d-3cdb-4973-9123-5e68551af3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdacf3d-e390-4497-847f-b156811ea5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1996e635-7d43-4510-9beb-ce3f6b43c049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845d92af-da74-4c38-a788-9527ceae3b00",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7630560-abe9-4a5c-9afc-509656b14db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4adf3cc-9fed-4781-af40-3349a620a23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da24d86c-fe92-48dc-a2c6-0f3161ed558c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74591594-0b54-4af8-bf79-4f58fda7d792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138b2bdc-7687-46bd-b6a9-15af327307ed",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e682eacf-fe10-4d2f-9a82-2a41446ee7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399b4218-eec9-4624-8f61-3ab0f4de3905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f237e51-1c16-475c-a046-67465219f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c6d257-4b3a-469f-a939-501318cdaa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98a8601-e9dc-405a-9cef-936d1fdbc280",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683797df-e66f-4547-abfb-23a7ecbfa319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ca2d6b-5ec3-485f-9bd9-c13935303754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25a3b78-0a03-4adf-a3eb-18fbd6b1f0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3366915-009d-4c10-99d1-3ad386c2d06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3e689d-07f6-4daf-9685-3056b3002331",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c06743f-4860-40e3-8a2b-44e77e609e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b03eb7e-9fa7-48a6-97cd-e550001d064c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c425476e-6bcc-4be5-9c46-94c48796b5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "162e11f8-0708-40d4-9631-43bf3dd430a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5d8c06-71f2-4884-a885-2c8d767ebd27",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76815af5-557a-4b69-bef4-1cbc5c650f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a48f2c-2f21-46b6-859b-1a151040e2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7856c12-1717-4653-b4d9-e55239dd98e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a270f1-95af-4874-8716-fb866baf81e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed95ee4-6102-4eeb-8c35-391d1d3b5945",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a80f440-84c8-46af-8b6c-6d65ac3bdd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb081b6-424b-4a1f-a399-10a58d8513c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5117f810-2ef0-461e-be57-61de26c41074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0783ea3-f57a-46d7-a21d-e56b00ff441d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d5899d-156e-4aa5-a163-7bab2a4e5b66",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cbfde7-5b68-43e5-b359-df53f4ee6312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af781e3-04fa-43d6-a9a2-4998bcbf4cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28861d34-4848-42bf-b83f-0917203aad8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed15aa61-aaa1-4b09-81ad-fcd70f1e3138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316cc62c-21e8-477b-b42d-8203a1690a6a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60654597-e3d3-4280-8721-91d94011debc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b502e448-a926-488b-8292-4fe75b8355de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6796ce-8c43-4140-9ce3-03dd4216e711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65bac1a9-b059-480b-93ce-cb7be357493d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9fbb4e-0fdc-4ea9-9cf9-f76beef0b6e2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368f328e-e919-4803-bd4c-209937f087f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0adc0788-6046-4d99-87e7-eac3b1aaba69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8da2f96-aaa2-4b38-a93e-ea63acabbf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8866cab9-d2ec-4728-bda4-9fcc61629f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94117e72-8138-49b3-ac2e-f3e5a9416afb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3266416-c9a0-4e3d-9c80-010fe3b5f635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ebbf28-d07b-47fa-a099-c6729362f66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6594110-603d-4b5e-b3e9-3a1f9445af45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "069f44a1-f825-4433-aaa7-7abfcee0717a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e761a00-538d-4213-a311-ab8f1b92159f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808d31b9-ea3b-4cbb-927f-5000c295f2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e15b58-9604-4fae-bebc-357806cd5937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5f73a8-3ed7-4679-8618-5ae07f363635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5895a74-1331-4794-b348-b72038c90c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a5f7fb-3fde-485b-b698-d2c6ac9338a4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04888964-b993-417f-a0f3-4ab214bbc53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a313e9-0d97-4eb2-9a15-929243c2da0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e674d7c1-9db3-489b-a911-8f56931be1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3630ca7c-3a3a-400e-8b15-31c127d4eafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6ab6c4-702a-4753-9d75-5a916db220ae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59db7e7-d250-4689-b9d6-6a28c781b68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e27f81e-691c-465d-b050-c984d77c0049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963d00a3-b19c-4add-8155-5de77e5882db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3378a606-4ce3-4181-9fe9-23ce6749bae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777f384e-868a-4c46-aa55-76c3093a1c2c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ae293d-a149-437f-9a42-5f4f92728c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da51c46a-dc90-4d88-a3d4-b7eea01ab359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a0db3d-47f5-44e0-8329-18b36bdb616f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6639c1-6c03-4882-8635-f259f45f7e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08136e73-3097-4ffd-87b0-23b0b9c6dca4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa7e753-0d0e-46a0-8a07-b33b89a0f63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13125d01-d8a4-4d7c-a585-81cbe663868d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce02e37-72b1-4ed9-8bbf-eb13fc433b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2d73bd-b28d-48ba-bec5-27ddf6add831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4788254-4621-410c-a1a3-26668fcfbe1c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77900aff-a153-4187-9481-2a1be0cc2d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237fab53-25ef-4a02-8f21-ccb695301969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5bb267-2482-49db-a3ba-bed534ef3e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efeef460-b745-4ff9-beaa-4712bbea35fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df5cec-d073-4c35-8cbd-4f44365f74e1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321e7843-344c-4460-ae73-4697eb99e4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f95924e3-9abe-4936-bb83-2e0bac5f9a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d269de05-64a5-4ab4-b6b0-eaeee3034b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4bd021-1856-48ae-978b-828fbdc77f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bbd020-2b6f-4294-a124-12508b74f64e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69e6f40-2710-4da7-8c72-445c162712e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b28b6a5-ce10-4cb5-a537-0b146cd46a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e5fdcd-aea0-4def-b4e0-732477ba58f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab591d9-afc6-4b38-9941-28bf2cef1291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac74bf9e-69c8-4f3e-9ec6-6b7668d0bb04",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd662725-d89d-4b4f-b3aa-72f3fefd80b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f229ab-7eb3-49f0-969d-315978ec8890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c2c40d-3eda-412f-86eb-af95f297b81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f09fb8a6-48d7-41de-9843-ed8b7e67443a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa008def-075b-4729-a81c-fe798fc80fc9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90666f38-51ce-421f-b601-9ca485ed0d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52548f49-3eaa-41fa-9381-17fb7d89ef5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ded796-290a-4262-b7df-fa297dee6af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16439834-0ae9-4536-8231-3b7bd98d3327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33eee2dd-c135-4d2e-a0f1-ab91f0be9f8d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056cd550-f8d4-4fbf-a942-d4039a1aba07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d641e0-66a8-4d93-b3ab-f947724d350f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4161bf16-1674-4ad0-ae3f-2c7e0e15b9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c9b051-6fa0-44b0-ae0c-eb7134ef66c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27996f5b-d1e9-43a4-b6e6-899d1a2e7df0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69694719-43c6-437d-a685-aa8994acaa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b118d8-6bcd-4b14-9e37-b77de522d4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a6802a-0377-4c66-b89f-484c42b15087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c287d0c-f2dc-4e94-b7e9-104a8faece50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c73a69-9542-4fa2-be4e-27f315edf78d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67604609-638d-402b-b0cd-902d19d79dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e386461-58d7-4155-b3a9-423b769eb868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caaa4aca-ddb3-4162-9009-e07783c2ac9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "364b0f1d-9346-43b8-a24a-b0ee0238b5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da799b16-1869-4225-a264-68c07549e42e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d05f99f-06db-4b1e-929f-805ce5176fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7dc231-7894-4a1c-80b9-a11d9958633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de39d474-276a-447b-9f05-7a97c47a3488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a85d6ad-906c-4a89-b6de-4a54e0736a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c821b-0415-417e-8001-f5f90eb2ecf1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d3e32e-efdd-48dd-b9b0-5c72ec600e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e2a29e-9ad2-4d44-8762-b2d32e0a6450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643d6ca1-5bbe-4f4d-bfc8-f59bae0eaad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb63781-8a4a-4c01-b32e-097e061e586e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248d8796-235d-4400-a80c-c71a8e1a98ff",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c7a3dd-4d46-4e4b-95d3-877404a7c5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d774ca32-bee1-44a6-8730-3eeb56f6c1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530d6597-d7a7-404b-aa58-d51ea3905dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee08231e-8aa1-4b0d-8b75-b8a1e6c3bf2c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c57e98c5-9f52-4c82-a405-cf537cbad06d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fa71c6f-5a14-4eae-ac7b-f2694e21f915",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39de463-cc25-478d-8098-16526b91dd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97e258d7-b8dd-4146-93e4-49c3fa269acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcf3c1b-8aaa-4d8a-8bd8-987de29d6658",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7d34a2b9-6cb5-4fe5-af7b-d199066b90ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b95f01d-2113-4ec2-8b4c-ac96f2933657",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a3c9f8-6cc9-4449-9ba2-2879e400e78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f73ef4b-2174-44af-a139-b0f4646192f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6d0643-a14e-4322-8837-463e8e863b37",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cef7b8a1-2227-4ddf-8c08-7dbdae0c6783"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab840012-0a50-4eef-9810-175cc59bec28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8eb77664-6040-42c4-b650-f2fdb4aa01f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "272c4280-16ae-4f3e-9ea4-f5833f65aacd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73ea6c09-5cbd-4f6f-a5d0-dd42e6c601c4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c6bd6c28-b217-4139-80db-a70a0db39185",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53a8fabb-779f-4048-a477-0af94625f3d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ec66e64f-c964-47b0-b362-b62715a78124",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a151a5ab-576e-4368-af2e-2c9a3a01d463"
                }
              }
            ]
          },
          {
            "id": "ea0e174d-051b-479b-a841-b493abe68558",
            "name": "Positive Testing",
            "item": [
              {
                "id": "103cdd6f-a413-45cf-9967-b81f7d944d41",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d924cb5a-c352-42f4-93cc-7e9eb28c8e3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a0992b4-6970-4cbe-84fc-52069eaf3db2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5b2a7cf-1baf-4399-ace4-732984ee87be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f3f8341f-75db-4338-97ca-bae3a246cdc4"
                    }
                  }
                ]
              },
              {
                "id": "16c533c2-053e-4df1-9329-e6d0a44b6842",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a48cb87-1142-4d0b-be10-1079d4186889",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e727e46-d871-4201-9438-aceb4043b9b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5893184-a8c8-481a-be77-1e6518d9c0ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d885c11-30a6-47f9-8781-68946bd2dad9"
                    }
                  }
                ]
              },
              {
                "id": "255ece2c-7cb6-4fb4-86b0-401b44f6a60e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4db2f484-b071-4c7b-afeb-3dbb3f4fbb82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "238366b2-644e-4243-87a8-0a583ae96c34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa58e686-470d-425b-a341-c16eb5e0b82a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0426c8bc-fc3d-4d30-9dca-b2cea29ada31"
                    }
                  }
                ]
              },
              {
                "id": "b135564b-089e-4a85-acbf-2cbe467abda6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87c54d6a-93ca-45e5-b550-3eadafdbbe93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fde42142-b3dc-46a6-a48f-5909997afefa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ad104e6-f090-44d5-a48e-939e83bcce4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5f1435d8-c8a1-4973-9351-56791bf7e7fe"
                    }
                  }
                ]
              },
              {
                "id": "c2c09c7f-c063-4e9f-aba7-8b99e850e0c3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd795727-7c50-44b8-8cec-92a516fa3a21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e7c42e8-f183-4b19-b3c7-0c0cf2f5cdde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2957dc0c-085b-4641-95c5-18e7d05db746",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "035e7d20-604c-44b4-95a5-14e416c60c23"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f76f4e4-6c35-4253-baf3-911557a68577",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fecc06c3-b5d3-4bd5-85db-8ee669d68183"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e9462f03-fb50-4239-93fb-837ddfabe88c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c7b925f-0de0-4e44-9d57-9ad212640fc0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b2e2a5b-6926-4a6f-91b6-9ba9d15c3b9a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3f8aa0a8-1fcb-484d-ac23-c07142bee834"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c33a7b67-9168-4670-9009-d7036ea75645",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba58944b-d22d-4c37-8bd6-90cf1a70d7fd"
            }
          }
        ]
      },
      {
        "id": "3b2b7a1f-ef59-402c-8d4d-a04167fbc389",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9ea7fc53-db0e-48de-bbab-504212929643",
            "name": "Negative Testing",
            "item": [
              {
                "id": "286ad663-408a-4470-80a3-609fc4c6f897",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "19b6bb77-2f10-4dbc-9579-f8027bcc9d68",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a854d091-ec39-49e5-93d0-da79e7aca1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc096ce-9e4b-44a3-a06c-732f536828b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da65a51d-3837-4b58-919c-4c4fdbc7ca7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "44701e9f-c3dc-4728-b0bf-9ce921f71774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9754782b-8219-4abf-8f12-988eeb92ee75",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5c07f4-73b0-48ae-b6c2-44f5e39cdbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf5b872-0805-475d-80fb-8c41cffadb38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a74c085-16d8-4766-af27-247dd2a0b84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae60131-b50c-4d16-b427-092cb67e6437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a179b416-2409-414f-a60e-c8c43fbdf813",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23252aeb-d2b7-4169-a30a-418c955dc29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df411f37-2ec5-44cd-ab72-e665c8c21431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2e2d10-d43a-43b4-97de-ce4c24beec12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c1806a-c6b8-47a9-bd46-9631b00ff422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89c2275-26ce-4328-8cff-e0526e5a28ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8759313-9968-46d1-aa9f-118c29ef59a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb944dd9-29ed-4684-b3fd-80e5acd95f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ade0a6-0d7a-4cec-a079-b2cde8df12f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a85ece-4c88-4344-b1ba-444bb6b57e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2658924-756d-435a-90e9-b036287d6f26",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c4e61e-5e15-49ce-bd63-d4d10d0ae00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d38949f-5e0c-4771-9460-77364d78a1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958c0f5b-aa57-47c7-ab32-647d2044d952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a7d3df-d2a1-4b27-b14c-5dee4af5b439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ce9ca5-ded7-4c53-a030-407e3376c0f2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2458341f-f756-4856-adb6-217341b8e119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfcfd7d-b8f1-4172-b203-2890a6926522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95caf5e6-30aa-4918-8942-29d80e1078b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa24f8d-41a1-4040-8ea0-a4c78308f037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c44500-ecad-464d-b7bf-19c95acf3e2c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b167952e-5b3a-42c4-a6fe-9deed899ba47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1038ee1-7dba-4aba-9399-f4a592421cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb49e2e6-b917-48b9-8476-06e77e51f9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf87611-563d-4638-ad86-a7b08cae5742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fc7b22-ab91-47eb-ad30-4bd8f4059e3d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45536cd-f7a6-4bab-90c4-678a5abb1fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ad38fe6-1dcf-461a-9ba3-0d9d9c3c152b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8593fb8-35d0-4526-bd1e-ece1b1c2cb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5163b411-2d22-4136-9914-11f93eec64b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0a012b-6456-457a-b0fc-88fb8646ba82",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d153e9-7855-4e99-a5a4-ef740816182d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323c7c84-e3b5-4684-8427-12c5102ed5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d903b29-c4ff-4a7e-b11f-47dcd234f349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cd747d-7fdc-4cf0-9002-dbdbafe46cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2da283-8fdf-4232-8b7e-bbec8bb80a0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce1845a-b116-4fde-b59a-66824755aac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8832a5-ec84-4737-a1c9-72e1e6ae2179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81a6f88-7384-4aed-b7f8-a426b8d12c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0e9787-b7b5-424a-a1db-dd23ac661035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979d5fab-b36f-4ed3-839e-a7fab2fd085f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981d251b-19e9-46e6-aeda-9f3a7fd3f6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1a9cf8-9b2d-418f-9c1b-f0a99d6c541e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b06804-faf2-456a-858a-96daaa93783d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "609a2405-815a-418a-b4dc-23d14836d45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14debb55-c487-4525-9edd-1705ad623006",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1142f75-03e4-4562-8548-4430560f0bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c836cb-38f9-48ca-a728-94bed7b2b272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d365792-bc5e-4ac9-809a-693f65d242c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6791716-0cb0-428b-b5b6-15bfe8439835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfee315d-5b80-4aec-baba-7207dd6da765",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634d57d4-0957-450b-8247-fd3d0d427cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977c4970-f1a2-475b-b017-bb0c1bdcdf95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1e8a90-d98b-45df-96af-787d0c53adf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e51b80-2e6b-40b1-8335-8213b1c51b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b2089d-2b05-4d0f-bb1a-369e99f2bffa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c2ad94-49eb-4212-85ac-d54b0f445714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ff400d-a880-4cd9-8984-2ebd69c4a224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fed7926-d909-4fda-87c0-d413b0b10589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6869da-c7a1-4f7f-94b1-b02006aa1863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbfa99b-3845-495e-a824-2a25a3bd89b5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ea0a6a-4727-495c-bf4b-fcccb63c9c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71978623-b590-4105-9c20-e96b48a86850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ef5072-0fe8-4903-ad9e-d43202cdbeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7e0bc53-67ad-4ecc-9c7b-6e6ff3feb6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9808f3e-f1bf-446f-9825-0aa13a146a50",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfc186a-b5ce-4e92-aa36-a977f2ff25b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12725d35-d4f8-4b56-a095-33e8825ed610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ecd38c-e3f6-4346-bd48-6cf2834d9e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ccca0c-bca3-480f-bfb5-3e92c5384ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d3178d-6ec6-4856-9610-726ed47501d5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43aabcfc-1355-4772-b6ff-3e3c08f4b6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5982b79b-62aa-4c6a-94c0-e019bf59d1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bd38e2-93d7-4cff-8d7c-17b94c45980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "48d99cd7-9ee8-402a-847c-7e0039d9ce50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f316fa19-d899-4084-8336-668976a06013",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3ad301-3f66-4364-aaf9-f5c74e4e8957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a023835-d343-43f5-a1b2-12468945456c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988968f2-773e-4182-9206-d31870c256c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1266d790-76eb-41ba-affa-c82073ee486c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d3ee0a-1fd9-4dff-9ef9-7bf10648ab30",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0594c0-7595-4bce-8aab-8afccda95227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc9c56b-759a-48b0-8f7d-6b9971900ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41496f3-cfb5-4847-be77-df1418b5165d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "226e8606-34d9-4ca7-8719-dee09ab53bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8508d08f-ee33-4001-ae02-52a7607e4ec4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38870a58-b729-4cc2-9f89-cf96f85d91f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b963630-8fac-4a81-83d1-99c74601cac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c703a193-91ae-422b-bf49-e36b05889d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b607bf4-5989-4531-917b-e1dbe265d2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91924162-4c6d-4007-9fd6-9189ba81ff42",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d94e24-c174-4b37-8618-e9fe6bd32faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fbe2a4-3e5c-4dc5-8ec6-f1ed76952734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e7f69b-fb57-4a6f-8d35-b58e7ccfd31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "877f55cd-331d-4efe-9bcb-6655588ea2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e8a8cc-3378-46be-92df-1f8a343c6d27",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3285ada-4c5c-4c1b-b222-be87173d5d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0139ebec-e2f3-455c-9bef-ca353dcac534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01eab8e7-86fa-44fa-af7c-33df246735f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55f7bf5a-5d41-468d-9c9e-2f98fa2c00ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f8f70c-daa9-4de5-baa3-b25fe53d6eb1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e0363a-301f-4504-a08f-8918647330b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785db3a5-baca-4497-b732-bf4524c9e835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f908a7-cd1e-4e48-a602-94bc8d996e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2281d31-c932-4d64-832b-132cdf4dac07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5a8f61-1997-41f5-9079-9c590c6b02ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79133251-de48-484f-a54a-0e61699a241b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdc6ea0-dc11-442d-9d8f-04ceea0f3acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b45128-5b33-4236-b6ff-b04e46a009fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6e570b-c85b-4c9a-8566-fd08f465d920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fbfbf8-5607-496e-bceb-dc63e15e86c8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7e5224-aa98-498e-9919-e04932b5c727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc2243e-2fd5-42a3-84b7-e9491e0bcdcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e718f1-5e09-4ccc-b90a-15d9eb8771b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f080733-bab0-4254-9791-420b3c18e01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b89509-6b3c-44ed-8922-c0d723709902",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abbc250-29ce-43b0-b002-7092435aa89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3dd5e17-74f3-41fd-969c-8aa2a027e005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893ebb08-162f-48d9-8d46-e488e186015a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d279ad64-b4ea-46c8-803a-b646f216047d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d36d3ea-4f08-45ee-8c59-00f75168e0ee",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e338fc-de38-403e-813b-9c93fd78c0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6ea314-dae6-470d-8ea4-110dbd0c87b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6794268-d077-4ac7-bb72-4aeed7e2a01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce62e49-e2bd-4e9f-ba1b-4ca707909e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bacce6-2486-4ffa-82fb-f55391e5819c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83500efc-86af-4129-8eed-28483f31314d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08296cbf-dcd2-4e48-b81a-d64478e14741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b950a37-4322-4869-8d9a-2864226ede4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45489621-36da-484b-aa65-25c9043f4ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ce222d-5eb2-4fa6-9c33-6b91bb80b8e8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdbf5a0-d795-4411-9475-e1d642c4a099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f28401-b613-4e80-803c-250145a82555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4371e32d-0e2c-4780-8101-9112bcc08481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e23bfe6b-9232-4575-ba6c-ed8686d10d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cb39c9-8c4e-465d-89fc-9dc08ff78cb5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3afc27-46bd-448f-a6e4-34e22b6368ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14add2cf-4e8c-41ae-b7a1-5fe3d47bfad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc94649-df70-41b8-9f2f-784ccfde1946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "973c5fea-d6a4-4e20-b26d-95fb5e1fbd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8869fe0c-6732-404c-ba3f-e1a138cb8cbb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361822eb-63dd-4bc0-805d-a3e17d3a90db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a502e53-2340-41eb-a64a-cfced6b6df03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a4cdd3-a009-4298-845d-b27385943489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efe97d87-5431-4571-8086-2744b882e636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05568585-1df7-4686-b256-1118278039e4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e0d7ab-3fb6-4a90-943a-c1172a1220f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec1588a-a0ee-4b20-959b-cb6e8ba335e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec79d159-10ee-4aff-9b90-ad2654f99f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76d33dfa-055e-4b8a-97dd-c01c9be2fb8a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3a76e76-4abb-465e-91d2-028b80daf4a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9d11d5d-f700-48a3-843f-a483afe491e3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bedae47-2582-420b-a3be-12c74aaac224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dab571-b064-406d-a909-9e6237325d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c1bc63-0ff4-40ca-af94-935c659105be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d06d7899-9833-41ee-915f-ecd837e06d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120e87db-d32e-4dc5-86f6-6e0ef8451414",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049c1b90-3fae-4a7c-97f1-4759adb53979",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d8f026e9-f2a9-42bd-8e99-5258a4982ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9249f291-fb4d-426f-884b-fe0fcdeb9df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c8d60df-e1ec-4505-bd0c-ee92872d69a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7af5ed9a-50c5-46c4-ab96-e913844c10da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdd4681c-a9c1-4b87-aed4-5a0f555f2870"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "283325c2-3b37-4ba2-ba29-e169b8ee7b96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac8f586f-4851-41c8-bd35-6e494c11a483"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd46b53d-d0b0-43bc-b224-02b72c09d656",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a7d3a86c-cb24-4821-84a4-989dd303b6a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edcbb1aa-9faf-498a-a478-c8a82b732290",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de46afaf-076a-46f3-9d89-18213db05044"
            }
          }
        ]
      },
      {
        "id": "d0288f83-fcaf-47d3-967a-5881d383853f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "553442b1-c42e-47b3-a0d9-1ff1237b423c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af253716-7fd2-4356-9ec2-cb1b4957a648",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7068729d-74f8-4106-887b-5cdc3281d12f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a908e936-289f-4726-bcd2-29ac9f0aa354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f37511-c9e8-44ae-8b72-7b8c0ba8ae5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d340b1c-18b4-4ae9-93c6-f6565c637a3a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f5548c-f6b6-49d9-a121-f32a27f280c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fef2b1-b091-453e-a467-e23ced30a638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5c1869-49de-407c-93d5-6d2fc47d2acb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584f16a1-735c-42e5-8253-06e012e6c7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef3455a-ee5d-4e3d-8b77-131694623a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e289fef-f300-4a26-b440-9c18df103f34",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3e2cbc-7423-489e-a7ce-b82dba9e85b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b7f704-c120-4f21-adc7-d2cdf449a47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19912d7e-c5ee-428a-89b8-bd6a35fcfeff",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dcd6e8-7729-4800-bea1-60b0b6149422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742beb0f-7346-42d5-bc67-ce4723e9ad71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44b98d7-7fcf-4516-bb6c-c17dbb6ab4d3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ff58ef-4165-4a82-a14a-11fca9da34cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ddbbbe-6d50-4a08-99cb-f648bb04827b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb49550-67ef-4170-9a48-d4c6d2fd062f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0b9677-f901-4b2d-a6a5-b67a08101b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23eb901-52cd-451f-a3c2-5862898a8a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f22f8aa-de2c-46be-8639-ae38a3869766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc7236b-56e6-487d-91a3-ce12c880842b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301d9c9e-dd59-47d2-91cc-1ebf95e3d89a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a34d6bf-1e45-49c8-a5da-20ed253d3197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db677b1e-497a-412a-a1d8-756e13cd795f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5982211-f1b5-4948-9755-7199178eb23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e698b0e2-fe19-4324-bb95-bf69247db024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a0ec0f-4bc0-419b-a0b1-7b32d49a93b0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83117919-d583-41a8-8610-9232b6c92182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e466249e-3edb-40b1-afd7-f609bf708003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50f5676-4465-4a7a-ba19-913f6535120d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85fc4da-3702-4319-a5c6-754bc8d5e630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453f2aba-3a32-4497-be4d-a9f5dee7f023",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2bfc61-12a5-427e-b874-fb8f58e10deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1511643d-a87c-47d3-87ca-3e89b2bf3339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60118d36-fa7a-4c6b-922c-e0639604c502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffccd6ad-562e-4f08-a0e6-319eb7a53af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c5ed1f-e9bc-4c7a-9e56-ecf43a95671f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b325f8-9491-4774-8a48-eaa62c9441cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf434e5-64ac-41b0-936e-e7d1fad3e8da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1c083c-8b77-4e4a-8160-a1a053cca9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c385ef-79d7-4181-95ec-fe834adb5596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616e4c42-c52b-40d4-a6c3-1cfc33e000cb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27da5ba8-ed32-4632-914d-0467308c0d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06446681-7253-4da0-a04e-a2112a9d87fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb697c9-eb8e-4203-9bd6-3a63c8d3243c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf197ea-0086-43ab-ad27-20bbb0ade3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d5fdc6-5c87-4a2e-8841-c169a7a71538",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308f2b0c-f167-4f01-860f-e0ce2c454a99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3b3689-7bbc-445c-bd45-92d2c1d828dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e3df37-3fa9-4805-b261-a186b86399f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1841493f-2d89-4a30-bf5d-ef9350f7e713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff4bc6d-c145-4e54-9e16-b9a99d4d0627",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71afe848-252c-42e3-8ddb-3d9c0f9f0129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "413a85a5-2b6f-4249-8cdb-5a2b30e030c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a76194d-fbfb-4d49-be9b-cbfd5f4ffc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80889631-2190-48db-a427-5793e6e606eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e19ccc7-ecb4-474c-b510-f99aada87b4b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3631e9-ee57-4201-bc69-d1eb1bfbf825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52c9dcf9-f56e-4b78-80c4-0f13591dae4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccb916c-0da9-4540-8f63-2247850432bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c4a41c-af76-4519-8244-08c3df4f42a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aedc326-df7b-4ed5-9479-39e2e8a95b3f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64144f99-d35b-4c23-b4d0-db24abacbb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bbb0cb2-a66b-4e0c-b769-feb527ba562e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e78903-93a5-4926-9bd5-7caf9f2ede8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46158c70-c1fa-4a6d-8ac8-5d4ba92be4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6653b61a-d035-48be-8d66-74eb1bd41857",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7941c539-c5e6-49bf-996b-dfd11a138cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a05bf95-f168-4aab-8935-2f9d24565578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ffdc4e-ac95-49e7-b412-54e844e147b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92857076-ba88-4f30-ae46-4e0f11f2be9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad3e1bf-26ec-4374-92cb-6218391f81b5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f6232c-2532-4c7d-a07b-8258fd131ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90dd80fe-8b43-49b4-baf8-205154b9b604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3585cb97-dce1-419e-8e00-2b9845a7e936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6e09cb-bb29-417c-821e-ac54221b7ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bb8d28-673f-4bb9-9fd9-acc32c18a644",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03064e5c-1a2d-4643-933a-98e26ddd2f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b36a0f-334b-463b-864f-28985a3869ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3068c9c-24cd-43e8-b3a9-e0f2cfd529bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a825a6e-29ef-441d-9b40-bda63bbc8c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdc772c-980b-4537-8cbf-35d89cbf7f32",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7f26d3-5759-483d-b24c-6fe5e48a8e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d83abe8-c008-4be7-9687-6180dcf9f27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27916907-c4ee-434d-a5d3-81f4774ad7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbce5c7-590a-4e34-ae26-a5621c301acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc525bb3-2a81-4de2-a224-bbdb15329102",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3ea1fa-f238-4265-ac1b-58c042fdf306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1022e0ff-eccd-4e76-b49e-59d564411632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3304bb90-dd3f-46bc-813a-68d433bee717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb685bee-88a7-4afc-8148-38479d236ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea51e06-66e3-49b8-a6fb-db28eb881b42",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f510442-6980-4bef-b0dd-dff948343eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f156e17a-c662-4ae9-8481-845d7a5b9511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983bddae-c92c-419a-8651-c5620b8776c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503e043e-c886-46f5-8ceb-913431e0bb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a65085-915f-4ae1-b41e-3ad511ab6894",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df35365-564c-4caa-ad64-ee9e0529654c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd115431-e94d-4eed-a382-0165ea604574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058f4887-a85c-48b8-b859-df1a780bf736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08052931-f702-4391-8836-3c411af5583b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d794310-7f5b-4662-ab60-690c215a025f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70267a76-e50d-442e-8089-6fd3c8c72f4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d574105c-d575-4e17-bc11-021f28a2aae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dbedcc-3e53-4ae7-9332-294465f6c1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23baa695-f03c-45aa-a0b5-f79b4271e2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd85416e-87c7-48d4-8a05-d2324545eaf2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e3b0d1-36e3-4dbd-9b14-9dc628c63210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf646fef-4612-4c89-82d4-0af57f97e8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a393d4-80fa-4da0-95f8-9dc6bc52355d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a0bde1-4ac8-4f16-b432-f11427e89ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97187ae4-0ecc-4beb-a3c9-174387e82fe0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972b8341-0649-4bb8-a28d-750633f83935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "394a9b8d-bdfb-472f-83a2-2c522129ba36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2093717-e36a-4a3b-88ea-a9f81a85e7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3b5e17-821d-4302-b22e-462bd175e41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a43b3c-9893-43c3-8af4-1b46f84c66b0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae25bd62-536b-4b2d-8301-317063d6c66f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36cb7fa8-9a9b-4ba2-b1d5-017b5d8954e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f4910a-66c2-416c-84b8-ac78ee18ded8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8c1a66-3b26-4aa5-8669-73168b6e20dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4472271-9500-4e6d-a60c-f6b4d3dde167",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e864610e-9821-4496-83af-95db34110b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3da27c-0db3-4b84-b9b5-58b70bf2be58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafdb578-061d-4fa5-afc9-f76dc742a978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc1663f-f1f9-409c-bed6-627dca251d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f19151-aeba-4dfa-84bb-916e7e6fe01e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ab475e-378d-4bf4-ad7f-127db2f7607c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9569317-47fa-4845-8969-4881183b8cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8dc9de-4d32-4c0b-a1a4-d9a05b0802bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77adacfc-4ac3-4888-ae7e-a4cbe52f7602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ffdc66-ea8c-4986-9bb3-10f06e0f7071",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce9eea7-3db4-4534-a277-25b5551ea2bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71690474-6dfe-4d57-a8e3-c118ca42a430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dfbdf9-d530-4b07-8e7f-0ae59a9cefc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc95141-64b3-4c7c-82b4-153b169cf483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459454f8-4563-40a1-a6e7-3990ee54d4d2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f96c415-ad0a-467d-898d-35e65ebabd75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b93032-74b9-492d-9e99-2390ba36b289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6573e76-469c-41eb-b3f8-9c8d76c9b0b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8eaf2a-059f-46b4-85c0-53fc4f9b5e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71006c6-f3b0-4189-afa6-dac715d21927",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03772f35-ddcf-42af-9c49-9bf1b196814d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc8ca34-ddcc-4ca7-9746-47fc90413d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41079852-efb8-420f-91f9-089218ae42ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc0700a-1560-4f95-b2a5-cbf72a8b51a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21559d6-bf1e-4d71-a984-17590dcc9901",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e4027f-088d-4d4c-9650-ce11859ade95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea27c78a-11e5-4c5a-b9af-16d70a3409b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9f760e-bad8-440f-b811-2848ae695a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddd570d-a870-4bce-b559-401a2184094e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff0bd56-5b3e-4f29-bdb8-cae05af0e90b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e824ea-f7d3-4441-a19b-0103ac45233c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fd8483a-a8c4-4790-8de2-198fec44d456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87dfb14-d0a1-4ac3-813e-578e08a0de76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462e7ae1-852b-4247-bfc4-9ecdf4f34ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4daf42b-702e-4c29-b39f-8cf08c59c6c0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7eb6b95-40c5-46f4-9a9e-223490dce3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a80de31-6a40-4c6a-b498-5cf692f486c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e82c67-49d5-4301-95eb-6acb7741addf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4d9b71-a0b2-4ae4-aec1-12f682a6ec5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e35b5b-38ce-4b07-82fd-6b8f8af65d47",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c3cc87-d417-4809-8506-a1b279e69a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3dcd51-288e-4577-a6e3-1cb1fd029c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6307b8c2-a7b2-4174-8a41-7bd69590797c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c521182a-db3f-44f7-8029-99d23a959ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136b340d-d840-4289-8328-f77ed090e990",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb908b7-8062-4301-8a04-cb7cd73b4df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c77c3c-a2d6-48fb-be0c-db9eb570f5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c03745-2980-4c14-ab35-ae6f5fdfe999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6903fc44-811c-4ea7-8a43-2582f77b2705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84681173-6e6a-41f9-943c-a6f252485d2b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a398cf59-2f36-4a8b-a063-1e87d2d6f349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148f71ab-585b-415a-9544-80f7e016d2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "560072fa-9525-4a94-b2cc-a00850296ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c11ccd4-8b7d-4553-8e5b-8e3f939b517f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2def27-c25b-4d56-a35a-55aa826642e8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cc86be-6502-4d67-b4fb-48163e6afdf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e942f45-60f7-49da-bcda-0f61fe33cc53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d16539-6603-43fb-941e-524a244bd35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f63287a-b1e1-4da7-8920-79680ccf2b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f46c6e1-1f5a-4fd7-81fd-cf2452751c3d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ea6074-4800-4113-8814-4d838689ea59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d33e70a-baa3-4145-a5e7-ed7d7e782a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af716c-b4cf-44ac-b355-c791040bcc9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ee4ec6-5917-4a40-9396-46cb263c9214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2348d184-cecd-464b-81c2-8dcc397f1451",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035e9cd1-ef90-4a2d-b772-b647561f3efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b7ea85-7604-48f4-862e-61afaa109c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df7c49f-d9ac-41c2-9f2b-1c620a0c379a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd06755-93bf-4a22-a129-c9b8030975f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1110be57-d127-46de-af52-73e01ef74958",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d94121-5a72-4161-8e72-91992e2ab7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "360be065-90d9-4488-8490-d6ea27a81415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04647f78-7bc3-446a-b876-7d45332b7712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53adf90-aab7-4043-b7fb-f19d66f1650f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba58777-05df-43a0-b742-d6c93a59cc9c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a05a3c-b110-46b4-8c28-063a2bcec6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59eb08b-eb10-41e0-9d18-df7b70aa4cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b0a2c1-cdd0-443f-86a2-0a3e3618102e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787687be-7514-4a26-8027-b1e5e0d46f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f475498d-8625-4ec1-b041-c3902ccc2f8b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3702d6-b01e-4ec9-91b9-a5c4c2c392a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fcbc35-d060-4903-bda8-8a4c569ace73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17513a4-5b79-4604-9e2d-1108376bc4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2800c33e-4a0e-4af2-bf01-edc95a6e247a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196ca98a-377c-4729-af7f-191a10af1231",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289999d7-a0a4-46d4-ae11-58230c16bf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75aec4c-9549-4272-80c3-f507e2490128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c364eadf-bf77-4b83-a08f-320efb831ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551c46a6-298b-411e-a462-26cf0dd3933c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2180b0-f7b0-4f0a-a78c-ece6b88c5f3a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221494d1-c3b6-4c0b-b897-8fde47c8639d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4d109d-e80b-42aa-b7e6-82fb7c9a8316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a5d987-a600-4516-b772-f1fd5a17dcb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad817a3-3c85-41f8-a88d-c261829b709e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5534ad61-b616-4248-b589-723975a857da",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3138feea-e432-4777-b39b-520c74bd16d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2620aafb-8266-4963-949c-522e2cb5bed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16be9ae0-b66a-4f87-8275-abf11019022f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae5e01c-28e2-4708-acfc-0d032d8ce01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af88ef8-82ef-4885-9c4a-060c4100cd33",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df88194-8f67-4f88-9eff-c18a312f9717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb961d2c-2b2f-42d9-87fc-e719c1c211d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0df33f-cad7-445e-ab55-876118f3a2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbec7e1-06d2-42a6-a1b7-646f99879284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a76313d-ea05-40b1-9a08-1f5b57a430b4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7970a987-b6db-4734-b9e2-4cf5cce8fe22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e721bce7-f899-47f3-b457-3cf1b8264115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93895eb5-ee2b-4379-af3f-643f65baf09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d4f04c-05fb-4af4-9a20-a9cafb41938e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827dcfb1-35c4-4db7-bcce-1ee14d5ef1b1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdcf88b-1010-47d6-83c6-fd72c658238c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6593e5b-a93f-4324-8eca-62fe5002a06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4bf6e5-e90c-4241-aaf3-1a1ede9f857d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61dabe66-914f-49f1-a6e6-16506aa7fb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d79e91-31e9-4823-8a99-55f3f119be0b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89076b2-89b7-46c3-a8ba-11e50dfbc3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8279f09-4309-409b-b711-9e76183ee5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "993dea2d-15b8-4531-b7c1-802b26baea0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53924a7d-2f83-4f35-8d8c-361959dcd28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a45d3a-8885-444f-b023-5a5084052764",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0763ba-4986-4d71-aff8-2719f9cb6e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7744111-d30f-4964-b55a-fde3eefc955d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f34e64-cc37-4799-a33a-80c0bd117c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a08ab8e-0b5a-4651-b831-b7ccf6c4fb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043d0c82-3275-45e6-bec1-c4b5c18a0dd3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c9b9be-a13a-4bff-be72-f35afdd3176f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83084cc7-b0f2-4aab-9383-31cd3add6f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12e908d-f9b7-4dd6-944a-291e11a83b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7471c7eb-0783-4af3-8489-0759e883ba72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509e35da-6982-4720-835d-bb065420b0f2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3af564-26cf-4fdb-8f9e-ba88c4fb11a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4cf62d-a7c8-4ca5-aa7f-8018817a3fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e560a4af-5187-4d8a-aa26-bc96d21e0b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a98fadd-099e-4d42-b45f-0411df34aee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a43978-c0c0-404b-9008-1bad9f3bb303",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671a661a-a8d4-469f-ba57-f43fe60c50f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b65a7ab-5f90-4229-b7be-eb17985bbfc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9579236-930d-4dc9-8aac-a6e0da88548a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d57365dc-8823-44fc-a2c8-c6881bf7f891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c6102c-0302-4b04-b3cf-13ce9090d009",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97f4c5e-141b-48c0-8525-fa40c863234b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76636010-7f19-4d20-9535-d945e9fd07c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b618edca-7bbe-4ab2-9a62-44a13e150266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ef866e-f1be-47c0-a790-ed4720bb474e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bcc2da-e621-41e7-b621-a5e77a41180d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce65677-b0e9-4603-8b7f-dd3dfe968ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a390dc-dd07-4560-a82d-e9671d0554db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab91128-1bb8-4358-a4ec-6f2039b8b2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f2a5e7-c6a1-468c-bd4f-07e700064f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5188c168-e3eb-46c7-92ef-e40b8b81dd46",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a15f692-9b6b-4d76-80cf-357100933207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e876b485-d60b-453a-9b87-66b8c96b21a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed74c996-d429-4eb7-af52-85887025704a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a79728-b360-4096-9e9d-a3e877cfc695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59e944c-2f7e-48b0-a54d-1734b48039b6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b657ab9-c9ea-46cd-aafe-5173c8b6790a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e240878-adfe-4256-b602-e7545c0894b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b79a35-26f7-4c40-b9de-acee92968805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bda1d3f-bf87-444c-aaa2-63659e42f52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e9401c-0191-4e8b-af4a-1ac6b461c1ce",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e4b47e-bcf5-46f4-8d12-6f2e9e2eff7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1dde617-2f33-4b11-8f17-44619d3f6721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1488cebc-3a34-435d-9a1d-5b7d9e4c2edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4317c13e-43ab-4ef2-b09f-345ea15ab6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a68af70-c139-4646-a215-f9c8f6a0161a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58c3b74-dd71-4174-9073-6abbf72030c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66def87-b101-475a-b069-555bf6b001b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabe5c11-560e-4160-8f36-bb35a7baa4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1dc0362-8782-4b83-a3a1-afa82933163a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acb2115-b9f8-4b9c-a79e-245ce401ac51",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39414c1-5a0e-4cec-b5a6-732e221100e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d9efe4-df02-4b91-9deb-d47b55c01076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596da7f7-7431-43fd-8ac2-4fa014f5b4f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3fb0f1-4f05-4895-b29f-19aab9f1df62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a3cdc4-0614-4b76-bbc3-191a79a12912",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78d361a-1e85-4c35-a2c7-6ec0133efbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a52dea7-df2b-4768-998e-765a02a74c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e7c5fa-404c-4683-8ed2-1a7495809141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cdf156-b3ca-4229-ae5a-e184c33d3272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c6b0a3-beaa-4cbf-be82-6771607f12be",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e69616e-c716-4344-8518-2b7c3b70fcba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e348a66f-fa18-4fc7-ab8c-247e0b3f800d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0514a58-5798-413d-9000-90b4ba50106d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cd7e1c-1a2f-4dde-82fd-72ad70979d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bfb89b-de65-46b0-91f5-787dc62ae3c9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb06c61-c61b-4f3f-8990-573bf384df27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c1d895-8e06-447d-8b38-cda31a6dfdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0091c42e-e0ca-43b0-ae59-6ab9af94ff84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a2f5fc-1cec-43be-baea-be1003679b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcdd4a0-feb2-4d5e-8783-a0a5ac48e3c7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfc7121-0126-4f49-8f50-648e108a5bbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a69797c0-7ee2-4294-94fd-6c5c0d4b64b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd61c83-507a-4b9e-8959-d8bd200fbeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91cacc4-cb82-4962-a730-910d1c969e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86ded6a-32db-466e-afb8-a79f45bb4c27",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fb30e2-c0f2-485a-bed6-91143b262c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af23ca0-e03a-420a-a8b4-cee968af13e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e86e097-71ad-4409-b084-f8eab547d970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e4c10f-10d6-448a-a74e-6daf0c83db06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7ee4ff-4648-4f10-b584-103e67fc51ee",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ef9e44-87e5-4bc5-8883-843c0c76f334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb6ed5ec-cdb0-4d39-ab2d-22cf4d22bd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75211037-70eb-4ce3-919d-7886fcf7f690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363d7bd2-7817-4de2-b9a0-5999e0ea6d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e37f33-da17-4504-843b-3c64ce2f6ad9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e24eb6-97fc-4c3c-b39f-b6ce94e2e815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9136473-381c-478b-9327-8af1f64da46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b45e836-941a-418e-9867-1eb6d426c972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24e8038-8d72-45d1-a11a-6623b47f9874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8337563-5521-4251-ad60-7481092bb2c3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e704d75b-8d6e-486c-9cc9-65baf61b3fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab92dc20-0b6e-4ee6-bd21-838bcf86d9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e8ccfb-3283-44ac-b119-e6da9acd9edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122b5833-4b09-4ff3-a42d-20c38f325cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538317e2-940c-4e42-addb-45894aa63664",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b505d34-f311-463d-969a-0769f864198e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9725b9-f4b5-4818-be8c-3d71996021b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a1f355-9147-4e4e-bdae-b7bccf8141b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba43f017-cc76-4b83-9614-2ab283ff9012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56da233-9b47-4933-9c77-b2ab5acac5c0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46556a93-c92f-4b55-9e5e-19d7d5cd5e49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94446023-ea76-42f7-86c1-52fcf66281c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7f6ffa-ae88-4581-b4cb-cfdc2f6f0901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca65fcd7-9c1b-44f7-8fb5-ed09bb1464c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec0af12-6b0c-4858-b1c3-1c2f56fd2080",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82185c9f-d837-4824-b00d-802522fdd8f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6145589-85f5-4af9-b7ca-8748fe9a1ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53809b1-73bf-4801-8f18-41780d146fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69bb812-21bc-4a50-9228-3c28d1037658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657a178f-6f3c-48d5-b421-07668a3fa24f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06758c46-8e73-4db0-b47a-3a4525631ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a78beb-7e51-4b48-a67b-6bf58ea859de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed324ed0-6444-44eb-bf7b-905008d686a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3bc0c5-4e48-4b40-82c7-d81f12ac2395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4103d9-a495-44fb-ad36-f85ffe8e6b81",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357e662f-2bc9-4174-8be3-6ea4149c8763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e2bd65-0f98-4e71-a1c8-82011b81cc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b15e08a-6c08-4f79-bbd4-80eae54b146f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e96d1fd-7417-4e5e-8407-95b58d14f041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6369e0-b107-4101-bbb8-1d06244a5dac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48278ae6-ded4-4b76-a153-3a55542fcc5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07de296a-5c50-40ad-9936-c7dfdd99a033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292d9242-5339-4096-8869-1221e877e50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea265718-a5fd-4b9e-a124-03036124245c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f42d1f-9b10-41f4-9b3d-d6ba72c9bd61",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c046d6c4-ca87-4264-ad34-1d0cd98e8cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b09d02a-d9d0-42ff-bbfc-a18cc6d62df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557d6d3a-aaad-4e41-914c-ccbbe525ad75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6710fef6-cd42-426b-b767-eb7c55d22d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d36808-95bc-469c-8de0-4d73001c1231",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd245ca6-0a67-4eaa-86c0-1d07127f3465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e9081b-a1d7-4d34-97a7-b320f19e7405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56da98f6-2cf9-4154-90c5-9e95427edc7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef0c206-f30d-4465-aa03-7f3bc798ec81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631a85c1-9d6b-49c0-b6d6-a9cab96b226a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0d6915-f3aa-4d8f-b01a-5c9afde7d766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d91c93-9e95-4143-8880-a24ceb346401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246fd653-4ef0-4dec-aeb4-315d01ee6cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f04b8d-7e99-4d84-8ca6-e972aff0dc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0abd2a-7ded-4380-9de4-c9b50d954840",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ca7c4b-eae4-4d03-9d0f-ab6636edda32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c98860c-9c19-461e-9f4d-b8847b8e41aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589ca7f2-d746-45fc-9845-99d6845c7fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feafa9f1-c674-4a01-af87-5d73476f3614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ffcfb5-7310-46f7-80bf-78ae41e1e7ce",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebdae30-f7e7-4dd5-8f56-dd377fdbb463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b3216c-d61c-419e-bd1e-c33f593443da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb3703b-925c-4249-b257-2d010423d530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503bbc1c-3e04-4b1f-b5ff-d94fec71b38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c499472e-5c9d-4ef3-8663-798b05ddf3d3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e395133-8d52-41dd-ae03-a757ed6cddc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4a4b56-c9b2-4b79-beb1-82c75f4b8150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cd738d-0c13-49fe-bf52-48bc3f2cbd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d50456c-7ae1-49ac-a239-bbd48970cb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46acb326-6487-4a14-8653-58a78c8d6357",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5a0ca4-56a9-4deb-96cf-7b6b82c9a604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06e1be3a-67fc-4d35-8ac2-5b6429c36985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c40e4eb-1d77-49c4-8baa-c8df41f88159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7388aa10-1dd2-40eb-9103-8f7bf2a2554e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14d62d3-249d-4e52-b4a9-1b0cfbec65fe",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc20ede6-5ba2-4a1b-9369-730a0af097ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f95f2e5a-1551-4d08-8627-a4ed4e19b765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f0f2d2-5ffe-4ce8-bcd0-79b03af8cc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c80594-a758-4dff-b496-71493dea7935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04d12ba-90de-47ae-85bf-f6b8948b5e87",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c93addc-489e-4c24-ba0e-6f565c4e250e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b370f3-e778-4b28-9460-cf3f928d3ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ebf7d6-9c83-4d38-be2a-22bad9131c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361119ef-ab68-4408-a8d7-7c04e29b170d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09417a96-4b13-480b-922b-153f8e33d8bf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d550b4d-f311-46e1-8386-ec99baa1e16f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8382dbc-b912-4619-8e5d-2e4ba1af6a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4544438-787f-47c7-b104-2f1580797931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e33aa83-0f43-43d0-bcd2-e71d92d3b8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee042cc-0d4a-41a6-8b66-65812abf64a9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1ea7d8-08f1-4cfc-bed3-31fcf2980def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "785560a6-330b-429d-b80e-fb5e05c17993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c8e665-f0b3-4b19-aefb-5a0c181912c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50640733-1581-4440-8431-e254a0abce8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d118eaa2-1731-4204-b431-05cec2978c8b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41700063-dc25-4c0a-b740-9a00dc36d775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f7751c-2115-4504-86b6-4ec9ebb34b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0979f4ef-2e97-416e-a18f-39a5bac58e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752b60c5-0aa1-471f-a215-2c865069354a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83902108-3710-49e0-9f75-18170821dfae",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c746cb-773b-40fa-859a-6e17ffaf3075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a1dfa40-8c8c-4cc3-aa17-287e5c8f1c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10380b70-950e-4d37-a68d-ce17e5895ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0159ede4-b581-41f6-9573-d3076509f318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea25e735-a03b-405c-828a-441eaf1357ad",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347407cb-cbed-4043-9786-548dcbf2c102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57befce9-e6b9-41cb-9787-d65f62401238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9e0a0c-87e6-4a50-bae2-055c52be01e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6556ee8c-8c71-41af-bbd0-66d0f56df6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a19a7c-4fe6-405f-84f3-e96df9616d47",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dc7bf6-bf2f-4a7a-827f-5dbceac17469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a9db8b5-5989-4b55-b4a0-9ec74c598fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9904f779-ae2e-44d5-a538-bd63c1878a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee49ed6-0e18-498a-bff4-071671e2de94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24563c55-ed6e-431e-bed9-6f4a1264ca60",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc29e1e9-936e-42c8-b1aa-cebd4c748cfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "401e3878-f8c2-41d2-994e-04755277eab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1b4cb6-e38f-450e-b9c1-b4f57701b7ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6cc350-405e-4565-92de-bdf8fccbccf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdee7105-233e-4651-87c2-ec4d41cb7ea0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91d89e3-9849-4088-a852-642193824406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e64a870-913c-4c27-9660-aa3454f046e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d947f3-005e-49b4-b169-6c26d69c717c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a81593-6b8b-4e18-956f-8493707f4d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d46b19-d251-4e2e-b4b6-d7d257078cf2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c1bbc4-e6e6-4d48-b5ea-373da29c2765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adc7d279-66c8-46ed-935d-458a8c8c1d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcb886b-b028-4a8d-823c-7b9603d0a4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd576ef-81fc-4ea3-8861-c971d68d24e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d08136-3edd-451e-bc69-f91fb2df0996",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f58d0f-a248-4b81-bcb3-f7f543d67d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2961a81e-706c-49b5-8910-0b9a393e169c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "518040b0-8641-409c-90d9-9283e1ef4d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0770f306-6629-494c-9b9d-56795b22a9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc8b8ed-10f4-40f5-8566-6b758e00a8b9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866f3a1b-e25c-447b-b21a-5f08e374848f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d534bb8a-c684-4cf9-8b7b-4df94a3cd993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d891219-5328-4f8b-8d22-636d94cd6aae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ff427a-d51d-4716-85a2-2e7853be5617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c8368e-bb21-488c-b8ee-6ebadf3bc355",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69af6585-78c4-4f03-ae43-868e7332cfc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecb6bba4-bca9-48f5-aa27-d2488b86d9df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5247537b-a202-4ad7-b05b-0d6ee571588f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0849b8-e348-4004-9a30-fd083f947167"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbd5c4d8-8007-4779-a690-82a6f3f4120a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90b9c88c-247a-470e-ba9f-61e9fd33dc32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29d9e839-bd0f-4edd-be55-19ea7813ab4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b11a3b22-3874-4eb7-bd5a-90c73addaf96"
                    }
                  }
                ]
              },
              {
                "id": "5291ffe3-52d4-4538-934f-483762c95281",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c254823d-724e-42c3-852c-297b648624e5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96ef994-2ee8-4be9-9824-84e35c34c47f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "100c25fa-fed4-489a-9035-5037c4192d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad2a487-5d01-4f73-b153-60ff3321e4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "085a5692-b581-4b77-8dd0-786eeb965cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10001566-4d0c-4b92-999b-f7b9916549de",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f8637a-240a-4fe3-b476-f6c3dfb6bfdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "acdff4a9-0c07-4648-8be8-d2a06b72050d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f811d0-baa1-430c-b978-2a4e72164aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7be4dbdb-8e19-4e89-9c76-8c546c258cfd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e94488c4-28b1-4103-bede-12820911264b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "710c6905-e2b4-427a-93b0-4b7d8f49b4c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab8c194c-cb02-49b4-9c00-9bfa101d6ee0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83ae3a84-e887-4d4c-83ec-faace02c25f8"
                    }
                  }
                ]
              },
              {
                "id": "b8723001-6167-401b-8ef9-29b2ab9cae21",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "04f8dd83-c831-4ef9-bc27-295cadcc6716",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fb68bb-b12a-4b62-821d-1671d7e11535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eb2409a5-739e-498f-aa19-a8a1798e3f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9dee51-a4c6-4107-be65-40a17722ce6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad542348-5425-4daf-8b62-4c52166cc48f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a3564610-583c-4849-a88a-491f14fa6318",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e6fc2cc8-8c95-47d7-970a-b431431b00fc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6eb3f135-30ce-4f9d-8fb0-af58bb283d4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "43892b75-cb65-4576-83f8-c57d98bd7284"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30071a50-bd33-4cc9-9ce9-97c3262d0e43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36377a75-d1f8-4298-ad28-9b29009d1ca9"
                    }
                  }
                ]
              },
              {
                "id": "4b185f94-e5f5-49a4-a57a-49549bf4858b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea81403d-68d4-45ee-a14d-23fc1352bf72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0f253951-9482-47e5-bd1d-0d3f2defee1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64473c2a-a004-46d6-8531-47452e5a49b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c5ad508-4bf5-4a86-81b5-e5a7cd028bcb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31aba4e0-788f-4d61-b494-c4fe5d1cfdef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "88276b13-121a-410f-9a35-e07b14529d2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d7d9d9d-7c66-4ff7-b730-661c6f25e211",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a859fd50-b05f-4064-860d-1b8ab6e35f35"
            }
          }
        ]
      },
      {
        "id": "e9409f05-97f4-4512-ac3d-99edc6c63b20",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "45a5afda-2638-425e-9981-3151c7b3140f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ccf24f0c-ba70-40ab-a56b-6bf3631ce031",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f910e48-e36d-4f06-9d01-1d83ab4233ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "309610b0-2f22-41e9-a7cc-ca5702f4f0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2933969-b09b-45cf-9ab3-4a1225aaac77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c43b60e4-0dc1-4be6-8384-6adfce5f2d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631d9f3b-f818-4bf1-9325-34f5d6a3def7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188d5473-a23a-4f64-a5ab-ae37d7ee286c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8d2973a8-83a6-4a7d-927b-fc550de06717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84820b3c-7259-4dba-a548-b6fa9abaea0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a5ae252-e03e-4124-952a-bdf89065ed9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa2b8817-6c5e-400c-8871-487bbdcde067",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20688434-806a-4c26-a8b7-14ab2a493323"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fae1e2c5-e99a-4768-8fb8-d8876c9090e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cd73017-9a56-49b2-a7d7-c8a13d284a3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55eead56-abf9-45be-b4e0-402aa7d0a483",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0c84bed6-442b-4ed5-965d-01dbefa5128a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd5ff3b7-6c8d-494b-a8b8-dd967855b7e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afabc8ec-86ef-4895-9fe3-73ab50719bc3"
            }
          }
        ]
      },
      {
        "id": "062a5358-ddfa-4963-8d3d-25c935a32b59",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cc35ad8a-4733-4bdf-b389-5d4703cc1855",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba9fc3bf-993d-4d1f-afc8-35e2cbcbcaec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0136cd31-d0a6-40d9-83db-175328b6a375",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef46e0eb-0e57-449f-83df-ebfca9366b72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f725ef34-b738-4529-bb36-4932bed23bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b121a864-cb32-4dca-8c0f-837f4abf4141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5561c59c-5f64-42d7-b4db-911b75b749af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783853f8-7ad0-4102-8506-1aa551d265e8",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd563886-98e6-4857-a0fe-5d2c6f3622ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bee1f527-9fe8-47ff-a3f2-9081b55b85fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1537dc3-de64-4bd7-96ca-9525b8b4b088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04d568a1-7be9-4bf1-85a7-a1cc2dfea691"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1b31460-4559-4d3a-8df0-24dc58bc54f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20a9f69c-75f7-4ec0-abfb-8de2a99a55ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a7af57f-236e-4f71-9e37-c4a2ce5aaa05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8cd2365-5180-4f9f-be49-347e0ef0d059"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "362da2a6-3ee0-4cd2-a562-f9c1a27a5af6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e311f10b-e79a-4b73-b97d-60b99f6f5e79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "240a59dd-9538-44e8-a20d-6ed20bf9e490",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b5ce787-449a-4edb-b869-4ab81365cb0a"
            }
          }
        ]
      },
      {
        "id": "884a6a39-d33d-4786-9763-168a75a9b93e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3a753c7f-0f49-4c3b-804d-edb28331bf08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b182baa5-d334-42b9-a986-9f87736981c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5b19830-c7d8-4495-a25a-3c664a16c85b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e1fda8-9c29-4c97-b02a-0fb59cfe55a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "71e4da97-0ad3-43ba-8a03-82d4c99af4e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "507f1364-76cc-43b5-90ba-f19e1ebb095c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b94baf0c-224b-4c45-b7fa-186f8f587086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412915fb-31d6-4bd8-bc0e-331d56c9c5e9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e892a37-7cf6-43c7-9b8b-311364a482b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "635826a9-3204-4693-b89a-b8c29877db73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1594f751-8ea3-4ef4-952a-85a1c3db2c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "296e4f57-efa5-4a4f-9c4a-337fbb5987c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55615131-2a32-4b01-9208-ab5a6b925d44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99119dd3-c01d-4aa9-8ff3-b4be284a3a25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db932556-d53d-4c98-8715-535e78023268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d01f1759-53b2-4de2-a7fa-4bf0a8dd253b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7c998c2-d20c-4719-a39e-e0753ae1a1fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c626b6fa-0759-47dc-950e-48e1a64579e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41fd985a-68ee-4b1a-adaf-48ce062dfb1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a144e29e-957d-43ad-aae9-518e569881d5"
            }
          }
        ]
      },
      {
        "id": "5fcc7b94-6ec2-423d-bfe1-8fd32ac5834d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51787f09-48e6-4177-98fa-781df6115279",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2df8e2e0-7b75-40a1-bd76-7d397d1e881d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cc8abe60-9f0b-47d1-aba4-bdc8ee084aa7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eaf33d40-8605-46d2-9b74-bc6fc13cde40",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c233663-368a-4f66-a759-153662e3f188",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 264.2084942084943,
      "responseMin": 36,
      "responseMax": 6330,
      "responseSd": 776.8465080507904,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677717865161,
      "completed": 1677717944348
    },
    "executions": [
      {
        "id": "895a3fd5-4469-449e-93b1-6150721688a5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a11755f0-25f1-422a-aade-73cb1986dd99",
          "httpRequestId": "d60ae448-d45f-45b4-a8e2-073df9ffe62a"
        },
        "item": {
          "id": "895a3fd5-4469-449e-93b1-6150721688a5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "597e8aaf-5ecf-49cd-b764-9798ac84e0f4",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 0
        }
      },
      {
        "id": "475f1597-74d3-4205-964b-a28eee6cfed2",
        "cursor": {
          "ref": "6ab6a862-9a8a-4fde-bb5c-09315dd9789e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a84af17d-f8ac-439c-ad63-f50b3bbc19cf"
        },
        "item": {
          "id": "475f1597-74d3-4205-964b-a28eee6cfed2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d43b241c-9921-437f-85e6-54dfffe0eb7b",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 0
        }
      },
      {
        "id": "a87b55c8-008b-45b8-ac82-3ecf0834be71",
        "cursor": {
          "ref": "8b8e3e01-f435-4d4b-8564-8622dcaded35",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "40e7ae34-8f4e-4538-967e-e0386e3682cf"
        },
        "item": {
          "id": "a87b55c8-008b-45b8-ac82-3ecf0834be71",
          "name": "did_json"
        },
        "response": {
          "id": "451d2ede-1f8d-49f5-b594-08c6bf35e318",
          "status": "OK",
          "code": 200,
          "responseTime": 452,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416ba451-543f-4998-9101-a448b7437b8c",
        "cursor": {
          "ref": "08f4e5f6-a496-4f3e-a149-910da13b7463",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83a84577-f85d-4cee-8047-c1d994365a9e"
        },
        "item": {
          "id": "416ba451-543f-4998-9101-a448b7437b8c",
          "name": "did:invalid"
        },
        "response": {
          "id": "96e89e81-b9b0-47b2-861b-59d40f9e5488",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1049,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "416ba451-543f-4998-9101-a448b7437b8c",
        "cursor": {
          "ref": "08f4e5f6-a496-4f3e-a149-910da13b7463",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83a84577-f85d-4cee-8047-c1d994365a9e"
        },
        "item": {
          "id": "416ba451-543f-4998-9101-a448b7437b8c",
          "name": "did:invalid"
        },
        "response": {
          "id": "96e89e81-b9b0-47b2-861b-59d40f9e5488",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1049,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "dbfaf0e6-e3b0-45b0-86d0-38dea4a71890",
        "cursor": {
          "ref": "289b3978-a0c7-495d-bad6-1c889db7f36e",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1b6b256d-ce3e-4279-a1f7-16d8ce4ba5fd"
        },
        "item": {
          "id": "dbfaf0e6-e3b0-45b0-86d0-38dea4a71890",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8a767c9d-3aaf-4078-a704-32aea44f11ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8bff9a-810c-4e07-82f2-70fbceb3eb2c",
        "cursor": {
          "ref": "74cb9ec7-3030-4f45-8e0c-24710043e938",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "97063ee3-a95d-4d27-8a63-b21670baf279"
        },
        "item": {
          "id": "fd8bff9a-810c-4e07-82f2-70fbceb3eb2c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7a908a7e-5203-4e38-a64d-496655d263a8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39aabba-1e35-4b0d-ba52-b7e9218e699c",
        "cursor": {
          "ref": "5219253e-1b51-4bb7-a824-f1eae73dfea5",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "07f91d96-f2cb-4c64-bb34-6c48bbf2b0d6"
        },
        "item": {
          "id": "f39aabba-1e35-4b0d-ba52-b7e9218e699c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "812cee23-e775-4faa-9dd6-b1277aa1bf7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ef60f3ce-01cc-4eb4-b444-1e57b76ac0f1",
        "cursor": {
          "ref": "18e9b574-5017-40fd-8cc5-deaff5f78595",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f2cace1-9c62-464d-bc59-6a4e4b408de8"
        },
        "item": {
          "id": "ef60f3ce-01cc-4eb4-b444-1e57b76ac0f1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4410df29-c501-4a1a-a7bc-05569665cb09",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ef60f3ce-01cc-4eb4-b444-1e57b76ac0f1",
        "cursor": {
          "ref": "18e9b574-5017-40fd-8cc5-deaff5f78595",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f2cace1-9c62-464d-bc59-6a4e4b408de8"
        },
        "item": {
          "id": "ef60f3ce-01cc-4eb4-b444-1e57b76ac0f1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4410df29-c501-4a1a-a7bc-05569665cb09",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c5e723ab-cbc5-43b3-b856-d3147d051f8b",
        "cursor": {
          "ref": "e60034f2-b7aa-4d1e-b6b6-f9a2b9b220a1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0bc79506-41d2-4f9e-b2d7-66292d4c325d"
        },
        "item": {
          "id": "c5e723ab-cbc5-43b3-b856-d3147d051f8b",
          "name": "identifiers"
        },
        "response": {
          "id": "b7da668c-49a6-4477-aca9-c1b86ac07411",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5e5c09-26d2-46de-a2f5-59ef16e459c6",
        "cursor": {
          "ref": "9a65046d-eb24-4c17-b07a-93c6c9b4b7c8",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "45d098bb-c9a4-489f-84bf-05964facb402"
        },
        "item": {
          "id": "db5e5c09-26d2-46de-a2f5-59ef16e459c6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "871c2898-9f40-4900-b34e-ca8d16e50c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5e5c09-26d2-46de-a2f5-59ef16e459c6",
        "cursor": {
          "ref": "9a65046d-eb24-4c17-b07a-93c6c9b4b7c8",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "45d098bb-c9a4-489f-84bf-05964facb402"
        },
        "item": {
          "id": "db5e5c09-26d2-46de-a2f5-59ef16e459c6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "871c2898-9f40-4900-b34e-ca8d16e50c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cd6f6b-20c4-49b9-8811-67f79d04f92b",
        "cursor": {
          "ref": "4df9e47f-70d3-4af1-bf88-6f42cace1eba",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a19f4a15-c4c3-4ab8-b417-607718a9f441"
        },
        "item": {
          "id": "41cd6f6b-20c4-49b9-8811-67f79d04f92b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "163d5cf4-ed9d-42a4-80ed-6b82d9047a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be713c9-c5e0-45bd-93e9-50a274e48c9d",
        "cursor": {
          "ref": "51fc0611-1b84-4b25-88d4-b73cab62ec8d",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4870d118-69c9-4fd6-83b0-d4247627e73a"
        },
        "item": {
          "id": "0be713c9-c5e0-45bd-93e9-50a274e48c9d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7953e4d2-4c1b-4b2b-a78e-0be95adae23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169dfb10-61b4-48a3-af3e-1d7ba8d95bfd",
        "cursor": {
          "ref": "f600a255-9001-4101-8751-0f4e2a2197ca",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fd690214-c1b8-493d-938c-2055cfd4382c"
        },
        "item": {
          "id": "169dfb10-61b4-48a3-af3e-1d7ba8d95bfd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f15c2269-9216-48b1-a3bb-da98cc152b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f677664b-26f9-4f0e-95b7-b6b24853a946",
        "cursor": {
          "ref": "1cf2f33d-ffb5-47d0-848e-e14f1c58f3c8",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "85e672b9-0e1e-4d79-a2ae-c52a1ead36da"
        },
        "item": {
          "id": "f677664b-26f9-4f0e-95b7-b6b24853a946",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5681748b-84b7-4f0a-b421-91870d522c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c24c13-4a7b-4b32-b66f-47d14a313476",
        "cursor": {
          "ref": "f5b08794-dfa4-4cd7-9b95-f13483131455",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "877c2121-8f6d-484c-ab81-e8dff7b344d7"
        },
        "item": {
          "id": "24c24c13-4a7b-4b32-b66f-47d14a313476",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d48be153-b2c4-45b8-92fb-33cf011b39e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ce34db-3e91-4827-a271-e738eb3074d5",
        "cursor": {
          "ref": "7b39fe70-edfe-47db-a47c-2202e0df1945",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b444a884-eb9a-4c3b-ba47-0fafe74a4421"
        },
        "item": {
          "id": "45ce34db-3e91-4827-a271-e738eb3074d5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "339b45bc-208e-40e4-9d23-ff4a19151193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7194f4bb-0262-4a12-a5e3-1103cd3b718d",
        "cursor": {
          "ref": "55f296f6-68d5-4428-948e-3aec84a883e0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ce4602ec-6355-48e5-a316-e53a886391c8"
        },
        "item": {
          "id": "7194f4bb-0262-4a12-a5e3-1103cd3b718d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "73e475e1-1dc0-45f8-8262-fb400c730c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 769,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4af056-6b48-40a4-b8b2-5b9dfe448755",
        "cursor": {
          "ref": "385fd952-3e22-49dd-8fbb-9c051dd2a4a2",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "17966c57-403b-4af6-8115-1d8ae8990477"
        },
        "item": {
          "id": "2c4af056-6b48-40a4-b8b2-5b9dfe448755",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1cc14200-3059-4d59-9947-f5be7f88961d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db52f3f-2083-4600-9aaa-2d8a25758519",
        "cursor": {
          "ref": "7b9c54a2-1aab-4929-a21f-d0315bcc34a9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d36ad959-4f54-4b50-a31d-03148d5a3271"
        },
        "item": {
          "id": "7db52f3f-2083-4600-9aaa-2d8a25758519",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f95996a0-c5cd-453e-b21f-fff5919ce853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efd0329-77b2-4ad6-b848-6a2517a94970",
        "cursor": {
          "ref": "741c52d2-d864-4b7b-936e-1065499329af",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1aaad0da-42e9-4156-a584-21cf56ee357d"
        },
        "item": {
          "id": "9efd0329-77b2-4ad6-b848-6a2517a94970",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "222ea877-496d-4e3c-99fc-ff09aae1ffd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d589e1-4d89-424a-a903-138637658cd8",
        "cursor": {
          "ref": "ef4e1b35-7b09-4be7-b141-3544df75bb9b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7faff21d-4e4c-4904-8998-e335f0acdf7c"
        },
        "item": {
          "id": "99d589e1-4d89-424a-a903-138637658cd8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "52dc2890-48df-4a02-ab2d-94e7ee661859",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8dadba6d-b52c-4720-9c1d-8a6c1706b30a",
        "cursor": {
          "ref": "60c39407-cf14-4804-85d0-637363d9bb96",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "eab8f956-9593-499a-b183-4781240b1e0f"
        },
        "item": {
          "id": "8dadba6d-b52c-4720-9c1d-8a6c1706b30a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8664219c-3f92-4527-812b-1e838350f775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78052346-1a88-45f2-948d-365d550f9f89",
        "cursor": {
          "ref": "5921550c-7808-44ec-842b-a5b1fdd81be1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fa936723-3651-43a7-b469-39cc1d58b71c"
        },
        "item": {
          "id": "78052346-1a88-45f2-948d-365d550f9f89",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4c5c06c1-4130-45de-aa84-0dd094c1ee91",
          "status": "Created",
          "code": 201,
          "responseTime": 4090,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8414c2a1-83c2-46b1-b67a-6429de19b1d0",
        "cursor": {
          "ref": "19d724e0-9cff-4e2e-b5f7-85ee165ca012",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "caa95a3d-6134-4a6d-a904-9691b1ac7afc"
        },
        "item": {
          "id": "8414c2a1-83c2-46b1-b67a-6429de19b1d0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "260e83df-e300-4feb-8135-3c9f590cc8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca9b241-e293-4edc-9165-5a396d2705cc",
        "cursor": {
          "ref": "9a85f965-84e0-420a-a16c-bb7221fd73fa",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5465af5b-0b29-47ab-b77e-92ad26866186"
        },
        "item": {
          "id": "1ca9b241-e293-4edc-9165-5a396d2705cc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "20fb5b78-d2dc-4014-8a6f-f8254e6ddb85",
          "status": "Created",
          "code": 201,
          "responseTime": 3888,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "487c3fd8-1ab1-4502-9173-089c6b9d9c50",
        "cursor": {
          "ref": "b0b53273-f967-4de5-8def-34a3534146b7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b843b64c-7465-466b-8e8b-09cc67006f46"
        },
        "item": {
          "id": "487c3fd8-1ab1-4502-9173-089c6b9d9c50",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c701c122-0f4c-4707-a8ef-1045b517890a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220a7b86-593e-47f1-9321-8650475f2ac6",
        "cursor": {
          "ref": "277fdc4e-399a-4bb3-bf82-36668bd2b84e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dbd7a3cd-50fb-4446-8224-dba696fcd227"
        },
        "item": {
          "id": "220a7b86-593e-47f1-9321-8650475f2ac6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c12a3ac4-948c-4a26-a485-76fc88f3eb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2a7d40-4df0-41e7-b26f-2d48ceef69df",
        "cursor": {
          "ref": "31bd7f70-d977-4fbd-a543-95f65958ae48",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7b9a1247-b01c-4cc8-8de4-39154a651a77"
        },
        "item": {
          "id": "7d2a7d40-4df0-41e7-b26f-2d48ceef69df",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d89cd2c6-8c7d-4d54-8eca-9fd7c13a9619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc984c6c-ea68-40fc-9440-b20a860661a6",
        "cursor": {
          "ref": "b2000ed7-13f1-41a5-9e7a-36a1b4e8e801",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "011b67dc-4ff2-4acd-a27d-481a7c1753d9"
        },
        "item": {
          "id": "bc984c6c-ea68-40fc-9440-b20a860661a6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a21b8a21-f7fe-47f2-ab08-1bb43bc2e844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7170cbcc-9ec4-4cb4-8cb1-7240a64d1119",
        "cursor": {
          "ref": "16c60edf-8040-404f-946e-07e13b252006",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2d47b661-4ef9-46d2-8993-05bd97118018"
        },
        "item": {
          "id": "7170cbcc-9ec4-4cb4-8cb1-7240a64d1119",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a41e4d7f-ca97-435c-a489-30bf748c7fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838ccb39-ef0d-404a-8f9c-8a9ed69b19aa",
        "cursor": {
          "ref": "b1778683-4a1b-4ec0-aba2-881a07065359",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "be3ce28b-9889-4afc-8e45-af6d22944bfc"
        },
        "item": {
          "id": "838ccb39-ef0d-404a-8f9c-8a9ed69b19aa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7dac239c-fd45-42b5-a921-befb947477c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c980f34-9f6e-4649-9f8f-c5cd2526380e",
        "cursor": {
          "ref": "69f89dc9-9fc5-47d5-b6a8-7f1fd776ed1e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "37bec1e9-39a6-49fc-9842-ed3a0a3421d1"
        },
        "item": {
          "id": "8c980f34-9f6e-4649-9f8f-c5cd2526380e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "be4bb428-6ce4-4690-94ff-adf4e579e121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbbaab7-4182-4c37-b933-539d75999073",
        "cursor": {
          "ref": "51a0ef22-4f8c-4dce-bdff-2daab379a1e3",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "664dbab3-dcbb-47b4-9e9a-cf27d7cb5430"
        },
        "item": {
          "id": "dbbbaab7-4182-4c37-b933-539d75999073",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c998c80b-5d0c-4625-8e31-b998afe6ddfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f83353-c30d-4b9a-9f42-c09565eb7878",
        "cursor": {
          "ref": "237d464c-0aee-4c53-a000-0c944bc07ad3",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "34d8d622-e0fc-439a-9b81-3577144d063f"
        },
        "item": {
          "id": "18f83353-c30d-4b9a-9f42-c09565eb7878",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d6ac57c8-6c0b-461c-9b84-a68ff3f590ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bec244-f83b-4aca-854a-9a699e89236e",
        "cursor": {
          "ref": "759b304d-8292-41bf-b3fc-dbf9644905d5",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2a4ddd7a-10ca-4d36-b67d-de0e8710b67a"
        },
        "item": {
          "id": "d3bec244-f83b-4aca-854a-9a699e89236e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f1753c20-60f5-405f-9796-7d89c24f651c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec07799-5ee5-4968-aee4-64d574be5e29",
        "cursor": {
          "ref": "f801543e-5584-465a-a7b8-f678494ef6c3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0906bed9-e252-40dd-b195-8f4dc3eb36ee"
        },
        "item": {
          "id": "1ec07799-5ee5-4968-aee4-64d574be5e29",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a05fc6a4-af26-4370-a29c-e2c344b2b6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ea1b85-c133-4857-b0b2-73b632942b63",
        "cursor": {
          "ref": "6136994b-3623-4c92-a540-7c79bfdad433",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e55cdb06-30de-4c83-82c9-d9aaba22ceca"
        },
        "item": {
          "id": "43ea1b85-c133-4857-b0b2-73b632942b63",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ec8145ac-667b-4922-b058-4eb0927721e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17c2170-c5aa-4e30-954a-bbe4239e9409",
        "cursor": {
          "ref": "b5eb1722-ce1d-4c28-8105-42b900a26f66",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "290e7495-29c9-42f7-9b47-a7ad24a1ccec"
        },
        "item": {
          "id": "c17c2170-c5aa-4e30-954a-bbe4239e9409",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "98b7e624-3011-451d-9a6c-928bee03be9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5eb798-a1e7-451c-a814-fae4d50e321d",
        "cursor": {
          "ref": "4eac40e9-6b5a-4d4d-98dd-863d4ba4f777",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c3da9fbe-d86d-47f7-986a-ff6c48f23463"
        },
        "item": {
          "id": "eb5eb798-a1e7-451c-a814-fae4d50e321d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ce8b3154-fec6-4e41-bf68-1591d81d0497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a494819-d158-4566-9858-0df3110e09a9",
        "cursor": {
          "ref": "5337bad0-1d9a-48e8-b55f-7c77a7b7d5de",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6d02eef3-6485-415c-9126-ee105dce58b3"
        },
        "item": {
          "id": "6a494819-d158-4566-9858-0df3110e09a9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d0cab1fb-75d7-484f-b211-6f2d6f901ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fb4cc9-200b-4dcb-b0eb-9e1060fb3edd",
        "cursor": {
          "ref": "36af09e9-8330-46ff-a82c-1718b6aec9d3",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2a87a60f-1625-4694-91d6-6840b1a0036e"
        },
        "item": {
          "id": "37fb4cc9-200b-4dcb-b0eb-9e1060fb3edd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1f62e2f0-9811-471e-9b93-4084ec1a259b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8023b1-7e6a-4581-af41-cc7e7acabc22",
        "cursor": {
          "ref": "929b8c01-4d45-4c29-a128-8be92d9387b9",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8fa35a32-d68e-4f9c-a89d-5b7eb9aa41c9"
        },
        "item": {
          "id": "fd8023b1-7e6a-4581-af41-cc7e7acabc22",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d0978440-734f-41b7-a645-5a27b4c9d38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121acdf0-a8e1-4675-a0f5-5986860a5285",
        "cursor": {
          "ref": "ebe1fac6-cfd8-416c-82e7-49ae1dcffab1",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b03efd9e-7ee9-4cfa-9fcf-f0dc35a398c5"
        },
        "item": {
          "id": "121acdf0-a8e1-4675-a0f5-5986860a5285",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8f6ff145-6da5-4e94-8130-1e03077d5199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f64b09a-448f-4164-b397-2548663384b2",
        "cursor": {
          "ref": "9a1b312a-7fa5-4ada-ba1a-11e61e4af812",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "be1f143c-056c-419d-88e7-11dfc8461a04"
        },
        "item": {
          "id": "1f64b09a-448f-4164-b397-2548663384b2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c104e21f-50e0-4d24-834e-d64de919babf",
          "status": "Created",
          "code": 201,
          "responseTime": 2234,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b7453c07-eded-49a6-adb8-46167f9053bd",
        "cursor": {
          "ref": "83c822e0-9d29-43c3-86cb-480e9f41e50d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "424bd3ce-4cf7-4b68-855c-24056289709b"
        },
        "item": {
          "id": "b7453c07-eded-49a6-adb8-46167f9053bd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a5f9b4ac-afb1-4919-9c4c-eda92d726a2e",
          "status": "Created",
          "code": 201,
          "responseTime": 2293,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d16810a-0f8c-48a6-9e89-612ec1f1dd7c",
        "cursor": {
          "ref": "77c4e8d0-256e-4f55-bca2-a48d72fa6ef6",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "06fd6b6a-fbc9-4011-af32-c9292430e825"
        },
        "item": {
          "id": "8d16810a-0f8c-48a6-9e89-612ec1f1dd7c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5ebee3e0-a8df-4d5d-84c5-6d4a5e9fc34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae690ad7-f87d-49b8-9752-e96849e4a8db",
        "cursor": {
          "ref": "ff91a8c0-93e9-4702-831d-10811f544f25",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "88b0ab21-2e88-411f-a0de-c89e733ccee1"
        },
        "item": {
          "id": "ae690ad7-f87d-49b8-9752-e96849e4a8db",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ff3c634c-de81-467f-bb64-e83ae647ad75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43910147-5f7e-41d9-93e7-c07a0cc2eac4",
        "cursor": {
          "ref": "4fed47ed-99b4-4847-9c7d-705f2cc24b20",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f398543f-40db-462e-9c3c-25ecc7d9e9d1"
        },
        "item": {
          "id": "43910147-5f7e-41d9-93e7-c07a0cc2eac4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "96475b45-830a-4e14-acdc-c777c8eaf49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3484a344-550f-413a-9939-5953e70f42d6",
        "cursor": {
          "ref": "33d592bd-5639-43d5-ab7a-2a72529ca546",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "61e57174-b463-474c-abbb-5a3860612f71"
        },
        "item": {
          "id": "3484a344-550f-413a-9939-5953e70f42d6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fed2d96b-88ba-4a83-b02e-1da4c7b0719f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71156957-2b8f-45c1-8483-e2ed836c3320",
        "cursor": {
          "ref": "bd0eb02a-8543-4b0a-a5c2-cfd0e654a9e8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f2f33cfb-9754-421b-b5a1-d9e606d7bda8"
        },
        "item": {
          "id": "71156957-2b8f-45c1-8483-e2ed836c3320",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8cbb3cab-2f89-450b-85ed-a2265c3e62ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4000fe-ce4c-4b68-ba21-aa8575d6571d",
        "cursor": {
          "ref": "5103a2fe-974f-4c17-87da-7e1485b75ab5",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "32140a4a-764a-47d1-982e-c29050eb36af"
        },
        "item": {
          "id": "ae4000fe-ce4c-4b68-ba21-aa8575d6571d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e7e7eba3-7683-4390-b508-7bc03540abc6",
          "status": "Created",
          "code": 201,
          "responseTime": 2576,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "597e2f61-cbb6-4374-b303-2dd9633787d0",
        "cursor": {
          "ref": "b09d1644-5cfd-43ea-9148-f0754d7a4599",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7141067e-085c-4b06-9b7b-c899be8167d8"
        },
        "item": {
          "id": "597e2f61-cbb6-4374-b303-2dd9633787d0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "899531f4-2000-4652-89bd-d9c544b24241",
          "status": "Created",
          "code": 201,
          "responseTime": 2550,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d29d105c-39ca-42f5-a17d-e1cc578ab86a",
        "cursor": {
          "ref": "d9e108f5-e7fe-46d2-9a93-ec167a770d92",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "347cad40-90a4-4c57-9739-5b082be9d195"
        },
        "item": {
          "id": "d29d105c-39ca-42f5-a17d-e1cc578ab86a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "683ecade-c3f9-47c7-a2a3-d6d7c8da934e",
          "status": "Created",
          "code": 201,
          "responseTime": 2470,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "670ea1e7-f60e-45e7-b4b4-52af36ad94a1",
        "cursor": {
          "ref": "3b922162-0c56-4aef-a196-f8346891a307",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "23a75ffd-5f8b-4502-b970-9ad0bb6c836d"
        },
        "item": {
          "id": "670ea1e7-f60e-45e7-b4b4-52af36ad94a1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "da937dc2-143e-46ef-bb3e-910360d34db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd73f96d-9f03-4f48-9afa-c1e2c0cdafc2",
        "cursor": {
          "ref": "6a0430fa-d4e8-4a95-9a53-a9be3944ef43",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "016441c8-7918-47f9-826f-e40264b4e1f5"
        },
        "item": {
          "id": "fd73f96d-9f03-4f48-9afa-c1e2c0cdafc2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e1c4e5b8-c869-4125-9065-442939a76a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15a5d7f-670d-4a02-9382-4216b7bc987b",
        "cursor": {
          "ref": "3f043461-ac5d-4ec2-9c18-92c3d0e552d1",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b827af3a-f622-4e33-a082-a9468c2fbeb5"
        },
        "item": {
          "id": "d15a5d7f-670d-4a02-9382-4216b7bc987b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "86454cc8-6327-49b0-aab2-e403ab703d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069f7be7-12f1-464f-897b-3a6d7964d036",
        "cursor": {
          "ref": "0be8af29-956a-4b61-b7d5-c73694b84c4a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3111b647-a9bf-4451-9ca2-96de2f711be3"
        },
        "item": {
          "id": "069f7be7-12f1-464f-897b-3a6d7964d036",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "504f2bdf-a818-4189-92d2-72a1d9f1c18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197d673f-0b9b-4aa8-b06f-12d26473af0b",
        "cursor": {
          "ref": "aa1aea80-f2c7-4b6e-937c-fbc686cec573",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "17fbab52-bc3e-4f05-a56a-8f2874dfbbd7"
        },
        "item": {
          "id": "197d673f-0b9b-4aa8-b06f-12d26473af0b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bce468ae-deb5-40c5-9746-05fabb6276a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b348fcc1-5184-429f-8481-094d8a8fc269",
        "cursor": {
          "ref": "87998688-5c83-4b2b-991b-20db56d8d2b8",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "513fe4fd-d51f-48ca-97fd-b33b1c114d42"
        },
        "item": {
          "id": "b348fcc1-5184-429f-8481-094d8a8fc269",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "da2d2554-1289-4c04-887d-42fbedd0a986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b8af55-3633-4c65-8b92-927cf0a11087",
        "cursor": {
          "ref": "0c7b8dc8-ed65-44f1-ae18-7bf3b3e7c242",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e946ebc2-2cd0-418d-bc4f-74a0155d58b6"
        },
        "item": {
          "id": "f7b8af55-3633-4c65-8b92-927cf0a11087",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "74888140-4ab3-4dc3-a4a8-ab1a313cfe90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7afb70-eb71-4b92-a650-4d41e5f4d111",
        "cursor": {
          "ref": "717a4d11-4119-4bb1-9a89-ed74d69f6e49",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8001db64-7fb7-4cfb-ae7b-757753433d2d"
        },
        "item": {
          "id": "6d7afb70-eb71-4b92-a650-4d41e5f4d111",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9c4c3f71-a63b-48d8-aa72-8bf077bd5020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fbbff5-d50e-4c51-b0c6-4768b87dd550",
        "cursor": {
          "ref": "c6b1d400-f71f-4c2d-b996-72c4eb24b44a",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8b236079-93ca-4406-b642-b0474279f5f6"
        },
        "item": {
          "id": "96fbbff5-d50e-4c51-b0c6-4768b87dd550",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5c09edc3-86a5-4019-a998-35b6b07c4643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7964d154-30e1-42dc-ad04-59f9d92dc871",
        "cursor": {
          "ref": "794d8da5-6a3a-4587-9db5-fb4d40c12af5",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "512e71c5-6d5c-4121-b676-b960e5538820"
        },
        "item": {
          "id": "7964d154-30e1-42dc-ad04-59f9d92dc871",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d9a4e409-a2cd-4e15-ab4d-a0e5f9ec1f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60f3902-2a28-43a4-b59e-2024d071551e",
        "cursor": {
          "ref": "9e8e4aa3-ad01-435a-9a8c-06a2d71fa2b5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a1f01dcb-05a7-4641-8fcd-b6ef40379495"
        },
        "item": {
          "id": "a60f3902-2a28-43a4-b59e-2024d071551e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3c69f285-88c3-4539-a04c-01f1d51e83e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c0452d-0b64-4624-9ad1-c969a3f1cc84",
        "cursor": {
          "ref": "7b0d2b27-bd50-4e06-a08d-15f53ba1faf3",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "99978982-92c0-4057-8bda-eff8c6837382"
        },
        "item": {
          "id": "10c0452d-0b64-4624-9ad1-c969a3f1cc84",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e6298958-e7c6-4375-aee4-0269947a9d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa36ca26-1ab1-4f6d-8637-1b553d8420eb",
        "cursor": {
          "ref": "16058435-5f5c-494d-965e-6856b8ac134a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f5b5c899-11c4-48b9-b74a-a5d72a75238d"
        },
        "item": {
          "id": "fa36ca26-1ab1-4f6d-8637-1b553d8420eb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "77250352-7c46-4ce5-a145-fdc3e5e3ae0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618869a0-55bf-483e-aab0-64bafe1c4998",
        "cursor": {
          "ref": "11f648b4-4f73-4559-9b4b-a0cf43ca8c83",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8dce6fbf-1138-4d83-a58b-10433758779b"
        },
        "item": {
          "id": "618869a0-55bf-483e-aab0-64bafe1c4998",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "88850637-0c6e-45d9-b3d4-d79eb9ca83e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3bae55-e414-4b21-8d3e-29a392efd86a",
        "cursor": {
          "ref": "cb544a8b-7c16-4703-80d0-802bca445925",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c3248e23-f788-451e-beb3-9d370977ce47"
        },
        "item": {
          "id": "2f3bae55-e414-4b21-8d3e-29a392efd86a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fdc63d57-c9e4-49e5-b2e9-11df0b925b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3abdfc2-cb07-4e23-b03b-6df29462c634",
        "cursor": {
          "ref": "74fa5eda-1e48-4e2c-8af7-b928fa36f6bd",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3c189596-3c8b-41c5-8178-48d57dad6bfd"
        },
        "item": {
          "id": "c3abdfc2-cb07-4e23-b03b-6df29462c634",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b58f1020-d0e9-41f0-b9cf-1403343f96db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2308e26a-1742-41ce-b5a5-cbbeec12a27c",
        "cursor": {
          "ref": "7e3935b7-6c72-4bb4-8ff5-87a9d17a8b91",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "efc60d08-436f-4cb9-80c0-057a9552e743"
        },
        "item": {
          "id": "2308e26a-1742-41ce-b5a5-cbbeec12a27c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ec104d1a-a033-4edc-8154-b6ea6afea7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2836c185-fa31-4280-902d-b010c0852ef2",
        "cursor": {
          "ref": "1a4520ff-6fa1-4a26-a569-af113d1f5428",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1cb31809-0f70-4172-b84e-d5f197b710f8"
        },
        "item": {
          "id": "2836c185-fa31-4280-902d-b010c0852ef2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "deff9016-6c64-4960-940f-8b01a25acb94",
          "status": "Created",
          "code": 201,
          "responseTime": 2464,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "b709097c-8e30-499c-9aa7-9ab597265243",
        "cursor": {
          "ref": "b52f2c43-7c4f-4687-983e-7f43020be300",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "95b58d1e-c069-4510-be88-1f3f08c4061a"
        },
        "item": {
          "id": "b709097c-8e30-499c-9aa7-9ab597265243",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "335a9fdc-7f92-443f-b441-c6a0b835db33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c87217d-34a4-4727-b4a4-667525da84c8",
        "cursor": {
          "ref": "e9a79a1c-2140-4268-9eb4-95deee192c91",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cfcaaab0-dd4c-4f1a-99e6-27065486686b"
        },
        "item": {
          "id": "7c87217d-34a4-4727-b4a4-667525da84c8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "49e1dae0-fb29-4b11-9785-3c2b7315313f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ea1e84-df3e-49aa-8c40-20500ee0952d",
        "cursor": {
          "ref": "6c04155d-1c27-407c-8ac3-458306982412",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bd6d1f94-0afc-47e4-aae8-e43c9fb41987"
        },
        "item": {
          "id": "91ea1e84-df3e-49aa-8c40-20500ee0952d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "749e774d-875f-4beb-bf20-5080a7ab6c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da47595b-7101-495a-8bb4-9f11c7f8eef3",
        "cursor": {
          "ref": "180a6b11-a2cb-4d02-9809-6602fd987a72",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5adeb716-81ac-40c9-a10b-d8f67cda5d98"
        },
        "item": {
          "id": "da47595b-7101-495a-8bb4-9f11c7f8eef3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b942197c-9faa-46c7-89d6-667a51e00088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845d92af-da74-4c38-a788-9527ceae3b00",
        "cursor": {
          "ref": "898aca28-8f55-421e-9d7c-ca446caa9f6f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2b359f0d-daae-4c0b-8982-6775abe96ba1"
        },
        "item": {
          "id": "845d92af-da74-4c38-a788-9527ceae3b00",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f394dd84-2fcb-439c-b233-c9c752f8a44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138b2bdc-7687-46bd-b6a9-15af327307ed",
        "cursor": {
          "ref": "5ded00de-c040-4762-b3d1-5b46e8462705",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5d040a71-5570-46d5-be99-9da528b697f8"
        },
        "item": {
          "id": "138b2bdc-7687-46bd-b6a9-15af327307ed",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0d7dd620-962f-48e9-83b5-88f9c6d57b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98a8601-e9dc-405a-9cef-936d1fdbc280",
        "cursor": {
          "ref": "12cab89c-d67b-4e6f-89c8-fae4dd68d271",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e3a3959a-65f7-46a7-8ca1-a8abdc3c43bc"
        },
        "item": {
          "id": "f98a8601-e9dc-405a-9cef-936d1fdbc280",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "364aa65a-8385-471f-8b68-f0e8f069a307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3e689d-07f6-4daf-9685-3056b3002331",
        "cursor": {
          "ref": "0a0c7ab4-b5f7-4bd3-9462-affc98de6a96",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d8e4a254-3b3d-4712-9c96-5728c7f20898"
        },
        "item": {
          "id": "9f3e689d-07f6-4daf-9685-3056b3002331",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "91282cf4-6fba-4b69-a80e-177c17ff2306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5d8c06-71f2-4884-a885-2c8d767ebd27",
        "cursor": {
          "ref": "f2a775d4-6b39-41f1-8ae9-d81e9543cdd0",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e589e94b-962e-49d1-8ae1-cb25d4ef052a"
        },
        "item": {
          "id": "5d5d8c06-71f2-4884-a885-2c8d767ebd27",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "768de1ed-cd40-419a-8809-1fc07147d3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed95ee4-6102-4eeb-8c35-391d1d3b5945",
        "cursor": {
          "ref": "3bbb7754-6aba-4f4e-b088-ec4145221a5d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b741c4d6-262a-4942-8ddb-8f1f77cb6971"
        },
        "item": {
          "id": "3ed95ee4-6102-4eeb-8c35-391d1d3b5945",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5cf00416-df19-44b2-bbf0-9fb627daad5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d5899d-156e-4aa5-a163-7bab2a4e5b66",
        "cursor": {
          "ref": "10b2b1b0-2851-4835-a9ad-b8abadee9735",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d25b2496-e99d-4cf9-9d0b-92daabd8e672"
        },
        "item": {
          "id": "89d5899d-156e-4aa5-a163-7bab2a4e5b66",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bd516143-acfc-49bb-a0f9-9b38d0bb5890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316cc62c-21e8-477b-b42d-8203a1690a6a",
        "cursor": {
          "ref": "3897be83-ccd9-4bc5-92db-f841d6cbb722",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "86800526-d644-4c81-a830-17733988fc92"
        },
        "item": {
          "id": "316cc62c-21e8-477b-b42d-8203a1690a6a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "deba2b2e-06fe-40ef-bfa8-c3d0983e4e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9fbb4e-0fdc-4ea9-9cf9-f76beef0b6e2",
        "cursor": {
          "ref": "84784d1a-b2d9-473e-a46d-03d47e4386b7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "454456d0-58be-49b7-a1b6-abb103d5732b"
        },
        "item": {
          "id": "cd9fbb4e-0fdc-4ea9-9cf9-f76beef0b6e2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "47805817-25d6-472b-9652-5bba54b5303e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94117e72-8138-49b3-ac2e-f3e5a9416afb",
        "cursor": {
          "ref": "20661108-bf80-4cd2-a752-49bb8993e429",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "638d9798-4270-44c3-bae5-a398289e7629"
        },
        "item": {
          "id": "94117e72-8138-49b3-ac2e-f3e5a9416afb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b1a1bf2a-681a-43c9-a86a-f641ca88ac42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e761a00-538d-4213-a311-ab8f1b92159f",
        "cursor": {
          "ref": "d265fc57-1d47-46de-8e12-f7f0d6170b48",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3aa37d26-d23a-4c18-b19d-337de62a4790"
        },
        "item": {
          "id": "2e761a00-538d-4213-a311-ab8f1b92159f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "60fa1b05-1911-4a8b-87ae-204718b86828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a5f7fb-3fde-485b-b698-d2c6ac9338a4",
        "cursor": {
          "ref": "5a6245c7-f7a4-4e69-b8c9-9f8c5aab47a0",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "02e09880-1a3d-4d90-aa84-29e5f9947991"
        },
        "item": {
          "id": "f3a5f7fb-3fde-485b-b698-d2c6ac9338a4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "bee23874-53ad-4c5d-b02f-598251409489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6ab6c4-702a-4753-9d75-5a916db220ae",
        "cursor": {
          "ref": "5e8da1e9-d879-4f09-bb05-cadb13ebf50a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d86edd56-1314-4470-b1d9-46702359fc18"
        },
        "item": {
          "id": "6b6ab6c4-702a-4753-9d75-5a916db220ae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0ca6553c-c1e8-4482-8514-ab8c659a7507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777f384e-868a-4c46-aa55-76c3093a1c2c",
        "cursor": {
          "ref": "d5570224-089e-4c2f-b9a4-5332631d8655",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4c96d381-2526-471e-8c4a-68db8a7500e7"
        },
        "item": {
          "id": "777f384e-868a-4c46-aa55-76c3093a1c2c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "843afd92-b47c-4d34-b63f-2ab9d2f3351f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08136e73-3097-4ffd-87b0-23b0b9c6dca4",
        "cursor": {
          "ref": "4e5396d4-5fa9-414b-a1d9-26d5a555972a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a5a596ed-85d2-4d08-a8b3-a8a2382fd77f"
        },
        "item": {
          "id": "08136e73-3097-4ffd-87b0-23b0b9c6dca4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "13575320-d5e7-457a-bcb1-b8d0b1f57f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4788254-4621-410c-a1a3-26668fcfbe1c",
        "cursor": {
          "ref": "35c0dade-f05a-4af6-ab79-5deba7f09756",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "678afb38-4753-4f8f-9fee-3551df1353df"
        },
        "item": {
          "id": "d4788254-4621-410c-a1a3-26668fcfbe1c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "edf8ac9a-3fbf-44d5-a826-16b8ceaf0c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df5cec-d073-4c35-8cbd-4f44365f74e1",
        "cursor": {
          "ref": "303c5c08-1c79-461a-83b3-d156ded97cbc",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0a492b08-a476-4e06-b044-f60e6347bfd1"
        },
        "item": {
          "id": "11df5cec-d073-4c35-8cbd-4f44365f74e1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "227cd3c5-85bc-4f02-b5ec-9b3dd4f2e8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bbd020-2b6f-4294-a124-12508b74f64e",
        "cursor": {
          "ref": "0abcd9d8-2055-4de8-80d8-75ef4f275a10",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a11eee39-1c32-400d-afd9-c1e04ca548de"
        },
        "item": {
          "id": "73bbd020-2b6f-4294-a124-12508b74f64e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8ac05fb8-e027-4a9c-a124-82dd1e062f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac74bf9e-69c8-4f3e-9ec6-6b7668d0bb04",
        "cursor": {
          "ref": "522da3c4-48b3-44ee-b647-cf393c2999da",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "90078160-7c76-4064-9f52-336a8b5b7168"
        },
        "item": {
          "id": "ac74bf9e-69c8-4f3e-9ec6-6b7668d0bb04",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4ea915ad-6fbe-4d56-8ffe-27b2df819960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa008def-075b-4729-a81c-fe798fc80fc9",
        "cursor": {
          "ref": "cb8b7d8e-63cc-4bf5-8d9a-fb7cb37a27e9",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "32294a53-0425-43f0-afea-31cba73e96c2"
        },
        "item": {
          "id": "fa008def-075b-4729-a81c-fe798fc80fc9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e93d8083-098c-4fa7-93be-336368957e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33eee2dd-c135-4d2e-a0f1-ab91f0be9f8d",
        "cursor": {
          "ref": "73eefec2-b223-4275-8d33-a5362059512e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "68978fcf-79f0-4e35-9e2b-46be5453f631"
        },
        "item": {
          "id": "33eee2dd-c135-4d2e-a0f1-ab91f0be9f8d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "09ddd037-9b09-4791-9e3d-a19a353abadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27996f5b-d1e9-43a4-b6e6-899d1a2e7df0",
        "cursor": {
          "ref": "ef4ca756-2033-4888-a17b-fac53fa78110",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9d5583b6-cfb6-4784-b9e9-a3a29bf3fd42"
        },
        "item": {
          "id": "27996f5b-d1e9-43a4-b6e6-899d1a2e7df0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "44aa30e3-e475-4ee6-87ec-178f4b7b787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c73a69-9542-4fa2-be4e-27f315edf78d",
        "cursor": {
          "ref": "f5aad439-0dba-4ca1-b504-4fd5f5f4cec0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ebe8b4f6-5cd8-491f-abc3-2661f7cbbc0d"
        },
        "item": {
          "id": "07c73a69-9542-4fa2-be4e-27f315edf78d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3a4dc7c1-0faf-4062-a63e-a08d06eddc94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da799b16-1869-4225-a264-68c07549e42e",
        "cursor": {
          "ref": "1a3fa497-80ba-4969-9e71-61fbb56664a6",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b1c9d4ee-f040-45c9-90f2-0f16c4b8ccc6"
        },
        "item": {
          "id": "da799b16-1869-4225-a264-68c07549e42e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b4411655-d3f2-4ef3-bed9-d6347ac89f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c821b-0415-417e-8001-f5f90eb2ecf1",
        "cursor": {
          "ref": "9c78b1e6-2c04-4ab3-b07e-7e1ea1742475",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e0d5df54-5c59-4662-9fc7-544f6ef72e02"
        },
        "item": {
          "id": "278c821b-0415-417e-8001-f5f90eb2ecf1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1dfc9850-1f82-4d70-b6f5-3f624f03f035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248d8796-235d-4400-a80c-c71a8e1a98ff",
        "cursor": {
          "ref": "c6715c57-497d-4da9-aea9-3052c34c3cd3",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0cccc451-69f4-48e4-859c-d2fc09584e25"
        },
        "item": {
          "id": "248d8796-235d-4400-a80c-c71a8e1a98ff",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3b0cb3cb-a5e9-45e9-bffa-77eea3cbf5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa71c6f-5a14-4eae-ac7b-f2694e21f915",
        "cursor": {
          "ref": "9aef879a-73a0-4dee-9ab6-48eeefe5d82c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "714195a6-aa4a-46d8-b326-357db58561b1"
        },
        "item": {
          "id": "2fa71c6f-5a14-4eae-ac7b-f2694e21f915",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a603abde-2db8-451a-ac8d-fbe44c9ce8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8b95f01d-2113-4ec2-8b4c-ac96f2933657",
        "cursor": {
          "ref": "d7591350-6b6f-4fec-b2b9-640e1b22b9b0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3c34b960-d5fa-4ce0-8570-eb3a490197ba"
        },
        "item": {
          "id": "8b95f01d-2113-4ec2-8b4c-ac96f2933657",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7ab5505c-5495-4234-8867-01b0aa6ddb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "103cdd6f-a413-45cf-9967-b81f7d944d41",
        "cursor": {
          "ref": "fcf7671d-b706-43b6-958d-e21bd0c7ef64",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "95d26f37-764f-417e-b0f2-d243c988872e"
        },
        "item": {
          "id": "103cdd6f-a413-45cf-9967-b81f7d944d41",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3f295cee-387e-4d86-8b0d-25be94c1b564",
          "status": "Created",
          "code": 201,
          "responseTime": 3453,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c533c2-053e-4df1-9329-e6d0a44b6842",
        "cursor": {
          "ref": "dbfbeb02-515a-4759-a261-35808ddd462a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5c31a2a5-622c-4d19-966d-098d89ad8ff4"
        },
        "item": {
          "id": "16c533c2-053e-4df1-9329-e6d0a44b6842",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c668a964-65f0-4538-8aa5-409f57839808",
          "status": "Created",
          "code": 201,
          "responseTime": 2911,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "255ece2c-7cb6-4fb4-86b0-401b44f6a60e",
        "cursor": {
          "ref": "1e5b1c35-5c9e-45a4-9464-0ecfca95cd38",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "71d9dd8b-e2a5-4d9a-aaac-8d75aec9f160"
        },
        "item": {
          "id": "255ece2c-7cb6-4fb4-86b0-401b44f6a60e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b429c1cd-8f35-44c0-963f-429b23a31546",
          "status": "Created",
          "code": 201,
          "responseTime": 2773,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b135564b-089e-4a85-acbf-2cbe467abda6",
        "cursor": {
          "ref": "34481dd5-1548-4426-a28f-a7fc9f3d9ed0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3e355083-2960-404f-ad69-18c1bb17d124"
        },
        "item": {
          "id": "b135564b-089e-4a85-acbf-2cbe467abda6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "907320da-48ec-46fb-9dd9-c78ea638535e",
          "status": "Created",
          "code": 201,
          "responseTime": 4494,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-02T00:45:13Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-02T00:45:13Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "c2c09c7f-c063-4e9f-aba7-8b99e850e0c3",
        "cursor": {
          "ref": "f78462bd-e998-4f03-ba85-fa04ff9eb59f",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "391112a1-2cac-4ae0-a1fd-c36b5839c545"
        },
        "item": {
          "id": "c2c09c7f-c063-4e9f-aba7-8b99e850e0c3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6216e7ef-32b8-4c4a-817c-669529356393",
          "status": "Created",
          "code": 201,
          "responseTime": 6330,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b6bb77-2f10-4dbc-9579-f8027bcc9d68",
        "cursor": {
          "ref": "7e333482-fbaf-4e52-bbab-ac14dc035f81",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6fe3deef-abfa-4e85-99e9-224ef5f9da31"
        },
        "item": {
          "id": "19b6bb77-2f10-4dbc-9579-f8027bcc9d68",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d69e8dee-2d4b-4ef9-8538-14706d12ee8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b6bb77-2f10-4dbc-9579-f8027bcc9d68",
        "cursor": {
          "ref": "7e333482-fbaf-4e52-bbab-ac14dc035f81",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6fe3deef-abfa-4e85-99e9-224ef5f9da31"
        },
        "item": {
          "id": "19b6bb77-2f10-4dbc-9579-f8027bcc9d68",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d69e8dee-2d4b-4ef9-8538-14706d12ee8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9754782b-8219-4abf-8f12-988eeb92ee75",
        "cursor": {
          "ref": "abb68399-c3d9-4ab7-89c7-85c923d74187",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3ff23e3e-01a7-4e93-a0b7-a6eb01d53496"
        },
        "item": {
          "id": "9754782b-8219-4abf-8f12-988eeb92ee75",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7b246ae2-d854-42d2-b043-e8d9e2abfa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a179b416-2409-414f-a60e-c8c43fbdf813",
        "cursor": {
          "ref": "ff03306e-f34a-4e9c-82fd-75bcaa1d46b8",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a195ac47-bd9f-4471-b839-992a0c37a413"
        },
        "item": {
          "id": "a179b416-2409-414f-a60e-c8c43fbdf813",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "685bbd2d-cc95-4be8-84af-cda1e434f2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89c2275-26ce-4328-8cff-e0526e5a28ee",
        "cursor": {
          "ref": "aed763e8-317c-47e4-bc1e-f3998ff4fcb6",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ce2daee7-d46d-44bf-976b-845054f70b16"
        },
        "item": {
          "id": "f89c2275-26ce-4328-8cff-e0526e5a28ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7ce07511-ba25-4d52-bc4a-2e769dcc11a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2658924-756d-435a-90e9-b036287d6f26",
        "cursor": {
          "ref": "2207b4b5-b3e6-47ed-83ff-4120889b17d5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bc337827-d3e8-496e-b9b3-1757830cf130"
        },
        "item": {
          "id": "e2658924-756d-435a-90e9-b036287d6f26",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a9eae9f6-d1f0-4b3e-8dae-7520ba866c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ce9ca5-ded7-4c53-a030-407e3376c0f2",
        "cursor": {
          "ref": "294569d8-68b6-4a18-bda2-81b9992c1f9c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f6179299-a639-4e51-8ade-965be3d80d5b"
        },
        "item": {
          "id": "c9ce9ca5-ded7-4c53-a030-407e3376c0f2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7b17c680-8982-4f71-b530-0dacaa85ba0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c44500-ecad-464d-b7bf-19c95acf3e2c",
        "cursor": {
          "ref": "e7f8de1f-0401-43df-924f-636d5ec44766",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "79a1fdc0-88ef-4f80-b631-7f7979bc6293"
        },
        "item": {
          "id": "c3c44500-ecad-464d-b7bf-19c95acf3e2c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0ce344de-a2b7-4a53-b5ec-1b60d681e34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fc7b22-ab91-47eb-ad30-4bd8f4059e3d",
        "cursor": {
          "ref": "95b468be-74da-47d0-81ca-84b1e630e387",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "39e3d260-ff93-4c23-8735-97b2129ec9fa"
        },
        "item": {
          "id": "c7fc7b22-ab91-47eb-ad30-4bd8f4059e3d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c79762cd-6a86-45b2-8b88-a457684f5de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0a012b-6456-457a-b0fc-88fb8646ba82",
        "cursor": {
          "ref": "a821a277-322f-4ed1-9ee7-3e5e3f85c06f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b8a5dd10-ade0-4ce0-ab4f-27127feb2e06"
        },
        "item": {
          "id": "eb0a012b-6456-457a-b0fc-88fb8646ba82",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6282530d-28d3-4df2-8328-86691a143f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2da283-8fdf-4232-8b7e-bbec8bb80a0d",
        "cursor": {
          "ref": "094a891b-46de-4b61-9045-c5e01460d270",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9e8ccf31-df2d-4ef5-ada5-72f5da5afac4"
        },
        "item": {
          "id": "fe2da283-8fdf-4232-8b7e-bbec8bb80a0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8d31adf7-37ec-419a-99ed-e9788e90e6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979d5fab-b36f-4ed3-839e-a7fab2fd085f",
        "cursor": {
          "ref": "b7ea29f6-3ab1-489b-a3ac-d19c1b19ed62",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0f119d8b-bd6a-449f-9a5b-afd7c885147b"
        },
        "item": {
          "id": "979d5fab-b36f-4ed3-839e-a7fab2fd085f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0469da97-7eab-4a52-a699-ebd7af0135e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14debb55-c487-4525-9edd-1705ad623006",
        "cursor": {
          "ref": "36740507-82ec-4c5f-9aef-da5a46ab65a5",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e7d47d2a-6be0-4764-ba8e-920b15ce724c"
        },
        "item": {
          "id": "14debb55-c487-4525-9edd-1705ad623006",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fcacd7d1-d5fc-4963-b465-c05c8ae01f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfee315d-5b80-4aec-baba-7207dd6da765",
        "cursor": {
          "ref": "7b4e2682-8caf-49a8-9efb-75d5478370cc",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "877fd99f-1e2c-4705-b133-4ce2ac05ab3d"
        },
        "item": {
          "id": "dfee315d-5b80-4aec-baba-7207dd6da765",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a4fff601-f051-41bf-bb66-2a4656d9db5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b2089d-2b05-4d0f-bb1a-369e99f2bffa",
        "cursor": {
          "ref": "4ae678ef-6afe-4064-8233-26e058614694",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "56355705-b2b9-40bd-8072-2e81c5c462b0"
        },
        "item": {
          "id": "33b2089d-2b05-4d0f-bb1a-369e99f2bffa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aca52a49-97c5-4e86-8f8e-0413b00ebbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbfa99b-3845-495e-a824-2a25a3bd89b5",
        "cursor": {
          "ref": "cceae5b2-9154-44e8-92b1-f8e4ed25fe8b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d9942c30-3804-4239-ac71-4254f7e25e01"
        },
        "item": {
          "id": "bbbfa99b-3845-495e-a824-2a25a3bd89b5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a0bbe58f-b3da-450f-a69a-4f23bded8b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9808f3e-f1bf-446f-9825-0aa13a146a50",
        "cursor": {
          "ref": "5d7e022e-6c98-4922-9201-31cf813dd160",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "03e3c848-96b1-4d1f-aaa7-32a27456f743"
        },
        "item": {
          "id": "b9808f3e-f1bf-446f-9825-0aa13a146a50",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "27cc82d6-fa0a-4a5c-a4b5-5a1279f80b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d3178d-6ec6-4856-9610-726ed47501d5",
        "cursor": {
          "ref": "94977756-5c43-420c-934d-bcbe5e63fcf4",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b8aed1c6-a174-4826-95b8-b87b7977ccbe"
        },
        "item": {
          "id": "93d3178d-6ec6-4856-9610-726ed47501d5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6bdf1495-879a-4ce4-85f4-dc02b9c58255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f316fa19-d899-4084-8336-668976a06013",
        "cursor": {
          "ref": "b2d53c37-439a-44aa-9c05-7e7327c44294",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ce15d455-39a7-4844-94dd-b14de9132329"
        },
        "item": {
          "id": "f316fa19-d899-4084-8336-668976a06013",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e4e1fcda-20f4-4a7d-aad7-b61d8981aafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d3ee0a-1fd9-4dff-9ef9-7bf10648ab30",
        "cursor": {
          "ref": "ef12ceee-b59e-4b74-b3e1-1712fdb16188",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d9df8a46-03f7-4be0-89bf-c0682e69df85"
        },
        "item": {
          "id": "96d3ee0a-1fd9-4dff-9ef9-7bf10648ab30",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ee9a7665-0117-4371-a4cf-be8a05f026e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8508d08f-ee33-4001-ae02-52a7607e4ec4",
        "cursor": {
          "ref": "d9b5f97a-39c2-4caa-bd09-0c8841fc00c9",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "66d457e7-87fa-4e2e-86bc-a97b468e7f43"
        },
        "item": {
          "id": "8508d08f-ee33-4001-ae02-52a7607e4ec4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "76fd8fb0-33b5-4d66-b7ad-6a41a96ce321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91924162-4c6d-4007-9fd6-9189ba81ff42",
        "cursor": {
          "ref": "219b2231-a070-4467-83bf-99d4f3d5f902",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "76d6499d-f33d-4dd4-acb1-567171279aee"
        },
        "item": {
          "id": "91924162-4c6d-4007-9fd6-9189ba81ff42",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "eb855522-918a-4415-98f0-c933e2304b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e8a8cc-3378-46be-92df-1f8a343c6d27",
        "cursor": {
          "ref": "bde8393e-9072-43fa-b7fd-683c64c40d9d",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2e65b0f9-3ab6-4640-b8ea-ba0a6e9fb9b4"
        },
        "item": {
          "id": "c3e8a8cc-3378-46be-92df-1f8a343c6d27",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8092794a-c953-477d-bbfc-0d0eb2ef0ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f8f70c-daa9-4de5-baa3-b25fe53d6eb1",
        "cursor": {
          "ref": "38446875-d5e1-49a7-a84f-e47099fbeb54",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8e6bffb7-6832-445c-b90d-2cf468166517"
        },
        "item": {
          "id": "98f8f70c-daa9-4de5-baa3-b25fe53d6eb1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a1fbdc26-967a-4b93-8e6d-af189d944e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5a8f61-1997-41f5-9079-9c590c6b02ba",
        "cursor": {
          "ref": "30d7dbdc-5994-4308-88e2-00ed99004e95",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "364e9096-9da4-4af3-9a82-ee21e3d50b8a"
        },
        "item": {
          "id": "be5a8f61-1997-41f5-9079-9c590c6b02ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0ebb1ee7-7cff-4a4a-a61c-fda35382dc6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fbfbf8-5607-496e-bceb-dc63e15e86c8",
        "cursor": {
          "ref": "3fa4c4b8-c36e-4e68-8352-5e255d840cf0",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "deb79dff-2fe5-4e79-9df2-ff25718f4c08"
        },
        "item": {
          "id": "b0fbfbf8-5607-496e-bceb-dc63e15e86c8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dcb50253-4ee6-467d-a255-480cde86e00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b89509-6b3c-44ed-8922-c0d723709902",
        "cursor": {
          "ref": "9b3127f2-9a7d-40c5-accb-0edaa59669ca",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "82a63497-21b4-49c9-a6c7-64a60092d619"
        },
        "item": {
          "id": "c7b89509-6b3c-44ed-8922-c0d723709902",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1e236ccc-3139-4780-aa41-6e5c043447cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d36d3ea-4f08-45ee-8c59-00f75168e0ee",
        "cursor": {
          "ref": "b1d19a3e-509f-4996-add7-f4b665ebef88",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "99b71d05-1489-44c8-8637-867fbcd8498d"
        },
        "item": {
          "id": "2d36d3ea-4f08-45ee-8c59-00f75168e0ee",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "abb70823-ae60-4876-8b9e-0c58a85490dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bacce6-2486-4ffa-82fb-f55391e5819c",
        "cursor": {
          "ref": "e92b991c-d2a4-41e7-973b-decb6924b432",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8d27f1cd-960b-49cb-8f86-0788f6cf8d32"
        },
        "item": {
          "id": "04bacce6-2486-4ffa-82fb-f55391e5819c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0b4b3c75-7a40-4eb9-b5d6-106821269f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ce222d-5eb2-4fa6-9c33-6b91bb80b8e8",
        "cursor": {
          "ref": "f1a3d1ef-d3b3-4343-97c0-16e6c769c1f8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b0a86110-87c0-4386-aec3-91c8d27fe636"
        },
        "item": {
          "id": "36ce222d-5eb2-4fa6-9c33-6b91bb80b8e8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1b8a3f36-024e-42eb-8405-8124b2712485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cb39c9-8c4e-465d-89fc-9dc08ff78cb5",
        "cursor": {
          "ref": "20f78321-6aad-4cf5-9928-2ec2c4741c79",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "43afeac5-0111-48d1-84c1-6626e1d485c4"
        },
        "item": {
          "id": "b5cb39c9-8c4e-465d-89fc-9dc08ff78cb5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5aa55a8d-f144-47cb-8d25-84c1ff15a6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8869fe0c-6732-404c-ba3f-e1a138cb8cbb",
        "cursor": {
          "ref": "92ea1fc1-8880-45c9-b582-700c56135871",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3a1cc56d-0723-41f3-8619-f97b45c940d1"
        },
        "item": {
          "id": "8869fe0c-6732-404c-ba3f-e1a138cb8cbb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "37c1c14b-c4d3-41a9-9b17-ad6282c42cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05568585-1df7-4686-b256-1118278039e4",
        "cursor": {
          "ref": "f44fa029-f4d8-4cf6-bbf6-052cc85243b9",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "727444e1-3e6d-43fc-bc5a-6ba7b8342cb2"
        },
        "item": {
          "id": "05568585-1df7-4686-b256-1118278039e4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b122f133-6e10-489f-9093-ee1bc77bd444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d11d5d-f700-48a3-843f-a483afe491e3",
        "cursor": {
          "ref": "618f0955-211c-423e-b415-a13cd2e98558",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a9d312d8-c8ae-4f5e-b43e-d39f61ed3012"
        },
        "item": {
          "id": "e9d11d5d-f700-48a3-843f-a483afe491e3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "515ea82b-4877-4b9d-90be-87c9525b9980",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "120e87db-d32e-4dc5-86f6-6e0ef8451414",
        "cursor": {
          "ref": "c6f3a776-4f0f-4d14-8f79-fe2dbbbb404c",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "648b760b-eb1e-476a-8c6c-6faf58c87d05"
        },
        "item": {
          "id": "120e87db-d32e-4dc5-86f6-6e0ef8451414",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "66dc96d0-8575-4449-9778-493cb9e8e2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "7068729d-74f8-4106-887b-5cdc3281d12f",
        "cursor": {
          "ref": "c54a5178-de6d-4a46-bf37-a0bdfe128833",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "636d2309-7e43-4a37-85a3-89f2a883482f"
        },
        "item": {
          "id": "7068729d-74f8-4106-887b-5cdc3281d12f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8add1824-d12b-42da-80c1-81bf8b531a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7068729d-74f8-4106-887b-5cdc3281d12f",
        "cursor": {
          "ref": "c54a5178-de6d-4a46-bf37-a0bdfe128833",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "636d2309-7e43-4a37-85a3-89f2a883482f"
        },
        "item": {
          "id": "7068729d-74f8-4106-887b-5cdc3281d12f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8add1824-d12b-42da-80c1-81bf8b531a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d340b1c-18b4-4ae9-93c6-f6565c637a3a",
        "cursor": {
          "ref": "e7aab4af-af8a-4889-97fa-23d793469de2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9ca513b8-56f7-437e-a458-9b185e229329"
        },
        "item": {
          "id": "3d340b1c-18b4-4ae9-93c6-f6565c637a3a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f6b9e8dc-1af5-4008-a1a5-2653f88ba55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5c1869-49de-407c-93d5-6d2fc47d2acb",
        "cursor": {
          "ref": "8b071ae5-d93c-4a10-ada9-cd8b1e85ed17",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e0b3feb6-f40c-4805-9c62-389bc0eb8bca"
        },
        "item": {
          "id": "8a5c1869-49de-407c-93d5-6d2fc47d2acb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0c286292-ace2-480f-88f8-af6cf101a11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e289fef-f300-4a26-b440-9c18df103f34",
        "cursor": {
          "ref": "ea2604a8-3329-4213-a759-a91f11ce2c46",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d88096ca-a07d-45b2-8a56-953aa12802be"
        },
        "item": {
          "id": "7e289fef-f300-4a26-b440-9c18df103f34",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e3397aa4-fae7-435b-91fe-192512eecb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19912d7e-c5ee-428a-89b8-bd6a35fcfeff",
        "cursor": {
          "ref": "04d0f31f-04e5-46f3-a039-052dd4bf2c97",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9603e74f-b629-4841-aceb-abac8f744efb"
        },
        "item": {
          "id": "19912d7e-c5ee-428a-89b8-bd6a35fcfeff",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "620046d4-eb0e-4afa-840f-b41bf9c7eb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44b98d7-7fcf-4516-bb6c-c17dbb6ab4d3",
        "cursor": {
          "ref": "5fabdcc3-1174-440e-8372-d16960f6dca5",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8be1a8b5-8acd-46f1-b79f-45886329a87b"
        },
        "item": {
          "id": "f44b98d7-7fcf-4516-bb6c-c17dbb6ab4d3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "19ae0607-c552-40f3-857f-d58e900b66ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb49550-67ef-4170-9a48-d4c6d2fd062f",
        "cursor": {
          "ref": "77cac8b7-6853-422c-ab3e-25148b64bf86",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1f9ddf30-d315-4167-90f2-fe576cfbf278"
        },
        "item": {
          "id": "4fb49550-67ef-4170-9a48-d4c6d2fd062f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "47a8e5cd-9444-4ad4-876a-481b7be59d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301d9c9e-dd59-47d2-91cc-1ebf95e3d89a",
        "cursor": {
          "ref": "502f4c4b-cbd6-45eb-95f4-8f060624494d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9e11dd64-0888-4225-9677-def5b3f6a5ae"
        },
        "item": {
          "id": "301d9c9e-dd59-47d2-91cc-1ebf95e3d89a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "008f53e4-1285-4ab2-b896-3535370fe1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a0ec0f-4bc0-419b-a0b1-7b32d49a93b0",
        "cursor": {
          "ref": "dba98810-d5b3-4a8c-a46b-1ac340421595",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f6c5ac2d-eff8-419a-9cec-fdeb84232be6"
        },
        "item": {
          "id": "e1a0ec0f-4bc0-419b-a0b1-7b32d49a93b0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c2e15dd7-3cb9-4b4a-a6fb-a7bc62cb0e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453f2aba-3a32-4497-be4d-a9f5dee7f023",
        "cursor": {
          "ref": "ddee4946-bf25-4585-ae3c-eb29d7e90d04",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "41157328-1fb4-45fb-91f2-d61ee6884086"
        },
        "item": {
          "id": "453f2aba-3a32-4497-be4d-a9f5dee7f023",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dde72360-3776-4ba9-9ae2-3d2a554a8d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c5ed1f-e9bc-4c7a-9e56-ecf43a95671f",
        "cursor": {
          "ref": "116ea28a-2524-4ae9-89f3-c34032fd4a71",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "657dc86d-c6ab-4768-b1de-87b8a56e5dc4"
        },
        "item": {
          "id": "e7c5ed1f-e9bc-4c7a-9e56-ecf43a95671f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "94b41f41-8e16-4150-a034-2d65da76434b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616e4c42-c52b-40d4-a6c3-1cfc33e000cb",
        "cursor": {
          "ref": "3e08061a-3b37-4016-98c4-9df697cab723",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bf096a9f-1553-471c-aa91-31a13dc18190"
        },
        "item": {
          "id": "616e4c42-c52b-40d4-a6c3-1cfc33e000cb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e3702d0d-a2c4-445b-a64f-6698e13ed726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d5fdc6-5c87-4a2e-8841-c169a7a71538",
        "cursor": {
          "ref": "658d768e-ac02-440d-adaf-349fc33e5ba1",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d3f31ced-5bc8-4998-83bd-25dfcf37a45a"
        },
        "item": {
          "id": "32d5fdc6-5c87-4a2e-8841-c169a7a71538",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f13d0b9d-075b-45b3-820d-3bbe209d6753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff4bc6d-c145-4e54-9e16-b9a99d4d0627",
        "cursor": {
          "ref": "3ed7a224-77b0-4a29-87c9-65858cd50634",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "292d989e-6b2b-4353-92a0-ca099794a86c"
        },
        "item": {
          "id": "0ff4bc6d-c145-4e54-9e16-b9a99d4d0627",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0cb9a2a5-f8b7-4875-a212-95f84f8ed287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e19ccc7-ecb4-474c-b510-f99aada87b4b",
        "cursor": {
          "ref": "aa901e75-e858-4ffb-befb-43643229ba3d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1773f4fa-6cf8-47a6-8af2-e1ed68c58082"
        },
        "item": {
          "id": "1e19ccc7-ecb4-474c-b510-f99aada87b4b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6a3653c0-c579-42d0-8dcd-b57f83e63c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aedc326-df7b-4ed5-9479-39e2e8a95b3f",
        "cursor": {
          "ref": "a835fbb8-ae61-497c-8ad1-be0c8817ad4f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "161ca762-a6b8-422c-89e8-f4924a7de4c1"
        },
        "item": {
          "id": "0aedc326-df7b-4ed5-9479-39e2e8a95b3f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f5a4f664-0093-40c5-874b-fb3f886dd57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6653b61a-d035-48be-8d66-74eb1bd41857",
        "cursor": {
          "ref": "9b0970e3-1104-4b65-b3c1-1f15e87656a9",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "40648548-95f2-4ffb-8b26-3612a8b4b0f3"
        },
        "item": {
          "id": "6653b61a-d035-48be-8d66-74eb1bd41857",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b885bedc-bbea-4bce-9d40-78673d9900e8",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "dad3e1bf-26ec-4374-92cb-6218391f81b5",
        "cursor": {
          "ref": "d62d0f41-3223-4f7d-8fb3-b1200453d9b0",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7aed1825-8dfb-4fcf-9339-cf673cfe5f4e"
        },
        "item": {
          "id": "dad3e1bf-26ec-4374-92cb-6218391f81b5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "684fd106-db17-4682-85db-8297764ed981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bb8d28-673f-4bb9-9fd9-acc32c18a644",
        "cursor": {
          "ref": "d0f4b2fa-cd3b-428b-bd8e-5fc437a5b773",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "31576dd2-22ca-4d6e-9877-2283fbff3e55"
        },
        "item": {
          "id": "f4bb8d28-673f-4bb9-9fd9-acc32c18a644",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "efd092cd-26d8-47c6-8426-be7e6f93f466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdc772c-980b-4537-8cbf-35d89cbf7f32",
        "cursor": {
          "ref": "944892b6-f171-4f3e-afde-ad9c1301d9c4",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dd737795-b45e-45e6-bdfc-a1d58d0e2c8e"
        },
        "item": {
          "id": "7cdc772c-980b-4537-8cbf-35d89cbf7f32",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "40c86a23-7b1f-4edb-8202-0728e179c85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc525bb3-2a81-4de2-a224-bbdb15329102",
        "cursor": {
          "ref": "8793a6f6-4f22-4a47-8a53-353ac37ec87e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "97459e2a-13f2-46cf-96e0-a95ce6d6765d"
        },
        "item": {
          "id": "bc525bb3-2a81-4de2-a224-bbdb15329102",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "71a94e4a-b4f8-4542-a6e0-2945224c9d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea51e06-66e3-49b8-a6fb-db28eb881b42",
        "cursor": {
          "ref": "29f22945-470a-4bd0-ad43-f56c48b49a91",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "209c6fe8-c418-45e1-a57f-3e9e6959d694"
        },
        "item": {
          "id": "7ea51e06-66e3-49b8-a6fb-db28eb881b42",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aea03b03-2978-4d07-b1cf-6214cc28d349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a65085-915f-4ae1-b41e-3ad511ab6894",
        "cursor": {
          "ref": "ba00d008-8779-4147-9149-d90181f20dce",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d00fc304-7140-4fa9-a3fa-98956017bf22"
        },
        "item": {
          "id": "c8a65085-915f-4ae1-b41e-3ad511ab6894",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "79200084-4c91-4832-8cee-fd8f28957bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d794310-7f5b-4662-ab60-690c215a025f",
        "cursor": {
          "ref": "3bbcaad2-70bb-422e-ac23-e43c462e542a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3389c335-42f6-4986-ae49-1fe2b7ebc85c"
        },
        "item": {
          "id": "4d794310-7f5b-4662-ab60-690c215a025f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "35d6bb1f-c4db-4a18-99bc-0c20d304fd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd85416e-87c7-48d4-8a05-d2324545eaf2",
        "cursor": {
          "ref": "9e196897-5227-4e7a-b00c-3c38170431be",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "05199122-d28e-4f2e-8543-4a5302d5bb9c"
        },
        "item": {
          "id": "dd85416e-87c7-48d4-8a05-d2324545eaf2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "089cf4a8-a11a-4806-b15a-23e63deac6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97187ae4-0ecc-4beb-a3c9-174387e82fe0",
        "cursor": {
          "ref": "8780d404-fca8-4a15-857b-1b8aa1618e64",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "be6c715e-f6f5-459d-9cc6-89b362462073"
        },
        "item": {
          "id": "97187ae4-0ecc-4beb-a3c9-174387e82fe0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "92b1e6e0-cac4-4c17-ba36-0bef2636e974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a43b3c-9893-43c3-8af4-1b46f84c66b0",
        "cursor": {
          "ref": "9dc4a7af-82ea-4e34-b4f2-704cddb2fa77",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c4c54b02-ef3b-490f-9894-22df0f080aae"
        },
        "item": {
          "id": "99a43b3c-9893-43c3-8af4-1b46f84c66b0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "22de2a87-cef6-4fc5-8f11-20218e92b71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4472271-9500-4e6d-a60c-f6b4d3dde167",
        "cursor": {
          "ref": "b8c30df7-66fa-4b45-9c27-0c94831f1818",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6aa17e31-acd9-458c-b635-e64bca3da62d"
        },
        "item": {
          "id": "f4472271-9500-4e6d-a60c-f6b4d3dde167",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b4339cb5-51d5-4709-8263-4bf0ced688f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f19151-aeba-4dfa-84bb-916e7e6fe01e",
        "cursor": {
          "ref": "eec71a64-58f1-4a89-9cd7-c480656303ca",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "383b06d1-ccbf-4dc1-891e-71358185baa2"
        },
        "item": {
          "id": "78f19151-aeba-4dfa-84bb-916e7e6fe01e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "50fa23f9-f237-47f0-b39d-db3b23701302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ffdc66-ea8c-4986-9bb3-10f06e0f7071",
        "cursor": {
          "ref": "41570693-e094-4b5d-8086-2e78878a145e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3467f8ad-d72a-48aa-acb9-508f41506b38"
        },
        "item": {
          "id": "41ffdc66-ea8c-4986-9bb3-10f06e0f7071",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fe6765d4-71ad-44ba-a6de-626ad73711b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459454f8-4563-40a1-a6e7-3990ee54d4d2",
        "cursor": {
          "ref": "88c16ef7-8873-4b18-8489-d0c8b6382f9a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a2d02722-8117-428b-a1e9-df7f992a91b3"
        },
        "item": {
          "id": "459454f8-4563-40a1-a6e7-3990ee54d4d2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "42655cc0-c772-431f-be72-2330f327bc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71006c6-f3b0-4189-afa6-dac715d21927",
        "cursor": {
          "ref": "e33baabd-4652-4a48-949c-14d990d81cc7",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ac271c8a-3e91-4542-ae69-1406e76661ae"
        },
        "item": {
          "id": "c71006c6-f3b0-4189-afa6-dac715d21927",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b0d7b04f-7ed0-4392-af16-473f5fa4a437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21559d6-bf1e-4d71-a984-17590dcc9901",
        "cursor": {
          "ref": "c20cd189-539a-4bfa-b9a9-72bd7805790e",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2b888c33-c80b-495a-99d0-eb926abf966d"
        },
        "item": {
          "id": "e21559d6-bf1e-4d71-a984-17590dcc9901",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e819b3f3-b6d5-4086-b8b5-2f443e46a426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff0bd56-5b3e-4f29-bdb8-cae05af0e90b",
        "cursor": {
          "ref": "316dfec8-36e4-44b4-99dd-fb3ba8695498",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1b18c5a4-114a-444d-b70a-45853f3b3a23"
        },
        "item": {
          "id": "7ff0bd56-5b3e-4f29-bdb8-cae05af0e90b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9fb69f1a-d957-4293-a90d-d8ae36d6171a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4daf42b-702e-4c29-b39f-8cf08c59c6c0",
        "cursor": {
          "ref": "fa851569-de37-47ae-a535-c0d3c90aa92b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5c0b992d-d8e6-45aa-af17-fe93601c509e"
        },
        "item": {
          "id": "a4daf42b-702e-4c29-b39f-8cf08c59c6c0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "78a73693-53d6-4a63-83c4-af4f83ceb08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e35b5b-38ce-4b07-82fd-6b8f8af65d47",
        "cursor": {
          "ref": "a2a1efea-5395-4908-94f0-7972ec8e00a3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e9663104-b8ba-410e-a366-0ff2d5e70b97"
        },
        "item": {
          "id": "35e35b5b-38ce-4b07-82fd-6b8f8af65d47",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "13e0dfec-5902-4838-a93f-500411f9932f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136b340d-d840-4289-8328-f77ed090e990",
        "cursor": {
          "ref": "de8e8cd8-64ab-4d15-9fdb-d6c299175caf",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e886f0e8-4ab0-4082-8022-a91ff74331bd"
        },
        "item": {
          "id": "136b340d-d840-4289-8328-f77ed090e990",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "439f188f-69f5-43b3-af07-597bc18be689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84681173-6e6a-41f9-943c-a6f252485d2b",
        "cursor": {
          "ref": "c70b8202-4646-49dd-a62f-3eb38f165012",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "13eb7e0d-46f4-40ea-9c35-0e463c697278"
        },
        "item": {
          "id": "84681173-6e6a-41f9-943c-a6f252485d2b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "24b0216e-d4db-4d66-b53b-115b3ddf21ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2def27-c25b-4d56-a35a-55aa826642e8",
        "cursor": {
          "ref": "b35a18dc-56bf-4654-aaea-b512b84f101c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a4557b11-3a70-4265-a8ed-aef9934a3509"
        },
        "item": {
          "id": "2f2def27-c25b-4d56-a35a-55aa826642e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2d89459b-d4c6-4999-a503-cdd4ab1d2866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f46c6e1-1f5a-4fd7-81fd-cf2452751c3d",
        "cursor": {
          "ref": "2c7b5131-c83c-4fc9-b7ff-484da49208c2",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "500a5951-bde0-4563-bcf6-6ce4be223278"
        },
        "item": {
          "id": "0f46c6e1-1f5a-4fd7-81fd-cf2452751c3d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ddb5d63a-fbed-48e8-8632-c6b08cd04ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2348d184-cecd-464b-81c2-8dcc397f1451",
        "cursor": {
          "ref": "4041015a-3ef9-4268-a0c8-901f77a0cd45",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c4f3d2f8-fdfd-429c-92e4-96b64eb070c6"
        },
        "item": {
          "id": "2348d184-cecd-464b-81c2-8dcc397f1451",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8ceb2c4d-26b5-4fd2-bdc6-c584f28f90b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1110be57-d127-46de-af52-73e01ef74958",
        "cursor": {
          "ref": "d2708601-8597-458a-b4b9-1f8e50d9edcc",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dc0bd280-bad6-471e-b0af-14df5e0b013c"
        },
        "item": {
          "id": "1110be57-d127-46de-af52-73e01ef74958",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9654630d-6741-444e-b6b4-56cfbc7cb3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba58777-05df-43a0-b742-d6c93a59cc9c",
        "cursor": {
          "ref": "7807709e-b218-4087-b5fd-9c761d92982b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e2e48f8f-b050-484b-bc7c-18c0ebf2161e"
        },
        "item": {
          "id": "9ba58777-05df-43a0-b742-d6c93a59cc9c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff0ccbfb-e57c-44af-afde-67d354e1a309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f475498d-8625-4ec1-b041-c3902ccc2f8b",
        "cursor": {
          "ref": "1d9b9f19-dc63-4a66-947a-ad59aa78646d",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "88ea33c2-f6da-46e2-b664-7a5301095a8f"
        },
        "item": {
          "id": "f475498d-8625-4ec1-b041-c3902ccc2f8b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9c7cf6f0-f4fb-492a-8966-ccec360ae6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196ca98a-377c-4729-af7f-191a10af1231",
        "cursor": {
          "ref": "6102520a-ff3a-433f-8eae-f4b8daa007ee",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4642b0ff-9b24-4e6e-906c-ca95afba60b9"
        },
        "item": {
          "id": "196ca98a-377c-4729-af7f-191a10af1231",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "19252278-3b1b-44b7-ae90-356473395989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2180b0-f7b0-4f0a-a78c-ece6b88c5f3a",
        "cursor": {
          "ref": "b67e52fc-a068-4dfb-9aa0-a100829a0979",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "25b0b03d-2ee2-424c-88a5-583095fe1345"
        },
        "item": {
          "id": "4a2180b0-f7b0-4f0a-a78c-ece6b88c5f3a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "99a6a65d-f265-47ee-8a32-aa6142c8aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5534ad61-b616-4248-b589-723975a857da",
        "cursor": {
          "ref": "17e03626-f4df-41c1-82ff-5d04c4139680",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8a54d067-19f2-4b55-9f93-49c79ed32ef2"
        },
        "item": {
          "id": "5534ad61-b616-4248-b589-723975a857da",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "164a95ca-e166-40e8-9833-24190077a7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af88ef8-82ef-4885-9c4a-060c4100cd33",
        "cursor": {
          "ref": "fa224de4-4c1c-4b9d-9bdc-2a446eaeda86",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8ace635d-5384-4bbc-ab72-1f63b54c4bad"
        },
        "item": {
          "id": "8af88ef8-82ef-4885-9c4a-060c4100cd33",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bbd88495-db05-4f71-948e-450c458ab6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a76313d-ea05-40b1-9a08-1f5b57a430b4",
        "cursor": {
          "ref": "99111a97-c522-45f3-a96d-0c256bafc56c",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5c610fb2-7efc-4fde-b75e-a5410c791049"
        },
        "item": {
          "id": "2a76313d-ea05-40b1-9a08-1f5b57a430b4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5e9460ef-4a19-4cb6-ba73-323e9495b567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827dcfb1-35c4-4db7-bcce-1ee14d5ef1b1",
        "cursor": {
          "ref": "f90ac10f-1755-45d4-93f5-2072e44c2735",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b267e594-cbb7-47e6-84d0-b7f8ec7b0f8b"
        },
        "item": {
          "id": "827dcfb1-35c4-4db7-bcce-1ee14d5ef1b1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "342baf5d-5e38-49f3-84ee-48246a269032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d79e91-31e9-4823-8a99-55f3f119be0b",
        "cursor": {
          "ref": "c736a2a6-12b0-4e5a-89ca-5111c381d8e9",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0b8e0321-ed9a-43f0-ac79-b26544a07c18"
        },
        "item": {
          "id": "82d79e91-31e9-4823-8a99-55f3f119be0b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6213dfd5-e667-43c1-bd4b-9c0804aae6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a45d3a-8885-444f-b023-5a5084052764",
        "cursor": {
          "ref": "65cd301c-db04-4c63-ad15-90ed094c85fb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ff4bd5a2-264e-45a1-a71c-e9efc2e11fc6"
        },
        "item": {
          "id": "88a45d3a-8885-444f-b023-5a5084052764",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8f06329c-7edb-4bdc-8a1a-0c6be8fd9da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043d0c82-3275-45e6-bec1-c4b5c18a0dd3",
        "cursor": {
          "ref": "688b58c3-fafb-4bc3-bf53-0a6e268e941d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "18bd5c06-0770-4a28-9568-20cbf18afa19"
        },
        "item": {
          "id": "043d0c82-3275-45e6-bec1-c4b5c18a0dd3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "01bd2626-c014-49ee-95e7-17382b5e5f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509e35da-6982-4720-835d-bb065420b0f2",
        "cursor": {
          "ref": "717e558f-3d48-4c6d-bdd9-14dd0c4bc127",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e1c269d2-5396-42a0-9d78-2b589dab0e6a"
        },
        "item": {
          "id": "509e35da-6982-4720-835d-bb065420b0f2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ea9adefc-2c1e-4299-851a-1e04df165af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a43978-c0c0-404b-9008-1bad9f3bb303",
        "cursor": {
          "ref": "8b71c114-c115-470c-a42f-785d40fdc7b7",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a50e966c-39e2-4f76-b4d4-b659e0aee2f5"
        },
        "item": {
          "id": "10a43978-c0c0-404b-9008-1bad9f3bb303",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6ce28581-30d6-446b-83f2-1323cb24c781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c6102c-0302-4b04-b3cf-13ce9090d009",
        "cursor": {
          "ref": "e4edbe60-a290-4463-b454-74dde3a17b9f",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5c16ce6b-f638-49ee-b038-14d0128ded37"
        },
        "item": {
          "id": "87c6102c-0302-4b04-b3cf-13ce9090d009",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c3cdfa7f-f5a4-4245-996b-658df86b32b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bcc2da-e621-41e7-b621-a5e77a41180d",
        "cursor": {
          "ref": "58eb97d7-609a-4da2-a1eb-510213d9afff",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "98fe6b32-0bdf-45d4-857a-f4f1beeb5699"
        },
        "item": {
          "id": "90bcc2da-e621-41e7-b621-a5e77a41180d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ce2d08a4-f081-48c2-af46-1b9c98515eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5188c168-e3eb-46c7-92ef-e40b8b81dd46",
        "cursor": {
          "ref": "a852f18a-8b9a-476e-8192-340dd670df93",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "994562f7-92b2-4b8e-acce-198bf248fa31"
        },
        "item": {
          "id": "5188c168-e3eb-46c7-92ef-e40b8b81dd46",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bdef5107-bd10-4785-aa18-e3b40ee16530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59e944c-2f7e-48b0-a54d-1734b48039b6",
        "cursor": {
          "ref": "c31ab35e-e2d4-4b0a-b153-1e8b9837d76a",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "76a21476-169c-4a53-a53b-59f9ccc7ac10"
        },
        "item": {
          "id": "a59e944c-2f7e-48b0-a54d-1734b48039b6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e0a172c5-6437-4c14-92d3-51ec8887a355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e9401c-0191-4e8b-af4a-1ac6b461c1ce",
        "cursor": {
          "ref": "9988bd55-3fe9-4e4e-99b6-653c1864dd77",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4a1da3fb-44d0-4063-8a12-f271cbbdd151"
        },
        "item": {
          "id": "78e9401c-0191-4e8b-af4a-1ac6b461c1ce",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "52becdc5-a1fc-41f7-83b4-744a8e2432a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a68af70-c139-4646-a215-f9c8f6a0161a",
        "cursor": {
          "ref": "76fb9fec-8d6c-498f-85c5-bff6a9dd222b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e4567787-49ad-428b-a25d-7f151479f332"
        },
        "item": {
          "id": "4a68af70-c139-4646-a215-f9c8f6a0161a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2839ec06-d430-4567-8f57-d15c17c5ee5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acb2115-b9f8-4b9c-a79e-245ce401ac51",
        "cursor": {
          "ref": "0469db43-0f0d-4248-a20d-87598c65289b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "48f489f7-d477-4450-97a3-57d386dadeac"
        },
        "item": {
          "id": "7acb2115-b9f8-4b9c-a79e-245ce401ac51",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "453812c9-fee9-42c3-b28c-e2dd6118c50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a3cdc4-0614-4b76-bbc3-191a79a12912",
        "cursor": {
          "ref": "1bef8422-d4bc-4e7d-85eb-5dd8bd59d3d7",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "44f29b82-174d-4697-bdcb-da236cbd3001"
        },
        "item": {
          "id": "25a3cdc4-0614-4b76-bbc3-191a79a12912",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f381a2c3-3e62-4abe-a4ee-5d094a11924a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c6b0a3-beaa-4cbf-be82-6771607f12be",
        "cursor": {
          "ref": "cf8ee03c-b513-436a-8141-127e089d1f2e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e0ff0cd7-c732-4cff-87a1-58a7e5f183a1"
        },
        "item": {
          "id": "81c6b0a3-beaa-4cbf-be82-6771607f12be",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e971c795-cd82-4e55-89cc-614483ce2ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bfb89b-de65-46b0-91f5-787dc62ae3c9",
        "cursor": {
          "ref": "4be9a96e-15a2-4f28-964d-8954742efa38",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e8143d72-691f-472b-a950-4eca16601b28"
        },
        "item": {
          "id": "60bfb89b-de65-46b0-91f5-787dc62ae3c9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ecb93ae1-5773-4c7f-8e64-5b79805932b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcdd4a0-feb2-4d5e-8783-a0a5ac48e3c7",
        "cursor": {
          "ref": "cc26c70a-fa09-4fd0-9837-b608dce5525f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "265c9955-686e-4a0e-a835-b7e528cb5a34"
        },
        "item": {
          "id": "4bcdd4a0-feb2-4d5e-8783-a0a5ac48e3c7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0c9c5079-492e-4981-ac89-5b37c7934f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86ded6a-32db-466e-afb8-a79f45bb4c27",
        "cursor": {
          "ref": "d2dd7725-04de-4f65-96c8-d2b0f06b7f9a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "30af2ac4-a086-4368-b2b0-925a5f21083e"
        },
        "item": {
          "id": "b86ded6a-32db-466e-afb8-a79f45bb4c27",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c888b053-fdda-4e80-a082-d662e291cf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7ee4ff-4648-4f10-b584-103e67fc51ee",
        "cursor": {
          "ref": "05576c8d-d74e-43f3-a38a-1edab72b7128",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b9a1b08b-c22b-4fa6-acfd-1ba8c52a98b9"
        },
        "item": {
          "id": "ca7ee4ff-4648-4f10-b584-103e67fc51ee",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "11e447fa-7156-4bf9-9370-8db2bd3b2fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e37f33-da17-4504-843b-3c64ce2f6ad9",
        "cursor": {
          "ref": "35d7579b-f3d5-487f-b839-ca399b8d67c3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3c681537-1e5f-41fc-934d-274ff9b5b78c"
        },
        "item": {
          "id": "60e37f33-da17-4504-843b-3c64ce2f6ad9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bfae26c9-ed01-4a3a-b284-99bbfdec093f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8337563-5521-4251-ad60-7481092bb2c3",
        "cursor": {
          "ref": "33bcf683-c8c0-49f2-8c19-e3fccfe2d06c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a973f599-0a59-40ef-87f9-f2f6c3edf71c"
        },
        "item": {
          "id": "e8337563-5521-4251-ad60-7481092bb2c3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c40a2d14-4465-4eee-9f60-b570fcb27eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538317e2-940c-4e42-addb-45894aa63664",
        "cursor": {
          "ref": "1f741534-027a-4407-b832-8742b10264a6",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a8bc00e1-902d-4c6c-9a39-3cd679a68b26"
        },
        "item": {
          "id": "538317e2-940c-4e42-addb-45894aa63664",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e5b0e3aa-d280-4409-8402-680999a18be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56da233-9b47-4933-9c77-b2ab5acac5c0",
        "cursor": {
          "ref": "1b7521c7-ed35-45ae-a585-47f3b7798519",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "976a236a-acbc-4b71-a482-0b9b6536fc58"
        },
        "item": {
          "id": "d56da233-9b47-4933-9c77-b2ab5acac5c0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2be15b7f-2b4d-49d2-961d-3fe448ba54ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec0af12-6b0c-4858-b1c3-1c2f56fd2080",
        "cursor": {
          "ref": "f2ab5871-3e52-43b3-94d1-760f8590d881",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "851d3571-b83b-4896-96aa-38246edf3749"
        },
        "item": {
          "id": "9ec0af12-6b0c-4858-b1c3-1c2f56fd2080",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d8319e3a-65d7-4166-8840-eef56c860d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657a178f-6f3c-48d5-b421-07668a3fa24f",
        "cursor": {
          "ref": "d4a880cd-1528-4295-9db4-2fb8fec58262",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0be2d242-9550-4a09-8413-851bb6c53b3c"
        },
        "item": {
          "id": "657a178f-6f3c-48d5-b421-07668a3fa24f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3d9cfc86-ab12-4efc-9353-fb3a9d1edfab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4103d9-a495-44fb-ad36-f85ffe8e6b81",
        "cursor": {
          "ref": "82eac630-0a73-4943-afcf-a2c9d75c71f3",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "82e88fe5-a6e2-4f02-8776-2e39789a1af2"
        },
        "item": {
          "id": "aa4103d9-a495-44fb-ad36-f85ffe8e6b81",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6ba973d3-25fe-410f-b1ec-c076b048f4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6369e0-b107-4101-bbb8-1d06244a5dac",
        "cursor": {
          "ref": "01a19487-66b9-4bde-a967-77aca6a06afe",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "683c6f75-9cb0-4efa-a4c8-824dc503f763"
        },
        "item": {
          "id": "9f6369e0-b107-4101-bbb8-1d06244a5dac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5ffc4cc7-2820-4b06-b38a-dfaa22f17020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f42d1f-9b10-41f4-9b3d-d6ba72c9bd61",
        "cursor": {
          "ref": "af8a51ed-5a82-4eed-978c-e16ff502b2db",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "49f23086-6331-43a5-b54a-dfb10285ab9b"
        },
        "item": {
          "id": "48f42d1f-9b10-41f4-9b3d-d6ba72c9bd61",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4aca3613-bd7f-4235-bbe1-c7460fce429e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d36808-95bc-469c-8de0-4d73001c1231",
        "cursor": {
          "ref": "cadb484d-66f4-4b47-96e5-82b68fd3d539",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "df3a002d-b0bf-42d5-825b-c3a2fd258c52"
        },
        "item": {
          "id": "60d36808-95bc-469c-8de0-4d73001c1231",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7b8d7d62-7672-4dd4-8d2d-d33a846da3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631a85c1-9d6b-49c0-b6d6-a9cab96b226a",
        "cursor": {
          "ref": "ba09b23a-d634-4457-8969-5021ff0d3286",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4c2fbfaa-6745-4a8e-8c15-1e20f5bfb4c3"
        },
        "item": {
          "id": "631a85c1-9d6b-49c0-b6d6-a9cab96b226a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e2f96861-e0b9-4737-8972-41f524e86e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0abd2a-7ded-4380-9de4-c9b50d954840",
        "cursor": {
          "ref": "d367b02c-8f44-4a8c-999f-588df4a01a30",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8008e01c-cb86-404e-a819-cb1eafb6ce32"
        },
        "item": {
          "id": "7a0abd2a-7ded-4380-9de4-c9b50d954840",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9b64705f-4371-4d90-9c56-d20b2fcf1234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ffcfb5-7310-46f7-80bf-78ae41e1e7ce",
        "cursor": {
          "ref": "2dc5b499-e0f3-4148-9e80-0971f9e530c8",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c30d3a44-095a-4a2b-a3be-4926988d9902"
        },
        "item": {
          "id": "79ffcfb5-7310-46f7-80bf-78ae41e1e7ce",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "61c34bda-df43-450e-929a-a5a49685aa61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c499472e-5c9d-4ef3-8663-798b05ddf3d3",
        "cursor": {
          "ref": "45bbaae3-2d12-4725-9f07-1e78a74db4ec",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f542c133-62b4-4da0-8fa2-a2150132a294"
        },
        "item": {
          "id": "c499472e-5c9d-4ef3-8663-798b05ddf3d3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a166a5ca-92fa-4fdb-939c-3c5fe22d7a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46acb326-6487-4a14-8653-58a78c8d6357",
        "cursor": {
          "ref": "7ce0b12e-7835-4153-96b2-f8f78f2cd39b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d0c318ce-af2e-4f44-b60f-483f4284a1fc"
        },
        "item": {
          "id": "46acb326-6487-4a14-8653-58a78c8d6357",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ab1239fb-c28b-45d0-b9ba-792113135afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14d62d3-249d-4e52-b4a9-1b0cfbec65fe",
        "cursor": {
          "ref": "5e0e8ad2-34e8-478d-a758-03af8d435623",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "48847852-5ad2-4bbe-98e9-5780d560205b"
        },
        "item": {
          "id": "a14d62d3-249d-4e52-b4a9-1b0cfbec65fe",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6e4e54e6-0c12-44da-add6-a20a70927c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04d12ba-90de-47ae-85bf-f6b8948b5e87",
        "cursor": {
          "ref": "7ffcad6e-71e6-47da-8e8e-59083e4a6dde",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f508c7a6-6d93-4ad8-b99e-b35a3ed16be1"
        },
        "item": {
          "id": "b04d12ba-90de-47ae-85bf-f6b8948b5e87",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "57bcc8e9-34ef-4d34-bef2-bc3a44688460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09417a96-4b13-480b-922b-153f8e33d8bf",
        "cursor": {
          "ref": "8d3d7830-d1f5-49e0-b2c6-fb552a152ebb",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a5d105c6-2ca6-4a21-929d-adae6d7fe510"
        },
        "item": {
          "id": "09417a96-4b13-480b-922b-153f8e33d8bf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "34335c3c-c8e0-445d-abef-4852e138e2cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee042cc-0d4a-41a6-8b66-65812abf64a9",
        "cursor": {
          "ref": "f078a44e-fbbf-4be7-9bb8-d040e514b63d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8a038c69-cc51-4774-b026-6d855ef5b92e"
        },
        "item": {
          "id": "3ee042cc-0d4a-41a6-8b66-65812abf64a9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "980b1049-5538-4bb7-aff3-993da5e0d29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d118eaa2-1731-4204-b431-05cec2978c8b",
        "cursor": {
          "ref": "5f9b955e-0f18-4819-a68c-1f760aac0f4e",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c0324054-d33e-4909-96c6-fa8b5d05abe7"
        },
        "item": {
          "id": "d118eaa2-1731-4204-b431-05cec2978c8b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0a4e8bb2-ae7b-40b6-8358-3d941ea03d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83902108-3710-49e0-9f75-18170821dfae",
        "cursor": {
          "ref": "7e78ddf7-f61e-4cff-b65f-7bccd81af728",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6044c616-4ea0-4a0a-9de8-4f07720f5dc9"
        },
        "item": {
          "id": "83902108-3710-49e0-9f75-18170821dfae",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bc0f63ed-3f91-497c-8d1f-4a8dca818bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea25e735-a03b-405c-828a-441eaf1357ad",
        "cursor": {
          "ref": "7cddd23e-e7f6-45b0-b947-193722d1142e",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "21c19266-3dab-4269-8e08-2119cd5e6ca8"
        },
        "item": {
          "id": "ea25e735-a03b-405c-828a-441eaf1357ad",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ec3db47f-7de4-4c24-a3ed-949893f22ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a19a7c-4fe6-405f-84f3-e96df9616d47",
        "cursor": {
          "ref": "e5ee40c5-1a5f-464e-98d1-9bc7462f8a72",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "debe59de-7e6c-48bb-a281-b9cb08bf63f0"
        },
        "item": {
          "id": "c5a19a7c-4fe6-405f-84f3-e96df9616d47",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4d586b46-5944-4211-879a-41b5e6be2b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24563c55-ed6e-431e-bed9-6f4a1264ca60",
        "cursor": {
          "ref": "628d4229-8c2b-46e2-a0c5-1a021b43cc22",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4c965383-8a88-4b1b-9240-f8ed6aa43709"
        },
        "item": {
          "id": "24563c55-ed6e-431e-bed9-6f4a1264ca60",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3cc03ecc-2d05-4d3b-99cc-e3a46e7f3d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdee7105-233e-4651-87c2-ec4d41cb7ea0",
        "cursor": {
          "ref": "744580b6-9aae-4c1f-96ad-d5830b27937d",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f4c15789-c181-4ca1-95cd-516056ebd2bb"
        },
        "item": {
          "id": "cdee7105-233e-4651-87c2-ec4d41cb7ea0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4b87268b-930c-445e-8ac5-2df92ec8a1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d46b19-d251-4e2e-b4b6-d7d257078cf2",
        "cursor": {
          "ref": "b6993ad5-47eb-4be0-9994-3518ec51edd6",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8ae9e198-f1d0-4fd1-bb43-c927943eef1e"
        },
        "item": {
          "id": "d4d46b19-d251-4e2e-b4b6-d7d257078cf2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5fbecbbe-504d-4f49-8057-4ead698f2e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d08136-3edd-451e-bc69-f91fb2df0996",
        "cursor": {
          "ref": "b178b49a-c508-4019-9650-7c76d0d6a491",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "99593823-59b2-4f9c-87b1-8283c2e822ec"
        },
        "item": {
          "id": "05d08136-3edd-451e-bc69-f91fb2df0996",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4d4b5f7e-6c54-4c4a-a519-675ee421560f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc8b8ed-10f4-40f5-8566-6b758e00a8b9",
        "cursor": {
          "ref": "dffad89e-c264-49d5-a89e-6b66a2ab181f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "326729da-bfc9-4f0e-98d5-4b4147a5653a"
        },
        "item": {
          "id": "5cc8b8ed-10f4-40f5-8566-6b758e00a8b9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ea05d2b2-6519-4f5e-aab5-a0f29a976494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c8368e-bb21-488c-b8ee-6ebadf3bc355",
        "cursor": {
          "ref": "f002d799-94dd-4fcd-ba4f-355e60fc37a2",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a92a1c2c-876e-45aa-89be-068edf4aabd0"
        },
        "item": {
          "id": "71c8368e-bb21-488c-b8ee-6ebadf3bc355",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "35b919f8-9431-4328-8e2d-79c1fcf5e214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c254823d-724e-42c3-852c-297b648624e5",
        "cursor": {
          "ref": "88b7b950-b15d-4b9f-8eb3-acece85a3ed0",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b788c786-76ac-4c2c-8a44-0aba77c5eaec"
        },
        "item": {
          "id": "c254823d-724e-42c3-852c-297b648624e5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8e59ac04-aaaa-49e8-a781-1b66c3d0320b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "10001566-4d0c-4b92-999b-f7b9916549de",
        "cursor": {
          "ref": "a417b2df-3c9a-4683-b974-ec3dbad1f7d5",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c425e9cf-0714-4b67-94ee-1332b068d4e5"
        },
        "item": {
          "id": "10001566-4d0c-4b92-999b-f7b9916549de",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e555dd59-7d2d-4bdd-9499-8b15a19141a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "04f8dd83-c831-4ef9-bc27-295cadcc6716",
        "cursor": {
          "ref": "a758aa4c-2b75-41d4-a057-81e327ca1183",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d47141d2-0261-437f-bce5-bdbd3ef2bc0a"
        },
        "item": {
          "id": "04f8dd83-c831-4ef9-bc27-295cadcc6716",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d14d5e8d-8c06-4303-aef2-0af8e0b8822f",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fc2cc8-8c95-47d7-970a-b431431b00fc",
        "cursor": {
          "ref": "d9a6efcc-2885-4a1e-96a6-9c8cbcf0941d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e62a629a-441f-438d-afa0-cd4e2c8987b6"
        },
        "item": {
          "id": "e6fc2cc8-8c95-47d7-970a-b431431b00fc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "23e5da7c-111b-457a-9b5f-d171b5d7326c",
          "status": "OK",
          "code": 200,
          "responseTime": 1797,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b185f94-e5f5-49a4-a57a-49549bf4858b",
        "cursor": {
          "ref": "f6fa3e0b-b013-476e-afe0-01125be2ee10",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d9bf8d92-8f97-48cf-9bd8-4015374f43be"
        },
        "item": {
          "id": "4b185f94-e5f5-49a4-a57a-49549bf4858b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d3bf25b9-c31f-41de-9243-3973a6ab6421",
          "status": "OK",
          "code": 200,
          "responseTime": 2794,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
        "cursor": {
          "ref": "b23462de-ecf1-4e2e-b61c-59e7a9db6641",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f00e1c5c-331e-42a6-9eeb-c34a8ee3c945"
        },
        "item": {
          "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2a2a3e2-e0a5-428a-84c3-98ad2a3c46cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
        "cursor": {
          "ref": "b23462de-ecf1-4e2e-b61c-59e7a9db6641",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f00e1c5c-331e-42a6-9eeb-c34a8ee3c945"
        },
        "item": {
          "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2a2a3e2-e0a5-428a-84c3-98ad2a3c46cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
        "cursor": {
          "ref": "b23462de-ecf1-4e2e-b61c-59e7a9db6641",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f00e1c5c-331e-42a6-9eeb-c34a8ee3c945"
        },
        "item": {
          "id": "9f37f386-232f-42cd-a357-2aa46b7fd1e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c2a2a3e2-e0a5-428a-84c3-98ad2a3c46cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "631d9f3b-f818-4bf1-9325-34f5d6a3def7",
        "cursor": {
          "ref": "3cf8cc51-dd91-4ccc-bcd6-0f48182f9892",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f5395ffb-efc2-4222-a754-dc9a7c2ce5f8"
        },
        "item": {
          "id": "631d9f3b-f818-4bf1-9325-34f5d6a3def7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e67c678d-cb9c-4e7b-bcf3-2efc5591d518",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0136cd31-d0a6-40d9-83db-175328b6a375",
        "cursor": {
          "ref": "2c3cc8c1-2bec-45a9-9ba8-39847ce096a0",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4c10fed7-b3bb-42d5-a624-76dc1b30e1b4"
        },
        "item": {
          "id": "0136cd31-d0a6-40d9-83db-175328b6a375",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "08a5683f-d0b6-45ab-bb35-04caf938895e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0136cd31-d0a6-40d9-83db-175328b6a375",
        "cursor": {
          "ref": "2c3cc8c1-2bec-45a9-9ba8-39847ce096a0",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4c10fed7-b3bb-42d5-a624-76dc1b30e1b4"
        },
        "item": {
          "id": "0136cd31-d0a6-40d9-83db-175328b6a375",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "08a5683f-d0b6-45ab-bb35-04caf938895e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "783853f8-7ad0-4102-8506-1aa551d265e8",
        "cursor": {
          "ref": "cd3b1dba-78fb-44ba-b54a-4dec0014bed3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f0a3ef4f-b8fc-4b57-9509-f800d191e3d0"
        },
        "item": {
          "id": "783853f8-7ad0-4102-8506-1aa551d265e8",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cebcb9a9-b31f-4b34-85c1-5231867aa600",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e5b19830-c7d8-4495-a25a-3c664a16c85b",
        "cursor": {
          "ref": "3aa62e82-a1ae-4ba1-ac25-3c4e7cf350e1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c89803b4-a438-4138-abd1-6102f5b8fa8e"
        },
        "item": {
          "id": "e5b19830-c7d8-4495-a25a-3c664a16c85b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f1bf5f8c-5c19-4d8f-9940-eff996481f7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e5b19830-c7d8-4495-a25a-3c664a16c85b",
        "cursor": {
          "ref": "3aa62e82-a1ae-4ba1-ac25-3c4e7cf350e1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c89803b4-a438-4138-abd1-6102f5b8fa8e"
        },
        "item": {
          "id": "e5b19830-c7d8-4495-a25a-3c664a16c85b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f1bf5f8c-5c19-4d8f-9940-eff996481f7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "412915fb-31d6-4bd8-bc0e-331d56c9c5e9",
        "cursor": {
          "ref": "70fee76e-e6d6-43f3-9ba3-822e7e51861c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ae2c2c1c-44f3-40c3-94e5-f5f2e4526016"
        },
        "item": {
          "id": "412915fb-31d6-4bd8-bc0e-331d56c9c5e9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "407f2981-2927-4f45-a1c8-ee4d0657a0de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}