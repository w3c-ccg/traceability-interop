{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e9d0326e-384f-4baa-8272-460ae40f57fe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ab74c5cd-45eb-436b-a692-561aa7463551",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5344368-9cae-4070-a415-87afe1faa2da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8c91f411-af9e-421c-bc82-6f9f63331002"
                }
              }
            ]
          },
          {
            "id": "5dddd280-295c-4232-87ee-dcf021d171b7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "52a9cda2-6f7b-4763-a661-8463f4e9c15c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "daf788f3-e678-4935-8434-77c2b8f1a3ff"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf6cbb2f-8488-470e-b945-2058fd7f0321",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "517ace11-0b3c-4156-ba78-a12647764182",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02cb2974-1571-4e2a-9479-6ff9c17c4bd6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b4f9f98-bb76-454d-94d5-b9416deb1f63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab690ca9-81a0-4cbc-b4a3-90b15b9e0f9b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b66b95d-c03a-4a84-8880-a4c77f3c6f06",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21d8363c-f15c-4d17-be84-59406ddabb4d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c319da0-24cc-49b5-b6ca-27fcffa05c73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9686753a-6520-4e97-a9ad-4db06275070b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "515d6742-cb0c-4eb7-83ff-7365633d9a54",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bea9dba9-8fdb-49ce-bb23-367dc54bd404"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f208f92f-b36c-413f-812e-2d2684dfe552",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff91a279-6430-44d1-b3c2-5431124d51e4"
            }
          }
        ]
      },
      {
        "id": "e3d71549-3825-4220-a4c5-1392d7ea8200",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "73d35349-84b2-45c8-bc99-71e21dd7b74e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d7d995a-31ae-48e1-853d-a0282b4aebb5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0e90ab4-ada0-43eb-98f8-179f6c319b03",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866b55ff-7fae-4e06-8521-addb4bce0c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51f14129-cfb2-44cf-a449-1eacd6b0cfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f97129-f163-417b-8a5e-6c325299e298",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e462fb7-b3bf-4648-ba91-245eb33afe5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7297a465-ced0-46f4-8fb9-ecbf6202f3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee947051-60ed-4092-95c0-ba300e034087",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0ceee9-1d97-4996-9fc4-249b92bafbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7dab847-5f47-4042-a119-e0e3d76ff120"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5235b00b-a6c0-4335-845f-085035c15880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "409c6140-b4ff-4365-b988-b6b2b1dbac19",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60de23a5-08a0-47db-bf8a-76920c01ecb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78949a39-c419-4283-bc0d-90afb3df1b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574cf4ce-b3e1-4994-b5cd-a696b9f47a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1da268-13ca-475d-b738-968e29934e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1841ca7-a489-4234-a44c-2d8e3c12f109",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a414f4-61bb-47c8-a0b2-fd6c3a37a1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dc92a1e-f521-4866-a8a7-5d550d7c31c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa73e4f-661e-4247-b54c-b3f8139cd948",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "3140a23b-30db-4fdb-b22e-ed311f943124"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "49f56671-4596-48c2-88d6-4ceeafb193fc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f9d3404-2bff-454d-b616-0713b3eb2bbd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7674137-5d63-40a3-8245-42cfbd9fabf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "979375ef-118d-4649-a9d5-36c66adb84ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f909ce1b-5105-49db-8a11-3987e8ec72f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4e6bb04c-6848-412f-89c4-06811fe2b38a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a035f4e-5ae1-4e75-907c-853f18e42a68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2397ff8f-ac8f-412d-b98f-7f589d4b1880"
            }
          }
        ]
      },
      {
        "id": "44a5f63a-3b43-48d7-8c92-ce700c21aa58",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ea61bf83-9e01-435c-b1fc-20ca48c1284b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2119ed6f-5cf1-4fcc-b9d2-da60ad329e89",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7807d91b-cdf0-41fc-91c2-fb20852bbf44",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd23dab-fc9c-458c-97fd-37bfdd4d2d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196f2ed0-d08b-4828-b481-7f96e414cf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bfada5-d372-4c8c-9461-ec786af2ed5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c00db77b-4157-4c87-901b-a39fe3d8b442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a024118c-adf2-425d-bdce-06ccf4f48018",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc18a95-2227-40b5-b782-988714d1b8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a977c1-7599-45da-bedc-d775ce54f74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4618b370-2f4e-408f-aeee-39f45ab5794a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7033121-ed83-46f3-b1da-67c116306bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239cf38b-f5d5-4ab7-898f-b406e999f368",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac79552-06c5-4873-b64e-3ff29b8cb285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34928a2-b512-48e1-b95f-1c64747e0469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff6b5bd-d040-4535-a8ea-7598658de12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10017811-5893-4b78-9c2a-f1ec5aaaae38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac7776c-419b-46a2-abb5-9aea04ebb585",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8a6d2e-1aa0-4111-92a2-f55a8908e365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233c78fa-fa29-43cc-9031-9573cc2b7707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db40e68-d373-4fbb-b874-bc5979114bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8767bcad-5282-48a7-9223-a2a27f91f3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b98e91-572e-4b4c-9fb9-2e489c17d98b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b24bb60-3105-475f-b57c-90ea01989c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5e5c20-b87f-4dcd-8bc9-822fe4c82602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bff833-246e-4737-b202-8f9c021678bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56966312-056c-44e5-ba3c-6ff531e22776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623dfbc2-9af2-48e8-8a09-06403055ef98",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e293cf1b-d0f7-4e89-82f1-2c5119bcce95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f6f08a-b0e2-4af1-8124-658ee0b0f6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2328f10c-d04d-492c-9798-dee2619b6332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f00965e-3bfe-4886-8ed7-d2150fb7027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6254ba6e-4552-4f51-9b5e-b14f3f5b8f44",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e9a35e-5113-4aa3-a268-01e0a2ae4be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b494da57-f400-4dfe-9c86-929b58b3ab18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12af8958-ed8f-4f11-b552-964d0c19dbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f94745c5-63a3-4726-a87d-cee695564c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191c4b57-33d2-46a0-9f41-c5abfc03bd3e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb49c42f-d276-4407-aaa5-7e0a58c63fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19f861b-11c4-43c7-9fd0-0b66db8846cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09640eb7-32fb-4f4c-9efc-5c74fa2df6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d14725e-0066-4106-85f3-eda9ee4a7989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01364a11-4fd8-4038-b2b4-bc87933dc999",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b27ebb7-7344-4a7d-b96b-22f246eb08a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de57827b-fe51-4188-80b2-54dbd93d51c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425808ec-1361-486d-b762-8d0e69ee0fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b91bfd0-26b0-4163-ae09-9eafe7922c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3d7455-e2a1-40bb-adbb-4c29668ad649",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9b7122-0ea9-4da7-a135-065686f00b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c97d847-183e-4960-946d-9630cad1dd07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae48e8a8-095a-4fa2-a008-eff14b08251b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74961336-8f80-4d37-8874-b34074cfd332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd46b9d-13a4-4ea2-8fd0-f3b66f016bd6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d6d0d6-d754-4f6a-92bf-116834625801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb136a2-3d31-441f-80ec-9d092af95362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b742cfe-ce38-45e9-a008-7d51cf07fc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f45ab04-dd7b-4462-bd67-849e2608b428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feca7fec-0b7b-4bdd-9fc1-f1390cb0189a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c32e69-9ea5-4a0c-8399-31ec9a0e9a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72625a0b-f5b8-4bfb-8293-78b600a57f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b4236f-2b5c-4693-8755-8a3f587c4988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5d583af-7fb6-41af-ad91-b12445b61398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a9c0e6-2f05-4a85-b888-e31a8d3f6ba9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f19efee-e925-40ed-ba0b-aa2ff077b1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2aecf5a-25ba-4d05-9b82-2cf3ea62f891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddfc51f-f3cb-4eef-aff4-8d489f56f0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "376386b0-1465-4d5d-9f76-4233080fe6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8502017d-b117-478a-a935-7f80906b47c3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b18446-6f20-414f-b761-22aec5745fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c559c2-3076-4935-bdce-169710f3624d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b356fa65-a432-4bfd-be15-c6cf62c9d22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3db85d5e-3f5b-41d4-bb5d-59b1ce2cb168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17eafb9f-b92c-4520-87a2-be7784d7d2f6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6567024-7d5e-42a3-b973-9d8b5a1cc9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7993aee9-5e36-4aeb-836a-667a5bb039ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17a8566-5ded-4803-9d27-1d98d0c408ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9af4a6be-42ce-40b7-b074-765e262d0662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c604b9-3be0-4f1b-a505-19b325301ec7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50fdd79-df6f-42c0-8d24-822b3730a2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f457d44-d060-425b-9a66-2ceff1fc9b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58e825e-3836-4f12-891a-fa2c55fabefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ede12f1-baff-43e6-a0e6-3fda9b7bf8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b654a9-7c62-4f82-9bd8-62f7a4762455",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5b594b-d0ad-452c-82b4-941f13a9aade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16af22e-3585-4c2e-91c1-768978c30a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cad753c-62f2-4e11-b998-177a0e92c1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a1b5dff-d374-4fb9-8a1e-d7d04ef43d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5d309b-11ba-4d6c-9bf5-4c734f8bac1e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631d3ae6-0e32-4998-9617-a7d52aee68a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0679be-d5ef-41fc-8a63-b2ae5f7acb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75299d0-e0c6-411d-adde-ac427618f8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "24bfdcb3-d91f-4bec-9c52-9f2be75dec88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8149e2a-6f4e-4adf-b9f7-90c3b1b45acd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cecde4-cd49-4717-b2eb-072b9a6961d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58561876-becd-49cf-89d6-8e071bdc87c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f678f7-3fc9-49fd-8b34-b8088ca1084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "069b3dc4-ebdc-4704-8a17-010a83fa959b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63798fd-58eb-4d96-9a24-63ac033033ae",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c2806b-7621-431f-9136-3b9e831f468f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4115300-8523-40bb-a0fc-91143f721e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85021d8-079b-4f4b-bf5f-84fa741cd006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b930c1f-b69f-454c-b412-526109536be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b043a1-30e4-43f5-9294-304a195f2fea",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3515d3a6-2766-404b-98d8-729fcde4d480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2afbe50-3cc3-48c3-98f4-2e403d690ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e560cc17-a0ba-479c-9c97-9b7777e4b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69baf47f-5c79-40cb-aa93-dc5e32c354a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1231ea2-e11f-4d52-bfdd-6a8c05cd5e6d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da373774-4c97-4e16-a13d-cf2c42859b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdc5e14-75e4-442f-b21d-3c00a6182ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4307e6-87b6-4ecb-93cf-b96016916d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acb7c030-91a7-4679-a2ac-1b2e3c3e2eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e11c922-5c88-49c1-8912-efce1a3a1166",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72160ce9-2dba-48be-84f1-776c89523618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636850d2-9c55-40b7-9630-360bdfbe21b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debb69e7-4994-4f88-9d94-23cd4544b85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc3c44e-9a52-4548-83e1-c229740d2904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ffea59-05d1-4ff6-9598-7daafe57be7d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7f9211-2e07-46f2-8493-936a90651f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e00c035-f143-4318-8b9d-00edf33db3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b2d4a8-91fd-45a2-986d-114f6769b2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b30035-9631-4294-bac3-52e293687dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2c8250-f1d8-4717-afed-fea3d72ea3a1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2882a762-f6f4-4425-bb23-adfdd9bcd0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d46f2ff-0eb0-4906-8ebf-28c48e2938e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece7c959-0cb4-4efe-8932-cca24444ac80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "060a731f-94e4-40fc-8453-f6f687c67fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5023bc6c-1d66-4c6f-a48b-0f30cbb9fed7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618b23ff-1211-45d8-b150-c026fdaab627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004ba793-d8f5-49bc-a84f-079745dda174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dcaba0-3993-4541-bdef-a79507b4395d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fcd0a2-d8b2-424d-aa31-e453c9f2a6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6178355-33de-4f25-a1ae-823aaae191ab",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0dc82b-3da7-4faf-9233-3bd3a1815677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32feef63-d24b-415b-9dd0-c55198493ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84ad611-cfa9-4abf-a53b-7b113f591dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f37a9e27-77fa-4611-ab3b-4e1b40ef6221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b324dc6-c297-4f82-b9b0-6e122f300d66",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ac75c3-0739-42b9-9740-fd3ea9726901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a307ec27-c8b6-4dc2-8fb8-e5af859eb4d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17e0cab-2d6f-4b1c-adb6-57fb048b04e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "660013d2-1a2c-496a-83eb-678e3c8cbee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc9f901-7c16-4e0a-9dda-9e847bbb6f17",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68af92b2-f633-46e2-9d79-a3abfe81fc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e88145-1a48-4088-b267-04b37e605413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f957896-2ea1-43ec-b815-7f6b89b5efc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d32afd-a3f2-40cf-816f-8c25828baef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1bff0b-2ade-40a5-a237-1c6ecbeef354",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cae5f87-252d-40c5-9441-9d2d3bcf2f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ddd748-a722-42b3-ad81-65e3660f6ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d343226-0c86-4aa7-8ba2-d0c653c6bf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c889591b-1426-469e-a589-4381840188f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc51add-fc11-4b7c-a6e7-721c29fc3a3e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d068c74f-58f6-47c7-8e7b-2afa73ab8366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d274f397-360c-4e65-844c-c658b7fa5eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a232d404-b0c3-4961-98ab-572b456358bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6deddec-f5ad-4167-b1fd-5f80ce2c6cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a27713c-d616-44a0-a632-79e8281e4150",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02478ce2-08f2-4750-922d-1c3f6ac7f01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e8a8ed-1daf-4ce4-98f2-58f58f9ae453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dac6428-6281-4474-856d-9a55717baba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87eb86e8-a7f7-4fb1-b9d1-544155bdda4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9819de-1e5c-4d9b-9512-b050e5f10358",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba3461e-d7f2-4481-a14a-0d59e4952fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bf91f8-36ef-44f2-996c-4ec033a2336a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f156ea-ec29-40f7-a624-18410ed94510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a27815ba-9526-4ac3-9ff0-9700956e210b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df2e632-b718-48db-9f48-f2f05c6648a3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc07cd72-e338-459a-ab3d-ae8ed9e8be74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f99e8e-b89a-4086-8bfc-6b2271d04f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae70c3b-0b37-46b7-ab12-7992275e1b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d69fef4e-697d-4006-9692-0f0e584e88d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658b63e2-a727-4f29-97ee-d4549882caa2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f301a59a-1c89-45ee-a3e4-32f52ebd5926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c9514b-09f3-4fbe-af3d-79f68929ef0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827dd672-8c99-470f-a0ad-a2d04fad5a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "702e8bf3-5b09-45f0-8e91-1e7bcce2e4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a497e8-8fb4-4a81-bc44-412fc71fff19",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e541a67-3ed7-44e0-9697-55ccb1ca7176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e3cabf6-4d8e-4772-9dec-2c4a25dcd546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e34df5-9033-4cda-9248-3a1a5b83bfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "afe5594f-709b-4b15-9f08-4b4911aefe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0080455-28d8-45f3-846d-c73c404a3352",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae4acfa-0c6e-4b4d-9e1f-b8449c813042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c6d8c4-8d78-41ed-b6cc-c9d284ec9186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a838899-c899-43ad-bbe6-f5763b61fe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0657d357-db2a-4d21-8ae4-485e404aa3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c767e4f7-8089-4541-a757-29b66b161b8d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32124c22-f8b1-4b2f-919f-0e99ec954165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf8e894-e0bd-4bb0-9cdc-6e1790e56099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fc8f38-eaa2-4e42-ba08-559bb51aa357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0cb51b-c3e0-418c-8146-baef9a68be9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f6fbcc-f5ca-42f9-884f-468483333357",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d4feab-e8f4-4dac-86c9-2276610e31d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea78ede-248b-4595-8d32-4e207d7f3e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535d00c5-0c93-48bb-9256-c4f0c69885bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "569d70ef-9746-4c27-adf6-ac08c4451678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f0d231-2863-4080-ab97-2990edaa0ee0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12b4d63-9343-4879-b1c3-c01c9e4ce258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adce6fe2-674c-490e-803a-dea7e9a7008c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf35f671-21e9-49fe-8086-779870e01ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10184fb9-ed4e-4b78-88de-c998ec2d4b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1261313-71ad-43c8-a494-e58932c2fabc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3a3da7-4a49-4a4b-8ad1-fdcb6aed56ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5801b4-57e6-42fb-8986-2535a4dd28fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353e8c56-40a0-490c-9f90-e837e40ccb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2382d8e2-0a6d-4fa5-8bbc-97f3a51c08e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57511dc0-a8dd-4fbb-8dad-9de69521cb8b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6771fc46-bcd7-4742-b73b-fe8cf87b1b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2743e512-6403-45ab-933a-1fd2f484c6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0fd55c-034b-40c1-8231-4d9363f23fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a46685b0-b21f-47f0-892f-0df4d50b98b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cd0f6b-c71f-4b81-8ba8-43a9c821c2d4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a44b88-b7aa-4187-b360-8d3a0d5c04f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920f7511-0a1b-4719-bae0-21ab4bf83d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccafb40f-e0a9-4489-84ad-e655dc49878f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0238b2-96c7-4ea1-b9ed-16e618e8a419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942ba8b6-18a8-4e9b-bcb3-c2f9071c98ea",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24199413-85bf-46be-996b-605776197f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332986ba-9661-451f-9692-9d5e8c37d90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b74a950-f4a6-4a27-b3a2-c7f28ba20d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "79777c63-d8ee-47af-a30f-1f8499b874f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d7ee6c-bfc9-4131-9ac4-462a2521d0b6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b039cb6b-ddd4-409d-a0ae-35517c6a5be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ae8c41-34f6-44ec-9c7f-111b70887844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec20796-6f2d-4a4a-b772-59c088c118e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfa4126-2571-4c6e-a59b-f8fc6410d2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649fc61f-4d99-4b88-93ca-0453fc9e9bd7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7515483-3abc-4c87-8f93-6b91258c99b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293fdfeb-0556-49a1-be4f-f3c1d50d0ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cee9110-3eeb-4004-9209-5368fdf169b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "729e8094-ecd9-44e0-9167-fef4b9cd8cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3296b62-001e-467e-a975-ba118229ab7d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43323ae2-5d80-4725-a689-b611517413a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f79377-9317-4c03-821f-4033c2017bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31448e8-6f7b-4540-8904-e1d3901af8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "395c5930-efd1-435c-938a-4c9e16986caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796edbb0-4aa0-436d-ae48-35b8da0524ad",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d70f4bf-1a64-4a13-bccc-61b9c42608e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2440c4a-603f-4da0-bc56-1d153af92903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2ba48b-4f81-4d43-83b2-44d762b55cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2cf4ff-5bb6-4d17-a854-3696a6255e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dd0956-de4f-4501-82eb-c1d102be4782",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91008eea-271c-401b-9ac5-eecdb0dccf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32414cf-a43a-42bc-b815-04d744b50a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd75b58-48a9-4c2b-9894-e231ecc8866d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7fed8f4-80e6-4d8e-b7ff-f0fa3cc28081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc7065d-6ff9-4a66-b0de-431a559ab9dc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b867ee0-f350-4a1c-88fa-29d0689eccb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bebda7-6250-4186-b0f7-6f27d781fa79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13d3a20-34f3-4d75-b271-1402e26a073b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0b946c-611b-4e94-8940-3961f1104a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d885f1c8-303f-4b47-9f31-2b3d09f9f3c6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c7ae6-62fd-4093-800d-b98b480c9163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0594dcad-f08e-4455-8ecf-d57625a14eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bfce0c-fdc6-474e-a4f9-236056b2caa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ab63c4-1586-4406-8f1a-41ef8f29e7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752e8084-89f3-4268-9c98-24ca2ad31961",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266a8642-28f5-4d23-b1fd-4ee06633923d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcee8e5-17bc-46f3-ba70-b857bc06f8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab38a54-b23d-4b72-9983-2a4ba0eb8a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "72521ad8-3d1a-4e6d-9ef5-905c8aad99e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5d62fd-eeee-4491-b318-09bf18866dde",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e0359e-b06f-4e17-9fcd-ee100450cdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3e2d1b-9c44-4564-b157-fe9cf31dfe80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24eff94-b5ec-4b96-b519-e35fd7dfe47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8228cb62-3337-46b0-b01f-39cda347360c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a6f69f-b045-4639-97f5-68b033d5ddbe",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0685c3b2-c83d-4711-8e3e-caccd0f7fdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb0e1d5-ea1d-40db-bf39-7930c40bfe87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd872d6-0e0d-4c6f-a52a-bcfc033bc5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9641c62-e2d5-4f1a-9792-b3f697101f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c3ae42-774a-4ba7-91fb-b438f291fe55",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1ed0d9-f4d5-4650-a19f-81a29f7bbb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d708da-b648-424f-8b86-61ff1c5db7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5c796d-2421-4822-a0de-67a3f149428f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb5a59a-a553-4b01-be07-7b4980d4de58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aeca61d-13a6-48d9-90c7-dd0f9f902a17",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad406f77-8f58-49c6-a9ce-b7c41560de82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc01d73d-9a48-4e84-9852-3d69c7905c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6f83eb-94f8-4ac6-85a6-079c66e8de35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "355fda35-57c4-4897-b5fa-1c0bbc408c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1c3407-3213-4398-aee3-22d1d6ebda8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d80ecd-f56b-492a-998e-a6369e7205e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f05755-5dbf-4fc3-a792-a6629b1d3ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d818708e-0af1-498b-a9c4-50f158276599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6fa2c5-a67d-4ea7-8390-7101c0ea2b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bdd10c-2464-4d64-a064-b4d0769ddb0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04667540-7a7b-4b17-a2c1-44fb195a1812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a054f9b-2ff1-4cf1-bd08-35c07e309aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761f5fab-5d95-4887-9ef8-3d37eedf7d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "589f77a5-4462-4071-a2c9-25d505375120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d436417-614c-4e71-9510-2c45fa190ad7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d8905c-0816-4fbf-8ccf-6eeafacb956c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b08bfaf-60fe-49da-bbba-1d73e8c6f6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653c2c4f-576c-4756-800b-59e2f69bc231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "16abca50-8f93-4d20-8ed3-2b3cf0bc6891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d82fe6f-70ca-4791-a77c-3c44991348fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d04b6e6-1e37-49b2-be5d-5d68f9f90ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10210b48-dd1e-46bd-9d13-7bc9c0438624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e877155-a1da-418c-bcc5-d06cc83a3ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7ccbe9-88ce-4638-9559-471bd4e85eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f7ab47-28db-4f54-a9f9-37809fcc9e25",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262d884f-9f6d-46f6-bf80-4a7da57d4999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e37ffcb-d8d6-4191-b606-b30769c7d701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798ebbaa-1c74-4ea0-abb8-9d038229d143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8685163-6079-4ea4-9b2e-c5f550a83734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82061c2d-136f-42dc-a0fd-232a13379cc8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130f810d-3733-4367-bb18-45d5b8fb2f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5f5d81-0255-44ca-abe7-91ffda80227c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7011dc-1949-4730-96e7-03849335c546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "58e003ee-c034-4a80-945e-68f3d1104139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6657408-5165-4ce0-8e5a-6b681127d8bb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e322b5f-5c8e-43b0-bb59-b2749c83c28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402d50cc-7e91-4ef2-948b-1feb39209bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad3faf8-1cfc-4c66-a025-bae584fc0267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1abdb57-f38d-46ae-b540-c8f9203b8bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9a0eac-d079-4620-9806-9efc8b87a189",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13295743-173d-4163-96f9-f81048e0877b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426aec93-448e-4c82-821e-8a9514bdc1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479499d1-b9db-4c59-a769-834014e8579b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d271d83-c1da-4570-86d2-0b4a968286ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1a4210-9000-47cf-a30c-4dd98775052c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7218bb6-e4ef-43bc-ad42-84e3cb36a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed41bb5-79fc-4225-bb34-2af8afce1301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8644c9-6b5e-42c8-b58c-1f4bc86f04c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a29ff2-3d35-427e-b240-4346bf9ab354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e4d5cc-3afe-4eca-88dc-de6209fa9293",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8b554f-5793-4344-a668-1e257f2c8f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69234ec4-98ab-4498-b3d3-3a3394dbc2e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265bfb09-e9f0-48d8-b5d6-6c7973da2398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c68b5ea-7c13-4f0d-b0e2-bfe909bda55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585ba815-80f5-430b-94b7-3f6cdb4021df",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d69ec28-bef0-47f1-99f1-3e793aa01074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc26526-4a25-42f8-be8b-30b6433dba2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cc25c8-9d12-480e-b3d4-3e90678c694c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7aa2983-d752-4f29-90f7-4109cd84582b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb35d942-2544-44ea-9c5a-1baa3faf3144",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cde716e-dec8-4a37-858b-8218273e4bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6fb75c4-117d-4573-a113-3e8e883612dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960b8653-6244-43c6-84d3-068999655d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7efa043-5369-4de0-8d56-c7f79593814e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407bdb13-6c6b-4cdf-9721-e691d470ca02",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3636d998-655d-4ddc-a2b3-837e09c06350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1308a79-51e8-4d5e-b5df-cd1871139df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfd6caa-030b-48a4-9487-e3a1b7763086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "685671f1-23d1-4c0b-8de8-9ea9c7c5c3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254518dd-f483-4d55-a641-48d0f6b0bc2c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a71be49-8c86-4285-8813-a618eb8b26a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc75e92-5fc7-4026-8744-804a1ec5ea3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80eeeb6f-6371-4a21-adb1-6d852f6e6c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a387584a-363a-4923-a701-445d542a9190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc97906a-5e57-4a3c-a3ed-92340c82bc5e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c1117e-fd53-4f4e-a13e-9dcc3cf9ef4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a861796-5d21-4dd8-87d8-dda57db5161e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff0b7b7-cb7b-4cae-a3d1-a0467376f479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b678fa02-8cdb-4d07-ba8f-6cff1dfcdb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cf2798-b81f-49af-b3f9-1f0cce3b3fac",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4909afdd-57bd-4b83-a2d9-38f8b15f8f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3481bf5-10e5-482a-a4c9-d55b3b9ca3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d86e2e5-9d83-416b-95c4-58b04a65bb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63eb97fc-e296-4b20-8c76-944340b4fd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d537ae-47a8-4c67-a4a8-ae1335da8676",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ec702-cf01-4153-9ce0-398824b66172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6514d9b0-7339-41c2-8d37-916f89e7e7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c721afb7-6a11-444c-bd87-dc258868875d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de3fc48c-b0d3-4f27-9025-d7f6fa3a95b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd01a209-9c88-4df3-8902-f4ae37c0d5aa",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd3f0d6-307f-4aa9-8462-70d59c17f917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea710484-6373-4849-83ac-50035fec3a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa72403-a340-4361-9d2d-5a2c46b712de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eef70f58-e995-4d0c-bc6e-652433d2f474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5497bf7-987b-41a7-8af0-917d986e8908",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b91a738-47ae-4fcb-b445-c5667213fcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bbd1c91-7793-40d2-b0df-294d9f87857a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f773aa-eb71-422e-8d8c-2afe4dfcaf0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "efd6f124-eec2-4877-8c03-a9d4d0405e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241f7969-dc0e-4399-abc5-877cc00b6889",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b883c071-5598-498e-a639-925ac4f1f8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c243cb-bac3-4b8f-8771-ff76dddeb270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1ca344-c9f1-4050-a077-3d208c9bf207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac1f11e-9674-469d-a177-7818d1cd531e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b166434d-0b9e-41a5-9917-b13434c07883",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690009c8-2c95-4e82-af2a-1c068776313e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5feff943-631e-45de-afab-2d838c8753dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48138f0c-30ec-4c9f-adfc-7e60a7d1424c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c781773-e24d-4698-a41c-4039fa353ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785949c2-97e8-4216-afa1-cbf263f44d38",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a6648f-5d1a-46a5-a04f-f16aae678f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6077aa29-bb61-40c0-bd43-b194c3fa7bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d068ca-1e2d-439e-836e-abc73812bfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a35bbee-7402-4f4c-9391-4d7f9fcc40c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e601dd62-38ff-4896-9b87-052fea87fff7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d943ff-e6e8-49f5-872b-0158a2c8b863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a68369-b01b-468f-8c86-c67c906b60b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01ddbc8-9ad0-4070-a86f-22c528405093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af21a556-3896-4801-a854-2852b1bcf7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1ec980-22f6-4c58-bf4a-8c7a3e074244",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5df940-172b-496c-9169-a46351bf1972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a50ecb9-0abe-48e6-9518-8680adb49579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48429a03-773f-4a40-a973-9017c33eee47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "966bcffc-e376-40e4-ab2d-1dcd58fc9939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4e981a-ed83-4ee4-bb4a-1574c33be6d5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1c208e-fb7c-410e-be3a-dbad20450d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f317849-b861-4107-aa50-db2f983d68b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56444e4a-2ba3-4862-9c65-549865f7b6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "887dd16f-a0de-4133-9220-76278cf2477b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e34307-45db-42e8-82e0-29dd1495a43e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fbd1d4-44a0-498a-8883-bd1b09109f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f549d3ad-2e1b-431d-98ae-469d0215b0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045135b2-356e-43f9-87dd-c98f0a16994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ec362c-1574-439f-98c9-2988e3264d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36914cb-3ee9-4d01-bcb0-fd26dda67de5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa54919-893c-471c-882a-f695e099b55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9f96de-f5f4-43f4-97e0-3e4ba67f2e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b8353c-6c11-4b7a-889d-8353ecd47e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c820a41-0a3c-428f-ba66-303dbcecfcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a3ce3b-4fcd-4f8e-8346-9915bc7d1ace",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2f24d6-49ab-4ba3-8949-34f810ba9d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7181101-e9b6-4b6d-be86-4a0a50ec606f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2777e696-a88d-43a8-92c4-610ff9020ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38dcb133-1798-4215-8c9e-1729abbc7dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde959fa-eca9-44b5-a1e2-c023ac356994",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a889391-be1d-40aa-9e15-e3a489337656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90e63d4-a86c-4f10-a515-38fcadfc1b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6044f6e8-93cb-48bb-9dba-bd61f9dfb307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e257fc2d-162a-4ba7-9e59-96b8e51a57ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48745ddd-e0b3-408b-8360-acb67eec58be",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04369005-5711-42f0-9724-7934df23754f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12eb15a2-17a9-4b95-8210-d07ab6036a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6d5ea2-6202-4143-bbf7-d513e805655e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "046cabf5-fafd-4d48-b1fd-24b6df980a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24265252-fb53-4b31-845c-24205b5326a3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0703f584-5323-41d2-8c06-90c89c9f7cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca179349-eebd-43a0-a744-fad79542188f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f07f799-752f-40b9-9ec5-4793885345fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d45952-c90e-4907-b563-5e099e5e5330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e257b69-592b-4a79-8960-a067a75806df",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f824fa0-e728-4cac-a0bd-ba7bab883b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0b5c39-5525-4091-a9b4-c029b0f42051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8686e14-9b4a-405a-8eb5-e0fba9ebba51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fddc24-412b-4fd5-84d9-4a5f04c7fe2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64103566-f4f5-4d1d-bb4b-c3a5e7a92317",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1734a392-5264-48ad-96ba-570774d7a469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9bf4b5f-3546-4ca6-ae7b-c700ad3fef4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297c6ce6-7e9a-4381-9fb3-66feadc4421e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "443bf1ff-01ae-40df-a34c-f18b63ef352e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd40b49c-6ff7-4db2-beee-56053cf33b36",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67431d49-7be2-487a-bb07-642dda89b053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7059cad-007f-4641-bba2-77b0f51f53db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2daf8c-ad6e-414b-9f0c-4200cee0c854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "adc1758e-2521-498a-b93a-05e23bdb2302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b8e2ce-f440-4f4f-a422-d717a8cc4106",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40adb897-ff7b-4028-bbc1-218b261a6ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e54f2d-c57c-428a-94c8-b2835e6cd3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee99ff7-3f67-424a-9feb-ee8d41ff90ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e511248-72cb-4811-b448-6de833e3d091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e8a2da-f074-42a3-a94c-1a7646f7faab",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b3964d-9ce5-4893-8b20-3d235277bdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "54296dcc-82e4-49d7-871d-e9070b6839a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eb4f80-5033-4926-8457-56c02af9a4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3369a12b-1144-40f6-8f90-d3b3d7d3f635"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bda16f87-6765-4126-a934-d44eb313c25e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ffbed6c-f1a7-4bd6-8b5f-08ab13de481e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e52e2e1-ac52-4cc6-b08f-642388046a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "499e1723-d6b6-455d-a4c5-cad16c230966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4465047e-29ea-4d26-9877-f12fbf2cf9d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17379d99-7d8d-495c-a95f-0e9e4c512df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3da92c-496e-42d2-ab4c-77b470d5de0c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff48bf55-e8d9-4c38-a2e0-e0be480d1623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ded2d973-019e-47a6-b740-1e98e5d507b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f282982-b7d5-4b83-b658-90785bca0cf3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb0159b2-79b8-4f70-80b4-4a3d8807e133"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0572a16e-7de5-436f-a1b4-4226c07fda55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42a5ddde-c6f1-4d5e-92a5-e19b68468ef3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4d6beb0-c52c-4c57-8425-022f63925e4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e2439a1-0509-46ca-845e-73ebbf83246a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2ca5669-42ad-4ebf-8ac7-61c47f079acf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a64154e-bb7c-4257-9d98-e606892c5e5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c56b698-99d3-47d2-8a64-bb8bc42304da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a987da2a-5efe-49e1-8b4c-e6b5ee9f3efa"
                }
              }
            ]
          },
          {
            "id": "ac4f5664-fe9d-44bf-8556-e79d6bef9082",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66bb915f-3ac7-4c37-b63e-95972a2f08f3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f1aa17d-0721-4101-a7f9-d60f62a95504",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "974b393b-681d-44c8-939e-e3ca6c9953d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46d100f3-d7d5-4321-b9db-43332d684bbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "23fd0fcf-4ea4-4bdf-881a-61dee27effbf"
                    }
                  }
                ]
              },
              {
                "id": "772f1779-a13d-46b5-9021-65943a011f68",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2350cf39-6a55-445f-8a94-29ca2ac4bc39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7f09e71-b339-46ce-9ffc-fc4916992fda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2eb069f3-806b-486d-8668-f7364fddec13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35eb6ed8-6882-4ec6-ac93-50f903158cfe"
                    }
                  }
                ]
              },
              {
                "id": "596951e8-9489-4fc0-b0ec-7be526f61b2f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef4c8d4d-e705-4adc-a192-215238d8debb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76fb4f28-268b-424d-8f34-2a2de911dbd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74c2d382-c474-47c7-8f9d-290ef87aebb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f7da4e0-74da-4512-805c-414e06d44df0"
                    }
                  }
                ]
              },
              {
                "id": "82bb0250-937d-454c-a6c3-c4e3613c4911",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cd756c9-5823-4d2d-a9f1-94273625502f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a59b5118-f53c-4920-b699-2560579fe778"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff29f85a-99f4-4ef3-a4aa-788d54097e16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "34579ff0-39ac-459a-9620-3e291a387a9e"
                    }
                  }
                ]
              },
              {
                "id": "b21be342-11cd-42a8-a83b-960e82f1fd87",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f390df2-668d-475b-8e5e-93e9cc77165e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c162924-869a-48f0-a693-151b64c7210b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "690d11b5-be79-48de-80c5-f352b7ef760f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8fc596b5-1bce-4632-9192-bb8c879d823d"
                    }
                  }
                ]
              },
              {
                "id": "158dd029-97b8-47fb-b52d-715a2399bdc8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86238de7-2188-457e-a025-bea5b4714393",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a41baeac-7213-441c-8446-52d15bf0c602"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46446745-9559-4525-a69a-6244354bd078",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b3b7579e-2bcb-438a-a537-c8acbd4e009e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2eba32c2-db3c-44c1-a3ff-de8edbbf0351",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8196455-8dc9-4891-ac3c-926097677a74"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3bbe8611-7dd2-4f81-bee3-b51842c720b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "874c1137-5603-4c9e-988a-86a41e1504cf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8dbfef36-1ebb-444b-a9e9-70b5ec560598",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "31201078-a646-47d3-8846-30cb17545e16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cf01be9-b2a5-4761-9973-dc0c3b418cb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7ce4b4d-46b0-486c-8970-dee6cd452658"
            }
          }
        ]
      },
      {
        "id": "8f9d45be-616a-4812-9706-c54b395b2e58",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5d85fcd8-c97c-4265-b464-061357ce0a09",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af590d59-4b2d-4984-9816-abbd16c3dcac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a81729ce-4ef1-4205-a75a-65f400f8b554",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04950f22-29be-4c06-8acb-0e78428f3000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaae7cfd-9844-4eb1-b338-83b15c4b4e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d424ed-902c-424d-b7be-a1b656f600b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d297fe7-3cb6-4313-8c06-d28ef404548f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c828f97a-be9c-4c34-8356-11a6d389144e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b120319-26f3-4cf5-a273-b6d1736e37f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fe94cd-3615-4a31-9675-32eb35291465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd7ab2a-58ef-431e-8e9f-174896c989e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02702520-c949-4b20-af46-a80d8c97abc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e5b0c2-e0b5-4694-8c30-7736f317191d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb7d09c-2b28-4a29-9720-2a1bc192e7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3864443-529f-4a51-be11-c6f4b58a5a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016bfa4a-a99b-499c-a1a5-24b5a64c4d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55734b04-2f7c-4c35-b973-dae86f8480bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17a3f6b-1451-442b-9deb-6da2ed2cff8f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d744c8c-95b1-4f0b-9ce9-0398ee8299f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0bb7e0-d340-40e3-91ac-71b84135512e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acca29d-3ec9-42e9-bdb9-3c89c617f42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3099bf8e-ac46-4e02-a868-6d15fe90857c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff925cd0-6efc-4b51-a503-6f2101a7d7be",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50ee125-a4a9-43d6-b1b4-dc58eea5d4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584b1c0d-2e3f-4f22-ae01-901c41826fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e5b094-39d9-4526-b81c-df4d3042a5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a27d2ee-52a9-41ec-8782-0897d6332815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eede7e-6f22-4465-a7cf-388ad6be988b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea7b0e3-f610-41fc-acca-3da2f66ebd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1022921-6a79-4a94-a835-68a086d25138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bae1d38-b5bf-40bb-887e-f87e18e55655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd737d20-f7b4-4e75-a1c4-c7d8f3ea690a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45477640-dc04-4a8c-91df-7f9ddd4eb851",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927dfb18-5a9e-4063-9fec-5b6dcfb8b1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f37267b-0aa9-4715-8cf6-c17c628e7602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bd46a5-9538-481d-a865-ea059cd1464b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffa5fae-010c-472e-beb9-6598d8340f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60a52bf-56c1-438b-a45d-17b176f35abe",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d02c28b-ae8e-42dd-959c-e34213641fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c60424-2747-4407-981e-e12e11783272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e65a67-c96f-4adf-80a0-f1aa37ea07f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5479815c-3e45-4ee1-8e2f-3a2716a81810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac683905-6cc5-4b3b-a495-8ca31b693155",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1976d7cf-3386-4359-b48c-31698f93d88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35a4f9c-69d0-4d61-a116-b321240c70a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366d7fda-1659-4237-8658-71ea797dbe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f30e17-f91b-48f4-af6b-13633958ce0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7d3393-d254-43a3-977a-1a27b0a41924",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63153047-2b33-464e-b805-b9e7fee83214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58deae25-f87b-4c72-81bd-914f7af611e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95f37fd-1678-4d79-ad85-04d37a1e9a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2a5b5e-b190-4b26-9e33-a0d43cfaaafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9051c5c-f03a-49f3-b0cb-1e9f5215db79",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e23b14d-fab8-4bf4-bde8-416b925f5ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14124280-86dd-4249-ad17-0e5af1ce6807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2f8623-6091-4d6e-bfdf-05d73f1b5cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad91833-fb80-49f6-a761-5e57b47fcb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38398b5-256f-4158-814b-7c62cca52130",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbbb9cb-9b9c-4263-beb4-35d338573f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32290e10-58b8-4868-830a-b9bdfab4ac9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75078824-a203-425c-a07a-6c6969694269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11e2712d-19e4-4ef1-bac2-005d1e171588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6107250b-b112-48f4-abfa-29ce757c6553",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45edd537-e1cf-4c8e-b92c-48d7c072d24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7f2124-191c-4cc5-beea-60962162e687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cb3aa5-e8ab-4c87-b7d4-01e477ffb9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a60e23a-a15f-462b-ba01-77b2d46814b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a485db3-4f75-43b0-8115-def78e1ae3fa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92617589-71cf-48f6-a31b-9003880972d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcaa592-0c6d-431a-bdd5-52be7663beb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582b767e-b64b-4151-aae9-2b3cea0e6045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdacfc40-635c-48c1-b784-95e63787cf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43489da-c98c-4c6d-ad57-6764f1653146",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d6d724-2296-4528-bb0b-91275fe2709e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2f7679-c6a4-4ee3-8ecd-694eb7465e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edebd69-7bba-4f47-aa49-062b7605e2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecf5727-bfe2-4caf-bd1f-4854b64d655b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a60d678-64b5-4581-8c4f-adf21420eefd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db20e59-354e-45b6-94e1-fc7b08371894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3afe47ab-ea9a-4256-8e69-2db31e462fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057c5026-4438-4fea-8dfa-b566d7e60b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb602b5-9195-429b-a1cd-59cc4ad3b4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a632a1f9-4d6c-4a6a-82c1-00ec41dcccc7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b24d47c-ea0a-469f-a1ee-532a2351f321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee244cf-f0ed-4075-8f74-924620737f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b3e79b-7a6a-4037-8126-9a2ab799b76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d58b5b-dab6-40b4-8ad2-835daa563dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cb0265-3313-4b24-b8b2-6b8c6b637728",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb6fb4e-8c84-4aeb-bc48-f80b79d129ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168ab500-d862-45a3-bf03-1e57e749d255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9e6d82-96a6-4ac9-800f-0c7edf2f3fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8253d8-5b8e-4c1a-a95c-e4257a00e817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24c75b4-6d9a-4fae-89bc-a06580130ee5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85dbce14-cd4e-4108-9e76-a8e854f58091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f788fff7-968c-4cc5-9f4a-bd3952237fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47676f5f-9593-4139-b2a4-20e00a5037a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac313af-2575-4158-84ee-876e1afe4acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9898138-75bd-47a6-ae99-6bce19ee61af",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7b2121-8072-49d0-a63c-a89d99c3c1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36eeaa8f-dff7-4896-ab61-12bacb7a1ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ab2995-ee22-47c5-83d7-42fd42cef252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84b22709-5076-41cd-98d7-9274a981909e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1988514-6217-4ce8-9f6d-af35f9775cba",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e89221c-6eb7-4468-9b57-5b1376a18fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da54dd93-d5e5-4712-aedd-f6f11243e68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5852d42-442f-45e9-9a75-ba5f96af3dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5ea804-2105-4741-95da-082729662f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb30f891-8657-4a92-877c-899376d35d7c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aa082f-0ad3-407f-a495-66b42d8f9fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9375d28-0d93-4c46-8da4-1b89e940605a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba57653-8d7c-4d51-9a44-f8f8bdf1ed8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ab93ba-fd61-44e2-80aa-795f1fe88beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a194a15b-f747-4d61-8984-a0e9cb50ad22",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940a5a1c-7c9e-426a-ae79-83efa3de78e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d4697e-77c6-4041-b95f-4489e12455f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47ad5fe-8f37-430f-ad9b-b7dff6ebb80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd73cc65-1fbc-4c49-8b35-9a7a73c44a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e30ec03-19fe-44ff-afd9-dfa2d2323603",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d56745d-fd4d-4165-a12b-8b869e8481eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42ffa78-3497-4657-a3c4-8d7441565c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdbd761-326c-49ad-9245-667ea0ea6b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3490a0cd-35d3-4492-8c4b-17eb226da542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1050bb8-dde4-48dc-aba5-a049ec6200b4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26233905-69ad-4501-a2e2-44b71f393fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118b24ae-8d74-46d1-a9c0-25b0cb10cea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30498e9-5237-4995-b6b8-fe909f7c278e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99ed6d08-8ac0-4a33-bca5-e7e5f453b352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db682e5-95d5-4e95-96f4-087d2e7fa776",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a904aa4-905a-47a4-b48b-40cf89b6938e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a57ad1-c81d-407b-bca9-e58d0f2146e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65f5124-fb4a-4b0c-9920-ae29017eec15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8142a836-c601-4ded-8588-2489e8ad901e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d889bd-1378-4d42-913b-7134a3ff98b2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289aa925-2563-4eb9-b115-fdfcf2b66c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac31a2ad-311d-4f55-849b-4a0c68df60dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dde2a5-6870-40c2-85da-ec75fafb7a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "967f1f4e-582e-4417-9926-887f63bdee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62846d2d-03fe-4684-8682-ba658a650ca7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23167894-7b79-48d5-814c-b4aadbee5223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c1842f-4445-402f-8619-fcd655cba399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0327cfe-b3ea-48e3-86b8-da7dd101d89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e756c25-093d-4b8c-be05-8439b9ae5bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf384c7c-5ee1-4c9c-abec-93949216ff52",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7d6a42-73f4-4d85-99a6-824b4d7af1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e523b80a-5a76-4a40-b626-9bda3ed45f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1da5ad1-44be-4e97-b072-e1879c2d34a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b353312-f88e-454c-9a8d-491cde88a672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25dbe4f-ce21-49bc-af47-9e1820cbaf4f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248f7ce7-b513-4be6-aef8-9962305f8412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0796d101-5857-4e0b-920f-fdcdf989224a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5afcef-f73b-4912-9a75-7bc4e6a99bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c552f9b5-bf87-4703-80db-013c79930dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63a681d-7e10-440c-ba8b-a86f919543c5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9718078f-793e-4176-9353-89f740fd266d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc79c0f-5050-4385-bdaa-6306aa203845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd4ce00-5d50-45ab-9ec8-7f5c18c42fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa58bc5-e3b3-41b6-8618-a92c455bad5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a491de-5af9-4a33-8a7f-0300600758be",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371ed0b8-8bfc-4f45-b668-2351e49b9fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de460aa-39a4-4827-a166-7265cd570849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3763166a-01ca-4198-a8ed-58c203a97015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "841424e5-2675-4527-899b-42b883541f71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aaa4fd0-9a8b-4aea-a8df-ede392a62bfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5592bd7e-ed21-422e-905c-1ed2673ab055",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690b7477-dad1-4f8f-b149-e014037b5ff1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2082f8dd-160f-474b-80aa-870bf20a4ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc991ef-d3c5-47db-b744-ec795a3933e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c246f015-081c-403a-adb9-b774e3c251e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efacce55-8cec-4efb-bf29-f96fd7263d8a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc3d614-46dc-4f9a-9706-644207db0e8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5d98e4-699d-4c8b-9bbe-63ae1dd2fc5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbe5c41-91be-42f0-a9d5-9b206be608f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb631e22-821d-4be2-823f-14c8749f1539"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b3a5ea3-7141-4479-9026-232f9d0ce6c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1af3dc1-2ffb-4590-a42b-2c172be3c409"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e773864a-7674-4bd5-a2ae-c9d016de9585",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db89a442-4d76-4446-b277-dd2150518ea1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ff7df7b-9a76-4441-a35f-0f32495e7931",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ed385ba7-5fa7-4d06-afc6-65c01901212d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c4c4503-32f9-45c3-ab26-59a5f5b0d147",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e0753af-d0d4-4707-91b9-e8ed41f671be"
            }
          }
        ]
      },
      {
        "id": "f2ec8ac9-3b9e-478e-a41b-0dd616754a9f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9cbfe617-f85e-4819-8f52-eb151145b4ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e5255c8-0b33-4b24-94e1-fb9bcc53e591",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6726efe9-f5e3-4fcf-a0e8-e4b03a3549a9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a42874-cc5b-499e-af6b-bc007e02536c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9015035d-60b9-443b-90df-efeb1e9006e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6ab1b2-bbba-4720-a028-ee6cef194468",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108aea48-158f-47fa-b64b-15973f72e927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4251aa56-006e-4844-b6f4-f45282d4959b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8cec09-3f11-485f-ad60-1907a179737a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7d92b8-bf4a-4d32-9bfc-2a25a932b5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc220ff7-8916-4804-bcbd-b840f08e5bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc24eb8-0aee-4370-8a1a-a59416a20636",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f610576-b911-4403-9871-e75e1c96e035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be69cbe3-ec03-4b88-8b97-5bd7092eebb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def96a49-e658-4842-bf66-7ddcf96d8dca",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18ef0a7-e409-4639-a00b-fe17dc708e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13578628-0869-4fc6-acc9-fadab5bcbc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f425e26-6699-403f-a323-ba62861b11e5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b98eee-13fd-44c5-bc4c-b4cd694a7a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747337b9-f45c-4e40-9650-c645f004d862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b89e1e8-f708-465c-9c98-563ad5e2605d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3867101b-c92b-4952-a57f-dcb9d671c0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ac087d-3f47-4fd3-94f6-a9f2fcbc4c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d55b01a-e480-4903-bfd9-0d8eae0a7883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0c834f-458e-4ecf-bad4-df6d8e65679e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8ef39b-20bd-497b-8e45-3ed18661405a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e4ac4e-8f45-4cc3-bd09-bd3ac9beba42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25725291-594f-460b-9960-ff44188b6aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff32d1e-d5ea-43bf-9cae-e5fee86e6d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41441c24-f45a-4760-ad64-623b26d711e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65867597-48d4-48f6-86cd-c18ad8af6bf7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f46b86e-bf93-4d6a-a741-2d4b60e644ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5957d054-250a-4188-a054-f96dff415388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22fa9cb-87fd-4cee-bad6-2d2a0df4a459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397d6c1c-0f22-4805-a4c3-92eaed1c6231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9f4504-780e-48d3-a66f-ce523c039870",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4190767-cdb7-4b19-8312-15ef6179c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82051d32-957a-4565-bc64-d4b0d975a6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be949fd0-f567-4f27-aec3-29e4ac6a7c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1cb6922-ea1d-4aee-81d8-9fae43a980f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2276134b-cdba-46cf-a39d-d00c4a1e15f0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4621a5a2-daa5-4cd2-881e-0bf68a17df98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a30b36c-23e9-4d59-bdff-9a25456ef7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7e2ca8-1f56-4c0e-b6ed-f5905887e601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363fe3ad-802d-4606-adc8-7f4037e40478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01a49c8-55ef-4f61-9845-27f79ca47ef1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c623750c-0975-407c-8581-04f981aa8204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efc9ed3-a572-4f77-a07e-56e22a90b473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75f6a64-da2c-420c-ae07-25127df0dafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5f4345-0f35-4f6f-8921-4a0237cf2ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eb7f39-ebab-464e-899f-98077449c9ef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3ff840-2ae5-4b8d-b46a-4ab148cfda8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c6e949-f5e8-4a79-872b-81231d1ad4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4196d9f5-ab1b-4ddb-9a5e-9550f1d7b5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045079f5-3402-4c33-849a-6c70c88618cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666f6a8b-e8bf-46d4-b6b7-5d4dd33a1cf2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4b8820-8761-4e73-897b-480e892e8620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a763af2-29b4-4ea7-bb8c-33c8a71ca8de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0802ae19-db95-4024-93cb-2f43378d5708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924ab5c4-f85d-41cd-a1d3-eefca6e0a567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf49c0ac-7692-47c6-bab0-c571e97c0ca2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9184614-3365-4e9c-91bb-2e5e7ffdf63c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42775a6-92e3-48b6-830e-fae59d650f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "354c5482-76c7-4ec9-9945-03cc7a6e32de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f670f157-1bae-41d6-a8c6-f64d00a1c17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfb41ee-f051-4153-8a2a-12ea1cbcf581",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc0f75e-6cbf-4ae1-bb53-da1c09809b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ebfe601-260b-44fa-9273-be292a75ef3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47575f6f-aae6-46b0-844c-d1f5df5e8cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79571cf-8644-48b7-ba6e-078dc708eaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1578aa19-f107-4b26-bc63-1dbcd95c97d2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24cb3035-55db-417d-866a-6743474b6b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd9fc6a-5cb8-451c-b618-16b4ffbcdd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4368793-9384-4960-b02b-2bcd36108a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f1f07d-fb00-43e9-802c-94072c2788a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3c7d8a-d338-4ecc-a5d7-99541ced8b38",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50681c0-0dfc-4aef-a3a2-1b51fe02b604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26c9bb4-428a-45dd-9a01-f9208d2c3bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee38f5e-e61a-4ce8-ad4e-165e9c1fb38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3cfb44-fc54-4c0e-8e56-e68aad5f672e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc605057-e63e-41c2-aae6-e846230fd05f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db695d3-019f-4073-95fd-d736f2dd122d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f776aea-a542-42ef-b6b0-15ec0d7b614f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2e3fab-e5db-4300-be45-2588ae65fe94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90c39f6-8250-4b67-b3a5-1b1ce32bc1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487ffdfb-2569-4cb0-b051-d7a286b40558",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146524bf-0e04-47c6-a151-e1a993624e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea7a1a0-7db5-4f6c-b295-8ef3edfc6c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2b0d44-29d6-432b-a8ab-773056238514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a96d571-0976-4a97-8d97-74dbd783b09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e4a988-7f6c-4987-955e-c8fe424b0ba5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1703179-5c25-44f0-83e3-92a3b81bfc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2513c2e3-ec71-41b1-b6ff-752e886cc0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5534532-cc69-4968-8734-b2cffec8ce0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5215646c-cdbd-4fe5-aa26-509ee08becbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4583aa7f-1f99-4fa9-a7b8-912f9302211c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa1d923-bf97-4423-826b-30a37bbb87d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b854d2-b9cd-4daa-8c04-82e0a1bf3293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c2358a-315e-4e4b-ad81-407c6577b5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a378c08-6808-4c8a-9d88-97b8ff79abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440ec55a-1969-435f-bee5-72a69f3d53ed",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e96abd8-85d9-4640-9993-ac46725d0be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed81706-15f8-4e65-b12b-54369e1f1b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8741989-eea3-44b0-98e5-dfb995af7884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01a71f0-797a-44e9-90b8-e19eff9e289b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cd8228-c6b5-4992-a62f-bbdd8894996f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b7f3c6-afe3-43e7-ba5d-3c0a3da05b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01e67968-d10b-4665-a3b8-b8060072052a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cea5c4d-4cb3-4c2f-95e4-8fa85a1c4368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca85f43c-87a0-4862-8782-97a340cf1810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869d63c1-a353-4563-884d-8865bd0c7e75",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823a20b6-b8b1-4cf7-b04b-a0fcb546e950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354881e9-cb9b-4702-ae04-a144b8288d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb748bc-5efd-49ad-a72f-12548c0e1fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6515146a-1ae1-4998-ab3e-538af529de01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ba531e-a754-4866-b5a4-bc64cd8ccba2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc50887-59e1-42ca-ab84-314ee2740ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "610e978f-aaac-4cac-9304-5d353ee4e70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7bf6e8-cac0-4bb6-99e8-8cf50e639174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3a618e-93ed-4416-b941-d33ef0175ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b68928-5eef-4fb9-bb14-44804240faec",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5448d0f-03b9-4c4d-8b72-ba392f6eca3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85fa5e9d-eae8-4482-b019-2ec302956760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ea14fa-4a04-417f-b584-2a91aa6a306a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afae90d7-877a-4d45-9825-9500e18df222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3b9cd1-1db3-47d6-832b-ecc32cf36f6a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d82402-1997-4c1d-afd0-072575d23364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20bd1e50-793c-4aa0-a1da-dc6fb2a5559f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d681a3e-72de-4801-aad9-21096c54cc49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3effe9-dea0-437b-a018-a1a6721ae101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b871c5-c6f6-43d9-9196-2f4aca17a804",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc066bc-8f1e-4ab8-b957-25ed9159b9d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8811d9-60a9-4421-862a-db2317774d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228e2337-afbf-46f5-9b6c-d75ede91c6c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65d24dd-b463-45cd-a53c-53f5aa300adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608bd311-0da5-4ab4-88f1-8aecce02b7b6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0a0bde-48cb-409b-a6fa-53bf5a55fd89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "067048e5-9f76-4f64-9cf4-567f62955380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87891612-5493-44b4-bc09-f4106852ca47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2023db2-8cbf-4abd-bf97-0888a679240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a053c628-95c2-4bcc-a6d0-eef87b071f98",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e708857-956c-4922-8d89-49a458f58e3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b7a1d41-31b4-43db-a5b6-4addeecd8e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a8b748-801e-4918-8f19-0cbac551347a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e08d8d-1ab1-4dc4-8c2d-6ef50f06785c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04d94f9-ff60-47bc-ba80-37c30d79be4b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37ed5e1-1fc0-4784-ae0c-6ccd7d7cfbdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f08b10-1334-4163-b5fb-83be38ab6aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1ff126-0067-48f8-971a-4d790b7dbdee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111987a8-46f7-4b40-be7b-2b5bf7adae72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388e7383-4d58-4130-8eea-a9dd51808f3d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5c33a0-3e8f-4f1a-a06d-dbe3f5d34397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d1ca14-c7d9-4847-b623-492836910120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d856b42-0439-42a4-a02d-c18565bc0321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be56a9ca-048d-4ad7-bc8b-a74e02c4105e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f356bf-23a8-4a21-9585-b587ca6f1e77",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fee3ceb-a6be-4200-b09a-b08a528858ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fccdd584-a697-4f6c-802a-d905622c6690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd7bc63-0b64-4c76-8648-43f341742912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475b7da3-41da-4583-a54b-a8e4dee57762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9a91d5-022e-4a86-93d9-6a659fc8ab57",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29582bc0-e29a-419a-bb2f-7030d44c8875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6331fe1-3fbd-4df0-9d9a-1af94b0ad6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c71047-4323-4592-b4bd-771dd0f7a745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2b769d-20b4-4b06-a280-af791f4d0020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04792721-2c5e-4089-be1d-53041d9ab0bd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756c88fa-28ed-4014-896c-b9c6c16ffc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cfc4c8-b95e-44dd-82b4-6796a18ceecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c1864a-cdcd-49bb-ab63-c18377542376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80932c74-61eb-47b1-9127-a9b21c9bb18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c1128a-51ec-40a0-a9ba-3829cc586e7e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073ab518-f77e-4724-8d69-74d66d020d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55e7fc0-a68a-43e0-97f9-c0ab601459f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6088566-dbd1-4852-b0b3-fbcc81e22b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565995bd-4ce7-4cb2-9360-224e05220502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3fdb82-b6ae-4d90-b584-ea5eedc2de43",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe4b2fc-d18b-4766-97e5-dd24c662a7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9b3d30-964f-441c-808c-2e000acf2a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d518afd-5406-4d6e-ad30-4337e9f19666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377db65d-e8ca-4e94-97c1-ebba7dc8a510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f515f8-46a6-464f-a080-ff257cc6985e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373f0057-1852-425e-b78e-837c5e830eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e17368-1c3f-4bb3-95fe-43370f4146b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755feed6-2f81-4758-8402-8c41572682cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96325d98-1fc5-41c6-9997-4b2e1bbaa288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5510c6-460c-4cdf-b0ca-b58a36fdc962",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66d8a6d-c60b-4406-ba06-23490e3d921d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c7b472e-e48f-4c12-b376-2285eaab5ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46bee82-c97f-4fe5-a80a-8dcbb6fb7ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e53c731-05ae-4375-b83a-53bdaccf1528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa5285f-1c56-4132-ac27-bfe824974df0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0be118-45b1-47f0-bfcf-15e87d893a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e9f6a9-7594-468b-bd45-374a26b297f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59ba008-ddc7-47d8-92a5-7e19aea12d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc5464e-6a36-4780-a6b8-ed497c5e5975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f207c0-111c-4c73-a82e-9bfdb5285f02",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53e2cee-1d33-4341-89fd-7bc31f065378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72c8d15-7b34-42ff-9e9b-ce3d729c4b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fda32a5-3fc2-4b13-a178-be62a9f367ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3cca98-9e5f-46f2-b034-d3b559df3db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3b9aa4-48b9-41ed-98e0-c03155286a68",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977f7cbc-5f02-483d-a5b0-dcf98b449d10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d526abb-b9fd-4cf7-92bd-86c727e0f3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b238cd-c39d-419d-81f0-ae83f170959a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017db939-ad66-4695-b15c-b3d738dec235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c05c5ba-5729-4d1d-a2e7-d4ad570c6164",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d62997-5500-4d49-a394-6415c0377104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e936de1-bb0b-4dc7-8be2-5a9edac7afd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc81a672-17ae-4047-a095-79f36a9cb556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6616df6f-a14a-4222-8ba1-215fb246ef4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa6a35d-2bc9-4c01-a0d6-2a45ddbe22d0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5398938e-4776-4223-a60d-84cd2cbb0b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560357ce-8c01-4180-bee1-96b9f5b96eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c94c92-0529-4eb7-b991-18ed7dac0096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b237c8b-c4fd-4cbc-9839-919c97fb0225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8835d7-0dee-4243-b1d7-a84888dd6d1b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe95c2a1-81ed-4aff-b22f-9125616b3f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc161c6-3838-42ec-980b-491579a01c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37018a3-966b-43b1-aa93-2b60c39f091f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fcc954-2952-4862-b7a1-9fa4a72d11a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409793a6-b2dc-4b44-8e12-ea397a31cd9d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef4bbd8-2a9f-42be-ad38-c03e99b63364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3080083-5fba-4b9f-9ae0-c5c6012f1c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb2125a-a605-46bf-8900-7ba6165004ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec53c73-1c0f-4d28-abe4-a45229d4680c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fd6bbf-4962-496d-b651-9e90b5892e8e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654a7911-3426-4687-b811-037ddd75bf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6fe8cb-98f7-41a2-a692-b9df0e205b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4622c4-6eba-44e2-8e24-7446bfd8d1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189ef462-ba21-42c8-a14e-ba589fc38261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568a46c2-f249-4fbd-8b4f-0282002c76a8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ea603e-ede2-4950-83bc-7ce062c8b3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28905bc-56d9-4d27-9575-eb317aa7b0c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127830f4-40d8-4b1a-a380-e1f1f70ab070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6d3929-b295-4115-b7bc-0b8d1bbdfbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a8a193-8ea0-4dfb-88e7-debf5952af90",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57af1b96-7968-4c92-9e22-acf2659c85d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd65ce84-9c12-4428-b250-78d9fdb26215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad14f8fc-5f2a-4e9b-a52b-c9c1150b2dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89104925-4553-4e4a-8a8b-419b4738e03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a6c60c-3074-4dc0-8435-cc4489cf2d8d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee8e8eb-ebbe-4f56-a0f8-b4d7bb0d322c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6007e2e2-04ad-4f38-b2d4-34f7d802bd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1fd989-70bd-40a6-8e39-5b292252aa0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322b102a-ae3f-473c-9b8d-3d24d8fe21ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec9add4-cbdf-4d35-b566-8703608426f6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f212f38-fc04-4a87-932b-42f7447135b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421e4330-e6d8-4531-8b21-e3fc512811eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3702984b-9d76-4a93-bf45-9d165656c44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34665cc8-eb8c-4c91-92b0-02217ed8f52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012fe19e-0ef2-44d6-927b-ccc8686f76a6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22d98bc-d331-4e68-b004-8b4fc44705dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b8b8e0-b63c-432c-bb94-d8e6859e00e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badd456f-0572-4029-b14e-0ee42c98f10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bfd26f-b38f-4afb-a5c1-07ecab444a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a468177-2f11-425a-b8e3-2646d3548ac5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e224d08d-4113-45bc-9d31-b9e1091204ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cd17c6-d848-4416-b512-37594d480ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e054e0d-c392-4f20-aa59-de59ae17a2f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb32673-dace-446a-bd15-1b8a4a3ba687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e35422-659b-4425-824a-134e5bda48df",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f73a1d-8df3-4d0d-bca9-a181252ef21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba464ce-6c7a-4959-96f2-84d0f8500496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1685a0f1-64dc-4aa4-9462-38dff23f68cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d72ab23-a6d1-4002-9ba0-3010b8a9fd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730fd989-b842-4baf-9f1e-afe7d2ab9e5a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf3a98a-d585-46e7-ae0a-d635750c0a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4e48af-3f44-4187-b9c3-9a9b7957e6ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ab1611-ae96-4176-857f-61ab4b3bc3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5324b8-4b62-4b79-b932-9d551d319c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678a5d40-2a4d-4842-a64c-e1c2f4f014af",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c58d06-c43e-41b8-b651-3daa6459dd89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d30cddf-f173-4037-a740-4513fa5e7aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d52bcd-c96f-43f3-b9e1-623a87faa413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8186d04c-9198-42dc-b729-e906b7bbca0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f50561-7f30-4b44-9a89-2641752beee2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2b5ca3-23a1-4396-8fc1-fc88b4233c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282cb7b6-fca9-4137-b226-908e8766b608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339b1639-85f3-4ed2-8297-8cb09941001a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a0a61c-359e-42ad-b8b0-3a179e83cb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4025adc2-3007-42c0-a1bc-feee69d6a522",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2c7499-8183-45fd-9252-36fb02d3b224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0119e5fb-2961-49b7-8e7d-f7453a54bc77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c35cbc-17f6-456a-9986-2a9be1f030a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c6aa86-d96b-4584-9493-9a490842f5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3361782-7b30-474c-baba-23883086bfe4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aba9dd7-0511-49df-a7c5-e65aa1410af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc24fee1-acae-42ca-91c9-2ad90fccd52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffe0fb9-38d7-4bda-902a-35f86df2f157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5fa48b7-e5fe-4689-a292-fdbf40b4b390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b065a1f-785e-40b2-9150-69ffe206e5b8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fe7b0f-ed6d-43e2-a73e-5a53c65946c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2501c0-d757-4b78-9c93-a765fece7a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10fcb35-ab82-4f3a-a6e4-5746d7dbe38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ff2f0b-c270-4372-b937-087c58bad667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c31021-7079-445f-af63-e3a4fbcbb160",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d222dc1c-a3b7-4072-87a2-d25926723b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eab3a81-17bd-49e8-b935-890bbbf0d8b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c7f643-56e7-4971-af00-3c93d6aeed8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da49474-863d-4774-9f51-df36c8213800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792d9118-3e1d-4af4-bb3d-bdf4a7d5a08e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dfa3b7-f36f-47e1-a19f-2768da42b2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b81b149-d307-4f70-9e80-ed0b12400ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af8bda1-2d0f-4a4d-8565-5b50dd9091d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cce000c-8029-46a7-b282-b0b5b957a05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f138ec97-7c1d-4dcc-89dd-9dfbd099a757",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4d2451-a198-4a6b-9b8b-17f5eb456fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c8ead3c-28b3-44a7-aebe-7f070272ed33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b719821-2ee3-4503-a274-e6b438af2dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f92c8a-b10b-4ade-bae5-3ef5fdd51d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e4b6ef-02b2-450c-9896-60a3be647ec5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb02d470-80a0-45d5-b0cd-89b438600793",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d42e05b-7959-4d9b-8725-862816643cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb579958-1312-46aa-9e90-6bbe0c3df269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8ed678-7805-4680-bac9-739b269fe072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e07ebef-874c-4ce9-84f0-280641b2fee7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be574f5c-01c0-4422-8b90-db7fdb69fc8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "113092cb-2656-4dc6-8606-5b9000a7e319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca558696-67bc-48d1-a3d0-d35d856c4bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca5b5a7-b3c7-49a5-aeae-b0753ed26ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fd5cfc-3092-4b9d-8fe4-bc16f0ea9d63",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659d46c4-ad23-4e90-8a68-f7dfd03daf9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dfddd4c-1933-4c60-b2c3-5ba3d249774d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227605dc-6fe7-4cf0-836f-40bdfb08fdf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27986c7c-aa70-49d8-a00f-a6688059728e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b6dd95-67c9-42c6-b245-a8b102297a22",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4d9a60-0120-497b-9f79-cce245484043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f3f789-b338-476d-9352-c605be31d375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c722e095-6fbd-4873-aded-068af4fc0b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c6a6ab-0428-454a-b6db-03eea00f3a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8793d12-336f-48ba-9122-243c6574a689",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c680a0a2-9516-4cd5-85d6-4b0eb05d45e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7b3ca7-eb75-4a70-87d1-a5dfbe8d36d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2113d1-1fec-42ff-a6f1-a5d19d991001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2e272c-5533-42c0-81fb-6fffda4e18ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78b528b-8f90-4281-89d0-d59d08ccae63",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61292905-04f8-4433-a594-741ee5a36471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8225a596-76b8-48ab-b0bc-ae9bb2fa9430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4265fe-a52a-47bb-bfb1-e8e4543aed2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c973c3-c722-4be5-b8a6-e449059ed309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acea8c0-1881-4cea-a540-7f8b4b1342ce",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34e6814-fde4-4261-b6e5-d34601c552ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37bd4301-e0c6-40e0-a8ed-f9b1b204958a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e517c0-60d8-44af-a116-b5df6b931b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c288693-c1fd-43bd-b762-9c3b00855f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897571fc-a547-4e13-93a1-8e33f32fcdd7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7c5284-1f1f-4071-9efc-02b47aab4ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f98641-d1cb-42ec-b3ff-2539b3abad62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9fbfa7-7029-48de-95e3-39b54932d8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02db4a6e-fdf1-4e52-808a-afe3fbf8ffe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c27f3af-f258-40fc-bcb7-01bc2132d507",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dce96c8-b573-4c0e-90bc-36b50e124bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0a7c55-7a54-4d5a-9f1b-ba0e9564afbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66762337-da71-45dd-a94d-6006b1e05d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de04b40e-1021-42a9-8075-66f29ae94b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bb8064-3304-4f79-91b3-2a539854c5ee",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98bcfe3-3e4b-4696-ba76-d2d93b94ce41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0909145-c49c-42b7-91ed-411e5cf4213e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5a766b-4346-491c-b427-6626a56aac90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae3798e-c3ff-4109-9f52-cdfd6d335807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb5729c-9c20-4a0e-a334-f84b662221b9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58065018-96a1-4d51-9754-c6dc2aa89f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d157c31-1e38-453c-a251-c4dbf6c44260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c1cd6b-d7b1-4b17-a77b-5b6f6ce7895b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de91b239-e7e1-4bbd-be85-f62543b59adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c183358-9752-4b55-8665-a39ede037425",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0b1241-5dd8-426d-90dd-97657d17334a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "785bf983-d58c-4019-a290-0aabe451c4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc70f1e-ec17-4144-9786-11ab6b652f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a230321-1c60-4274-9625-55991476c642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb295a54-e182-49d9-ae16-4f677691184c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33962bdc-ceb5-4b57-a837-ecd441120794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e581f297-bc65-41b0-a145-85e47259ae43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc224bbc-9785-4f28-a2bd-822ef70079a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2b734f-0732-4112-bbed-54a3c3628fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511ce505-3205-4d02-b5f1-d1ad8aa62f48",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ff1a10-ff24-45f7-bf8d-f74f898d7512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dae124f-b5e4-4b86-b164-1c52336bd650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e076847-29dd-4ef1-ba2c-2d9083d13be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487395e8-6f4d-4595-869b-a9566edf4e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157f654c-84c7-4d8a-9bd4-dba89bc5eb53",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc4208a-5ae3-4d3b-9667-46bdb7db81b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3c729e-80b7-45bf-8d90-a2ea8915f11c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bc2755-e4d2-4152-9585-1f86a7659594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69a2a8d-baa1-43ab-9940-b0e8c62dcd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f75353-d038-422d-b302-03a46259f749",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a626d71-190d-41f0-8498-12bc596db980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06c3274-a898-4074-9501-8bd7810e93dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bcb2eb-1ffc-48fa-8ae2-2c5d0787b66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10f462c-b029-4f2c-9256-0bab35680269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17c677a-bd54-42ae-adf6-69401dfd3bda",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986d9530-a0f0-46c4-9f1a-1d32d9bf9f7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c2994de-0936-40d3-8793-dba94b08ef1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b0012f-0bda-4a94-a419-ce4590eed51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03f63d1-c9dc-4296-a726-f2db17701905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616efc77-c5ff-4a09-88e5-558503e5bbd7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abc5962-7d9e-4895-9c25-19a1e6ef7abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2346d72-819d-444d-86ce-a578a83d615b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1b2964-33c1-4b1c-9d06-04a178de10af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc9f237-1c16-45b8-ac13-28d921cd1dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f37a71c-3eac-4515-a9ac-4b925d756a02",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52c0bd9-1ad1-4b9d-bbce-18c123712bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "977cdc62-25fd-44af-ab1f-f699a2104bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68710da5-942a-4282-8acb-cb609848c759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594f3ad5-cfa0-4a9d-abad-f7be0783d6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7d6036-3f33-4fa6-abf6-5245acd108af",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1fce75-4ae6-4343-8a41-c76c8d173641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6987743b-9925-4290-aea9-d9f00619e1bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a9fd40-e769-44ae-9cdd-1544fd50fc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ea0016-2c10-454b-8f92-129233492e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eabb5bc-a616-4785-967f-dd54f67206bd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3799014-a8d7-4db0-9080-0f6a7c3bdd88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6246ecaa-2b48-4833-b764-ebdd687cbb9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9880858-2691-4535-88f3-68e77162a3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdeeb91b-bf9b-439d-aff1-c404757452f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488c0cb4-a7d8-4b25-97ad-a46f055b6478",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d32a98-e49d-4c48-a309-647f71b1cd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2aabddc-a640-47e3-892f-f86fddf7735b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24302792-0e81-450d-8a11-002082f6a58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e431fb9-777f-4300-b6ad-fd0f07973059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444d8574-bd6f-4c1b-8603-ea5d32ca1c5b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5450acd4-701f-4eff-9a3e-8d010bdca814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7517d4df-e2c6-4411-86a0-ea02e1caf1fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578240de-da26-4867-b183-d38f172d14c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce954b77-81de-481e-b9ee-20d224d97889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd1badf-7c88-4510-afe5-f95dcef01bbb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47161c7a-2bf1-40c4-be3e-714eb0b25322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4eab251-5d3c-4925-8507-06826c85ec92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22675a43-2353-4049-92ff-2f74a2059fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b23d81-400b-4c4f-a3dd-337cbbaa8f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f64984-a007-4b9b-ac5f-ec20d7e4f1cb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038e53a7-a55a-4d5b-a0ab-a9fa215484aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf38f7c4-5e73-4a2f-a72e-a0e67797ea1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ee2310-a85d-4f6b-a794-7cb9989a7f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09dc27aa-5014-4e48-828d-f93c45dac3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63a520f-80fe-45b4-ac83-80228bb1a4d3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bb2678-cbec-4eef-9da6-abbb4e47e23b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "884e32c6-0b2f-4d2a-ae7e-2ed39226da8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdb5f5d-6e7e-4857-aa44-4324387296f7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1650e9f-6453-4493-b520-e0cf4cbe886d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6590622-1ad4-4b0f-a87c-6b3957a0256b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb3cbc5-732b-4bdf-a7fa-31b01202e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b742fba-9747-4052-b98f-601989e8728c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "637ec017-844b-4d92-aa40-69fffb643b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fa5441-5947-4f07-adf3-d4e8fd44fd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486176b9-bc29-4441-9ed1-bf1918c1f201",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68b8ca1-5177-4aaa-8dc5-8ac74c013d79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "854f4b57-6d55-4900-a210-9480d08bb841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903ec84d-ede0-47de-9320-d6b8746922a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d956cd-00df-4beb-8b86-49f098ae161b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9870bd-e21e-4aee-8272-2af557548d40",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbafd753-5d31-4cec-8573-2e25d2ebfc0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c336dad-093a-401c-9df7-1a641e9a4540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec36f2d5-05a5-47cb-804b-409c645f6bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b4ed97-4156-402c-acbe-02da0a83fcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b85070-b94e-456a-bf33-f2a1deb0dee2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a698467e-b55e-49ee-ada1-0c025e0f5858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a77daa-002a-4a9d-b39a-e630f23d929f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f556c42b-8346-4f10-aa58-fa8a65662942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fb4f69-6109-4e08-bf4c-f0f8b2f2d30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de185be4-20ac-4d8d-9da4-e344dd9d814d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e236e56e-586f-49a5-97c0-eeff7a1a39cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "928bd59a-0030-4184-b59a-2c336a0ed8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41bde7c-abb7-43da-b406-74cd85c53caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae9483c-cd3e-4e02-a6ac-a1dc8cfcae2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957f4770-cb2b-42f9-8db4-c56670df04bf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf252658-4b2f-483c-bbd6-f764e1ea9681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1f04644-4af5-4e9e-a22c-68979ef1cf29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece2bf40-dbbf-491f-a582-14a9bc1f5bdc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3a57fc-44ed-4045-95e3-de40e7247553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ebac7b-ccb7-4c48-9eef-4aa744dfbca4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e7778a-d91d-49a7-93f3-1db2c044fe25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5246cc6-489d-4e48-804f-f7fc97c90e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d9de98-4272-4422-ac23-368f6ac015d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d43676-9d91-4560-959a-be497840cb55"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95a205b1-111b-40d6-8c6e-19a064c09409",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0091bedc-ff89-4f6d-bf45-b648b6594d64"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0954a2de-1765-4584-a3d1-623b557d6645",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f48d4e6-b4b1-426e-a2eb-b516a6afc09c"
                    }
                  }
                ]
              },
              {
                "id": "79b109f5-6699-47ae-b8ca-970ad0705767",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9eead7b8-0092-4dab-86b1-8b9c6249739e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782f8881-d96e-4835-86d5-0c491a9cfdad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "08bcb5af-6a61-4595-8fa7-8b79ea5b0e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929d627e-add6-423c-b968-6a96bc2c5dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccf40c87-0ef0-404a-a500-cd82aeb4bac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93e35db-c04b-4797-affc-0d52b357e781",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4b410f-b6c1-4c1d-bd88-3b81d5c20d84",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "accec2d0-6a0d-485f-9054-4059de5a11e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f450d63c-720e-4d8e-8277-a0d9c82eb1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "591ae219-581f-41c4-af02-92c49de81805"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98672e14-3418-4c43-a9aa-cd21b4d667d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c2a258b-7a71-4fbb-8b19-e02375e79585"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af64f36a-43a5-42df-b6b8-a70c26adfb9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c961a6b5-0653-41c8-946e-d13a748392b9"
                    }
                  }
                ]
              },
              {
                "id": "35026bb0-326c-4a39-aeee-79c35334f41d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3e100d15-0ecd-41a4-b46c-3627bb99b50d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110ebb52-e724-432f-9c58-9245d69de101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8289b77d-c3ec-4029-aa4e-006d2390518c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40d5ea7-e9e3-4163-b4ec-4451b5fc5026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f766b4-9441-45a6-af7f-9f1b6b4bc7be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f31de28b-b6e3-4b33-b509-2e59b7e92cb6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3df53f24-467a-4eee-bc1e-4a8499f2b5cb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5483ba0e-9587-49d1-84fe-26c5bb6df81c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1a75fae1-d3d5-45ae-9d56-596a99e329aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f409db2-2c2f-4083-8d70-52c522f386f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b52578b1-0bd1-48bb-8d8d-aa45410369cb"
                    }
                  }
                ]
              },
              {
                "id": "fd059a77-fb79-4ba7-b7c1-f72e614fe581",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3b91679-ad9e-46f9-8553-162f870dfffb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "62867683-ec33-4ffc-9f3a-3711614faa99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4a998c7-e714-4751-bd40-080091637504",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5800295-c35a-4a1f-98e4-5405891a028d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ed5be56-eebe-403c-acba-29151c9d8f06",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8b39c585-0c51-40a6-96ba-b56196f558b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e53f4c3d-62f3-488b-b2ac-13784525a7fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd8bbdca-3638-4fe6-9064-f20fa20ce580"
            }
          }
        ]
      },
      {
        "id": "05936c10-e665-4425-8c5f-74ba68e39573",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5f5ec5e4-03bc-400d-96d2-160dfd9dd145",
            "name": "Negative Testing",
            "item": [
              {
                "id": "036fcf37-3bb5-4582-973e-be38c6a68172",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6fa93a-70aa-4c76-9d3c-c2850fc5fd22",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1a6bfd1c-fbc7-4207-8594-2c9eacf85410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a482939-d6b4-4179-a1fa-778c99e72397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eb2eb04-c375-47ad-bc7a-dabbb7c16d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0e1bbc-876f-441d-b80a-d74bd2ae38bb",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7978e58-eb97-4721-ad45-36fae5b2966e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e1953d0f-61b2-43f4-8e38-3c3b36e6636b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d651d231-5738-487b-838a-66acc954fd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d226d7c-7e09-4783-bf5b-459a4f2caf0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d101544-1d64-413f-a53f-acddb6676b7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ed4e5e4-5332-4154-9d71-c880a3587e18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f8b253a-7a33-4304-b76a-02d0799c75f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30a56ed9-570d-4bb1-9416-7f91068f81d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c99d5a0a-5e35-42c6-b216-c30101deca4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "add0e60b-719a-471b-a3eb-589ef8892e19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fafa7959-23f2-4036-9762-1cb0e8416a87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc1fbeba-a748-4d01-90ed-e32d3a5a36a6"
            }
          }
        ]
      },
      {
        "id": "28855515-3850-44cf-b4be-15e799a9e477",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "74a0163b-71e2-46f2-b7a7-3baa9dd99ad5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74c0a5bc-2670-4829-9a7c-3c9be159f567",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3080b7bd-abca-412d-a6be-8e323505cd10",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeacd208-1103-4682-89ed-ba7e7f7c71dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "615dff1a-996e-41d4-8899-31af57f6f1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3395d68d-40c9-4dbc-871e-62094f0df002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3dbf2fe-7864-4a3f-bd1e-1425baabd078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458ee015-622d-456d-b913-2296d099e1ba",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da83462-b615-450f-8406-97d7bdcd071a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "59bfe95b-b73c-43b3-a0a3-29d08b930c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c5d0ad-7cea-4f4d-b650-599cf0a9b812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff840a3b-6e7f-4e32-93f5-a85ae7bd9c92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bb777f2-e1ae-4c98-b6f0-d0d45733a5b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c840d22-7c80-46fc-8852-7b3885ac66d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b0f90d8-95ac-4b27-a825-1a813ad41b22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ef38f35-f3e6-4015-a21c-c5fbf4859ace"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1f21336-80cb-4773-b514-b8c8aecee50a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27465f1d-109a-406d-b2fc-5c13f367aefc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebc1b0cf-e12a-49c0-875b-7689b09ad0ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58fad918-0253-4aaf-9e77-abf78cb3bc7a"
            }
          }
        ]
      },
      {
        "id": "b0ac6c10-07c1-416c-88f4-229f4378a8d8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "028522e6-ee5c-4447-939d-c2b39ebfe272",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f8aca62-12b3-4b3d-9c4e-b48773482809",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdabcbf5-89e3-40a3-8689-c4c98850c070",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a1cf80-3b6a-422c-b1d4-6ccf1eb07494",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f4e4b81-1549-487d-9520-86c9673e5b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4b7287-98b8-4cb0-96b1-c543edf0ae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "232938ff-4635-4e75-ab43-129b83322863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55579c2-ffb8-446b-b3ae-ec2d41ac601c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579fbbf5-2cc7-46f0-b015-a7389085b054",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "11ba1915-eb1b-4bc6-8768-6f4385cc4961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126a1bf3-d3f7-481f-980b-30c09e1f28ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd674f37-5d5d-4b8c-a7a5-5f5a257c88ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37d11d47-a64b-4262-af76-fb32e6926708",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18fee4fc-633e-4d86-9ad7-d2ffcb04af92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0fad489-8426-47b8-8e69-7f4ee9733ed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f04194b9-a42d-43cb-acfd-07c299417bec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43a7aa37-dfba-46ce-b8b0-01e2c5183f45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63cea82c-4ad3-4267-b91d-a172db336933"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc214323-e429-4f87-9cac-06067173daa8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b254b82c-92e0-4f3b-b8cd-e2d8db214707"
            }
          }
        ]
      },
      {
        "id": "57f5d8be-4ac6-4815-b51a-e3e54b133aed",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29e5b758-7647-462c-90bc-77ed40b31e68",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c81df719-d361-4642-94ef-b5e38b1e4de9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c292b338-616c-4081-a792-24794d5037a0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60d96162-b134-4088-a43a-e18defdd4ef4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db4a4acd-0f15-4f02-a886-865ed4df0a2d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 335.3576923076924,
      "responseMin": 8,
      "responseMax": 10465,
      "responseSd": 1053.7394432989158,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683074214881,
      "completed": 1683074314443
    },
    "executions": [
      {
        "id": "ab74c5cd-45eb-436b-a692-561aa7463551",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "eaf5cbeb-459d-403d-a421-7877c7df148a",
          "httpRequestId": "e1d9c747-5149-4838-b96e-6aa2ff5d5ee5"
        },
        "item": {
          "id": "ab74c5cd-45eb-436b-a692-561aa7463551",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0536fec2-f8f9-412c-ad6e-93ad57eca3ed",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 0
        }
      },
      {
        "id": "5dddd280-295c-4232-87ee-dcf021d171b7",
        "cursor": {
          "ref": "7bb177ea-db4f-4ee4-b2cd-2b41bb075f1c",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6a00a3e-6152-42f9-befb-2a90dd92d238"
        },
        "item": {
          "id": "5dddd280-295c-4232-87ee-dcf021d171b7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "29fce20c-af27-46e1-aa64-c20b1a05ffc1",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "02cb2974-1571-4e2a-9479-6ff9c17c4bd6",
        "cursor": {
          "ref": "b9ddf6d2-5a2b-4196-b5e1-92432d4188c5",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ec535a4-e3e4-4008-8717-3ce11bec346d"
        },
        "item": {
          "id": "02cb2974-1571-4e2a-9479-6ff9c17c4bd6",
          "name": "did_json"
        },
        "response": {
          "id": "ed3cbf1a-36fb-42ce-99bf-68908f0f3d5e",
          "status": "OK",
          "code": 200,
          "responseTime": 299,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e90ab4-ada0-43eb-98f8-179f6c319b03",
        "cursor": {
          "ref": "e6657e1f-a831-4f70-ac87-d53937f6844a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77563645-3d11-4470-b36e-464b0e195650"
        },
        "item": {
          "id": "e0e90ab4-ada0-43eb-98f8-179f6c319b03",
          "name": "did:invalid"
        },
        "response": {
          "id": "f722b24d-6e80-4532-af83-e8247fd5e94d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1106,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e0e90ab4-ada0-43eb-98f8-179f6c319b03",
        "cursor": {
          "ref": "e6657e1f-a831-4f70-ac87-d53937f6844a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "77563645-3d11-4470-b36e-464b0e195650"
        },
        "item": {
          "id": "e0e90ab4-ada0-43eb-98f8-179f6c319b03",
          "name": "did:invalid"
        },
        "response": {
          "id": "f722b24d-6e80-4532-af83-e8247fd5e94d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1106,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "43f97129-f163-417b-8a5e-6c325299e298",
        "cursor": {
          "ref": "f879b05a-dd1c-44fc-9fc4-fd3e41ca7390",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d3dc35af-aa3e-4a48-9d09-465aed19f1a0"
        },
        "item": {
          "id": "43f97129-f163-417b-8a5e-6c325299e298",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ae7a1533-0218-4158-b5dc-b1c09e32da52",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee947051-60ed-4092-95c0-ba300e034087",
        "cursor": {
          "ref": "49b8e665-24b7-4b7c-9ab9-cf87ca25d8cd",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "39bd98da-1687-4337-9f8f-0a9d2012a11c"
        },
        "item": {
          "id": "ee947051-60ed-4092-95c0-ba300e034087",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8689b381-5de5-4153-a844-050f31827bbc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409c6140-b4ff-4365-b988-b6b2b1dbac19",
        "cursor": {
          "ref": "ef4ce2e9-4c24-48ca-85ea-f450e370aaf3",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4ae9799f-e337-475b-b594-ef0427a25014"
        },
        "item": {
          "id": "409c6140-b4ff-4365-b988-b6b2b1dbac19",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e5e5c1e8-bb0b-4c2e-b4fa-c0bec30fb08b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d1841ca7-a489-4234-a44c-2d8e3c12f109",
        "cursor": {
          "ref": "6709c4ae-db47-4999-8678-4512118ae19b",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8c84387f-6105-409d-9ead-36a60d05d287"
        },
        "item": {
          "id": "d1841ca7-a489-4234-a44c-2d8e3c12f109",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "891ecf61-feb3-44d8-80e3-93982216d88e",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d1841ca7-a489-4234-a44c-2d8e3c12f109",
        "cursor": {
          "ref": "6709c4ae-db47-4999-8678-4512118ae19b",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8c84387f-6105-409d-9ead-36a60d05d287"
        },
        "item": {
          "id": "d1841ca7-a489-4234-a44c-2d8e3c12f109",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "891ecf61-feb3-44d8-80e3-93982216d88e",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "1f9d3404-2bff-454d-b616-0713b3eb2bbd",
        "cursor": {
          "ref": "9d03ab00-1730-42ba-b205-9e4b8ec36975",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "271a8f65-f519-4ad6-8da4-412e7998aa97"
        },
        "item": {
          "id": "1f9d3404-2bff-454d-b616-0713b3eb2bbd",
          "name": "identifiers"
        },
        "response": {
          "id": "50a0b228-90ac-46f0-b48f-4c0664c5d9e9",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7807d91b-cdf0-41fc-91c2-fb20852bbf44",
        "cursor": {
          "ref": "c9c9e66c-8209-40c5-b458-954faad21858",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ce87ff7-4c88-4be0-92fe-c1b56b432f2b"
        },
        "item": {
          "id": "7807d91b-cdf0-41fc-91c2-fb20852bbf44",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3049b6e8-5fa2-46d9-909e-18be4c0e698d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7807d91b-cdf0-41fc-91c2-fb20852bbf44",
        "cursor": {
          "ref": "c9c9e66c-8209-40c5-b458-954faad21858",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ce87ff7-4c88-4be0-92fe-c1b56b432f2b"
        },
        "item": {
          "id": "7807d91b-cdf0-41fc-91c2-fb20852bbf44",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3049b6e8-5fa2-46d9-909e-18be4c0e698d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a024118c-adf2-425d-bdce-06ccf4f48018",
        "cursor": {
          "ref": "44c2580e-d6ca-4a9b-9c1e-62faa95604b9",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ce521712-382e-48d3-b9d9-8536bea3b161"
        },
        "item": {
          "id": "a024118c-adf2-425d-bdce-06ccf4f48018",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c46f64da-5493-41d1-bf6a-f0f7e0e22e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "239cf38b-f5d5-4ab7-898f-b406e999f368",
        "cursor": {
          "ref": "dcea966e-9065-4ddd-9be0-60cae0270727",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c2523af0-22e2-48e1-9ade-f6e57204f92c"
        },
        "item": {
          "id": "239cf38b-f5d5-4ab7-898f-b406e999f368",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bdbb76c2-749b-4045-bd93-9d30c6c03f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac7776c-419b-46a2-abb5-9aea04ebb585",
        "cursor": {
          "ref": "728d8f2c-dd47-4caa-99ef-6a2fb92b7663",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b5804312-de37-4e80-835a-5af703491f1d"
        },
        "item": {
          "id": "2ac7776c-419b-46a2-abb5-9aea04ebb585",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6a983c5e-ea13-4f60-bc16-b75fa5775990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b98e91-572e-4b4c-9fb9-2e489c17d98b",
        "cursor": {
          "ref": "e0ff59b7-6907-4512-b7ab-26f108a7da2b",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e5357f43-8f7f-497c-92bf-772c7c6fa91e"
        },
        "item": {
          "id": "16b98e91-572e-4b4c-9fb9-2e489c17d98b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bc79c6ad-021e-4b36-946c-3630e7fe2c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623dfbc2-9af2-48e8-8a09-06403055ef98",
        "cursor": {
          "ref": "f364c977-95d3-4db8-8421-eea05bad697f",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a434552f-8890-4f21-8657-dda267e4ad0f"
        },
        "item": {
          "id": "623dfbc2-9af2-48e8-8a09-06403055ef98",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c492e0fb-e113-44dc-8f6b-9dd41f436458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6254ba6e-4552-4f51-9b5e-b14f3f5b8f44",
        "cursor": {
          "ref": "61b3bd09-bf03-4932-bc5e-974604792e51",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d3e85ca6-d940-4723-beba-03ed3f921836"
        },
        "item": {
          "id": "6254ba6e-4552-4f51-9b5e-b14f3f5b8f44",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e4ab784d-8de8-4f4e-855d-56d22022f630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191c4b57-33d2-46a0-9f41-c5abfc03bd3e",
        "cursor": {
          "ref": "912690b7-dc3b-46c1-a296-125843697064",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "108d0783-418f-4f55-a615-8b865af2b6c5"
        },
        "item": {
          "id": "191c4b57-33d2-46a0-9f41-c5abfc03bd3e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cbbb72ba-8d80-4675-a24b-7feffe6c895f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01364a11-4fd8-4038-b2b4-bc87933dc999",
        "cursor": {
          "ref": "945a4ff8-45e5-4e71-afe2-bf9cad307242",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d8e59ab-25c6-423f-a08a-c48d2bd415c3"
        },
        "item": {
          "id": "01364a11-4fd8-4038-b2b4-bc87933dc999",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "92b81b2c-a7a7-4969-b5a7-1b396e3005b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3d7455-e2a1-40bb-adbb-4c29668ad649",
        "cursor": {
          "ref": "28add92f-2479-446e-8cc6-5282e0067a71",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "226f8b00-2d0f-42bc-8f93-279df8e847a2"
        },
        "item": {
          "id": "1c3d7455-e2a1-40bb-adbb-4c29668ad649",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4739cd97-873b-489b-9f03-c68e4df7efed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd46b9d-13a4-4ea2-8fd0-f3b66f016bd6",
        "cursor": {
          "ref": "615f2b74-fe99-43ad-a928-d49d8766ab06",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "aa739aa8-e829-4235-a518-7cde33e957af"
        },
        "item": {
          "id": "1dd46b9d-13a4-4ea2-8fd0-f3b66f016bd6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7ee55750-2c5c-42fc-b162-95924f60bd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feca7fec-0b7b-4bdd-9fc1-f1390cb0189a",
        "cursor": {
          "ref": "175a4def-8e9c-4457-ac71-6365af449cc9",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2118148a-356c-4d97-a752-a652cdab20d3"
        },
        "item": {
          "id": "feca7fec-0b7b-4bdd-9fc1-f1390cb0189a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d0d5b41e-0115-49a7-8c94-0906b4efa810",
          "status": "Created",
          "code": 201,
          "responseTime": 1175,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "69a9c0e6-2f05-4a85-b888-e31a8d3f6ba9",
        "cursor": {
          "ref": "8cbf77d0-e0b8-4e02-88c7-3a86a74e9f37",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ea01d146-fb1f-44b1-a96d-0c6c551afea9"
        },
        "item": {
          "id": "69a9c0e6-2f05-4a85-b888-e31a8d3f6ba9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e0d467c9-fcf9-4dba-9bea-587fd706162c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8502017d-b117-478a-a935-7f80906b47c3",
        "cursor": {
          "ref": "d83b0e63-1c6c-439e-b930-7b222fa45625",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7f3c934c-53df-41ff-b01b-bcafaae1af05"
        },
        "item": {
          "id": "8502017d-b117-478a-a935-7f80906b47c3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ba634fe1-ac53-4a88-89dc-d189c15826ba",
          "status": "Created",
          "code": 201,
          "responseTime": 6182,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "17eafb9f-b92c-4520-87a2-be7784d7d2f6",
        "cursor": {
          "ref": "96d81d9f-e5dc-4f0c-a354-86c9dd17fc09",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "22e385ac-827c-4821-ad9f-5f2e9406bec4"
        },
        "item": {
          "id": "17eafb9f-b92c-4520-87a2-be7784d7d2f6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d2ca7eab-a109-4cd7-add6-5a4b811bcd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c604b9-3be0-4f1b-a505-19b325301ec7",
        "cursor": {
          "ref": "81bc2b14-fffd-4eb5-b8b3-aa5eab045025",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9a51d3a6-f83a-4077-ad49-6c8375c6da1c"
        },
        "item": {
          "id": "a8c604b9-3be0-4f1b-a505-19b325301ec7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "32791ef3-a881-4a75-ad22-171c6be6d40c",
          "status": "Created",
          "code": 201,
          "responseTime": 10465,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "27b654a9-7c62-4f82-9bd8-62f7a4762455",
        "cursor": {
          "ref": "282043d9-a645-4b6f-b7c0-bdfbf6aa686a",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "47d79db3-6c19-4604-8245-5efc148dbcac"
        },
        "item": {
          "id": "27b654a9-7c62-4f82-9bd8-62f7a4762455",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "90f5d858-c609-46db-b0ce-4c5a3823fe01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5d309b-11ba-4d6c-9bf5-4c734f8bac1e",
        "cursor": {
          "ref": "5f8c297b-4dd9-4fa1-9392-966245f59ba2",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c26ad0f3-9b17-4ee4-be9b-570b87140813"
        },
        "item": {
          "id": "4b5d309b-11ba-4d6c-9bf5-4c734f8bac1e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "df01afa6-c5be-4578-a167-e9d97a79e69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8149e2a-6f4e-4adf-b9f7-90c3b1b45acd",
        "cursor": {
          "ref": "7b9bc019-fd3d-48d8-8283-9f17750f31c7",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "53d85451-dbf4-4085-afe4-f8d4d302a33f"
        },
        "item": {
          "id": "f8149e2a-6f4e-4adf-b9f7-90c3b1b45acd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "13c9dbb4-a5ad-40be-a3c7-57e1cda239b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63798fd-58eb-4d96-9a24-63ac033033ae",
        "cursor": {
          "ref": "26aad167-4f70-4109-b9c4-43ddca46395f",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7a1fbac1-0e65-4153-a8b4-8bf9b31cc62f"
        },
        "item": {
          "id": "a63798fd-58eb-4d96-9a24-63ac033033ae",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d4439cea-7f34-4b58-87a9-51e03cfcf3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b043a1-30e4-43f5-9294-304a195f2fea",
        "cursor": {
          "ref": "46862bbf-d81c-4909-9096-16dc202ad242",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1c88ff8d-88c5-48bb-8fa5-663c26531d0d"
        },
        "item": {
          "id": "90b043a1-30e4-43f5-9294-304a195f2fea",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5c05d3e6-b755-4e87-b4c8-f96e6a412692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1231ea2-e11f-4d52-bfdd-6a8c05cd5e6d",
        "cursor": {
          "ref": "7e3483f2-9d95-4946-9565-64ba1a484ee1",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "70e05be7-9f69-4306-bfd3-6bf34cb4bce8"
        },
        "item": {
          "id": "d1231ea2-e11f-4d52-bfdd-6a8c05cd5e6d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b35f5a4c-b652-4475-83aa-bd9c7a2dc010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e11c922-5c88-49c1-8912-efce1a3a1166",
        "cursor": {
          "ref": "759ea34f-6d66-4f93-8c81-2dd40ea611c0",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0808494b-4339-4466-963d-b9f40f622482"
        },
        "item": {
          "id": "1e11c922-5c88-49c1-8912-efce1a3a1166",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0b958425-9302-4d1c-bd09-03ba686512a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ffea59-05d1-4ff6-9598-7daafe57be7d",
        "cursor": {
          "ref": "322e6fe1-a1f6-4f4f-a9ba-340f5aac9b4b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ac6820f3-a515-4600-b74b-51edd2098d58"
        },
        "item": {
          "id": "74ffea59-05d1-4ff6-9598-7daafe57be7d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "77def9f9-acc3-444d-ba54-5a494b7944d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2c8250-f1d8-4717-afed-fea3d72ea3a1",
        "cursor": {
          "ref": "00a8233f-d554-46fd-80c9-1621d1a2c853",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "47cc36e4-95ab-4f3f-9dcb-b3bc395702f5"
        },
        "item": {
          "id": "3b2c8250-f1d8-4717-afed-fea3d72ea3a1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5f093d97-25ae-4c2c-b2ea-fa0c36698c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5023bc6c-1d66-4c6f-a48b-0f30cbb9fed7",
        "cursor": {
          "ref": "339526f2-827e-47b7-88c2-3da8ba7a078a",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6f5660f4-bcfe-4d74-9018-90401bb936ab"
        },
        "item": {
          "id": "5023bc6c-1d66-4c6f-a48b-0f30cbb9fed7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b54acc1b-fa6e-4cb7-893b-f25216f704c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6178355-33de-4f25-a1ae-823aaae191ab",
        "cursor": {
          "ref": "47f5ae26-d840-4961-b506-4cdabd16d751",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "418f3948-2465-4d17-89f1-eaa389c6f374"
        },
        "item": {
          "id": "a6178355-33de-4f25-a1ae-823aaae191ab",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "84337799-4357-4354-9499-2ee04f8cade6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b324dc6-c297-4f82-b9b0-6e122f300d66",
        "cursor": {
          "ref": "e411789c-31da-4c7d-b5bc-5045dccc6d19",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "be10d329-62a5-44c0-b878-8bd19d9909c6"
        },
        "item": {
          "id": "2b324dc6-c297-4f82-b9b0-6e122f300d66",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a3c1ddc9-12f2-43e3-834a-83b4de8acfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc9f901-7c16-4e0a-9dda-9e847bbb6f17",
        "cursor": {
          "ref": "21efe13a-b777-41f9-a8b2-50e1006c27a0",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c42501c6-a3c2-483d-82b3-a37a156242cf"
        },
        "item": {
          "id": "0dc9f901-7c16-4e0a-9dda-9e847bbb6f17",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "66489abd-5220-4696-a5d3-44d6782961d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1bff0b-2ade-40a5-a237-1c6ecbeef354",
        "cursor": {
          "ref": "15ba0ef8-e0d7-4f2c-845b-7ed967cf7848",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7a5c5fa6-fb2a-476c-a302-a9b7859ad84f"
        },
        "item": {
          "id": "9d1bff0b-2ade-40a5-a237-1c6ecbeef354",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e4a92b9e-0ffe-4268-b395-e487350f332b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc51add-fc11-4b7c-a6e7-721c29fc3a3e",
        "cursor": {
          "ref": "fa2032b3-1ece-4153-b855-35f41dfdf9ea",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5817d438-e57a-43b9-bbb3-0437f3cc61d3"
        },
        "item": {
          "id": "bcc51add-fc11-4b7c-a6e7-721c29fc3a3e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f706db7b-6608-4708-b410-f014e23a9804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a27713c-d616-44a0-a632-79e8281e4150",
        "cursor": {
          "ref": "a5dd83b4-a034-48f6-bad9-da8086776559",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c4788abd-cae8-4e86-ba5a-ff8afa8de694"
        },
        "item": {
          "id": "0a27713c-d616-44a0-a632-79e8281e4150",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "26405088-88b7-4f52-b4fe-42b1d3a2f2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9819de-1e5c-4d9b-9512-b050e5f10358",
        "cursor": {
          "ref": "bddb6ca2-9735-4f43-91e8-0a4d699c18e1",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "93e332d6-7b33-41b4-a1c3-5053cbf561ab"
        },
        "item": {
          "id": "6f9819de-1e5c-4d9b-9512-b050e5f10358",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7f8e6aa3-ec62-4f44-95f5-9b75150e2724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df2e632-b718-48db-9f48-f2f05c6648a3",
        "cursor": {
          "ref": "81083eef-b0a5-431a-99ae-db4074e9d6aa",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bab4ef9a-f400-44c5-8811-4949e6a7f249"
        },
        "item": {
          "id": "0df2e632-b718-48db-9f48-f2f05c6648a3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "15ddb78e-88d2-49cb-b568-94fd6cc5db59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658b63e2-a727-4f29-97ee-d4549882caa2",
        "cursor": {
          "ref": "7f74f368-b142-46d9-b420-8c924b912e9b",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aead6383-89cb-426f-b9a6-94cb741a5a3b"
        },
        "item": {
          "id": "658b63e2-a727-4f29-97ee-d4549882caa2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0b671c39-4279-4557-9345-baf75e804341",
          "status": "Created",
          "code": 201,
          "responseTime": 7773,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "03a497e8-8fb4-4a81-bc44-412fc71fff19",
        "cursor": {
          "ref": "22c5cf41-10aa-4362-903b-ba20ebfba292",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eccddffe-0207-4103-93f8-4692f1f81947"
        },
        "item": {
          "id": "03a497e8-8fb4-4a81-bc44-412fc71fff19",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "962261e2-7359-49d7-b797-a0a37b99b0e6",
          "status": "Created",
          "code": 201,
          "responseTime": 2689,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a0080455-28d8-45f3-846d-c73c404a3352",
        "cursor": {
          "ref": "01d0ca8c-c4bb-4183-8970-d4e047860348",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5f527b17-3064-4910-8d48-4909f51ecd17"
        },
        "item": {
          "id": "a0080455-28d8-45f3-846d-c73c404a3352",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3091a8d1-12c3-4174-ad8a-bc6f63c808db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c767e4f7-8089-4541-a757-29b66b161b8d",
        "cursor": {
          "ref": "b2889b13-1f61-4620-b924-79caf0213a54",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "939d58e5-a87b-4473-9cbd-b68baabc3302"
        },
        "item": {
          "id": "c767e4f7-8089-4541-a757-29b66b161b8d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "587c7e2d-84d8-402f-8cd1-e11f63d72801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f6fbcc-f5ca-42f9-884f-468483333357",
        "cursor": {
          "ref": "fead13af-1383-4b6b-944f-3aa7cb34023d",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "99961547-d68a-454d-83b3-5a7e307582b6"
        },
        "item": {
          "id": "13f6fbcc-f5ca-42f9-884f-468483333357",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2867ba5d-0ef3-41fb-8439-a284effdb15e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f0d231-2863-4080-ab97-2990edaa0ee0",
        "cursor": {
          "ref": "669ffd98-4d93-42ba-8be8-598f032a24e3",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d48ddaa1-8032-4309-b93d-0bbfcb4974e5"
        },
        "item": {
          "id": "e4f0d231-2863-4080-ab97-2990edaa0ee0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "527fcbdf-52d7-4176-ae70-80ff76aed209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1261313-71ad-43c8-a494-e58932c2fabc",
        "cursor": {
          "ref": "adddff7a-a65c-4fbb-8a00-4a11cce4abe5",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0a6afc3d-b321-4f8a-9757-f40cb869f4c9"
        },
        "item": {
          "id": "a1261313-71ad-43c8-a494-e58932c2fabc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2fa5adc9-4556-4ccd-a849-b7717aa58ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57511dc0-a8dd-4fbb-8dad-9de69521cb8b",
        "cursor": {
          "ref": "2be300a5-7ee8-4817-bae7-1831d8e18b3a",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "16a335eb-b9cf-4461-8c3c-c9aea95061fc"
        },
        "item": {
          "id": "57511dc0-a8dd-4fbb-8dad-9de69521cb8b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8167ddd2-fcd6-4b1e-8145-fce310b5ae91",
          "status": "Created",
          "code": 201,
          "responseTime": 2611,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a1cd0f6b-c71f-4b81-8ba8-43a9c821c2d4",
        "cursor": {
          "ref": "d38a50d7-3567-4dcb-a3b4-76102ccc5076",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e91ff8c1-8fa6-43c1-891c-215fe285b871"
        },
        "item": {
          "id": "a1cd0f6b-c71f-4b81-8ba8-43a9c821c2d4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1dbdfed2-9509-42b5-992e-693828f6c9ef",
          "status": "Created",
          "code": 201,
          "responseTime": 4340,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "942ba8b6-18a8-4e9b-bcb3-c2f9071c98ea",
        "cursor": {
          "ref": "ed759496-494e-45d5-8e4f-b6b964ceb642",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "16ccb196-5c6f-4ab2-963d-c487bc115bc6"
        },
        "item": {
          "id": "942ba8b6-18a8-4e9b-bcb3-c2f9071c98ea",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "676979f0-084e-47e2-a1ee-e10b93101719",
          "status": "Created",
          "code": 201,
          "responseTime": 2137,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "59d7ee6c-bfc9-4131-9ac4-462a2521d0b6",
        "cursor": {
          "ref": "a266392f-2ace-42f8-8be9-6b1f09b527f7",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f8c04984-413b-452c-9a14-5ce9f510effa"
        },
        "item": {
          "id": "59d7ee6c-bfc9-4131-9ac4-462a2521d0b6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4e998b64-1e96-4952-b52d-132f212a0ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649fc61f-4d99-4b88-93ca-0453fc9e9bd7",
        "cursor": {
          "ref": "347ca4a4-ebb2-42a0-af13-7746bb3d2acd",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1083cec9-3c3e-4661-9c5c-a3a59a33af87"
        },
        "item": {
          "id": "649fc61f-4d99-4b88-93ca-0453fc9e9bd7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d40b4979-7de9-4916-b881-0035fbc3176e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3296b62-001e-467e-a975-ba118229ab7d",
        "cursor": {
          "ref": "a44414c6-aaa5-4825-ae5d-a1076717ab2b",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "de379251-a0fe-4157-8b46-2458cfb54cb2"
        },
        "item": {
          "id": "e3296b62-001e-467e-a975-ba118229ab7d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4ec3f598-de6e-4cae-886f-f2b1b9fec962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796edbb0-4aa0-436d-ae48-35b8da0524ad",
        "cursor": {
          "ref": "fba9e6d7-084c-4aeb-91a0-b4ba1aadeab9",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ac2557a6-59fd-4988-b434-c93e2e01d3ae"
        },
        "item": {
          "id": "796edbb0-4aa0-436d-ae48-35b8da0524ad",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2110d158-c840-4bfe-b6f6-0012ef166c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4dd0956-de4f-4501-82eb-c1d102be4782",
        "cursor": {
          "ref": "70bc457f-d7db-418e-8037-3f69e1c59dd0",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d403b814-cdcf-4b74-9cc8-1c5fba07499e"
        },
        "item": {
          "id": "b4dd0956-de4f-4501-82eb-c1d102be4782",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5d129ce0-6111-4d4e-983a-e481dd5e1636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc7065d-6ff9-4a66-b0de-431a559ab9dc",
        "cursor": {
          "ref": "513b06fd-2d91-4310-8c00-6853ef6e816f",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d40ee7ba-0f28-4d06-94b0-37be4a077ce7"
        },
        "item": {
          "id": "6dc7065d-6ff9-4a66-b0de-431a559ab9dc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "33da5d94-026f-4a99-abd6-151db57334ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d885f1c8-303f-4b47-9f31-2b3d09f9f3c6",
        "cursor": {
          "ref": "b81a4113-554b-41ee-8039-1cf19e990f39",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dbfaf1c7-af1e-408d-a714-da13a0c7f28a"
        },
        "item": {
          "id": "d885f1c8-303f-4b47-9f31-2b3d09f9f3c6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8b039276-3ed9-408d-b8a1-cc8153d29a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752e8084-89f3-4268-9c98-24ca2ad31961",
        "cursor": {
          "ref": "10d08251-71d7-4379-8c89-330951e109dd",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7700bb1d-2ec3-4f1d-b8ff-510ec2ab5e5b"
        },
        "item": {
          "id": "752e8084-89f3-4268-9c98-24ca2ad31961",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "22b12507-315b-4757-bdbe-50de4fd701ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5d62fd-eeee-4491-b318-09bf18866dde",
        "cursor": {
          "ref": "3c5509cc-94ac-48a1-b602-5db2d6d8c45a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b6122598-4452-423b-ab73-b7fa9dcfeebd"
        },
        "item": {
          "id": "8d5d62fd-eeee-4491-b318-09bf18866dde",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d1b07bbe-ae2a-4147-b08f-82a07fc0c948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a6f69f-b045-4639-97f5-68b033d5ddbe",
        "cursor": {
          "ref": "04248fb9-68dd-4a9f-a001-dafec4a112e8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3e0a7b79-b12b-4840-a0cb-35e78650fc6b"
        },
        "item": {
          "id": "56a6f69f-b045-4639-97f5-68b033d5ddbe",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "29de2eeb-b5dd-479a-897c-b318f73bc257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c3ae42-774a-4ba7-91fb-b438f291fe55",
        "cursor": {
          "ref": "29bfa48d-4a03-4bf4-88d2-d6ef7ab3490d",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f66cca71-c508-47b4-943c-a65dab6ea909"
        },
        "item": {
          "id": "f2c3ae42-774a-4ba7-91fb-b438f291fe55",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "70b84078-3ef2-42ce-8584-cc950662248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aeca61d-13a6-48d9-90c7-dd0f9f902a17",
        "cursor": {
          "ref": "ab574ecc-e748-4756-afd9-5ef2ca32b1ed",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7f2e1a9d-d172-406f-914f-9e7c2dc57d32"
        },
        "item": {
          "id": "4aeca61d-13a6-48d9-90c7-dd0f9f902a17",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5c6b56c2-64a8-4088-a5c1-f058ae455c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1c3407-3213-4398-aee3-22d1d6ebda8a",
        "cursor": {
          "ref": "868ef3f6-51f0-4a29-a1a7-4647362cdadc",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "96634fa1-bb04-4202-964b-b8ba735cc1d2"
        },
        "item": {
          "id": "1c1c3407-3213-4398-aee3-22d1d6ebda8a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a76b0681-dcf5-42b4-a29d-81d7df145743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bdd10c-2464-4d64-a064-b4d0769ddb0c",
        "cursor": {
          "ref": "550c0644-28dd-4bec-b60a-82fa3822600a",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e8548630-e24f-4c43-94fb-8d373c20c1d7"
        },
        "item": {
          "id": "91bdd10c-2464-4d64-a064-b4d0769ddb0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "85e9ae08-e00a-4bd7-bd92-3680ec1a8a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d436417-614c-4e71-9510-2c45fa190ad7",
        "cursor": {
          "ref": "0e9166c6-de4a-47c9-a209-ab84e3677b77",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c1f45d8d-1dab-4509-8497-fe68d74697a6"
        },
        "item": {
          "id": "1d436417-614c-4e71-9510-2c45fa190ad7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "457d77af-77be-4dd3-b1cf-c2bd50148fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d82fe6f-70ca-4791-a77c-3c44991348fc",
        "cursor": {
          "ref": "cffdb514-0637-481f-a60a-463ae0ffc370",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5dae8f0a-1e69-4c57-9dfa-bcb0c93241b3"
        },
        "item": {
          "id": "4d82fe6f-70ca-4791-a77c-3c44991348fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e982f34d-bc9d-4221-8a6d-bb8608accaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f7ab47-28db-4f54-a9f9-37809fcc9e25",
        "cursor": {
          "ref": "8f60c2a1-b1ed-40c8-aedd-d80e2cb8149b",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b3646e53-2902-486b-bd33-f21bf3877941"
        },
        "item": {
          "id": "00f7ab47-28db-4f54-a9f9-37809fcc9e25",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7771327f-485d-4884-8b40-9aca50731fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82061c2d-136f-42dc-a0fd-232a13379cc8",
        "cursor": {
          "ref": "eae714e4-cd32-4de5-b061-7fbd34ab06c0",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d53480fc-4160-4ae2-8c75-e810df39b70e"
        },
        "item": {
          "id": "82061c2d-136f-42dc-a0fd-232a13379cc8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d30bc074-52df-4a64-87d8-c0dc03486ae9",
          "status": "Created",
          "code": 201,
          "responseTime": 2095,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "d6657408-5165-4ce0-8e5a-6b681127d8bb",
        "cursor": {
          "ref": "0b20ce09-a3db-40cc-a83a-990df0afa15a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "334ead1f-e846-455c-8ff6-281eff264128"
        },
        "item": {
          "id": "d6657408-5165-4ce0-8e5a-6b681127d8bb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7bd3fe18-f1c3-4c3b-bf89-7f614c640193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9a0eac-d079-4620-9806-9efc8b87a189",
        "cursor": {
          "ref": "dd335f91-3bf2-40ea-ac41-75a593fe5e15",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ee8865b4-434e-4e46-9647-7e5ffa206654"
        },
        "item": {
          "id": "dd9a0eac-d079-4620-9806-9efc8b87a189",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1947490f-7fdf-4e0f-8da7-adf06bbebcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1a4210-9000-47cf-a30c-4dd98775052c",
        "cursor": {
          "ref": "3b279415-f469-4bdf-b20c-d59f862020f6",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1d1df6de-875b-44c2-95d2-9d1d62844c04"
        },
        "item": {
          "id": "6f1a4210-9000-47cf-a30c-4dd98775052c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3e8c3862-8d0f-4ed4-aa05-5230c835cb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e4d5cc-3afe-4eca-88dc-de6209fa9293",
        "cursor": {
          "ref": "0b666800-a6b9-4663-89ff-fe9de6993a72",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "afab11db-4e6f-4a84-8522-3053e8a4aee2"
        },
        "item": {
          "id": "c2e4d5cc-3afe-4eca-88dc-de6209fa9293",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0b74ca17-1623-4e6f-a78f-ca0a1162d687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585ba815-80f5-430b-94b7-3f6cdb4021df",
        "cursor": {
          "ref": "cf473e8a-1bc9-43c2-ad25-014e8bead8eb",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9e3f7ec2-c2e5-4dad-93b5-5f9a8a9d73c4"
        },
        "item": {
          "id": "585ba815-80f5-430b-94b7-3f6cdb4021df",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eed06d41-2af9-4cb5-9943-ffa29951cdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb35d942-2544-44ea-9c5a-1baa3faf3144",
        "cursor": {
          "ref": "a3ccda22-1c94-40f9-ba73-d5bef64f370a",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e7e829b0-9705-42c8-a545-f402bd8a7a0a"
        },
        "item": {
          "id": "eb35d942-2544-44ea-9c5a-1baa3faf3144",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f8b6ecd2-32e4-4ed5-93e0-73c6cdd2a2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407bdb13-6c6b-4cdf-9721-e691d470ca02",
        "cursor": {
          "ref": "376896af-e874-4fae-aca4-6ca4884846e3",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d704c0c2-e365-402e-8821-f2b4938a4338"
        },
        "item": {
          "id": "407bdb13-6c6b-4cdf-9721-e691d470ca02",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "df768fb3-429f-4c7d-9ba8-9aa6da9c41dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254518dd-f483-4d55-a641-48d0f6b0bc2c",
        "cursor": {
          "ref": "2197b52d-1569-4f82-b200-f66498d1c32a",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8209ea64-1383-45cf-a703-14f1d98eef26"
        },
        "item": {
          "id": "254518dd-f483-4d55-a641-48d0f6b0bc2c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8f424254-7d7b-4ce6-989e-f2bb55de507d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc97906a-5e57-4a3c-a3ed-92340c82bc5e",
        "cursor": {
          "ref": "bdcc0218-32ce-43c4-9b77-0cef5ebe7d12",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d81c0888-8877-478e-8503-5e03e591ebb9"
        },
        "item": {
          "id": "bc97906a-5e57-4a3c-a3ed-92340c82bc5e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "81021293-bac2-4f60-8907-8e6bd6bd7df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cf2798-b81f-49af-b3f9-1f0cce3b3fac",
        "cursor": {
          "ref": "bd8c037f-9848-4af7-b234-920639339c79",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5c69f160-0cbb-40ab-8f8b-c186b6b6c892"
        },
        "item": {
          "id": "61cf2798-b81f-49af-b3f9-1f0cce3b3fac",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c118c346-9d91-4b32-9c91-396b7b4b0f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d537ae-47a8-4c67-a4a8-ae1335da8676",
        "cursor": {
          "ref": "83feb272-98e0-4333-903a-b5ed85b8e61f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0cd24e3f-8cc2-4d4e-8460-9c1bc4f63912"
        },
        "item": {
          "id": "10d537ae-47a8-4c67-a4a8-ae1335da8676",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "eb1fa0c4-df38-473b-9d27-8b8b9563137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd01a209-9c88-4df3-8902-f4ae37c0d5aa",
        "cursor": {
          "ref": "410f2208-ac9b-4cce-8a60-52622ad64395",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2b25e021-9594-4039-b704-548aa891102d"
        },
        "item": {
          "id": "cd01a209-9c88-4df3-8902-f4ae37c0d5aa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1c6a0c0d-4b5d-4681-8a0f-a5febee94b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5497bf7-987b-41a7-8af0-917d986e8908",
        "cursor": {
          "ref": "5855b436-8b9b-4813-bceb-93a27e6a3d6d",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "54139079-741f-4a92-acf7-88c158ffaf81"
        },
        "item": {
          "id": "e5497bf7-987b-41a7-8af0-917d986e8908",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c83e9e6a-78bb-4abd-904c-ac2766a97e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241f7969-dc0e-4399-abc5-877cc00b6889",
        "cursor": {
          "ref": "0d726873-606c-435c-b334-ad1ba4edf1f8",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3f128b71-8934-4a3c-92d4-ef6f36fe2071"
        },
        "item": {
          "id": "241f7969-dc0e-4399-abc5-877cc00b6889",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a4668a14-8b68-4de8-ba87-d8e2944143f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b166434d-0b9e-41a5-9917-b13434c07883",
        "cursor": {
          "ref": "f55a2e46-8c4d-4295-b78a-da7f26efe796",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "515c0b10-c19a-4c77-ba51-eabc3774cf7b"
        },
        "item": {
          "id": "b166434d-0b9e-41a5-9917-b13434c07883",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c86988ef-cecd-427d-8a79-582c3b3f1aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785949c2-97e8-4216-afa1-cbf263f44d38",
        "cursor": {
          "ref": "4320ef41-ffd4-4a69-a7f7-de6d6308c38f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5d701e58-6e45-4b10-81f1-0509092bc298"
        },
        "item": {
          "id": "785949c2-97e8-4216-afa1-cbf263f44d38",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3b64fd68-be43-47de-8b2b-2180ef6fa678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e601dd62-38ff-4896-9b87-052fea87fff7",
        "cursor": {
          "ref": "1ce00655-67b7-409f-9a82-fa5d9808a9f5",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c2c87d3a-ae19-498a-8024-947737fc1824"
        },
        "item": {
          "id": "e601dd62-38ff-4896-9b87-052fea87fff7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ed99545a-d21d-4cb4-bda2-0f7d30b54eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1ec980-22f6-4c58-bf4a-8c7a3e074244",
        "cursor": {
          "ref": "c09e3d82-45ca-4fa1-8e85-b1e77b4c1ba8",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "09a731ef-b202-4056-a797-e083b09d624d"
        },
        "item": {
          "id": "be1ec980-22f6-4c58-bf4a-8c7a3e074244",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "09ff026c-3459-4344-96c5-bdbc325aa950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4e981a-ed83-4ee4-bb4a-1574c33be6d5",
        "cursor": {
          "ref": "ca939d82-1a5a-4daa-ba6e-fc4a83c9ecf9",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9781a477-9bba-4880-a0db-d5016ef9d0b3"
        },
        "item": {
          "id": "2f4e981a-ed83-4ee4-bb4a-1574c33be6d5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cb7ecd8e-0fda-4859-a9b5-dfab7accf590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e34307-45db-42e8-82e0-29dd1495a43e",
        "cursor": {
          "ref": "051ca765-4167-45dd-9582-4fb1c365bed2",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b4faa16d-9922-45f6-9a52-41b7901dde25"
        },
        "item": {
          "id": "69e34307-45db-42e8-82e0-29dd1495a43e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f2f59a66-90e8-4cd0-aa3a-befb04fd07f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36914cb-3ee9-4d01-bcb0-fd26dda67de5",
        "cursor": {
          "ref": "17404bef-b6f0-44e9-9d8d-3800971d96f5",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0aff8487-47f2-43f6-ba70-0518fa96a3cb"
        },
        "item": {
          "id": "f36914cb-3ee9-4d01-bcb0-fd26dda67de5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dc7640e6-7f91-4f70-b078-73b30994d75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a3ce3b-4fcd-4f8e-8346-9915bc7d1ace",
        "cursor": {
          "ref": "858bdd6a-502d-4235-88d8-a22046b4fd7d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "378e0444-5358-442c-8260-6ad7c8bf41d9"
        },
        "item": {
          "id": "43a3ce3b-4fcd-4f8e-8346-9915bc7d1ace",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "075b643a-20b6-44f6-acca-fa779161a875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde959fa-eca9-44b5-a1e2-c023ac356994",
        "cursor": {
          "ref": "d5af192a-7adb-4b93-808b-c327e2660ee1",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "716583cc-4825-48f1-b748-feaa170c62f2"
        },
        "item": {
          "id": "cde959fa-eca9-44b5-a1e2-c023ac356994",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6db624c2-b1b6-4218-a728-66dda98cc1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48745ddd-e0b3-408b-8360-acb67eec58be",
        "cursor": {
          "ref": "8f25638d-cb14-43a7-971f-1cbea0772cab",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "afb8901d-85ff-435f-a294-e42b0e9f01f3"
        },
        "item": {
          "id": "48745ddd-e0b3-408b-8360-acb67eec58be",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2ff347b9-5e18-4648-8cce-5065936501de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24265252-fb53-4b31-845c-24205b5326a3",
        "cursor": {
          "ref": "5c84e991-4079-474c-b458-513314399e3c",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b2650480-174e-48ef-b89a-7d5e10a77f98"
        },
        "item": {
          "id": "24265252-fb53-4b31-845c-24205b5326a3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "92cbbf62-d0f0-46cf-8c2a-3152628f2678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e257b69-592b-4a79-8960-a067a75806df",
        "cursor": {
          "ref": "f9acdab3-520a-40ab-88fd-b8c36dd70110",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8b5be122-406c-4fd3-a94b-99d020daadd8"
        },
        "item": {
          "id": "4e257b69-592b-4a79-8960-a067a75806df",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "412c8337-1aa0-47c9-8ce6-09353ca484f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64103566-f4f5-4d1d-bb4b-c3a5e7a92317",
        "cursor": {
          "ref": "1f0fe78f-2240-49a8-8651-34e97d51d8a0",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f4a0fc71-e4d9-4a24-ae59-6917741178cf"
        },
        "item": {
          "id": "64103566-f4f5-4d1d-bb4b-c3a5e7a92317",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "084a5c02-d5fa-4e75-9239-82c4c90ad3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd40b49c-6ff7-4db2-beee-56053cf33b36",
        "cursor": {
          "ref": "3887b9f8-cc8a-4f0d-b0ac-d0acd879d27e",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3797d26b-c2d6-4586-a892-5c8568ce6cf9"
        },
        "item": {
          "id": "fd40b49c-6ff7-4db2-beee-56053cf33b36",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "12445953-1888-4095-9fde-e737410096e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b8e2ce-f440-4f4f-a422-d717a8cc4106",
        "cursor": {
          "ref": "f7cd66c6-f328-495d-9bb9-9ae53205125d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "adef8ac6-7868-4e16-9100-c283bd10a1ad"
        },
        "item": {
          "id": "67b8e2ce-f440-4f4f-a422-d717a8cc4106",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e8db6939-34be-4bb6-a246-61934075c858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e8a2da-f074-42a3-a94c-1a7646f7faab",
        "cursor": {
          "ref": "f77c4935-4e44-4fdb-87aa-12151bd892e3",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "47794e7b-3f12-477e-acbb-81b6e201d4bc"
        },
        "item": {
          "id": "00e8a2da-f074-42a3-a94c-1a7646f7faab",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1d5af36c-ac5c-43e9-b266-d52de3f0ebc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffbed6c-f1a7-4bd6-8b5f-08ab13de481e",
        "cursor": {
          "ref": "9540c742-772b-43a9-8fc2-e66a52d57c7b",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "24b56426-d119-44dd-ab84-0e0e22154da0"
        },
        "item": {
          "id": "6ffbed6c-f1a7-4bd6-8b5f-08ab13de481e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0200caa8-bd33-4f11-bc0e-47a9b3aca028",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "af3da92c-496e-42d2-ab4c-77b470d5de0c",
        "cursor": {
          "ref": "7e67f60c-15bf-4ccc-b4f4-8d33402515aa",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6f419034-dda6-43d0-b06d-0e790f57315c"
        },
        "item": {
          "id": "af3da92c-496e-42d2-ab4c-77b470d5de0c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "22d7ca62-9f3b-43f9-b486-b1169d8be99e",
          "status": "Created",
          "code": 201,
          "responseTime": 1937,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "66bb915f-3ac7-4c37-b63e-95972a2f08f3",
        "cursor": {
          "ref": "b588cf72-3d44-46fd-bf66-e16b4bed150f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5656ec27-a9c5-4a05-b40b-aec11721920f"
        },
        "item": {
          "id": "66bb915f-3ac7-4c37-b63e-95972a2f08f3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f3396b3d-2737-4736-a12c-ac315210985e",
          "status": "Created",
          "code": 201,
          "responseTime": 2956,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "772f1779-a13d-46b5-9021-65943a011f68",
        "cursor": {
          "ref": "317bc625-05f7-4f5c-916b-4331a70876b4",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4a4668ca-d146-4070-a5e2-726bb75d88f6"
        },
        "item": {
          "id": "772f1779-a13d-46b5-9021-65943a011f68",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "491751fe-d191-4524-9b1e-fc4d84fcb214",
          "status": "Created",
          "code": 201,
          "responseTime": 2074,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "596951e8-9489-4fc0-b0ec-7be526f61b2f",
        "cursor": {
          "ref": "b0da5aa1-a7f6-4c6c-8d54-889bbc122e6a",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "db463862-c629-47e6-966a-df7fefde443f"
        },
        "item": {
          "id": "596951e8-9489-4fc0-b0ec-7be526f61b2f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5ccbfc5f-a56f-4525-84e2-75f9b495faea",
          "status": "Created",
          "code": 201,
          "responseTime": 2554,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bb0250-937d-454c-a6c3-c4e3613c4911",
        "cursor": {
          "ref": "46184140-6e05-4914-94dd-5f4a4e9914f8",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "11db7178-b916-476c-a525-d5229581f81f"
        },
        "item": {
          "id": "82bb0250-937d-454c-a6c3-c4e3613c4911",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2e15b069-c8e2-4147-a682-ab808678d8cd",
          "status": "Created",
          "code": 201,
          "responseTime": 2390,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21be342-11cd-42a8-a83b-960e82f1fd87",
        "cursor": {
          "ref": "b7fe4bb8-ad16-4358-a1f4-e6c1e0fb8157",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a20d74ce-1587-4f35-ac4a-db7f1e3ea59e"
        },
        "item": {
          "id": "b21be342-11cd-42a8-a83b-960e82f1fd87",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "16a70635-75b3-4cae-880d-b7934cd933f0",
          "status": "Created",
          "code": 201,
          "responseTime": 2962,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-03T00:38:03Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-03T00:38:03Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "158dd029-97b8-47fb-b52d-715a2399bdc8",
        "cursor": {
          "ref": "8e12ebca-21a6-4945-8b83-91ed1150512f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "97076162-332c-4d5b-ab20-d2d69fc16556"
        },
        "item": {
          "id": "158dd029-97b8-47fb-b52d-715a2399bdc8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "12a4dfb5-9f1c-4061-895b-1eba23bb77d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2436,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81729ce-4ef1-4205-a75a-65f400f8b554",
        "cursor": {
          "ref": "5b24640f-7aa8-4375-aeb7-c815963d7c14",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a29731b3-32a3-4214-96dd-0ae1cf4d43f0"
        },
        "item": {
          "id": "a81729ce-4ef1-4205-a75a-65f400f8b554",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c84a979a-f4cf-43af-9bf9-cc1a20183a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81729ce-4ef1-4205-a75a-65f400f8b554",
        "cursor": {
          "ref": "5b24640f-7aa8-4375-aeb7-c815963d7c14",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a29731b3-32a3-4214-96dd-0ae1cf4d43f0"
        },
        "item": {
          "id": "a81729ce-4ef1-4205-a75a-65f400f8b554",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c84a979a-f4cf-43af-9bf9-cc1a20183a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c828f97a-be9c-4c34-8356-11a6d389144e",
        "cursor": {
          "ref": "12260723-422e-4473-9073-5d449b845756",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b538ebb1-0bd1-4c8c-a89c-42c3733df8da"
        },
        "item": {
          "id": "c828f97a-be9c-4c34-8356-11a6d389144e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7c249e19-1a64-4a09-a810-d6306d58ef3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e5b0c2-e0b5-4694-8c30-7736f317191d",
        "cursor": {
          "ref": "7e7215c0-9bf2-4c0c-8e66-3ef0e0ae4fa5",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c3c5e085-4cb6-4a55-915c-beb0ac2ac3e3"
        },
        "item": {
          "id": "33e5b0c2-e0b5-4694-8c30-7736f317191d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2a932f66-b0cd-4b1b-b68a-6d73483be9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17a3f6b-1451-442b-9deb-6da2ed2cff8f",
        "cursor": {
          "ref": "99f83d95-901d-42c2-9e44-af6134ba920d",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bd6ee9da-1108-4e94-a207-183c434b0f17"
        },
        "item": {
          "id": "e17a3f6b-1451-442b-9deb-6da2ed2cff8f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "68a9f969-e191-4bc3-b826-602cd431a23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff925cd0-6efc-4b51-a503-6f2101a7d7be",
        "cursor": {
          "ref": "8811947b-41f5-4ec2-b296-bb1b4f04941b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "780b27c6-cc18-4366-8c25-b0fb80875d5e"
        },
        "item": {
          "id": "ff925cd0-6efc-4b51-a503-6f2101a7d7be",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0c63cef3-4d48-4267-8696-f8e70cd1b04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eede7e-6f22-4465-a7cf-388ad6be988b",
        "cursor": {
          "ref": "b9da76eb-291f-42cd-8891-28ab56b5d0e0",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "da08ad6a-402c-477b-87df-de60456dec8b"
        },
        "item": {
          "id": "00eede7e-6f22-4465-a7cf-388ad6be988b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7b1d99b0-01eb-4d32-940e-494dd5526598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45477640-dc04-4a8c-91df-7f9ddd4eb851",
        "cursor": {
          "ref": "f4b5bb3a-a5f5-421b-a67f-30f47d7940d5",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bca84c4d-bd6a-4a9f-a284-2245e3fba958"
        },
        "item": {
          "id": "45477640-dc04-4a8c-91df-7f9ddd4eb851",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a808497a-fcd7-4719-943c-b8461dc97cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60a52bf-56c1-438b-a45d-17b176f35abe",
        "cursor": {
          "ref": "570f36aa-a42c-408d-8687-55f5a90bff16",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e001c8f8-724c-44d1-aaae-d8c438dc8090"
        },
        "item": {
          "id": "f60a52bf-56c1-438b-a45d-17b176f35abe",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "db82d42d-ca38-4dd6-89ca-30c41b985aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac683905-6cc5-4b3b-a495-8ca31b693155",
        "cursor": {
          "ref": "d7591e0e-f84c-430f-8853-7fd86b1c5c8a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "39d0eb85-6574-46c1-8292-9fc89bd343e1"
        },
        "item": {
          "id": "ac683905-6cc5-4b3b-a495-8ca31b693155",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8c6fcb51-4f47-4de1-8ffa-854ef2f1712e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7d3393-d254-43a3-977a-1a27b0a41924",
        "cursor": {
          "ref": "f6e0d0e9-9ff9-4556-8028-527594277ab6",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6adc4882-30e0-414b-ac06-bda95737bb8d"
        },
        "item": {
          "id": "ff7d3393-d254-43a3-977a-1a27b0a41924",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "01b6c407-ca83-4b65-ad97-da63afa5bb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9051c5c-f03a-49f3-b0cb-1e9f5215db79",
        "cursor": {
          "ref": "6b4fb069-ae48-4832-b2fe-6360875639af",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8f452556-cfde-4ede-b001-73793dae9c32"
        },
        "item": {
          "id": "a9051c5c-f03a-49f3-b0cb-1e9f5215db79",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4ddd08e8-0c8e-46e4-85ec-cf92b14ebe16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38398b5-256f-4158-814b-7c62cca52130",
        "cursor": {
          "ref": "290bb65d-ca1d-4d37-8329-0c7ec166d05e",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d8396379-469d-4886-9b67-33c4aeb45475"
        },
        "item": {
          "id": "a38398b5-256f-4158-814b-7c62cca52130",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "77c54187-b917-4694-af1c-b07a7422eda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6107250b-b112-48f4-abfa-29ce757c6553",
        "cursor": {
          "ref": "955767be-af7a-4bab-a4ad-878db9f8cb81",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "def79e67-b6bd-4d01-97b2-1eaf3da3ea52"
        },
        "item": {
          "id": "6107250b-b112-48f4-abfa-29ce757c6553",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "77c9345b-003d-429b-91a7-006af285666e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a485db3-4f75-43b0-8115-def78e1ae3fa",
        "cursor": {
          "ref": "6d0e96b6-4ae0-441a-8fb7-a5b262557b0a",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "beab34b1-b70b-4cb6-821b-c04f8629865b"
        },
        "item": {
          "id": "5a485db3-4f75-43b0-8115-def78e1ae3fa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bdfdb1c6-4444-4ece-b91d-e5731bfbfac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43489da-c98c-4c6d-ad57-6764f1653146",
        "cursor": {
          "ref": "24cd2d29-ebf7-4e5b-bcf8-5d063d2425db",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e25da46a-1071-4337-a7aa-9acfab0d11b0"
        },
        "item": {
          "id": "d43489da-c98c-4c6d-ad57-6764f1653146",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2a91acf2-8503-4705-a007-26898f651e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a60d678-64b5-4581-8c4f-adf21420eefd",
        "cursor": {
          "ref": "0b67d056-130f-47b8-ac20-dc17546db3f6",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1ffe7dfc-8958-4719-a71b-e82cfa43474c"
        },
        "item": {
          "id": "4a60d678-64b5-4581-8c4f-adf21420eefd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fdeb1a0d-2732-4aad-9411-9515471f184b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a632a1f9-4d6c-4a6a-82c1-00ec41dcccc7",
        "cursor": {
          "ref": "4f31b3a4-f944-4c80-ad55-d249e4264ee2",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5775a351-dc9a-4f6e-a9f1-55adfee771cb"
        },
        "item": {
          "id": "a632a1f9-4d6c-4a6a-82c1-00ec41dcccc7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "15987a96-7904-4834-8639-938931406cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cb0265-3313-4b24-b8b2-6b8c6b637728",
        "cursor": {
          "ref": "416cfe3c-ffc6-42f4-b9a1-de0b64b1d2ad",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c76b04e9-42e0-4c1e-92ec-898059f8618c"
        },
        "item": {
          "id": "31cb0265-3313-4b24-b8b2-6b8c6b637728",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2ab4c7c0-edde-483b-990c-26f6177a3b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24c75b4-6d9a-4fae-89bc-a06580130ee5",
        "cursor": {
          "ref": "1f66a669-d2b7-4688-bd2a-afaf112c683c",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b0843531-cc1e-4965-bd43-831ff40b932f"
        },
        "item": {
          "id": "d24c75b4-6d9a-4fae-89bc-a06580130ee5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6ebd8a3a-2388-42b1-9454-bd21bf6e9389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9898138-75bd-47a6-ae99-6bce19ee61af",
        "cursor": {
          "ref": "1a0972e3-675b-4965-93a7-84ff484732ac",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1ad0521b-e0d9-4d6a-b7ac-4b3e66281707"
        },
        "item": {
          "id": "b9898138-75bd-47a6-ae99-6bce19ee61af",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7ef39247-96cf-4425-88be-927742ba73b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1988514-6217-4ce8-9f6d-af35f9775cba",
        "cursor": {
          "ref": "04e767dd-7ee4-46ee-af91-8389d26de542",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "abacb358-145b-4a04-b03e-d91ffffeee71"
        },
        "item": {
          "id": "a1988514-6217-4ce8-9f6d-af35f9775cba",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c8d36a4e-832a-4b96-8a96-657baea9627b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb30f891-8657-4a92-877c-899376d35d7c",
        "cursor": {
          "ref": "ed6884fa-9225-4b70-8946-82f888c50b91",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ed26c790-0237-44fb-b739-9d3da3daebb5"
        },
        "item": {
          "id": "cb30f891-8657-4a92-877c-899376d35d7c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3020b820-0f39-48ce-8392-33df8d58e312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a194a15b-f747-4d61-8984-a0e9cb50ad22",
        "cursor": {
          "ref": "7e79c30a-6d3d-400b-b8c8-da7201f29c40",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "93960b11-e36e-41ef-9aa5-e5f6a0c1886a"
        },
        "item": {
          "id": "a194a15b-f747-4d61-8984-a0e9cb50ad22",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c8e12f66-705e-4b07-82e0-140c7f1927bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e30ec03-19fe-44ff-afd9-dfa2d2323603",
        "cursor": {
          "ref": "95106e67-f0ea-4ab1-80ee-bcf2a93a4bdb",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a65ea24f-bccd-4002-b94b-60163aa03d08"
        },
        "item": {
          "id": "2e30ec03-19fe-44ff-afd9-dfa2d2323603",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "57f0fe43-e3b8-4458-a9e8-1a030b790686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1050bb8-dde4-48dc-aba5-a049ec6200b4",
        "cursor": {
          "ref": "eb448457-bf12-4ec7-ba5f-5391a92eb86e",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8277669b-cc8f-4f60-a911-3d81756ac39c"
        },
        "item": {
          "id": "a1050bb8-dde4-48dc-aba5-a049ec6200b4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dc358f95-12b3-4459-95bd-5621acec5af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db682e5-95d5-4e95-96f4-087d2e7fa776",
        "cursor": {
          "ref": "b5135d4a-cb11-49fc-83ec-298ad2a2453c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ba10c7ad-5c7c-457e-b75c-456288dcd876"
        },
        "item": {
          "id": "3db682e5-95d5-4e95-96f4-087d2e7fa776",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3ee77030-d150-4b78-b4a3-4e28f9caa82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d889bd-1378-4d42-913b-7134a3ff98b2",
        "cursor": {
          "ref": "e5140e81-9b54-4182-8ade-3c2e1bb25a20",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "53ae936d-5a1b-4faf-b02a-1433fda80c48"
        },
        "item": {
          "id": "f7d889bd-1378-4d42-913b-7134a3ff98b2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "275d2a7d-a9c9-4346-842e-0193cc47239d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62846d2d-03fe-4684-8682-ba658a650ca7",
        "cursor": {
          "ref": "475ed4da-6525-4789-89e2-4a9f428fba20",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8b486f1c-448d-4beb-a59e-d7ce929bd0fa"
        },
        "item": {
          "id": "62846d2d-03fe-4684-8682-ba658a650ca7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "655b2322-f7d7-41bc-8222-1d2d3919136c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf384c7c-5ee1-4c9c-abec-93949216ff52",
        "cursor": {
          "ref": "85ccb642-67dc-4eb1-9310-5f9776812dae",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "49ecacb7-d108-42f6-bb03-34178fdd76c4"
        },
        "item": {
          "id": "cf384c7c-5ee1-4c9c-abec-93949216ff52",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b8c40d1b-aee2-4628-8e1c-3f23ba580f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25dbe4f-ce21-49bc-af47-9e1820cbaf4f",
        "cursor": {
          "ref": "2ab3cb46-725b-4524-8315-3507f7f4f2eb",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6ae7c8a6-1981-4643-b5fb-1f1624236f68"
        },
        "item": {
          "id": "b25dbe4f-ce21-49bc-af47-9e1820cbaf4f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f99c654f-57ef-4335-8be0-3003536e2044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63a681d-7e10-440c-ba8b-a86f919543c5",
        "cursor": {
          "ref": "6097e211-62b6-436d-8d88-41debc45f4a5",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cd217853-e420-48dc-aa1d-238627c92c1d"
        },
        "item": {
          "id": "f63a681d-7e10-440c-ba8b-a86f919543c5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5d05e620-1dd5-4fa1-9509-b8c65d352f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a491de-5af9-4a33-8a7f-0300600758be",
        "cursor": {
          "ref": "1ac0dbe4-e5aa-432b-9fab-e9f3100f00e7",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c6aac633-ee4a-493a-aa1e-c57e08af15be"
        },
        "item": {
          "id": "82a491de-5af9-4a33-8a7f-0300600758be",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b6cd45bf-e11e-4443-8ff4-89073cca507f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5592bd7e-ed21-422e-905c-1ed2673ab055",
        "cursor": {
          "ref": "1106901f-df98-486a-be3c-dd6b7af66a46",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "06b79da8-3938-4ea3-8fa0-11150f8e7065"
        },
        "item": {
          "id": "5592bd7e-ed21-422e-905c-1ed2673ab055",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5e33e922-9f0d-45f2-995c-cdca99a8189c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "efacce55-8cec-4efb-bf29-f96fd7263d8a",
        "cursor": {
          "ref": "60f5df14-fcd9-4d0a-843e-90a706bddf11",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "075d25d1-8de7-423b-ba5a-ae147f0bede0"
        },
        "item": {
          "id": "efacce55-8cec-4efb-bf29-f96fd7263d8a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b450b948-dc12-427d-b513-b8f2a8ab6959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6726efe9-f5e3-4fcf-a0e8-e4b03a3549a9",
        "cursor": {
          "ref": "abaa0df9-de78-466c-8148-0809af12e892",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4f8789f5-924e-4c5e-a873-662cc3b075fb"
        },
        "item": {
          "id": "6726efe9-f5e3-4fcf-a0e8-e4b03a3549a9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "91c42d88-7394-49aa-8de8-284c511dbb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6726efe9-f5e3-4fcf-a0e8-e4b03a3549a9",
        "cursor": {
          "ref": "abaa0df9-de78-466c-8148-0809af12e892",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4f8789f5-924e-4c5e-a873-662cc3b075fb"
        },
        "item": {
          "id": "6726efe9-f5e3-4fcf-a0e8-e4b03a3549a9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "91c42d88-7394-49aa-8de8-284c511dbb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6ab1b2-bbba-4720-a028-ee6cef194468",
        "cursor": {
          "ref": "d1eef274-52cb-4e05-8bf9-6aae3007b6b7",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "761c22ff-fad6-4342-a051-14a4af492496"
        },
        "item": {
          "id": "2f6ab1b2-bbba-4720-a028-ee6cef194468",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7151379c-3e0c-4f06-a8d8-242b320fe52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8cec09-3f11-485f-ad60-1907a179737a",
        "cursor": {
          "ref": "f10f5d18-3378-4f8b-9674-e65cfb57ca31",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "06b51841-8baf-4586-8d11-f7ff393f026a"
        },
        "item": {
          "id": "5c8cec09-3f11-485f-ad60-1907a179737a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4767b403-3c3d-4b9b-bd9e-73481fc7e904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc24eb8-0aee-4370-8a1a-a59416a20636",
        "cursor": {
          "ref": "83c0a753-16e8-4597-bb1f-d866fb5aaef6",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dbdba7a5-a918-45fe-b876-b922d66ca9e3"
        },
        "item": {
          "id": "0bc24eb8-0aee-4370-8a1a-a59416a20636",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ff48e386-c0f2-4997-ab77-379f540ec252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def96a49-e658-4842-bf66-7ddcf96d8dca",
        "cursor": {
          "ref": "c614a05b-7a67-43f7-8a27-4667ec78fdbb",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9755d900-794d-4dbd-9a8f-81dbd5eabb6d"
        },
        "item": {
          "id": "def96a49-e658-4842-bf66-7ddcf96d8dca",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0c975d95-de69-42ce-89fb-edc1e150b602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f425e26-6699-403f-a323-ba62861b11e5",
        "cursor": {
          "ref": "0d1f842e-acb8-496a-939e-a573bad9c2fe",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "12ba1c6b-10fb-4c71-8759-c569c6d79623"
        },
        "item": {
          "id": "0f425e26-6699-403f-a323-ba62861b11e5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8c69dbc3-8a95-48af-993b-bfa7d4fd74ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b89e1e8-f708-465c-9c98-563ad5e2605d",
        "cursor": {
          "ref": "539f1902-19df-4623-9fc9-ce5c6c3acb9a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "42cd2a16-35ad-487b-badf-3ebf51d9d7d4"
        },
        "item": {
          "id": "1b89e1e8-f708-465c-9c98-563ad5e2605d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "129b2f94-153e-4102-9a4c-b4b3522a7479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8ef39b-20bd-497b-8e45-3ed18661405a",
        "cursor": {
          "ref": "cf8211e6-0305-469c-b4c6-0eed234e8ec2",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9d7951bd-ba49-4bac-b793-fd6d4c2698c6"
        },
        "item": {
          "id": "4d8ef39b-20bd-497b-8e45-3ed18661405a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fa58e46a-47f2-4b86-b856-6ec84a756e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65867597-48d4-48f6-86cd-c18ad8af6bf7",
        "cursor": {
          "ref": "370c9a9e-0710-46eb-b069-64dd11b66d90",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f7e5f30f-f1db-4777-a540-6b00bb34ea49"
        },
        "item": {
          "id": "65867597-48d4-48f6-86cd-c18ad8af6bf7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "560b4654-1449-4d58-b5f7-985bfe5cd3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9f4504-780e-48d3-a66f-ce523c039870",
        "cursor": {
          "ref": "8d4a1c7f-de2a-4b56-8bbc-c14f9b214653",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "67c3fd00-edc5-4a05-b8cf-73a7b81058d9"
        },
        "item": {
          "id": "4c9f4504-780e-48d3-a66f-ce523c039870",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a59c56d3-c1be-46ed-9f6a-0af3aec6cf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2276134b-cdba-46cf-a39d-d00c4a1e15f0",
        "cursor": {
          "ref": "9e303727-f5a4-4380-ae94-083c645bab79",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9d070f81-1756-4fff-997a-6b96973b9ace"
        },
        "item": {
          "id": "2276134b-cdba-46cf-a39d-d00c4a1e15f0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f078d3f8-1104-4901-bee1-2e5f50e5691f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01a49c8-55ef-4f61-9845-27f79ca47ef1",
        "cursor": {
          "ref": "55733c01-9059-41e2-a9f1-467689cee150",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "003362cc-8f21-4e99-aa6d-a5cb56ea08a2"
        },
        "item": {
          "id": "e01a49c8-55ef-4f61-9845-27f79ca47ef1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "de8f52be-13a2-4efc-93fc-a4af7031ac58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eb7f39-ebab-464e-899f-98077449c9ef",
        "cursor": {
          "ref": "83efdcae-7b77-4f98-993a-4506c62f0ca3",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e4163385-d8b4-498a-a03c-a2ccd915c34f"
        },
        "item": {
          "id": "e7eb7f39-ebab-464e-899f-98077449c9ef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cbcf4b52-fbe9-40c3-bef3-096f8ab11baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666f6a8b-e8bf-46d4-b6b7-5d4dd33a1cf2",
        "cursor": {
          "ref": "0c55c577-21dc-43cc-b569-f52934a53eb0",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "021e59e1-d942-4958-84cd-5f78347f4207"
        },
        "item": {
          "id": "666f6a8b-e8bf-46d4-b6b7-5d4dd33a1cf2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a3a83502-cc8d-4405-af95-3a47470946ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf49c0ac-7692-47c6-bab0-c571e97c0ca2",
        "cursor": {
          "ref": "08750c17-f62d-4d3e-868a-5ecf84bd3383",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0190efa9-4d79-4c5e-9a92-521fd6352288"
        },
        "item": {
          "id": "bf49c0ac-7692-47c6-bab0-c571e97c0ca2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1bf10c76-5667-4a31-9000-d85a17041986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfb41ee-f051-4153-8a2a-12ea1cbcf581",
        "cursor": {
          "ref": "0ebb1c13-c86d-4b16-b339-cd584f8d5f9b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "48a7f728-466c-4d41-b370-44733f1471a1"
        },
        "item": {
          "id": "3bfb41ee-f051-4153-8a2a-12ea1cbcf581",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b57abbdc-d718-4c90-9938-291738090d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1578aa19-f107-4b26-bc63-1dbcd95c97d2",
        "cursor": {
          "ref": "2f97c722-6e0e-41f8-a657-b57ef19027c1",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b91fe8cf-9990-4a74-9eee-a5ab4ab23d7c"
        },
        "item": {
          "id": "1578aa19-f107-4b26-bc63-1dbcd95c97d2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c691d83b-657d-4a26-a055-b5ac8155e3f0",
          "status": "OK",
          "code": 200,
          "responseTime": 350,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5f3c7d8a-d338-4ecc-a5d7-99541ced8b38",
        "cursor": {
          "ref": "0ad3b875-8831-412f-aba8-2d2dcf8c46f9",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bb181e57-e764-42a3-96d3-16f1c81d3b05"
        },
        "item": {
          "id": "5f3c7d8a-d338-4ecc-a5d7-99541ced8b38",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fda2d2f7-835e-4573-9fb9-e0fd58aa365d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc605057-e63e-41c2-aae6-e846230fd05f",
        "cursor": {
          "ref": "584bccb2-fa08-460f-bc15-e27ea1b727df",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f35428c9-df2f-42af-b5a2-d0f2cc9354a0"
        },
        "item": {
          "id": "fc605057-e63e-41c2-aae6-e846230fd05f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2eb2b8c7-f9a5-490e-b198-8bf00ae395b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487ffdfb-2569-4cb0-b051-d7a286b40558",
        "cursor": {
          "ref": "c64e5985-f50c-4502-8629-58238a235111",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e050f923-e398-4112-9e4c-b1455a573523"
        },
        "item": {
          "id": "487ffdfb-2569-4cb0-b051-d7a286b40558",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a8911a53-d5d8-4db4-b8c6-18b464d035b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e4a988-7f6c-4987-955e-c8fe424b0ba5",
        "cursor": {
          "ref": "38015218-bdcd-4526-b9c5-24f63f8cc0d0",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a0adec63-d626-4f0b-89b9-0603dc0c9fb2"
        },
        "item": {
          "id": "10e4a988-7f6c-4987-955e-c8fe424b0ba5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ed924695-0905-410c-9809-f7e163df87de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4583aa7f-1f99-4fa9-a7b8-912f9302211c",
        "cursor": {
          "ref": "ef7a0cf6-81da-4702-9070-01fb3dd80ece",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "629abe8b-9729-46f5-8238-8355161dacf2"
        },
        "item": {
          "id": "4583aa7f-1f99-4fa9-a7b8-912f9302211c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "01155981-5b23-4d9a-bd60-3093f12972d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440ec55a-1969-435f-bee5-72a69f3d53ed",
        "cursor": {
          "ref": "aac82c86-59b2-44c2-a69c-47ad41a0050f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4664db73-5e08-4ddf-b7ae-e10b2882441a"
        },
        "item": {
          "id": "440ec55a-1969-435f-bee5-72a69f3d53ed",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fdd435bf-dad2-46f0-9913-ba016ec71143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cd8228-c6b5-4992-a62f-bbdd8894996f",
        "cursor": {
          "ref": "87f5157f-20fb-49a8-8515-98b1d255243e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "353634cc-0edc-408c-a2c5-01ef7248fc23"
        },
        "item": {
          "id": "51cd8228-c6b5-4992-a62f-bbdd8894996f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9e4e2aae-0fb4-450c-88de-2fae5ccb328f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869d63c1-a353-4563-884d-8865bd0c7e75",
        "cursor": {
          "ref": "22b90c49-b6ce-43c2-a3a7-345ea71f3089",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "980b046e-e1dc-4b98-8021-595d641dfb07"
        },
        "item": {
          "id": "869d63c1-a353-4563-884d-8865bd0c7e75",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "773a0ff4-e5de-4ed1-9692-0b9ab8c48b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ba531e-a754-4866-b5a4-bc64cd8ccba2",
        "cursor": {
          "ref": "b3b05459-4972-4f4e-8a4a-ebcb80d9fb6b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fa936c14-59a9-46ed-918e-46c07fe2543a"
        },
        "item": {
          "id": "c1ba531e-a754-4866-b5a4-bc64cd8ccba2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b08dffad-e148-418a-ae11-baa5c80e8084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b68928-5eef-4fb9-bb14-44804240faec",
        "cursor": {
          "ref": "c3a1f363-a325-4fa7-a47c-c13cc402c635",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c8e2dcaa-86cc-4462-a223-87e8edc59037"
        },
        "item": {
          "id": "d6b68928-5eef-4fb9-bb14-44804240faec",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d58cfd9a-d03f-410a-8129-8aa08df3ac2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3b9cd1-1db3-47d6-832b-ecc32cf36f6a",
        "cursor": {
          "ref": "22ca90b3-57a4-46c8-afe5-9aec3fc549d0",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "811475c5-0076-426a-a23d-0c6c12ad3abf"
        },
        "item": {
          "id": "fe3b9cd1-1db3-47d6-832b-ecc32cf36f6a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "19b517b6-eff7-45b4-b735-9f1cb0d52417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b871c5-c6f6-43d9-9196-2f4aca17a804",
        "cursor": {
          "ref": "03a68067-dd95-4184-ab0c-8b58a9464afc",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cdc1e748-ca0c-48b2-842b-fbd41848bede"
        },
        "item": {
          "id": "f4b871c5-c6f6-43d9-9196-2f4aca17a804",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aaaeb9de-79d9-49ac-8598-480e126240e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608bd311-0da5-4ab4-88f1-8aecce02b7b6",
        "cursor": {
          "ref": "649e4f7f-7863-48ff-89b3-0512892a4fe5",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b7c2b414-64f8-49ec-ba17-a1b77678dae4"
        },
        "item": {
          "id": "608bd311-0da5-4ab4-88f1-8aecce02b7b6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9ea80b0e-1b38-422f-8d3d-1f9db5e29d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a053c628-95c2-4bcc-a6d0-eef87b071f98",
        "cursor": {
          "ref": "cb81dbac-6d69-4a39-bcb8-813a803a2d62",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2254b88d-3e0f-4ad3-96ef-19677ce624ad"
        },
        "item": {
          "id": "a053c628-95c2-4bcc-a6d0-eef87b071f98",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d0ae7935-7316-4bea-aff0-9ef7bd74a74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04d94f9-ff60-47bc-ba80-37c30d79be4b",
        "cursor": {
          "ref": "2a243a10-da88-46b2-821c-119b74471e32",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b0a87a26-51ee-4f29-b048-694f6c1ed4dc"
        },
        "item": {
          "id": "e04d94f9-ff60-47bc-ba80-37c30d79be4b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0fb549be-cdf9-4347-ad8d-e430e0353278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388e7383-4d58-4130-8eea-a9dd51808f3d",
        "cursor": {
          "ref": "bd16c433-a7fa-4eb5-9958-69872a4e1bd5",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b00ec683-a09d-47be-9596-c2ac48394130"
        },
        "item": {
          "id": "388e7383-4d58-4130-8eea-a9dd51808f3d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "996cf48c-ca0d-4a0f-ad2c-2a97a2362328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f356bf-23a8-4a21-9585-b587ca6f1e77",
        "cursor": {
          "ref": "2b25d4d6-bba4-45db-aab8-2a729751c551",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c6612d5d-ef19-4536-8311-e05f888c5341"
        },
        "item": {
          "id": "75f356bf-23a8-4a21-9585-b587ca6f1e77",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d3f4c2eb-ee85-4458-aadd-efad08ff6e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9a91d5-022e-4a86-93d9-6a659fc8ab57",
        "cursor": {
          "ref": "e7952c3a-f94e-4fd7-848a-238db1f10c23",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5121baf2-3f47-461e-8d6d-f6c62b47c480"
        },
        "item": {
          "id": "5a9a91d5-022e-4a86-93d9-6a659fc8ab57",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "809b4cc8-14a2-426f-8145-8d5a936ac039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04792721-2c5e-4089-be1d-53041d9ab0bd",
        "cursor": {
          "ref": "aaca9744-3ed1-453a-90bf-8c1fdfa23a44",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "28067538-91c5-4dfb-81e3-c6f569448e98"
        },
        "item": {
          "id": "04792721-2c5e-4089-be1d-53041d9ab0bd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f9526ed7-d1c6-4739-83d4-c85b5be3b4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c1128a-51ec-40a0-a9ba-3829cc586e7e",
        "cursor": {
          "ref": "3ba2914a-6d77-4ce4-983c-a337f6a593e6",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7aae6db0-f13c-47eb-a561-402a6a6aa5c9"
        },
        "item": {
          "id": "b9c1128a-51ec-40a0-a9ba-3829cc586e7e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff9702b3-d357-4171-aa52-96257ba6edf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3fdb82-b6ae-4d90-b584-ea5eedc2de43",
        "cursor": {
          "ref": "4300b503-b987-4221-ae78-5ecdcfec0d99",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9c270b6e-415a-4ccf-a883-d7ac75405b53"
        },
        "item": {
          "id": "1f3fdb82-b6ae-4d90-b584-ea5eedc2de43",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cde21009-af3d-453f-ae57-4cb232936d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f515f8-46a6-464f-a080-ff257cc6985e",
        "cursor": {
          "ref": "6117bf9f-7260-4197-9491-660f05d35e79",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "919d6485-853e-452f-85e6-b55a21853a46"
        },
        "item": {
          "id": "b5f515f8-46a6-464f-a080-ff257cc6985e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b9286e15-2beb-4e07-98e6-ca6003c0297c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5510c6-460c-4cdf-b0ca-b58a36fdc962",
        "cursor": {
          "ref": "d5907f09-b8e1-43e9-8ccd-ea84f3e93572",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "29de4ad3-0b82-48eb-9e84-7a0db12d2a37"
        },
        "item": {
          "id": "eb5510c6-460c-4cdf-b0ca-b58a36fdc962",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8e2f34d6-86a0-43fc-9325-c356371d3c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa5285f-1c56-4132-ac27-bfe824974df0",
        "cursor": {
          "ref": "66514378-41ad-49e4-b9bc-5728b8e109af",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0bf457cd-04c3-4c12-aed0-5432bd8eca0a"
        },
        "item": {
          "id": "0fa5285f-1c56-4132-ac27-bfe824974df0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2504734f-fc9a-44ab-8cbb-14f7ca67d85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f207c0-111c-4c73-a82e-9bfdb5285f02",
        "cursor": {
          "ref": "797f3fa6-ab6c-4838-993d-d26d5f50d7c9",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e396a1f0-c2d2-4b6e-943c-1b412cd66b41"
        },
        "item": {
          "id": "64f207c0-111c-4c73-a82e-9bfdb5285f02",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "60abc8a8-043f-43bb-a396-0554ecfc6ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3b9aa4-48b9-41ed-98e0-c03155286a68",
        "cursor": {
          "ref": "f2a379ad-fbf0-4a31-b03f-5b0ad71d9d77",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f8bb296a-aec6-445b-b9f1-d2b1b6948cd9"
        },
        "item": {
          "id": "8b3b9aa4-48b9-41ed-98e0-c03155286a68",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "880ff457-c99f-493b-9394-e73c6fdd620b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c05c5ba-5729-4d1d-a2e7-d4ad570c6164",
        "cursor": {
          "ref": "9b94733b-63d1-4625-94ef-51244201283c",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2c4e51e4-1f2e-4da8-a00b-961e6926b963"
        },
        "item": {
          "id": "8c05c5ba-5729-4d1d-a2e7-d4ad570c6164",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7ce9f8e6-49dc-4773-81f2-3a7d30257a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa6a35d-2bc9-4c01-a0d6-2a45ddbe22d0",
        "cursor": {
          "ref": "dbc34904-54ac-4788-b122-eaa03acce140",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3bb899df-fde7-4720-97e0-10503075287d"
        },
        "item": {
          "id": "8aa6a35d-2bc9-4c01-a0d6-2a45ddbe22d0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3cef756d-8076-40ba-98da-ac086238cdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8835d7-0dee-4243-b1d7-a84888dd6d1b",
        "cursor": {
          "ref": "a9175289-e6da-4568-b04f-f3116587ed00",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "97e54b2b-23df-4ca7-88d6-657cf5abd925"
        },
        "item": {
          "id": "bd8835d7-0dee-4243-b1d7-a84888dd6d1b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "caba8f71-4f06-4208-8b30-c122668cf832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409793a6-b2dc-4b44-8e12-ea397a31cd9d",
        "cursor": {
          "ref": "d98da867-9d0e-4315-9c9e-936d84555923",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d1343e9d-7214-4bc0-9752-1b72883c375e"
        },
        "item": {
          "id": "409793a6-b2dc-4b44-8e12-ea397a31cd9d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5127d182-f5a5-4e88-b7d7-02a4b32c8592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fd6bbf-4962-496d-b651-9e90b5892e8e",
        "cursor": {
          "ref": "9d68ee59-409f-46e9-9b31-38c08f73c513",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7c5c41aa-6c7a-4bdf-a718-1ec10d9a00c2"
        },
        "item": {
          "id": "44fd6bbf-4962-496d-b651-9e90b5892e8e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "210eebe9-7d5a-45bf-9137-7a022876fcc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568a46c2-f249-4fbd-8b4f-0282002c76a8",
        "cursor": {
          "ref": "c88e7b84-a467-441a-b94b-164a85626a68",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fda32d00-b61e-49c2-b15c-e4f3eb711545"
        },
        "item": {
          "id": "568a46c2-f249-4fbd-8b4f-0282002c76a8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "231ec680-48ea-46ed-874c-ff39aa81b691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a8a193-8ea0-4dfb-88e7-debf5952af90",
        "cursor": {
          "ref": "582c80bd-02b1-49bb-8811-edf1a4fce8fc",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "810cf544-9ffd-4d60-af1c-9f61fdcbacfd"
        },
        "item": {
          "id": "34a8a193-8ea0-4dfb-88e7-debf5952af90",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ebb02c5f-4ac0-4c6b-b9d8-f7ce274facf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a6c60c-3074-4dc0-8435-cc4489cf2d8d",
        "cursor": {
          "ref": "cd980be2-b83f-453d-927e-be25cee7b8e2",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "eb1da00a-2573-4b51-ad63-2d2e0e14c37c"
        },
        "item": {
          "id": "f5a6c60c-3074-4dc0-8435-cc4489cf2d8d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cab5a971-1b5e-44bc-8a5e-99b7361132c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec9add4-cbdf-4d35-b566-8703608426f6",
        "cursor": {
          "ref": "907107b1-41b2-4993-b35c-a57a7533bb70",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "22b2c1b6-77d6-4791-9c9e-6754e401582c"
        },
        "item": {
          "id": "5ec9add4-cbdf-4d35-b566-8703608426f6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "99067a51-7ee1-447a-931b-ad1b2c618668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012fe19e-0ef2-44d6-927b-ccc8686f76a6",
        "cursor": {
          "ref": "10987702-1603-4e17-927c-d606c8e0a8df",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fb851761-71db-4fe4-b86a-2a0221a20b1f"
        },
        "item": {
          "id": "012fe19e-0ef2-44d6-927b-ccc8686f76a6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "50962967-6e9f-4c8a-b8a4-38e73d9bfbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a468177-2f11-425a-b8e3-2646d3548ac5",
        "cursor": {
          "ref": "9a925f9e-5663-46cb-baa3-ce858a92d793",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d2507255-53d0-43eb-bdb8-38928a1558ea"
        },
        "item": {
          "id": "6a468177-2f11-425a-b8e3-2646d3548ac5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9826462d-65bb-4e8d-8cac-464302096503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e35422-659b-4425-824a-134e5bda48df",
        "cursor": {
          "ref": "e0d5bd52-11bc-420f-929e-1bbd5276471e",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0e28dd19-d74e-4c6a-9584-c0fd7d744d15"
        },
        "item": {
          "id": "74e35422-659b-4425-824a-134e5bda48df",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "72d379ef-6243-421e-a9f9-48fc8db6778d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730fd989-b842-4baf-9f1e-afe7d2ab9e5a",
        "cursor": {
          "ref": "67f37bb0-a79a-42e7-a3a4-fb48f096e330",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4c3da378-3dbb-4a31-a514-52db73d3e2c8"
        },
        "item": {
          "id": "730fd989-b842-4baf-9f1e-afe7d2ab9e5a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a6cb5e72-63e2-4c92-95cf-af3ec69f50e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678a5d40-2a4d-4842-a64c-e1c2f4f014af",
        "cursor": {
          "ref": "c0f63335-8426-4a40-8f9a-645db8b17348",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8b73dc74-b044-45ad-88e6-1317a4fca846"
        },
        "item": {
          "id": "678a5d40-2a4d-4842-a64c-e1c2f4f014af",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "56e5369b-a972-44f7-991d-086f5f592bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f50561-7f30-4b44-9a89-2641752beee2",
        "cursor": {
          "ref": "b3b1d8e0-eae1-4871-81b1-9087f3a0e8de",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b54ffb0e-e36f-48af-9c0a-0bd3561b0f26"
        },
        "item": {
          "id": "10f50561-7f30-4b44-9a89-2641752beee2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3fe2bab3-9e82-4692-9921-992561dbd1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4025adc2-3007-42c0-a1bc-feee69d6a522",
        "cursor": {
          "ref": "cc2fa8fb-108c-44d0-aaeb-66e40dc4ee99",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "58a3d5a9-13e9-47cf-a910-0d0c1466a6f4"
        },
        "item": {
          "id": "4025adc2-3007-42c0-a1bc-feee69d6a522",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1b35d03a-3dea-4b78-b69c-0f0b39a37540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3361782-7b30-474c-baba-23883086bfe4",
        "cursor": {
          "ref": "283485ad-d6ec-4803-ad99-e466d3bac17b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d6b3327f-bb88-46cc-aaf7-f2a55df66d37"
        },
        "item": {
          "id": "d3361782-7b30-474c-baba-23883086bfe4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5e87c4de-b01f-43b2-8780-9899088a9c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b065a1f-785e-40b2-9150-69ffe206e5b8",
        "cursor": {
          "ref": "4fa9fb76-1147-447d-92f5-984d2e1e1dbd",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "da999472-d847-4dd0-86df-10ca7bc7859f"
        },
        "item": {
          "id": "1b065a1f-785e-40b2-9150-69ffe206e5b8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d35b8bd6-4e40-4b76-85c5-ebbf6720588c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c31021-7079-445f-af63-e3a4fbcbb160",
        "cursor": {
          "ref": "ab265822-399c-4350-bc00-87d8924f8056",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3d37c6fe-f7d1-4de9-b90a-c2a5c9b0a60e"
        },
        "item": {
          "id": "b0c31021-7079-445f-af63-e3a4fbcbb160",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e2bf6b74-82b1-487c-a84b-d863ee4a45bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792d9118-3e1d-4af4-bb3d-bdf4a7d5a08e",
        "cursor": {
          "ref": "cf50efb6-5267-49ba-b984-b545b699bfa8",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "805b83c4-e9a6-495c-b55a-d65dafae7727"
        },
        "item": {
          "id": "792d9118-3e1d-4af4-bb3d-bdf4a7d5a08e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "82d01e65-bc68-4aa2-880d-6b853cee96e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f138ec97-7c1d-4dcc-89dd-9dfbd099a757",
        "cursor": {
          "ref": "098cec3c-9a0a-4796-b074-f75be7938f02",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "22430e54-90c2-48d2-b887-eaa5f5f2119f"
        },
        "item": {
          "id": "f138ec97-7c1d-4dcc-89dd-9dfbd099a757",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "97d2c44a-b64b-4470-a0a8-4d39348a0569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e4b6ef-02b2-450c-9896-60a3be647ec5",
        "cursor": {
          "ref": "b20c87b5-79bf-44ff-b7d6-ec4e1ad71f42",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d4460728-f457-4155-9eb5-a59b8bc74f23"
        },
        "item": {
          "id": "b4e4b6ef-02b2-450c-9896-60a3be647ec5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2a17d7b2-1db3-4901-84eb-5e58f6b5e5b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e07ebef-874c-4ce9-84f0-280641b2fee7",
        "cursor": {
          "ref": "1df674b2-4009-4110-a3a2-617600e30955",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53f2abe1-6a5b-4191-80f6-02c7898d6773"
        },
        "item": {
          "id": "4e07ebef-874c-4ce9-84f0-280641b2fee7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4f73d032-2cf1-4867-9099-e06c9e0a2b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fd5cfc-3092-4b9d-8fe4-bc16f0ea9d63",
        "cursor": {
          "ref": "97702cec-0423-46d8-b4f3-b476a6a6cabf",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f155e70a-13d8-43eb-ab03-e590d0665725"
        },
        "item": {
          "id": "59fd5cfc-3092-4b9d-8fe4-bc16f0ea9d63",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "15e185f2-4b69-4991-bed6-3b6f67f6f061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b6dd95-67c9-42c6-b245-a8b102297a22",
        "cursor": {
          "ref": "da020fc5-b33e-456e-b7fe-e7e5b2dedc8f",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fd0556ac-77ab-4762-a569-f7673c07cf9d"
        },
        "item": {
          "id": "f0b6dd95-67c9-42c6-b245-a8b102297a22",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a8f84736-688e-4f6c-a31d-b014eb2d1b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8793d12-336f-48ba-9122-243c6574a689",
        "cursor": {
          "ref": "e1f94324-d591-4780-b6cb-9335c4923cec",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d2786c79-5fd2-4a95-b88e-0a7c2947181f"
        },
        "item": {
          "id": "c8793d12-336f-48ba-9122-243c6574a689",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5221f3ae-a05e-4215-a274-5a84651a1911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78b528b-8f90-4281-89d0-d59d08ccae63",
        "cursor": {
          "ref": "3672a626-1213-4e69-87f3-465437d5e0a5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "42b81830-a3e5-4757-aa58-b7d5885d2ccc"
        },
        "item": {
          "id": "c78b528b-8f90-4281-89d0-d59d08ccae63",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a18f56a9-7d00-4a1b-a8ae-9dba3b35e799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acea8c0-1881-4cea-a540-7f8b4b1342ce",
        "cursor": {
          "ref": "3aed5d5d-3f3c-41c3-882e-5d14e076179c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "49348bad-2e83-4708-a75f-52d3fb946720"
        },
        "item": {
          "id": "5acea8c0-1881-4cea-a540-7f8b4b1342ce",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "abb423e4-e2a7-4484-90fe-9b1730092bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897571fc-a547-4e13-93a1-8e33f32fcdd7",
        "cursor": {
          "ref": "82e13d31-e850-4572-8c1a-71d65ae6c667",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c5fc4a5-dbb5-4724-bc0a-bd3f3ba798be"
        },
        "item": {
          "id": "897571fc-a547-4e13-93a1-8e33f32fcdd7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7e52fb8c-485e-4731-ae13-1fd4e979849e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c27f3af-f258-40fc-bcb7-01bc2132d507",
        "cursor": {
          "ref": "3800ac08-6b96-4ecd-ad94-2ba6b9ae1f42",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "af7071a2-eecd-4f2a-a7fb-adee98741f75"
        },
        "item": {
          "id": "5c27f3af-f258-40fc-bcb7-01bc2132d507",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d4fbdd59-fcb8-48ef-a25a-6f17e33fc7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bb8064-3304-4f79-91b3-2a539854c5ee",
        "cursor": {
          "ref": "1bef3ae4-ec53-4f55-b935-f921617b5788",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6eb8a0d8-df50-47bd-b1cc-ada80cc32e76"
        },
        "item": {
          "id": "19bb8064-3304-4f79-91b3-2a539854c5ee",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a24ef960-0b32-435f-85d6-4b296a0f6c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb5729c-9c20-4a0e-a334-f84b662221b9",
        "cursor": {
          "ref": "542cb929-9695-43e7-8bac-25d4054c09cb",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c061f6b7-311f-437b-9cb1-e368b678b88c"
        },
        "item": {
          "id": "3fb5729c-9c20-4a0e-a334-f84b662221b9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a343dbfe-4ced-4cf6-8f01-59932ba6441a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c183358-9752-4b55-8665-a39ede037425",
        "cursor": {
          "ref": "cbacbe71-d4da-4dfc-b32b-55a4126e1911",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b6c3ab7e-d41b-4033-a3e3-1fa73a7e53dd"
        },
        "item": {
          "id": "3c183358-9752-4b55-8665-a39ede037425",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "71a9c975-588e-4fb9-9628-016c44ceab22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb295a54-e182-49d9-ae16-4f677691184c",
        "cursor": {
          "ref": "796eff38-214d-44d8-a40e-c90dcc55e765",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "89ac01e2-3d12-4820-a60d-700982c9aaea"
        },
        "item": {
          "id": "fb295a54-e182-49d9-ae16-4f677691184c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "871bc596-6768-4a61-a7c9-b0d1017543d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511ce505-3205-4d02-b5f1-d1ad8aa62f48",
        "cursor": {
          "ref": "53aabcd7-e12b-42f7-b482-4981bfef564b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fe2e7e6f-ccba-4d48-8287-3d3fcbccaad3"
        },
        "item": {
          "id": "511ce505-3205-4d02-b5f1-d1ad8aa62f48",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "60d17d1c-969d-4246-8cca-ad802bb4e697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157f654c-84c7-4d8a-9bd4-dba89bc5eb53",
        "cursor": {
          "ref": "5c806c13-77e9-4751-aa3e-fbf9b21dbceb",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b383b420-6bf2-4832-b74b-dabac8a22178"
        },
        "item": {
          "id": "157f654c-84c7-4d8a-9bd4-dba89bc5eb53",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ab68feae-8753-47f0-baef-b2a6cf32072b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f75353-d038-422d-b302-03a46259f749",
        "cursor": {
          "ref": "bcc464f3-6370-43c8-989d-77ecfba6d280",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "40059841-d70f-45eb-83a4-7cd2e202934b"
        },
        "item": {
          "id": "33f75353-d038-422d-b302-03a46259f749",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5a06811b-16d9-4e02-85b6-18260e8922af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17c677a-bd54-42ae-adf6-69401dfd3bda",
        "cursor": {
          "ref": "6cfb9ee4-ec6e-4f1a-a7f4-3f6ccd2a3fea",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3f79adbe-b7a5-41c5-9035-602dac29d377"
        },
        "item": {
          "id": "f17c677a-bd54-42ae-adf6-69401dfd3bda",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "71a56599-3a75-4300-9fa6-93151a75caa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616efc77-c5ff-4a09-88e5-558503e5bbd7",
        "cursor": {
          "ref": "e133716a-2584-42c4-91ac-3f2fb10ec50c",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4d808297-b7fc-428f-b891-e8683d57c2c6"
        },
        "item": {
          "id": "616efc77-c5ff-4a09-88e5-558503e5bbd7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fdfcf967-a63c-4d78-ae61-6e3b5e1a3360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f37a71c-3eac-4515-a9ac-4b925d756a02",
        "cursor": {
          "ref": "65cf1b3b-64f1-4182-9ea9-4fabb9cda9c5",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ffec4a14-1fe1-459e-8363-8ff898c4be55"
        },
        "item": {
          "id": "7f37a71c-3eac-4515-a9ac-4b925d756a02",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6701019f-daa0-4233-8c16-4f52778520c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7d6036-3f33-4fa6-abf6-5245acd108af",
        "cursor": {
          "ref": "d96c06b8-4544-4e5f-be38-33143dafdd5b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1fb55f26-6923-47ae-9423-d95e23f3bdac"
        },
        "item": {
          "id": "7d7d6036-3f33-4fa6-abf6-5245acd108af",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5e20040c-9ca0-4f68-aff5-a7ad28d66b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eabb5bc-a616-4785-967f-dd54f67206bd",
        "cursor": {
          "ref": "c92193ce-49d8-44d4-983c-f183bb4a6ab1",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0fc7d2d1-7cea-4e13-8b20-57bad486a5bc"
        },
        "item": {
          "id": "6eabb5bc-a616-4785-967f-dd54f67206bd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "66084922-ad5b-4fdb-9372-caac12d9249d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488c0cb4-a7d8-4b25-97ad-a46f055b6478",
        "cursor": {
          "ref": "766cbaa4-4692-4a25-bb3b-2d10342c77cf",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "405beb16-bf23-40c8-b514-6b9a8e343ec1"
        },
        "item": {
          "id": "488c0cb4-a7d8-4b25-97ad-a46f055b6478",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "00774467-9617-44d8-a0a0-7f9e9f413f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444d8574-bd6f-4c1b-8603-ea5d32ca1c5b",
        "cursor": {
          "ref": "7a31e7c4-1a2f-4df3-a055-88858c7c7934",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0994cfb2-8359-4485-adda-922606da30e5"
        },
        "item": {
          "id": "444d8574-bd6f-4c1b-8603-ea5d32ca1c5b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "620e0cd0-8c98-462d-8393-be1ccac98f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd1badf-7c88-4510-afe5-f95dcef01bbb",
        "cursor": {
          "ref": "7303ec66-e8c5-4aaf-a3b5-44f94e84f4ea",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5e52652a-1c28-4930-b5d6-038a329797ab"
        },
        "item": {
          "id": "dcd1badf-7c88-4510-afe5-f95dcef01bbb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dd875b01-bcd3-4604-b545-cb14170435ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f64984-a007-4b9b-ac5f-ec20d7e4f1cb",
        "cursor": {
          "ref": "2291ddf2-aae2-4d8b-9638-a4cd1555692c",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b819df18-61d0-49cc-9b6b-fe83f2e6d3a6"
        },
        "item": {
          "id": "b7f64984-a007-4b9b-ac5f-ec20d7e4f1cb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "38ab42fd-449d-40ca-ae8d-c4bd68c0e29f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63a520f-80fe-45b4-ac83-80228bb1a4d3",
        "cursor": {
          "ref": "e4c283a5-8504-4b6d-8695-c64bbd7216d2",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d5947904-6d90-4946-8fc8-df6ef8948485"
        },
        "item": {
          "id": "e63a520f-80fe-45b4-ac83-80228bb1a4d3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "36206297-fbec-4a19-8a45-d10a23ed123c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6590622-1ad4-4b0f-a87c-6b3957a0256b",
        "cursor": {
          "ref": "203dee60-0443-4f62-80f1-993705b7cca5",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "360b8deb-049c-4aa5-9d7f-684aa69b7a3e"
        },
        "item": {
          "id": "b6590622-1ad4-4b0f-a87c-6b3957a0256b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0ed8998b-7124-44b5-9ab4-19d53422b287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486176b9-bc29-4441-9ed1-bf1918c1f201",
        "cursor": {
          "ref": "e08e0ed4-9a7c-4d69-9e67-8cbebc0f58e2",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f277fb64-ea7d-439a-b2aa-43a633de04c7"
        },
        "item": {
          "id": "486176b9-bc29-4441-9ed1-bf1918c1f201",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "95d89574-2c1d-4460-a1b4-0adf81b5e092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9870bd-e21e-4aee-8272-2af557548d40",
        "cursor": {
          "ref": "542a1e12-eae5-4f49-b3f0-21bba5d1c963",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "69aef822-80f4-44e9-9d9f-98f19aebdbb2"
        },
        "item": {
          "id": "3b9870bd-e21e-4aee-8272-2af557548d40",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "55eac6c3-6a3f-4d8d-aca0-75b38cbc8a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b85070-b94e-456a-bf33-f2a1deb0dee2",
        "cursor": {
          "ref": "1b1d5696-a619-4394-93af-ab5d758df0f9",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4ae285f6-9473-45af-a14f-04b11e884fa4"
        },
        "item": {
          "id": "90b85070-b94e-456a-bf33-f2a1deb0dee2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e013d4cd-4a23-462d-9b99-d33e1a2c924d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de185be4-20ac-4d8d-9da4-e344dd9d814d",
        "cursor": {
          "ref": "488d90fd-74f0-48ff-baa9-511510e3df8e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c8475d67-d56c-4102-9776-37922f471fbe"
        },
        "item": {
          "id": "de185be4-20ac-4d8d-9da4-e344dd9d814d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "28670db4-67fb-4a67-b00a-323c5f5f9faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957f4770-cb2b-42f9-8db4-c56670df04bf",
        "cursor": {
          "ref": "747b2bc1-7dd0-40ec-941a-bc3ce51bb7b1",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b9898e94-0660-4683-b355-33d889b828b3"
        },
        "item": {
          "id": "957f4770-cb2b-42f9-8db4-c56670df04bf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ff8c3ba1-6261-46b3-b3bd-21d5151587c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ebac7b-ccb7-4c48-9eef-4aa744dfbca4",
        "cursor": {
          "ref": "7113ccb8-a482-4894-9ba6-9e529ff846cc",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c8a7239a-c2be-455f-abfa-4a434fd56857"
        },
        "item": {
          "id": "18ebac7b-ccb7-4c48-9eef-4aa744dfbca4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4f425985-219c-476d-8c9e-77d3a32accb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eead7b8-0092-4dab-86b1-8b9c6249739e",
        "cursor": {
          "ref": "6a6318c0-4f63-4132-aac0-8c2bfb1af62c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8b59ff3e-456d-4508-b83a-23443962eda9"
        },
        "item": {
          "id": "9eead7b8-0092-4dab-86b1-8b9c6249739e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "27a1c458-4460-46c1-b583-e5f5ede25dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e93e35db-c04b-4797-affc-0d52b357e781",
        "cursor": {
          "ref": "1b341316-1791-4588-901f-2695adc7dc75",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e35dbe81-e8db-494b-ae73-4c7910f3d626"
        },
        "item": {
          "id": "e93e35db-c04b-4797-affc-0d52b357e781",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "eb19affc-f00a-4a80-bf11-812e3fb46ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3e100d15-0ecd-41a4-b46c-3627bb99b50d",
        "cursor": {
          "ref": "e7d00c21-92b7-4672-8495-8b0c26b59d42",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0eb26453-f216-4283-8551-beaf87d108ed"
        },
        "item": {
          "id": "3e100d15-0ecd-41a4-b46c-3627bb99b50d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8750691a-ee38-482f-a411-8dbdf05b0090",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df53f24-467a-4eee-bc1e-4a8499f2b5cb",
        "cursor": {
          "ref": "48f6131b-32b0-4d45-b4b1-46476bc25d37",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e8f53a07-9420-4d3d-bfeb-e85f1221b66a"
        },
        "item": {
          "id": "3df53f24-467a-4eee-bc1e-4a8499f2b5cb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "084a11c2-3427-4242-954a-f023af9e4388",
          "status": "OK",
          "code": 200,
          "responseTime": 2608,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd059a77-fb79-4ba7-b7c1-f72e614fe581",
        "cursor": {
          "ref": "516cfd72-ca22-48a6-9195-2ef9c45a3b80",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b0575b89-9dbf-4ba6-938d-b0000e10c900"
        },
        "item": {
          "id": "fd059a77-fb79-4ba7-b7c1-f72e614fe581",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8c8fdee3-d0a4-415a-874e-282054bedd4d",
          "status": "OK",
          "code": 200,
          "responseTime": 2419,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
        "cursor": {
          "ref": "e716df9e-e3da-4a58-851a-8f116f28e530",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5e746009-8ec6-4c4f-ac8e-1bc85a43f719"
        },
        "item": {
          "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99968b4e-bbc5-405a-a69f-fa6e0fb135ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
        "cursor": {
          "ref": "e716df9e-e3da-4a58-851a-8f116f28e530",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5e746009-8ec6-4c4f-ac8e-1bc85a43f719"
        },
        "item": {
          "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99968b4e-bbc5-405a-a69f-fa6e0fb135ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
        "cursor": {
          "ref": "e716df9e-e3da-4a58-851a-8f116f28e530",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5e746009-8ec6-4c4f-ac8e-1bc85a43f719"
        },
        "item": {
          "id": "c2e87131-0222-4b49-a95f-def9df9b4493",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99968b4e-bbc5-405a-a69f-fa6e0fb135ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "bc0e1bbc-876f-441d-b80a-d74bd2ae38bb",
        "cursor": {
          "ref": "edf53845-7a6d-4db7-a710-3f6db88199a9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8695d058-62a0-44dd-b62a-a1c8ae8757d6"
        },
        "item": {
          "id": "bc0e1bbc-876f-441d-b80a-d74bd2ae38bb",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "09e187dd-016c-4776-a075-676ffdefc909",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3080b7bd-abca-412d-a6be-8e323505cd10",
        "cursor": {
          "ref": "62ddb4b0-95cd-4686-9e03-0bc0d3062c17",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2397d366-a413-49a6-ad0a-30dba5b0b7c0"
        },
        "item": {
          "id": "3080b7bd-abca-412d-a6be-8e323505cd10",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "03ad487b-101e-41f5-920b-36aab65ab344",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3080b7bd-abca-412d-a6be-8e323505cd10",
        "cursor": {
          "ref": "62ddb4b0-95cd-4686-9e03-0bc0d3062c17",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2397d366-a413-49a6-ad0a-30dba5b0b7c0"
        },
        "item": {
          "id": "3080b7bd-abca-412d-a6be-8e323505cd10",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "03ad487b-101e-41f5-920b-36aab65ab344",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "458ee015-622d-456d-b913-2296d099e1ba",
        "cursor": {
          "ref": "b4ea0ca8-5278-4347-b627-7b74e380e89c",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0cbf1d62-a16f-409c-9218-8e2e3efdbea7"
        },
        "item": {
          "id": "458ee015-622d-456d-b913-2296d099e1ba",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d3be4cf3-5971-46a4-b43e-8079f2b41db8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 247,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bdabcbf5-89e3-40a3-8689-c4c98850c070",
        "cursor": {
          "ref": "d7e8d135-78fa-4170-8821-41f33ca14e6e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a0b043a3-cf54-4d65-9843-6e2debe83192"
        },
        "item": {
          "id": "bdabcbf5-89e3-40a3-8689-c4c98850c070",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c3c1fd08-c832-43d9-bf62-26c419744db3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bdabcbf5-89e3-40a3-8689-c4c98850c070",
        "cursor": {
          "ref": "d7e8d135-78fa-4170-8821-41f33ca14e6e",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a0b043a3-cf54-4d65-9843-6e2debe83192"
        },
        "item": {
          "id": "bdabcbf5-89e3-40a3-8689-c4c98850c070",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c3c1fd08-c832-43d9-bf62-26c419744db3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c55579c2-ffb8-446b-b3ae-ec2d41ac601c",
        "cursor": {
          "ref": "13354e24-7f94-4dbd-a1b5-dbb60850e40d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65cd2efc-05b9-45e1-8dbb-6f0abbaf094f"
        },
        "item": {
          "id": "c55579c2-ffb8-446b-b3ae-ec2d41ac601c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "1a12e529-a12b-47d2-b997-cabeb36e4036",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 119,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}