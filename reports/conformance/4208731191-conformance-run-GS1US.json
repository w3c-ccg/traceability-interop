{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c23756e4-0997-47dd-9c2c-36a36bb60101",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b987a6e5-c6f2-42f4-bb43-fbe81021fa1f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46403a2f-d155-467b-8de4-3abb39991dbe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "efa97b0e-8b3e-4fca-a2a6-f9035493c65e"
                }
              }
            ]
          },
          {
            "id": "4a44e319-3b31-42b4-bad5-0b5655776de2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebf61eb5-d950-4853-b10e-9a9760e65c70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8dbaed72-7102-4286-90b2-d3acbd703381"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f80aad2f-dd58-460d-9de9-1ff13e46a54f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0c0328e9-25df-4121-929e-13f3beb2ca8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c66f9e3d-18d3-4a79-81ca-6bb2439a8128",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6542bf4e-3995-4edb-b61e-bf938fc6e549",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "491f568f-a6d1-4e69-8654-d24daeaa6afe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3a6f159-53ee-4d54-8faa-79ce1d6001b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "387e3152-5999-4031-9b90-9b61859e9b1c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fae8c865-9031-440d-8cae-3392a37e7965",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80f569a3-1517-4f46-92c2-ef1b149be2fe"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13ded7de-5b75-4ecc-8f3c-3d912f328c5e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1c2c4b93-fd51-4b86-b5b1-f4acf4f3af59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "642b2a3a-edd7-408c-a776-22b88e163982",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4820bae0-6acd-4f70-8157-23d1db48ed2e"
            }
          }
        ]
      },
      {
        "id": "4b3ee61f-bd5e-41c5-9b0a-ddd6a4a7b127",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d2e54610-a852-43b9-abbf-4a91e0fcae4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b3c8bcf-e95b-45a2-af50-18dd4d275563",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03bddefb-9210-40fc-8354-d1ca2fd6875e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf4723f-3af3-48c6-a13d-42da11dacea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6d462c4-5250-406f-9aec-05e0b7015770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69765aa-0582-4c46-af8d-f62e6645a3f3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d55959-516d-4a74-8af2-0130407fabe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cbcf54a-7630-4e87-a906-2fadd4fd01de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddd741f-297b-472f-9dcf-7b31c9d36dd2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2728f810-e82a-491d-aa06-8c18494f9683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eff8604e-7c21-4e46-9695-7edc3b2b1458"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c9fc90f5-73ea-4a8b-9e91-31c73f3c5797",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cf1b650-08a5-4fe6-a1e1-fc2c79f9e31b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e2ad0e-d151-48a3-a1b4-94c7a3618c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc8f2bbe-3511-45f5-9df3-99f9d731a605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8707da6e-c489-4957-b63f-7b1c06570dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b91201-a068-4928-86da-f2ea8cbd9983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a98ffa-7b57-45b1-b24a-c3e7b6b64a3e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2674922-94ff-43b7-b962-9e8053fc7794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9499558-13b5-477c-81f9-4a404025828a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645c8087-eb86-4ddd-b376-ee3ca63856f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c46e3dce-4df9-467f-9c7a-075e044e9059"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "95a3d95c-11e9-4d2a-b763-5715038e1258",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91e22e06-a4f5-46e7-ab9b-f699310ed9e8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61a983c3-d217-4fe2-9e3f-ecb8b0d87f03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fd9695d1-d8e4-4eaa-8484-3e9596274484"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a096c0a-4092-4453-8696-9acf4c60ae85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1ff38478-690c-412c-8234-06701dd38e7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d198078-ade4-4d2c-80d9-5f4e1b5b9a1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ebe67e6-dd5c-4f23-9d01-495e9f169010"
            }
          }
        ]
      },
      {
        "id": "1caf4404-5225-4f0d-be8b-6c63c8249059",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a660e5eb-f31e-48a7-9fe4-cda543cf0ae1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0d0a783-22c6-42dd-9ec6-5c4ce81ba0b4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "71a1e0e4-9ee5-4d8e-918f-ef7717f7a979",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29e72a6-1444-4fd4-b7db-3de808ede3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7c5c60-b786-4882-8b6e-2d2f6e466842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1763556-2ca9-4506-bf58-d7d17181678e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1654b67-0e0b-4c28-ab1e-c11b61933116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a52a7a-92a3-4e1d-a3da-66e98a4ca82a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aad144a-d822-431f-b715-bce07400d244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35819cdc-44fe-4264-b79a-5330bdc36009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa7533f-27f7-4db2-be4d-7e797ecec9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de28084a-5c14-4861-ae9f-414694a2c978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36aacac5-696d-4da4-9ca1-c739a0ddc3b7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4632c6c-af4f-4128-be7a-dea2f92ac74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46bd9f0-8ad4-4b8c-8a55-a155f4092bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f99909-5ad9-4783-b424-a57528f14301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9222356a-0b2f-4978-9c4f-e0db64ac1c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d5187b-acea-4998-beaa-6d23d09baadf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54e09f2-f252-4703-b4d2-299e85adaafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6185903b-7480-441f-ac0d-d3c7bc672d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd73fc3-9e23-4d02-98f4-473c087c6cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5b1c6ab-d101-4525-8c4e-6463f0a628ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e07a9f-7607-49b9-9ae6-5eee31b96332",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58658d9e-b220-49ae-8d06-c9afc1434c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1881f29-0910-44fd-aa1b-e6972c2aa05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b4d7cf-aa33-4538-8f78-e3262d7533f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b760a1df-1c96-47b6-bf92-ced08cab6682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b59f78e-e6b6-4b7e-bcc9-449bce35df00",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfc5d17-ed76-49a7-a163-83409ffa1d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954c4f93-067b-470a-96c9-28bbfec488ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083a2b98-2a1a-4025-8d2c-fb2cda342d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7713bfcd-57f3-491a-a283-54041ae74a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764c29bd-445b-4c96-a04d-158668a97efd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12602e23-8911-47f5-ab78-3a224e8e4f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed905ed-c8cb-4280-b8bb-facb8943dc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7259dfd5-b9ca-45d5-9123-15729992b31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca1527ee-5633-413a-8ac3-9bd8f1cabb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29426e5c-fec3-4eb9-8221-7e47a4bfd96f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d7c1aa-2450-4bbf-a279-ace98663e751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883ff943-bc0e-4846-980b-d24aa8fb45d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d25ec6f-7c80-4077-9bda-f4a91069577a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09c988c4-baf1-42c1-ae65-5caa6b57e8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a8db32-bf96-4f1a-ba12-dd603a5f7e9c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6230beff-8314-48fc-b0a1-9316e0b2b9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c091b1ea-ae24-4943-87aa-f1d098c1c578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067a704c-b031-4892-b0a5-0017cab28865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f837d2-c986-42b3-8867-86455e43ee82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d0a267-aa9a-465c-a5b5-ade54774b8d0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea57365-cff4-49e5-b853-7b918e0f06cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1b823c-c0cc-4e77-bce8-a45b1f4f343b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff874950-fe7d-43b1-98c3-d8fcee9b4808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4289ab46-b6b7-4861-a94b-d4829d735e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f33bcf7-d8ca-4d71-8889-516731a742ed",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d123e5a-11f2-491a-a5df-b18fe066682f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c09b281-97ef-4e7a-b5cf-c23cfb9e4d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25677e09-1db8-437f-825b-eabdb9accab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63f56fe1-4331-4e23-ae4e-c9d605b915e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cb1902-f180-4d0d-98e0-3ad937514239",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06763cac-69b4-44cc-a226-806b061044ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca758266-153e-493d-8af6-a04de1c8623e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a085e-974b-4d4b-b0d5-3150b9f22a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4884ab6-bfe7-4f49-a42d-6adcf92fa012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78191cc-cf5e-4903-b8ff-add8321056aa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e8b71-0183-47ff-b42b-056c0161273e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d23a4b-3953-4ad2-99de-f8487a908495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8201e2-a1af-4bb4-85ea-527c6dd75278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb494182-1b78-4dca-9f2b-644f32ab3414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9636a820-fca9-4e44-a6b7-53cb840e9f9d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61eb45d-0180-49e4-b53a-5c2c60088373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3772c6-443c-4670-b225-47c03084885e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358fdc24-48d4-4a84-b3e4-7ecbf680f8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "217c96e6-3b8c-44d9-b4b0-4d944876f065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb0b1b7-6def-4d4d-8a62-d0b52c0afb95",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847c5998-9d22-42ae-9862-af722cd9dcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb5b340-c5f4-4426-8060-f747beb0c9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2627a750-d827-413f-8659-88a1aa7b0bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21bceb56-5099-45dc-b982-5598362b0225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363f6640-7598-4eb5-86b5-c4438b25dc0b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08202ae9-0c96-4366-b481-a1494b0c279c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926f546c-1dbd-45b7-b72e-8c8ec1f68df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa9472a-cca3-4c13-8b5c-5327daea19e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b075dc9-e0c0-4967-9177-0f903d4e54ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546560e7-137f-4ad5-9366-bc6af23c3791",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20a423b-4d23-4a97-b510-090addf9ae92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb077f1-2efc-41dc-bfbf-59d4b87ec829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e5d27f-f5ef-4faa-bc38-1b9cdccbfcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1008f306-471c-4cae-ab02-0eea064b8cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81315b90-89b2-4358-ad3b-4ae5eeba76c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b84a9c-3719-4b80-83b9-23a0f154a60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a6d244-4df5-4df2-916c-fc092e355979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330171e2-b34a-41d2-ba18-2ba7e019582a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd034dda-17cb-40cf-89ab-04451e9a8c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7534e8-53e8-4f74-a4cf-58450a260f31",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddb80cb-fb93-46b3-8fd1-baafd00fd731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99abce4e-832f-4f7a-99a4-6c880122ae42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b11a14-f47e-4f9a-89e6-c7d0b6ff6cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1aa5a1-b5fb-41e7-95b5-f01dc9cc8ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29abc788-69ee-4750-9b13-e7f7df587075",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dbe1ef-c555-4e95-a6eb-5679bea6e826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcaebbf-4cf9-4f19-a823-2a25407ad5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459978ad-fc88-437e-a5bc-e1da6fd14ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "752bc2d0-db2d-40d5-9323-62dcbd51a374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6300d9f8-4e2b-46da-8734-0a17d1808e21",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5278dc-05a9-4843-a95c-ddfb486465a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85f3adb-002d-4ff4-a026-be5a3bdf17b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5bf0f-73bb-4b74-af2f-83ffd2db9a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c554173a-8fe3-4b2c-847a-2afa376ec5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d3a97b-b995-46b2-ad87-400a2dc67d4b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130328f7-bc9f-4459-a901-a2f18ae075af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebe3f8a-13b4-4ef0-9e93-163d2a2fcb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddb7218-b280-4bdf-b465-e2c6eb283c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "602fc871-92b7-413f-95d1-2ece39ee7508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7beddd78-26f4-41d7-ab74-69fc8dd555cb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1afcc1-a635-4b36-a86f-16e45a2c2f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddd7771-968e-4bf8-ada6-f861913db3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673915c0-59ef-4758-ad0c-466b01340f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4369e2-4b2c-4b5f-9ad8-c8a95fd728a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c83626-42e0-4cf9-8d72-11bac99eca02",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3f274c-8c20-4c1a-88b7-9a15248c1211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3f73d7-6cbc-43c8-9226-0dddd1044550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49875e58-4654-49cf-8139-111a7c9bf968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf2a99b-963b-4196-8e7c-d6aa0bf3ae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4adcc34-90fb-4c3a-aacd-90019cc0e977",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c138d2-5901-4103-9ed4-589da657e37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1191f29-f88f-40fc-b8b2-0e6f00fe0f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8468dd88-c306-4114-b896-29ba7846971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af97478e-6ada-4b15-b5f5-b26cc90570cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75daaef6-fedd-4db3-8cb1-705fe0ff7420",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf16587-078c-4bd1-aba3-69961c5d49ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2d0c29-c9ab-4f22-a0cd-eb195d6506e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c79f78-0c20-47a1-a562-7a503c9b7e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1525852b-550c-4455-9560-5e9fc37bbb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2d58dc-f53f-4fa9-a627-111572cd2e7b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27237252-154d-4c79-93f8-a796cd2ff56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b39628-8967-4c07-93c1-e24544fe271f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b882dd-4b83-446b-ba94-47b54dca95b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9031077a-f8a1-4e77-a8ca-249e3b7258c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127c3691-b911-443a-ab3a-c4e63bebdc9e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920c9339-c6a9-47a1-8a09-7b843794c7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee94b3e-536e-4988-bb98-b7e4ff871758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfea6f7f-3ddb-4e14-8187-999cc078e3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "110c15ca-45da-456b-8681-81326ad9f5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6bc47e-b2b8-429b-90e5-aa38bf69c4ac",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f55881b-ad3a-4c88-a201-75a3187bf293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa1bd62-f9fb-4c5f-ae38-e089243a4923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7058541-d939-4790-b720-d1913844756e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f885f535-3b52-4b84-923d-ab9a1155c7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50be96fd-9b50-4d51-bb3a-396178852e6b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55661f67-2f48-439b-a503-e6b94ebfe7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351ac191-829b-4a9f-b165-c25f01705347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecb011f-00e6-485a-950c-1bb85c340dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0162cf31-8d06-4eb8-a2f7-6e0b3de50327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd92cea-36a5-4356-b718-4563b3156164",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9899fd8d-81c6-4a41-93e3-0683f7edbbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a83f976-86b6-4361-b5dc-fdf5fa4e6ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caee4c4-0064-4bc5-b8cc-9a68c31dc75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c0fa72-51b4-40c9-a6a2-7ee22973e463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942f5265-7f3b-46aa-929b-d2bd49e78faa",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ca10c7-c823-401e-b87b-4195c78688cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d91227-efb7-43e9-a814-d1faf077875f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d98516d-9577-4cb5-8cdd-762e3d946460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f779b886-2be0-4729-b439-c1df3e8f315d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7d2252-ca41-4a58-b24d-665bc07c9797",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a46cf19-3b36-4a93-bd5a-2d27e6fc1728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d91a75-2905-4a5f-9f9f-d578f66d1ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b299624d-a86f-4d4d-99bf-7b3caf26e865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb3fc81-d9ff-4703-8306-bbb259c6da8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48de8cf-56f5-45e8-99ca-c402c99eb8d5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7949d5-c75a-45b9-9c1b-f0676a2c5bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c78d9a8-da29-4f8c-ac6e-65bf217c5a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746aa05d-d19d-4d46-83cd-c865561d3af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c08107c1-7906-4e26-b97b-2dae5a274024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26f387b-b4ad-4fee-baa9-3bd288f741e0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63e0d4d-59a1-4459-b69e-5932f7b3ac97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d02777-27b2-4ea5-8583-e634c93997ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb17911-9e81-44f7-83f4-6786572cabb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9bfd28a3-0cb6-48a8-a6de-5d9b7c5bcdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fac815f-9fe7-4d44-bcc1-0229b6577a90",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824b6b12-4dbc-4ef5-9f4e-76638b0b9c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50c4f29c-1bad-4798-8dfc-c639b04fa6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dec3d8f-23df-4262-a01f-92e34907a6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f753b512-beb9-4e37-a3d2-f3bdbb70b81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3691c25-df0f-4354-85bc-b19f56f601cf",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b52aa94-8057-4a1a-b1a2-8aae58f136be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4900c1-133b-4254-9ef0-d041cce2051a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce8e437-fcf0-49cf-b628-208503da110a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acdaab46-b871-4290-adc8-3d0b0f32f99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6721f619-eaac-4b35-aad0-287766022dc2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44baa3d0-8cf0-4c71-ab3a-1cf155b26039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf17b4f-336b-45ff-9490-ebcf3d017c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9953ab-b87b-4057-8534-d2b6aaece96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7244f57d-2093-4de6-ae0b-03cc26671eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6bcfed-e5e6-4818-b73e-a6cbdf4a6536",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d505b3-b1b5-4c79-8c43-17d6fc48d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3cdd02-dd21-458a-a562-0827bfcd5ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740ffac7-0323-4687-93b8-4803639dfa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "200ce93c-2071-4d4f-ad7f-6d25f55c2a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fae2c29-07d7-4d13-ba41-6574ad03cdae",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b6184c-f6a8-4e66-9812-302f99a3adb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e751d6d2-4568-4308-8b3c-b17df3af9892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2340c649-3a92-4c19-88b5-26d6a9fa23df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e85359e-9e74-4367-b73c-3df50c871ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e9af2b-8315-41d7-ad57-733266c4d2d5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fcbc0f-2ad1-4f26-b96d-9461a6831e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754b84c5-9425-42bd-a424-d73a0ec6893d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a40b6d-6118-4d02-bae1-f7b613b8244e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a66ced4-87fa-4cd9-b135-f7a37f229716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683ff059-bcd4-4110-9678-6862ac40e22b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bcee1b-8757-476f-9e0f-6c035f313403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02003ef0-899e-40e9-aca1-04dafbde90f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ad9758-7b9f-4e03-bfb2-18fd96b9846d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8b4a6af7-73d7-42f5-832d-84daf9036732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe7d765-e708-4fac-af6a-eaefa251971c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fce8303-80c6-4ecc-aec9-94d3b980e177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca41e51-cecf-4371-95cc-462659d2c172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473b3784-12b5-42dd-a6c2-2180c26e6e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fead059-ecd0-4e76-bd16-81bceb5a6fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010afcef-e29f-43fe-8c54-3eb3cab03b7c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997eba49-8dce-4603-ac09-8b17a490b601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca66d5a-295d-41d1-bbde-556176ba2fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068b82dc-ae58-4074-9fe3-a79b95f50eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d700b0e-cd6f-46a0-8618-46c5ad44fe25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b701eb-0ad5-4050-9f29-06f7987eef72",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111e1682-d2b3-4172-a39e-a173269c8136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c3d3ef-a027-4ead-84f7-7a4595b7e6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09edb48a-f7d4-4b25-9b09-7e8ce126e75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "804ac6fc-3f79-42a0-9c0b-5fd7d7062c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc08c17e-f19d-41b5-867d-4f905594fadb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc70870-f643-48a0-ac9b-9d5b389b580b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0dbbe8-3592-44a9-a092-afd66bce9a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bf1333-2cc4-4de4-8122-7b159229ef4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b64f8d0-85da-4744-9c77-0f109bf86c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197d418a-403e-49b0-a531-744fdfafdbe2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881c08af-b919-428e-a77a-4120f0de8a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2030dec-b20e-40b2-b7ff-7bb1e05307d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b7dec1-b3ec-4fea-ac02-bc66ba69f752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28d2a1b5-a5ac-43a2-9987-615f9eaa93df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17926537-9d94-4ef3-bc4c-eed598db598c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ead4ee-eef6-4ce2-9675-d61f8645c6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88abdd2-5c4d-44cd-9034-f099998aa8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153140bc-2995-448f-b9cc-6a9002067a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "206b4708-1b81-4b45-acb6-f2503ed2467e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa137f7-7a16-4c5f-8c74-7c47111cc4b4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad8ab86-5bad-4ec0-9678-6651ddc4b0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c37ac28-dded-47b4-8d89-f9a863ef8fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f0a75b-db47-4768-9582-7408d1dbe226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89bbda74-57b6-4f15-ad89-ebe10b674a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1f98df-03e5-4328-a4ba-f43d5a9984b2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e71c704-f87d-480d-9d2c-ca0626cc9ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943e92d5-aa78-4f77-af46-76ea8ab2a484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338c3722-9a4c-43cd-aea6-543552760bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1283f31a-f79f-4214-b9b8-17a540af5725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527a8f46-5c2b-44a2-938a-615a077bf957",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95f3f50-7062-455f-bdda-35322e3666c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d060a46a-b574-4152-887a-ec86494029fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5ff55f-62bc-49ea-b2da-b16e6a9d9249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57ccfb43-e110-43bf-bd30-2831fedf09f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a0f627-7744-4fba-a981-dbbf17a1bf4b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f676d1-2c1a-4cf8-8fd8-836bcc9a8b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857fb999-89bd-4fab-8df2-0601e1f0c24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25543a3-62c3-4d76-a220-1c7f52720763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93091685-0d5c-4c6d-b03c-4897807e50c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e5957f-b302-4a2f-b6fd-5a89e7a70226",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fb1e53-7be0-439b-b846-83d8c2002be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5f5674-3834-44ca-b6a7-c8b8373a6cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c291969-b75e-4c71-9ede-3869f5e718e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "457e4613-d782-4519-834c-f6ae3c9723d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03900f9c-52f4-43aa-ac19-3a02d27da118",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6288bda2-a221-4fe0-9e58-650df4ca9da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2cea80-5cbf-44ff-a38d-d38bee329817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6119e214-d860-46aa-876d-5cdabf8b699f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82394e2e-ced7-4a84-9815-6095f7ce1e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43551faa-530d-4f99-8371-918a5b2ae6b9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f364b0d9-744b-4d9e-ae69-3b0750a721bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83400d2c-6065-4d95-81ca-82ff42dc00a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c83fd7c-7ca3-43c7-b476-26b32963b4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a457c1c-341e-4c6e-b6b0-296b79889e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c3c097-4a2f-4164-b74c-3be13aa9a32e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3ba504-596a-4e5a-a804-7adebe134196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a899d809-c48f-44c4-897f-442e7ac9288d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b4af6f-1507-4997-bdbf-8c3c9b04c697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "accf1e54-516e-4c0a-9b38-2b05c15f3082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfba044-2d54-491f-9150-fb51cc0d0a07",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff77b9ae-45f1-4f1d-bcea-d09baecbfce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a81b34-8a94-47cd-9c2b-824923e03dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3c60d2-89da-4067-96d1-bf51f57c6af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf17e136-7157-48a4-a840-165e9a6d3e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23831314-b2a4-4492-8a7c-03b37f5be819",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df804da2-ed88-49ec-a447-3aa94ade83b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b832065-cbaa-4a53-9507-691cd7db4d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67111118-1f1a-4bf6-92f4-7afe1b5bc681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd59da6-f9d1-4280-a169-0864db387fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f08eea-e0f9-4f80-9e8c-f7747a097e67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4610b75-5b57-4a4f-8b45-308c0733060c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce55db1-b1eb-45b6-8244-a0212d5fff3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f26307-11ec-4732-82b3-2023b0c5416f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1550c73e-406c-4d6e-8f41-0f9a4f1c2dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32343053-bba4-41f7-bfe8-918b60ba0d79",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86b278c-803e-434e-8d8f-d4549ccfbe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b984a9b0-3b39-4374-bff5-cdfe9e5e279f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858339d0-f42f-4242-8dd0-0a36cd6b5a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "601004c6-344e-4c39-acd1-82165f813723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8f5519-0c7c-4b1e-9847-7c1d213d958e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87025e3b-8961-480b-8087-cf88fcfc553a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32465c4-ba14-40b9-85b0-5caf211fbb1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e64799-bcf5-41ac-8c5a-a2835f34c837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6484b7c8-4ae4-4d6d-a298-7ebe45561ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2638ca08-245e-4713-8624-9b55c03b4855",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d35970a-a128-4f77-ae05-45ea948a61f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74158527-41b6-4c03-8d21-ba8d90645726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a70291-730c-4ecb-aba7-50741e107c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "52be42cd-20f9-49f7-8d33-a6ba14eea508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17a4f1d-336d-4062-a6eb-ff2d3e0079d4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5410ca07-3107-4f29-affb-73928541650f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f736e6-fd8c-43f9-aa2a-7c987ad1859d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459c8292-96cb-4f25-bd27-376076dcdbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a5ce86-74a1-4063-9e1d-8e3f773f57ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1036cfd-ad8d-43c4-a7ef-28b9f3212520",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a345e252-39e9-4dd8-8415-2ff25f6a23b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad52dfa2-d007-422d-9a96-78b8192d6b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e1179f-b005-4852-a107-903da18a15ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0419dcca-2df0-47ff-9095-6502b973fff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1885ad1-f7dc-4c47-80bd-ad5cdd09beaf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf6ebde-a7fb-4d31-81aa-9ccacfc8cd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cca81da-ba4e-4204-8d69-a356e03e50d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5bcc41-6641-4dc6-a985-ce510fc79239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16da57e2-5d26-4440-8be3-bda9822eaebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d1d2b3-11c8-428d-8450-d870ef0b0078",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6836437-655f-44c5-883f-d7ac7ada64fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcca82bd-bbc9-4cf5-b124-fa1e02be5b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657fdee5-594b-44cf-a1a3-1078c11027db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98c19a7f-84a8-47f3-87bf-32a9f82e8dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a8ee52-cc12-4f43-8d1b-8a3410174fb6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5523d69b-e541-409c-807d-af01942ed550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560a42b5-aa83-4938-9ab9-672c63cccb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ca9a51-be67-4070-a579-6ef4960966ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44ff1763-a701-495c-ac80-0cd4514c0d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53e65bd-1aef-4d88-9bcb-a183f27ab7de",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8240ce4-5045-4dc6-8089-e2565008663a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a002529a-d4c0-43fb-9c57-1158f201f6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaeee8b-ed7a-4661-80da-12b2f1225679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "62f1c7f6-8b6e-45ac-96ca-275b59f3abd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809d73c4-59dd-4779-84c9-a744524ea934",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6a7e6a-334f-4b1a-820a-c331628373d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c4b416-1a59-4400-9b28-d2a7dda6e396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4355c6-8894-499f-a3a2-161da245ca69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09f688a3-8aca-469c-ae62-941df3717922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5856b874-8dca-458a-b0c4-d396bd281d40",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e9649f-0535-4b9f-9cb4-46658fe9e44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bc489f-8b1f-4efb-9a48-0f96396cc23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c78f56-d9c0-4bc9-a8e8-7e7889572e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "678ab883-2653-4deb-bb3c-d430f01e6d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6218dcd-e548-4cb0-9f06-b898d7da4838",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295f330a-6e3c-4476-a132-7845189b3809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ed85b9-4ed8-4858-9863-1d7d78798cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeed1baa-2e45-4659-8097-e22431bcc7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b438bf0c-2eca-4640-9bfb-aae2224e91dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4b217b-8231-4e93-9394-379a85b5d1bb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ecc0e6-08ca-4393-8a17-8cbf685d26cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7cf874c-1914-491f-a1c5-a0060f3e1390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbe41d2-b8e1-4f0f-8d35-0bd33acae3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61bf39e-d39c-4b19-aab7-085f3e9705a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0ec7fb-7689-4c59-96e3-908f715eed42",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1476c224-4ca4-43f1-87a1-715d48440bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a8ef3e-7065-4139-acb6-33d6c47224d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf81d03-5a06-4d07-9a30-21d66eaf938b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdeef46e-d4b8-40fb-9726-cf2dc2d6285c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e82b22-be1d-47b6-9d9a-341449c0c655",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb163744-d927-4dbb-8852-3ec385946aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd3de33-2c80-485a-ba3c-941ced57dc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba35559-dc35-47e2-967a-b759a2a9e5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81a8f79d-012a-4337-86ac-b17e74f01fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdef4a28-9344-4c3d-a28a-31cbc24673e5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc613504-3e22-4cdc-950b-0f559ad3cec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e37f3d57-6dfa-4a3a-b611-a43bf55395a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7489a48b-560b-4673-823a-315ab4050927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da4cbee-dfa1-4ece-bd28-1ff6eeef5c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bead02-fad8-4d33-8a01-88ba87308065",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377d49fa-46fb-4e16-871e-07907e7a00b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad5fbf1-ee70-4f68-ae55-e1b9a83918ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d932907f-dd05-4366-a089-fe6f32ea2672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3cbc48-52a0-49fe-981e-267d561af372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185b33ab-3ece-401c-b4be-a236a507cb87",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bb88f8-60b6-4993-a60d-16fd1625d949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b88721-5d3d-41b3-a6e1-a41c5897670c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa393c8-cfbc-4d65-82b5-e87a06ff9ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fde7f9d9-b5cd-4b10-882a-0d955d6d0d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bc84d3-0ba6-400f-bf3b-efe55de513e6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43b3056-04a3-4dee-bd40-26a570186cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28061e2-8bd5-43d7-8e6e-2f505d0dccc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c008b60c-23e9-4ea8-98b5-7a20049225ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "feace9be-625a-4333-9900-3c8458f639d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0033500-f9bb-4ddb-ad6a-39e6bde284c8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1581b7cc-9015-48bd-939d-7614a4ec49d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f7945f-709e-464c-b470-835b2b8a1c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a3237f-50b6-4fbf-a6ef-f89a91462b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ec1446-0692-42b4-86ea-c706f4668abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab42ba03-f402-43f9-b536-d41655ef63db",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44886ed8-cfa7-4bde-b06b-6a5fb97680e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30aa7842-f914-480d-95f3-e6dd94b8fa2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8fe16e-0cba-4b87-bb5d-602cffd4f8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cedddb4-fc9a-40b7-a7ce-de1939ea6fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52de20e-9247-49c7-9aa1-02b66162f755",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cff558-7d25-413e-a70c-e5aae3618515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a21f1e-0c86-484c-9607-6e9c654b02ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fedf71bc-7ceb-4984-aa09-db550ef4b3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e3a8b36-6d26-456f-8f58-bf86cab263d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f270839-f580-4eed-b0d8-d9e344ee44e4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67eea550-3573-4343-9820-e90dee861823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384b48a3-32ca-426b-b929-c9fb55ce3639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549f72bf-9721-48c5-a5c7-3cca75616766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b11598-5f62-4781-b116-41994fd2e505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6a64fc-d786-43ba-87b5-cfce816530ee",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9987a54d-c6b3-4e38-92c4-e45a7d06d4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd4bda6-98c7-4670-9057-f9ceb908c798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe612035-ef8c-4825-9cb7-fdcad9e457e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce4a691-10d7-4b54-8f5e-fe04ff64cffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dec3e43-8e94-4f81-89d5-b4ee70cd166e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a310b7-8e70-4996-a19d-5b902c0b2d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb649bd1-605d-4c4e-a5fd-a8c650b78e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93556e9d-6604-43fe-b449-fa1d5c614fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6ba806-09a8-4b31-9053-0f9e12dc5c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dd1e76-2dc1-4010-89f7-e5b567ce7666",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd783e-1fa8-4574-9d74-072835068144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e35444e-995a-4a2c-a587-bded515de619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1332e1f0-828a-4ca3-9485-0ce0c4e4a02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2eee73-afc2-42e0-8092-a6dbad556b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6d3e2d-69bd-4134-bd81-9f6152a4b270",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2123caa-7933-4269-bb64-d60f6bdb8577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2500a7ef-d98b-44fa-a7a3-b95487e98903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5986d-c1ab-4572-9d18-3de6fbf585dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47bacbd7-b031-44d7-98f7-065bf92616a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b20a82-ad20-4d7e-a9e3-300747e50fa8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f47d5a2-ec26-4f99-a1d3-59ae25401471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fc988f-c80b-4dd2-90c4-95886b251aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffa094e-e750-4d46-8052-b6e706b78fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "127332fd-0e6a-478c-8caa-955647ae056c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03994d3b-a7d1-4149-ad49-0a67a664f1cd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081dc443-578f-4b33-ba42-f5dfca55e7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc66247-d19a-468c-a8a3-88c55500dbdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767c0276-d0ba-4587-b85a-a89dcfd4b810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b18ac6a-369a-410d-9bd2-e029f24d845c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f1a8c6-f3d5-4482-8ac6-f72b669f6733",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6953a1-afa4-4f79-be82-f3f39594086c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bb4545-8bcf-4353-8469-c13f81585e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab33ff0-5599-44fe-9747-693cef6feba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "90a05afb-6b99-4edc-bf20-2d6f54a5c904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750515bc-4ac4-4479-b9c3-f8c1d619efa3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd7dc0c-1a33-40e2-b69a-3f5a58544be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2aa4a4-d6f2-42e6-8035-b1963fd717c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2434cf-13e9-46a4-b1e9-0f08f5c1f2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "69a57b57-79a3-4feb-8354-58dd99b75a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162b7ec4-3971-404a-a63f-79828e220c40",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5957d9a3-8a3c-48a9-86f2-5da8099f7f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3750baa4-dcac-44b9-b792-af6f651e34bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c4dcb8-3556-4c68-be12-03a33eca70db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c69f8a2f-6b73-42aa-98e7-95f6cdc53844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb372419-5d8b-4ed5-8da0-a37f48647fbd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8d58dc-f5d1-4fd5-9b61-0825a82ad7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d5ca075d-0d14-4999-a211-348a528d3963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fdddc5-afb9-40ea-a6a9-32382de2aa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0790d334-f0e9-4793-92be-32b65c266c43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c159ccf6-63d7-46dd-861c-c327ca9e2241",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddd6c71a-f9a4-4ce6-907b-8f270f867e67",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c72b1a3-c786-4912-a2d3-d277bdb6ec14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "488404e4-a45f-4f6b-abc4-3bb0098ed7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf316605-a9d4-4485-8f8f-9e77d9a8bb7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4fceeb93-d48c-4bc7-a2a1-e541a98ffc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df48eb0-e904-41ea-bc0c-0073e8f3a260",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f188fc99-90af-4ae8-a6b7-14c70db78de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6ac8253-0d21-4f9b-b872-c08c7da6569e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93318073-0b7c-400d-8c11-8f1073329408",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "324ce0d5-d82f-460a-8e1e-669a0f044f18"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6941daf3-5aba-4f7d-b6cf-ecb7b5a900c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a46d822e-7aac-444d-86f7-83aba2e67124"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f974f8f-4f09-4c6a-9a51-ff74ede37be2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "305d4068-8d9a-4e8d-9cfe-af7ece3e4ac9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73c9e544-0a9b-45e3-8631-d9fcead6a47e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09a8b6f6-8881-46a3-ad96-26ae57c377bb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8f411819-4750-422b-a8f0-4e9e12e8c4ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "115cc5aa-876a-4d8f-915a-654bfd3a9fb5"
                }
              }
            ]
          },
          {
            "id": "00555133-89f1-4a13-a9d7-889b5c09f0ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af3fd1e2-5628-4c1e-960a-41342d13e321",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2141a545-5d77-485f-bd3a-86824402bca4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3a70a73-c30e-4603-a05e-fdd63d0dd3cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7adf4a32-e221-4bf8-9804-c62447c5af87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf405118-cd8b-4efd-95b1-32636caf8c21"
                    }
                  }
                ]
              },
              {
                "id": "daff2727-26eb-42d2-ba40-bc1281d65eb6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b61c1169-bc30-45f3-97df-37e8fd59b858",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bef36b0-8900-4d12-8b69-6ef44ff34388"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ace6fd27-4046-46e7-9990-7322f3b3451b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6caa6e14-bbd4-4973-a365-d844f7a46f18"
                    }
                  }
                ]
              },
              {
                "id": "36d62700-6077-433b-9473-cc7bbc7e7f55",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fa42255-ff49-46a8-8fa8-24fdb7bf7d68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04267500-cd21-4c84-9853-48d9fef63d3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98b7f51c-67fe-452c-b09b-583f1d4bf00a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c4108950-a344-43cd-a87a-c4b23cdc6b1b"
                    }
                  }
                ]
              },
              {
                "id": "877e82d2-678a-4282-8b22-f1f7b80529d1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d1de47e-0f7d-40a2-8201-53779a0efc9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff7495fa-8fed-4f07-8263-7be0226b0785"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46ee07d8-5e33-40ae-a63b-f11b8f227443",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "65648334-e30e-4914-b78a-11dd37196e3b"
                    }
                  }
                ]
              },
              {
                "id": "9d2e59e5-c48f-4726-90bc-44c0b4c45672",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eb352c9-97e4-40e9-ab69-33d72ace647e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d461478-b8a5-4209-825a-cd7a8e7cd4c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddff19fe-5ea4-4d24-9a2f-035bfca77600",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a81dba33-cb58-4c11-b0f2-682fb9b3ac00"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "767452d7-91ff-43dd-90f4-023e3b7630cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0c776db-9d07-4ec8-a471-c72018fe469f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f2350fe-786a-4010-a981-d41a8d8b49f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80135ef0-c2b3-4fe2-b119-d72a5d370196"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b30436b-120b-4171-b3d7-510f59d03fe0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c9396105-6664-4dd1-9a5d-ca4a6d20dcee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b39b6808-c65b-4974-a15b-00118335fcd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "917bbb9d-0547-4db6-843e-64662f69bb1b"
            }
          }
        ]
      },
      {
        "id": "852b6975-9caa-43bc-8fc5-095f7cd40837",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "382611f0-c247-4632-ae49-649eba4b286d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d95b8cb9-c23a-424f-8301-8384ba2d2250",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4e42da9-c4dc-47b0-9e09-ea2cffe664aa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b74c045-ebff-4450-a936-1d543280b302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10e685f-8a4a-44fd-81d3-3979a2bd6611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eea967-0f0a-4ac5-9357-3067e63575c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "61fa8635-b0fd-4b8f-bb52-2082c0a185e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8436b5-1760-4004-98bf-7c2b3a5c5386",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de5e682-c042-4a96-9e84-46fcaf3d5a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d0c2c2-7f30-412b-9e04-4bc5b0b1e52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b35ecc-0317-4b94-9c49-c5d2eed5eb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c101dc-d11d-401b-9ed7-1ecd2d789200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cc2b43-1bdb-4e74-b502-75aa0669a2e4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf0a22f-f41b-418e-abdc-60022baf5d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516fdac9-ca7c-4735-b0d1-21fb9cf8a386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9d8cc6-c258-4729-8c49-419d7bfd6cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f05ba84-3e3b-45bf-8c6a-67299f138fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72383dde-b29d-407b-9f28-bb231e78e6ae",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c893114-1150-44ef-99cb-8b412b19a6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f403587-074d-4fbb-94da-96b95706d1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5aa8a1-f897-491f-9b08-d5ed4048d23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd66ed40-8270-49d6-8a9f-ad07b3d9b09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7478cca8-dd03-40a5-9314-64f3e81138ac",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7dc7f8-419e-4e12-8226-a3d2f3310cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3185808-0a48-4ffa-8c15-76e58498b0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4e7c56-be09-49c4-be8d-38923bbab46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14581236-2927-4520-83e9-9899e572e88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93003b5-4a26-42a0-be25-5f7323cae35d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd300f7-b73d-4ec8-9608-6959824854d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9821d14c-a3d6-47b1-991a-f22075863614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179f6577-5b7d-4999-8682-1c6273b06a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a3cfff-bc40-43a6-9d73-63fbbe6dcf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282e6ea0-d7f9-4b5b-a9b2-6c03dd4e86c2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5627f09b-2fd1-4d40-956b-c64394d2fb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692bf1ab-4983-476b-97c5-69e6a2e6b553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcad473-19e7-4914-95dd-ddce20cfbe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d1d019-ff55-4a13-90f6-229b6bd0495d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee7581e-7550-4efc-939d-4d1051c0d28b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04223fd6-066d-49df-a44d-1ebcc24460e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f872c16-2e40-4d6b-9e53-71779f9fe635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4af8f9-01fc-47c8-83e9-46f92f0141da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bce92527-0ee8-4950-928f-23a8552e3767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7567d8-37a7-412f-876e-2aa0f983a690",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ece6e8e-72a2-46d8-9d0d-c39c44867126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7048b433-4054-45b6-b944-bec4c92c14ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea42a5e-584c-4bc3-a903-e8ccbfbadcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4212cc2-07b4-44db-90ec-1ca6aa53c32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4353e639-0e69-48ac-be12-4be4fca1b7be",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b55841-0a9b-44c4-add8-e6fb254e9945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a30aa6-8ad0-4130-b1f2-fd412a815fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c911738-33ea-4afb-924c-90d990bb9b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5805765c-c149-43c0-93c6-44cacb6c31dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7b7a15-6c09-4d6e-97a3-20827195d420",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8b5fdb-0f95-437b-9b10-76e8d2b2df14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2168f01f-0e7b-4d7e-a8ff-cdf90e0de6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a3796d-f476-4570-a7d6-46e80ec35485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2400103e-5efe-4032-92da-566398ee193a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a7f2fc-8af3-46f9-97c4-0bae665469a1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee875df-a118-4b89-b5e8-92afcb04cf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dded77f0-42bc-43de-80dd-2cefee807b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1893379b-9dd3-4474-8f7a-e6866fbb4548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e218117-5982-4cb8-92ac-f06c15ca97a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c63521-4fce-4bff-af34-61d5f5ed1fe5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291696a0-62a3-4ab4-8a4e-daf82848ea52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df97fb46-2eab-4dbc-b4aa-fd9273fd9291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacf1ede-58d4-4ff5-9982-bbc98b2ee6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "690923c0-a9f7-430d-a5f3-13e49e4c8850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264abd6b-86fa-490e-b70f-f3b29f1d2a12",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a710c6-374b-471d-aa39-f5c527aab990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0847c8f3-e82b-4fbe-a2d4-02b2b5b8beb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1518fb97-7355-4543-a582-3198a99873f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4267163-e3d4-4bad-9013-55d508da040e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7b1252-479b-4232-90d6-05c882ea9696",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa02b5a6-0f65-49e1-bb1d-5b71375fd5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f59190-2522-42aa-86d4-a0b26ccbdd7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a60dd9-c642-4136-aed6-a3464b9235b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f929e4cb-be0f-4fd4-8bf7-2993e1c046c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b51ffc8-b978-4a10-a085-e04f2c9baade",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3364ac-6369-4494-aef5-d0b1808aa491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2305c9c2-3c6d-4cf0-a582-738c348e51ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a6476e-839c-4e50-9ce6-3f09aa8811c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f54dd4-72c7-48e3-a453-af5dc5d4ab8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d15c88-a400-4cc4-80cc-85673ef3d0bd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cb99d1-89f2-4b9b-bcc7-d6cb6be7b625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42918770-849c-41b9-8d45-d3b4a664b842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19114abf-a045-4353-a0f8-303ce1776d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6da07c-6de8-4dee-b298-63c6fd6ddc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7f99d9-0dd3-4c2a-92ea-540b204ef411",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03aae3b3-fdd1-4175-8147-a9d329e6f2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e75fec-823f-40de-82de-e8e648b6405b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5aeee4-49d6-40dd-adaa-b89c8432d83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05eede29-679f-4ae7-81aa-e570f29eff01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd03d90-7f12-4fe7-a171-59736fe22c76",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94c657b-e179-4d89-a504-d08c559e1cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c389e0-19d0-43eb-a349-b6007d28a08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf641db2-6298-4e06-ae96-4ca939a4a96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed460d9f-7f3a-4b36-8327-bad7b2586cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1410e3cc-1be6-4444-b3d7-33e012be07e2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc92f40-9a3c-4607-96b4-024e58b04202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7880184-09d3-4f7d-8bec-587061256ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b526ba-38a0-4b7f-afc7-c8fb1bdcb4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d0fef7-5c6d-4364-a3ae-2a98b005d0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f8fe65-ca3a-476a-935f-5a43fee313c4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57dfa8b-88f4-4baa-b354-22ee10dbf994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d03ce3-5490-4e00-95c2-524ce9e31b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bca1f2f-787c-4d26-8a8a-1ff7ee5b3c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "685f4395-f946-4244-8bb6-7a72244987c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f57238-920c-426d-98d1-f021e347f586",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a0d50b-27af-49ba-b156-cb9a13339dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be5ac9a-d372-4f73-b84d-27dc7c890dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec75654-24bb-4792-8c64-b80596a85604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "627709c8-5b4d-45cb-b908-eb63915ac253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e50122-bfc6-4f88-a171-ef36a42a27ae",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd64c30-8a95-41fd-91ae-44de9e06bead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a645b443-07ab-4783-865d-6574bbbd03b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33de35ed-c470-4342-94be-122c1b874359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "762487e2-dc86-4cab-a77e-58f0be65f7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339646fe-1f4e-4f1d-9773-7e1d40168fa6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8614ceb2-d799-4379-9932-363e9af3bcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274d21f2-cfcd-4052-b356-92728ad5f455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d2cc10-db99-464a-aa2f-8fde6ffa1bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73da247d-0134-44cf-b0a2-a56f29583768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5594a3d-1387-49dc-bf31-c88292a0eb73",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9283c8da-1f99-4c07-b01d-71c72839dc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df4f002-24f0-48ce-92e7-706155165214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d29e3ff-0dde-42f5-8078-04784a4836d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c13e0baa-1dee-40a0-9bb3-dfb0e66821b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37d0d0f-0f9f-402a-8f71-5c04c66ad185",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74f22c2-741b-4cfa-8ee4-a415acd8aa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d3fcc1-1117-4738-9cff-5f9794a51827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad14c3ac-e6ba-4984-8246-5174997d5e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "260f6e83-cc6e-4c06-9b0d-f8e121cda1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3297af29-908d-4c7f-bd05-e7043c5c1faf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dc7c9a-0482-4e54-b2f0-bca40ac52942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cec0d6d-15f3-4eee-a989-90b8d2559d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da659e21-8090-473e-a84f-925e2f368acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2c6130-71a2-484f-b4f5-a17a94e023e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d03fa2-aee4-4b16-98bd-2747f03e94ec",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e817f93-458c-493e-aa8c-769d32354c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3277101a-9843-4b6f-a820-37fb5fd3e689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da7c309-d05a-4b18-b3e7-d63ecc8e403d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "946c0f3e-4833-4427-b912-2de04b4adc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835e391d-26ed-4ef6-b0aa-f6b251d6aa5a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd070360-34de-4b1d-b6db-2f407730e1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9cfe72-e0a7-43ee-ac1f-24581e5e60d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb77f9c-93c0-42c7-b7e4-9564d7f1b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24b7291e-09d9-45a9-aaac-a5701c2dadc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ccccca-55cd-4f40-aaff-bd271968e954",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b611d23-aa4f-497b-9817-35123d3a5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0988aaa7-cf60-4fe7-b6e0-b31db0c36bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40b52df-0ebd-4265-827f-cb6b20c6307b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab1e7c3-6954-4cbb-aca1-725d08911c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25121b7-8a4c-4566-b701-964b022bab89",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a2e17e-7ee2-4a57-af5f-517c6da0b720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243fb4bd-c797-49d4-8319-19768df96903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da0a465-f252-400a-9f94-4c51237671d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fe3c6d-07e9-4edf-a3aa-60dd8ba15ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ed60d9-3aeb-4a71-a13a-ccdcb951d368",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70875842-5f3e-478f-b780-22b844a7ba95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09c9d81-5a9b-4ac4-836c-2d4ae756a765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0352072-4fed-4727-854d-83a364d38a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36cc5c65-2a59-4ef9-90f9-13b0cc98f80f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "68966314-0d41-44c5-af82-2c36bff62235",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1fc31f8-cd10-4ebe-965d-1769e4ffe755",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e6c7e2-3495-41fa-91a8-190c04d4c15f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6587c1-dd1a-47c8-9a7b-d5cb45114512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b59ca86-345e-4ae1-9ef8-4f30b58c6cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d7ce779-d923-4823-9f61-851c5be3a0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f16e85-dc79-4701-9cfc-9533d89878c9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c5c253-2f36-4c95-b692-be6556383564",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d9b2a8fe-09f7-4b02-9602-26b7c0a763e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28deb6e-f700-4139-a11e-898538c843c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de4d1258-e6f7-4681-9220-a5ad0a84e6a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2da6dfb9-707f-41bb-b1b9-7d663f2521e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38d04154-0a77-4e93-8cc8-c8217a23e42e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89b06965-7506-4a31-98d8-ec5197fa759b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bcd62ef-4cfa-4209-b156-71500a4a69f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3924362b-ad9c-49d9-9e88-6ca00164040a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95a94608-d5e5-4fb7-bc77-4f3a5c075b39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b7a83fc-a4df-4800-a2b9-47bfe0fbc928",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc4588aa-34da-4138-9c43-2c65e20192ce"
            }
          }
        ]
      },
      {
        "id": "ddaed39f-7aae-4364-bbb3-924288d314e1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "160747f6-bcd2-4987-81d9-413b209d9e48",
            "name": "Negative Testing",
            "item": [
              {
                "id": "969c5900-ab55-4332-a878-a5fa7cba9e50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f265e7bd-647b-4882-ad79-ee70ae78a4c0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93727c90-0fc8-4726-bfc7-7a13fba6c7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67393b5-af29-4691-aacd-d86173b1ebb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7f3878-ae82-422b-8213-f4a099a6788e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4327f07-0fcc-48fb-9746-9bf579cfc227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2e82c5-4715-46fa-b329-9195efc1d1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e42e71a-c15e-46b5-96eb-185972821889",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d868f52-78ea-4f77-a257-2721b57ecb33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a26243-3e66-4a57-9029-9654f58f3819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d5a314-2396-4335-99c3-8cc67e363666",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cff1f55-793e-45e8-9c62-0c0d9edcad76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead62593-2c1f-46ea-a327-7ff98abf8ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9227278a-7503-443a-81f7-eb9761914506",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c28b31-424b-4c74-8b31-d0a1c8abbe6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a1f4f1-e892-462f-96c1-dd5b79296c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdfe998-e7ff-41eb-a338-98d4c0c7d351",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e44554a-4cc1-4d89-bc7f-c09ed627d129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fbfa3b-d304-4566-b179-cf405cd39010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8164b4-1dd8-497f-ac17-1756aca8f0cc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b1307f-e5a5-475d-b613-e5d263f81f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3014ff0-4813-4d45-85ae-68e28bb1dcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2001b335-cec5-4448-91ef-4e68eda3c72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1681f1e3-b851-4e87-88a8-5cca01c3b967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be1db6a-e6ac-468c-8945-0539b1c3506a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa0e941-e9c3-46c7-a6eb-fa0199c46223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a73dee-cfd8-487c-b459-f6ac8e61b621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5d6baa-c6fd-4067-bdd2-f60b9ac33a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19b08b7-8936-4581-93e6-8e2ec930d076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8946fda-2788-46b1-835c-561a4ff6c20c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f64306-fcac-44f1-b2df-19c16726b8be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b66478b-8d62-4817-b4c6-e88005efaea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba70467c-bb32-45be-8c73-b1536629fed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a17caa7-bc04-4d9f-a2e8-3c6db7aa93dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91434a5c-1779-4550-b7b4-7f2b6457cc9d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d532fb3-841b-4733-bfc6-5fc0ae51b6a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fe40fff-31cd-4358-981b-ad1e295a3683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08cc264-4aba-496d-a417-25f30d2e5782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2a4a15-30b3-4a48-9d4f-3127c77c48be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0f2c43-5e48-4bcd-a63e-071fab825861",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d80dc9-4b79-4ca2-a31f-434c75a613a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b13c9d0-6ac6-4f65-9364-52de457c0d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1eb53e-2308-45d9-b027-b8340e89045e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fda0726-1915-4896-9ac3-3c311a37eefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4da69e-2793-4c0f-895f-21e266fd0811",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5af2083-7ae6-401f-ab4e-aa9c879bda09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b386f51-c815-422c-b1bc-f976207e0e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1442f1f8-8017-4404-a2e0-cc11e8b91f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c119567c-26ce-4055-92e8-3b15bbcd25cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06283e29-0ba8-4cd6-8321-74c4ca4c9f56",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283f9198-07bb-4652-876d-22610d18fdf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4589b541-d96e-4de6-8118-8cc740900793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f70b01a-88e1-4e61-817d-8b81cf633917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b566b102-6a49-4dc9-9079-fe906db65a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e01e2a-51d0-4be5-8b99-f81f8587fa5c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90de5cf7-0747-4acb-aefc-e7ea72122eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23bd3d49-f06b-49b2-b1f1-db9ea5330891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431c2b71-e746-4561-b2dc-1ed90cf73e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577b6537-e831-4aae-a685-860f51fed37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd56227-2c2d-46b6-803e-d9e173d36df2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525adc0f-ad21-4d3f-b03d-82321e44f4b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abeb83fe-018a-46c3-ad8f-ef0a303ab53a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab299a13-19bc-4821-8c7b-2633e69c3e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d53ff6-5a37-4eb7-9f2c-53a003a6ec23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c049e3-f486-431d-a55b-17b45142e684",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77acf5bc-4e36-4438-9f57-df9375ade6ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0175a5c2-e9cf-459b-9f8d-ea6d786091f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b9e358-92ba-47eb-a295-66e077bb43c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c622f083-4c68-439a-9ece-62554f66f687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9d238d-63a7-48ad-a747-640408142be9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbed8640-accc-4bd8-92fb-fc4a0ace576a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184505c4-7c01-420b-bb78-902b710d721c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb585c4-6935-47bf-9454-f8e65f2643c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1c43ff-ce2d-48c2-93ff-36e64dfad10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d19522-b496-48e3-a111-0d88eef2c6d1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed47fa6-7853-49e8-8483-919eee15c632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35d43ab-f053-45e1-9b5a-07fbcef929cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ec1cfb-0bec-471f-b55e-df42eb3f396e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bc20aa-d93d-48ba-b5b5-3fe4437badb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481e5a17-1dd5-44b4-b054-a93b6c31457d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91d2f31-8e4c-4980-8859-fb77febd7459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a665861-07d4-45e8-889b-5eec56cb50e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b82a12-8e46-414c-8fc5-f19bd4ae4562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f9f689-f711-476d-bc92-649b6f8beec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b04dcff-2b6b-4b3c-9a58-7876433a402d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa060a87-e004-45e6-8a73-7726f29d080f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b66fdb-2aaf-43a2-b688-9d00789b538b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b98af63-a408-4f3c-93de-b184f781f92a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c057ed1e-2922-448c-ba65-78066b9ef0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0977d177-aafa-4a13-8465-f0746ceff18f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf79a5b-472f-449e-9bba-4fbefe433b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4a2341-dcd7-487c-8d6d-1e476d47d324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "628f59b1-ce42-406c-bc33-146ebcc393d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b938056-d78d-4a4a-b403-09bf6202a8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eceac445-9e53-415b-b8c5-20899a6e7fc3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eec1983-ec4e-4f1b-928b-843f049573dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5346a6b-394f-40ee-bab9-5c535aa4d41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a249b592-7c37-428d-9631-a35edd33dbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1720dd-32e8-4945-8929-2e772d9d3cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117ac775-7c47-4ccc-990b-eb34038a3707",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403bd4eb-7bc4-4254-8549-d02344f5cc8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc6c2fb-4f94-4ac1-a2eb-884e6be4f8c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71aa63eb-1b80-45b8-8607-ca7fa5382d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5880f51a-46bf-4615-a994-ef076d5fbec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b6b0a4-a209-46b9-a8e3-73b7871c1406",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97ab688-e7ee-4d4c-aade-063c4d428e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca47a59f-756d-4430-9ee0-dc2bee9b427e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4747d8a9-ddc2-470b-a07a-64fe9c992392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf54343-a6ec-4fe6-bece-e017a7715343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b7af61-6b63-4c51-8b0c-6e639639ad4e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc0562e-0a50-4770-bc91-b16b70be0f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16d95d88-fc2f-466c-a17e-133856f33079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3061d1-8398-4436-aad5-a33cc51fdd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36bc2dd-9305-4192-9e32-efc2e12dc979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1d1682-6029-44fb-9ff3-6e74fb4949a0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2a9df1-2628-4d88-a549-52f43bcbe338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "912c07e2-22f1-497b-93fc-cd00eeb7caf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed71cd1b-816b-4205-97ff-cd52bb5fc2ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db704c6-fc0f-47c4-bb1f-66efee174cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defdc3d1-62a9-449a-8313-183ec1be8975",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b9b150-8f8a-47bd-8d84-90e836a7595d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756a53cf-868d-49a5-8ccc-a80f4fbd409b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3de9f6-5f1f-4c99-ac37-5bfd32042d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec150bd-1994-4d52-bdf8-88ad458cc523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456561bb-9eda-4b45-a732-26ee16d77437",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ae228a-254b-44ad-8252-e0c9ece5537c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9284c5a3-a91e-41d6-aacb-2c8e7b7753b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e2a3cc-1620-45bf-8d79-3cef45a89367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a9f36b-28e9-4925-b910-b2f430d5a519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43e9fe8-538c-431f-bf91-93b83047cd38",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e124ed8a-1958-4fab-ad59-38536c843340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ec3674-e158-465b-a7e9-b67ce58f735f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bff981d-a4f0-40a9-89f6-07854d5e5859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd3a048-01f8-4fad-b4dc-5aa99081f20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a49cf0f-bed9-45bf-a440-f1539b64dbce",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9ef275-7cc6-4310-bc0f-435572594929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17e6d71a-2b26-47d2-8c1c-fa9d6df119ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41dd250-4b9c-4cc4-a4ee-283f11b4a32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f59d5a-3374-417c-907d-633c9f9de1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd495f14-837f-4bce-b21e-b536a0130f73",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee8a472-36da-4aac-9c05-de9b6dfa8715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6e8d639-c98f-402a-87b4-8ace8a704a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494b82ce-969d-4f0d-bddb-16fc19f837ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eff3199-6c59-4c6e-a83a-421794acd0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8faf60-9968-4b13-98b6-042b16ba5a5b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5604f1d4-dbec-43b3-ad8e-b627cdf46862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "829ab873-d429-4520-8e51-ee5857554940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6798fb95-8388-48b9-a968-8e71cfe8dcce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afee8a66-910f-4419-9f52-4bb8c74fa6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7867dd93-5897-4f4c-87f2-e5fcc24a9e69",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55ecba4-2696-466c-82be-68522f6b0393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39af0d79-cd56-4122-aa7e-8f12d30c4ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3964e063-2501-4f3f-93fc-53e7cb1f7947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bcbfc59-7be9-4a0a-8d3b-a73d67a46217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc1dea6-ecd6-4be3-93d5-150adf226b9e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fd69bd-b8ad-44a1-ba02-44778438ffca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55324ce0-5bc7-43bc-8ada-9444dbaa2317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989e0414-87d9-4222-bb9b-009ce1723cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779242da-5324-4e23-ba96-d49839e91894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca6603b-c626-4ad0-9322-5edf55acacb3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9552e3-289a-4b67-a29d-c5ddd947a03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4ca969-80f5-4f5d-969e-b2913025a396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f516f1-071b-42e8-bb5a-27dbc2ddaa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc0d8d8-608a-4c82-ad7c-bddf5bfc0788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad3ce92-245e-4aaa-b3fe-956093006316",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2658239-1aaf-4718-a11a-369b5d54e180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8042b731-a8a7-4360-81e0-d160002d9fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb54fd49-40f1-4b3b-ab74-3145867ea7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45227cc-5942-44d9-be45-76e85182e1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95857efe-4be5-4626-9b3a-2ed240342233",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f23608-da91-40e5-8608-e31917616d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356a3f03-ad54-4c6d-bfdc-b76971cecb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dabc75-3e8c-4285-b2b2-c08821491c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da451d6-622e-4ca6-855d-9595a6019a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af570b8d-b55d-4724-b3b8-35dbf590e747",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a2bf5b-29e0-4f2a-8722-9b9960e21fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d752f10c-bd47-4ae5-aa29-81a39f25d70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fec1b3-32ec-4cbe-96ba-36e70fc1a811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9792d30f-1a85-4bc5-a016-5821880e787a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a052d6e-f940-44a0-a9e1-10c554483a14",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643064ee-bd71-4ca6-8d10-fa5a9ebc943f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0fbb86-ba81-4d8f-86b8-31796cb52275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90df303d-82f5-43f9-8320-467d29a8d4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffed0cba-c949-4e34-9f84-b35933928e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b67340f-3b2b-4235-a661-d766f9d37b23",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38f1bd2-1150-47fe-acc9-7f29ca3af0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f5a862-8559-4674-8903-fcefc184e081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be976d14-cd8a-4696-99df-0595272ee819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447863b0-79dd-4801-844d-daf90a56d42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63568d66-ed48-4c2b-a609-7be5d8f95647",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53df201b-540a-4a1d-a67b-21e8bc8d6663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d97e3eb-23fb-4c4c-af37-a2940bc7d78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ba3623-a226-4e18-bba8-3bd6bf832530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d539689b-665c-4220-86ce-09fb0cb976ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc8b553-51b9-40d7-9cb9-5832a7f8c10f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c490697f-5aad-42e2-88a6-17cc6c4373b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c815179-d299-41c6-86b4-3a8ba724e0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3fcdce-c9c3-4e76-af38-bbb07b0db0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96c34ea-5589-45af-8ba6-29768d89c8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d121179-b03d-4ca2-9252-59505fd52807",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca26401-36ff-4439-8c30-61da13c58909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e148a4c9-0f1a-44b5-a62c-6528676f856a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ce2f7d-012a-4eab-a695-3610aceda822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afcbdb3-3ba1-45ce-b549-81a70921254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fcb242-5ed6-4633-b707-bc297e42ce0f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee918db1-5ebf-4541-b9de-b31d57b55e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7afac7c-28d4-49c0-b590-f54840ba2b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c34aab4-ab50-4df7-a0a1-9bdad992baee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b58e98e-99ea-4236-93ae-da807f678e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caedc66-a3fd-41a0-a56d-ed9de67792fe",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa586cee-94ed-4da7-9455-ef1650673205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20eb6344-9017-411c-aa72-69d543982889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797f4bd7-ffbf-47a4-b10a-2ec7e998cdc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e0feba-24bc-4eb6-80a6-11e9914278f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fafb7a-9cb4-402d-9d72-881433a3df82",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63a851e-8f4b-4b26-969c-2b6bb0b3967d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e93b9de4-4a9e-4374-a0c3-1bba4c504922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "435ff3e8-7c27-4efe-a48a-22d8ed26d642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b28be3d-6269-4ca8-ad5d-320c940a52e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231efe71-2450-47f9-8862-0ed7d0ab00ce",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304063d4-8f47-4e6f-8105-2de35f3c4483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c154234-da3e-478c-8fb0-c0599ef0dad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e2f1f8-76bc-480c-9341-a34172ccd761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19907baf-3587-48d4-b9d5-fa530237b12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c75767-4066-4abd-b391-46805aa620c7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e29a9ac-f218-476f-adf6-7da727b42290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de818b86-97fc-40cc-82da-7f59bb11208b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e5525c-2e9d-4dd0-a93d-4a071e324ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec78408-934e-4808-b07a-0beec763aefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443ff665-e0ee-481c-8aea-32639c93acfc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4a6800-d9c8-4933-b1e7-32daaabef417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ccb98f-25b4-420d-b5fc-7919bed2892e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1e5c7a-d617-409a-947c-234b7da15302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae318d2-fd4d-4c2c-883c-02c04867980a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a170c08d-057b-4bee-868d-e01bc12cea9a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0313bf-7d40-4496-904c-b9cdf4d068ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca6ade2-c060-48e1-bc27-878faa2d2e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d9fa59-037f-479f-b809-033be9264001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d93385e-d8cd-4d9a-be56-0cb2d8e0c941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d5d476-372c-44ec-aaed-edaaa4970a02",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaedb88-6778-4bbc-904e-043464a56099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5855ef96-b4e8-4be6-a2d3-b5ca4d9f9631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06f5d52-5487-4a62-840f-da089031dc20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e512eeb-610d-4f4c-a83f-7ed888f79f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c10c8c-75db-4600-b84c-18b1604f78e4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32166e2f-df55-428e-8128-a487a03f12ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d32a9a-cab2-45be-b779-37e6f2e6c949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c48c32a-1ba7-4b22-b8ea-d556a33226ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014f6ca0-eea7-440e-82ee-274f73e966d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4a13b5-6cfd-4b0a-8d61-de5c19418c00",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a4947a-6db5-46b0-82e3-25443115e820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d59e22-19f8-4f22-8c63-0744cbe5ba1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601a4c0e-9058-49c8-ba50-2f836fcc9f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e369d6-c15b-47a2-b111-d87c8ec41858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965a1029-dcbb-460c-befd-887642144254",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f696da1-cbe5-4af8-9ad2-6a69a5a4c9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69645bb3-7074-42a3-a2b5-86b380812a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cacc439-4d3d-4b90-87e8-560b7116aa54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bf542e-ff66-48a8-bdba-3b83387d4773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4520a74-6cba-4729-b4e2-d9cb4ced3d2b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a2a8c6-2cb4-4108-b224-fbbf751b1564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b6565f-406f-454e-a784-a725a0caf0bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbed5fce-7772-4be0-91f6-b723c13ec4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a38388b-6db4-41b7-b582-a19154bb0ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f370f48-4b23-407b-9958-4f00cdfac92f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4063ed4-c3ad-43b1-b8ff-cb97afd07556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82294e2b-219f-4ce4-8882-765f71cb032e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11adf97f-28dd-440e-a3ba-9ba5dafd9292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfea37f2-69c2-423e-9541-5acae13d3bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230db002-c61d-4d85-a5f3-25a3d27ceefe",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d5161a-7d60-4a35-8909-489400325f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f2e6c8-89b0-4941-ac54-99b418933531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e08e747-aa65-42f0-be03-d416f95b2030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9894a1a5-6686-497f-bf8a-43b3b7b051b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc573ce2-c31c-4874-bb6f-0b5a7004c5f8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e023dc87-d4c7-4057-8c3c-94e21af923e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb5bd49-1e71-4cbb-ab58-888a74dd8d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1334bf-8d4e-4836-99fc-8ebf4864c021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668ab18b-2f7a-4888-9eca-cad3e39473ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa10e35b-c0fe-492d-989f-2841f601b953",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00234029-4c8b-4ee1-a567-7c5b62243c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c074fc42-aa86-4d6a-bd9c-bd53ceb22cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a752bba4-836a-4d82-aa08-1c9539e6604d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a973fb25-4c89-47bd-b5a4-5dcb56ff7e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaead1d3-a6f8-4f26-8683-dda365e729fb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d7c0ad-f320-4f4e-b9f2-0263e84dbe89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad41f14-4611-4b8a-a3ba-26cbd40cd815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89567011-e3f5-44b5-942f-726af93cc30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6840c33-66b4-406b-891e-a7d61456c7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53294d6-863e-4f79-b291-5e11344f1bec",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e8bb8f-c61b-4323-8c90-b87c9d6ea21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5379f0a-d28d-4caa-8194-6e0785294db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e910b4-b21c-48a5-936c-be5f2818a774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3083b2-4ad5-4bb5-b096-947bee69429b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2160f972-9d36-4c0d-9147-cd8f5b5481b5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6c9b67-acc7-4e20-ae61-22fb44b6bbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566b9faa-31dd-436c-b5f9-290f3a93a851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d181eda-e26b-45fc-8bf0-b5b25883db9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea8c501-2d8a-47ed-a892-bed5ccf48c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1204add9-807b-4ae0-92f5-5b82c2d4edf6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdab0469-3a99-4269-8231-e54b4a4e1778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc354b4-c8b4-434b-83a6-ad08e5dc0787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daed20f-df9e-46d4-9cf1-34f16c4dda74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d4368d-3dd2-4266-a094-94f0bd9239aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84da75b-2c8a-4755-a2a5-3601f0175c9c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f9cb65-fa26-418f-b1ea-deb277840db8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29de2144-a4af-494f-983a-7e10255509e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a395a603-0165-4657-ab70-c9f6652be2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6bf672-717f-4477-ab77-71477d1ae97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa73564-a50a-4a79-8076-1f661988d4b1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d23411-3269-4dcd-8bd5-23b14a6835e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8204d5e4-884f-4ea2-bc9a-f3a4ad0d6891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69564e82-7675-461d-a230-3223e4b7bfae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad6b854-5059-4c35-a40a-311d15d53ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37290ca-4c1f-4396-8b4f-dfcb529a8df6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7fd495-7de2-4148-af16-5787128c4049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb942c41-8f51-4dd3-876e-538d07cca7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96347c66-c218-4023-9843-796a6598e28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f606d9-f110-40d9-a4b4-d0939e75256d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbe6a8a-85ae-4b43-9a67-a7fd8e9d9f52",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b723b6-7bfa-44f8-b014-94be60563f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "626e9490-1105-413d-8e21-471952a60f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a9f2bb-7209-4e63-a120-271a844d2887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c74f84-18e8-4b86-895e-a7e05e1a8731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cdc771-7ba4-45fe-ae6d-9b8e6ad9c309",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696ed3e1-f4f9-43af-9376-33175e45510e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca9141c3-f9ed-46cc-864e-39ba27324f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d0c425-9cb1-4539-9385-156e019210ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea48c2bc-72fd-4c4e-be96-6f57febe83c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1c4566-982f-44a1-a968-8e67fe36d765",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d782b86-8894-442d-82f4-dd1ed74293f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e18f744e-da10-4c45-83fe-9594c4e9f9df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020a64d9-2b8e-49f0-985f-c94f66ef9046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d76187b-b13e-4882-b13b-91d7b852dd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3f5e48-82bc-4599-9b4d-4fafce74462e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c22716-aea3-467e-a262-7f3ca6025fbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8d4ab89-5b81-45ac-b70c-d4d94cb9c585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b564e148-0337-436d-8c1a-747a9b9b0f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f445e03c-ffd0-40cc-b7fa-65751338ec7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7d0a1d-0a05-4da4-977d-332029dd1965",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcc358e-619e-4117-b8ee-dabebcf12f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42823108-db5b-4fe6-915e-7e1dac1f863a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaa4ebf-2fdb-4e2f-ac88-a8b464a3a560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a72c976-5444-472e-ae71-a2bc40488097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc44399-cd5e-4a3b-a0f2-413e1f8147c1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b6cf68-f228-4821-a560-3124348d8321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05f456d0-bd66-4528-bc6b-d5dbb953b234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b029de83-a05a-48d3-9e6b-e6e0fce6a208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e56cbbb-a532-463d-aac2-87d5670ca6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79bbe94-dc5c-450d-b780-686e34b4e499",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a8f375-79bb-4306-9bdd-a13d33b2ea4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09131e42-a3ae-4257-bc3f-eeb07333c9a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8123d0a6-ecfb-4060-937d-2a929b6fbd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7927ab5-3fd5-4bf0-ba46-342e0c6cbc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a58466a-a562-4914-b3f3-87e674ad6fbb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8505e454-7c52-46eb-835c-a0ff3d2e666f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9e47b0a-24d5-41b0-aa0a-bc5b97e85995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81ffcf4-58b0-4678-9f33-ce83c45d7a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6ae9b3-cb49-4fa2-9303-132eb149b78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348e95fc-4ffb-444f-b8d2-fb66e2f1f9af",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5702f01-bb41-475c-b6de-4c745b94ee75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f571701-558a-4216-b00a-7f2acd2f39a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64837429-827c-4563-97f8-8f9b7709de3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e1af70-99ba-4a1d-8a12-be3a21c5038f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b50247-1e68-45f9-ab8c-bd3f4dbbacd4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90594bd-82ed-4a37-87f8-6c3534d33e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c4a7def-2004-4750-8e12-f3a1b5388645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac193ec2-da6e-434a-8e3d-eed023087f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b026a0d9-a0e8-46a5-aa08-d10af4eef7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb1468b-2659-4284-b94e-e0f3fb0c85a9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9937830-53f5-4c37-b219-7dc5e9d8a8e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d05fecb-fa28-4704-84b3-1b9096a5ec27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9ab5b6-6032-450b-ad3b-69c760c0cacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4755bfce-8bdb-4c77-9ade-e95ef6897be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9af35a8-e8a2-4bf6-80b7-24d8b411d5e8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455f8ba6-bb0a-40e6-a8e8-7e128e33a370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3f560a-9de0-4d2f-9cdb-3aeb22f055d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af417347-03c0-4838-8c45-5e79188153f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b08f55-d192-4acc-952d-9f3cbba9f6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1ba88e-591e-4625-9cb1-b2c8ab58cb42",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334849be-7ad2-4d11-b109-fe0aad56a78c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a10f0554-7f44-4c76-be86-49a0f0e3e15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30c9c3d-dc0a-45b7-8665-99bc645cd233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ac68aa-87ef-4cb0-bf87-90a8a71bb778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a4b1b7-f73c-42e8-84ec-3b896284ab14",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e196f6b-1c95-4fa9-9aaa-cb74e5ed9f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b01fd5-b4ff-41f5-9aa2-83813b8704a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9225855-609c-4582-847a-4c35c910360b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d451210-68c3-42da-9970-83fe725fefc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7b8fea-b566-4af2-bc50-ed042c65537b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898fb731-0bc3-4355-8fee-a8826a9b8129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8746843-082a-426b-9c1b-81cd9ce2240b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29bd7a9-4a5a-4fe9-97cb-6b41405f398d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f40efc8-7acf-465e-a6ea-08b61b32fc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40dd1d4-2cfc-427e-83cc-065be9a3bcda",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d79aaf-efbf-41be-b79d-774551846935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9988d7a-ae1f-462e-a128-4ba23a55ad1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34497fed-9f81-4b89-9cf4-f39e1dd3a8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e631273-5b1d-421d-9193-bd0d3b9254fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830e45bc-cda8-475c-bca9-dcb3432cc46e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e78641-57a9-4837-9970-d3f795f1309b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d26a326-b384-4acf-99aa-1623158581c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1b22b0-60a5-4d5b-8ffd-b1fb4c0dec8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d740ede1-84f7-44a5-8e56-61e5909f6eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50941457-310a-4112-a514-76b76327cee9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70dfcce-6b8b-4ef7-92ca-3f366b50f277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2564cf6e-19eb-44c9-9ae7-0af2ec580870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59733ce2-888f-4570-80e6-d2d257de7e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea6d796-fc21-483b-aeae-2666021d9ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52b06ba-e051-4f47-8e7d-7010cd4e9039",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d486807-13ff-4752-84e9-a4730129383d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65eb0a7b-8c9c-4de0-a9c4-f62e9de7e78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060d2755-c983-48b9-8345-7d3957209840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5089eb72-bb73-478d-82a8-11084d5cdc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d9bd51-9ba5-4ce2-9b2e-646d24bdb2c5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea842ac7-7d09-487a-b42e-c239905df668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e2c0a39-b34c-4164-a1ed-d2affcd533c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3303ca2-b33c-445c-afd3-41658b720ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1cff012-6c7e-48db-89b4-f30bce955407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd18bcb-4ae7-4c97-87be-fadf7f5a8bd3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a686d1b-12fc-43be-913b-0d5334343251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "483e1892-2efc-46b0-a869-9c81d2aea453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ad1845-382b-4675-a266-c3ceaf8b8c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5ecbdd-6c51-497e-86a2-97e63631ac65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe7d698-84fd-4305-bd95-c7f54bab10e9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c89384-50d0-4763-86c4-3d6a27414a5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e39b4d-c769-4b81-8363-9e7a26809ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d080afdc-4172-4964-b289-25ebbbbe66f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59d1f72-1bd2-4d88-8562-773fd9f1f9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ce3968-20da-4b35-8dd6-926607c2968a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8393df-c7a0-4bfd-85cc-b645f5ae053c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a022b81-782b-46a1-a38e-20d11834ba90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fee54f7-4cd5-4137-9178-023d6cbebdbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fbf3dd-55e4-4d2a-9e88-652a82d8a5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a510279-5e0f-486f-95c7-e0a4f5f5b9ac",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d43d0c-8619-478a-8c16-da5bb4924614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "634060f5-c7c2-43d7-bd8f-154d354e38a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6153765-676e-40b6-8c18-d9994cce241c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0010cfcb-ee45-44b5-8651-6c574dec9f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14f90a2-0f58-413a-bde0-e006c0455a5f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7872d08d-b3f2-49f1-859d-4921f6cbedcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "935d9b57-8a25-4196-8681-b0709d171fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c6b1e8-bc58-48e4-b287-1146a3601a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96ac6ce-cf74-4eaf-bcdc-3f1204df3fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2abbf4-3a45-44ae-8881-a9f74d462101",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e584c28-275b-4d5c-8c4b-461809643b41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6839bd47-6d9f-45b3-82bb-b35f4d3b8ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c74b7a-a781-4ab1-8a5c-3a35686dea34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c64b90e-08dd-47b9-b11d-db17c602af79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ed92d6-74c2-4991-8a06-35c00902abc3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2560fc-db53-408e-b0c3-232000643d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c46bd7-07e1-47c0-a503-9d9e9a14e139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f0304d-e725-42d9-882d-4876fb759579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09b7348-e794-4472-8e2c-cd7388e58bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5af600c-8499-4897-8be3-7c29892aec57",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fbae5d-a197-44fd-8173-f73a089d6fb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcfac91-dd97-479b-95fd-bd691497b3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf433c4-6e3b-4ef5-a1ba-36e22e30cbea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b61917a-89a8-4fd2-8f26-15e14ccfa31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a4819-a282-4b1d-9842-756aa77dc237",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fef2962-5126-459b-b40a-656427227d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "435738fd-7ee3-4c72-815d-016f32737267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2859ac-eb9e-40ee-8978-c43baf35e0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012f87b9-056a-4fe2-8153-f750a1fac642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2701bd7-784c-48d5-8d21-2f80777acc20",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56dfcdd-f30b-4c3f-8982-024816ed9ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71e738a0-4116-4c83-9655-76288415de9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a310163b-bd85-42a5-b921-3c25a3325d56",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4001e56-c2e3-4115-984d-9ae363334890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a54ee8-a1d6-4064-90b5-19f24f13d5d6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9d3ed5-95b3-45b0-973f-c846cfa48fcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a812b8c-bca4-4002-aa96-4154f5518248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20182d21-1a30-44c1-86f4-8d5e9d3b43ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7efe49-78a3-4ef4-89f6-9a0f4eefc189"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a45ce996-4f4f-433f-beb2-49e27f7c47bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8801aed4-dd7d-43ff-9417-0fb86523bf50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f863e898-d77f-41a5-8592-a22f061a9d57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc6527fd-f3f5-4928-b9e2-09da87f9072a"
                    }
                  }
                ]
              },
              {
                "id": "802731f4-b57d-4ea4-b694-d87bf156e2d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b2010da-b861-4d6a-9d78-1a7804817c6e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01ba69b-2e2b-46bb-8f0f-bc405b7a799d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8e2e61b6-f6d1-4cd6-a869-ed3d03e93f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d810f48-3a5f-4906-8581-b86259c6e1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5a8a5a6-d7c2-4c0a-9f1d-2ca96b7a1350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ea2924-997d-4708-b739-912be87aad14",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1433bb6d-687f-4db4-b118-b4289dcc98b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2789b7ea-7ce5-4882-b309-0adba5bcafe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca093ace-20c0-4978-b4e9-f6d6b3be505c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44bcba8b-535e-4a86-9663-d37858ca1910"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bacf91c-1376-46c2-ad88-b3a05fffd816",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae11ab09-4fc0-4334-b51f-1eba1d756d72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e72cd7b9-86ba-414e-a540-fa5b873b6ec7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7b3d22e-a95b-41aa-9c4a-12b61358321c"
                    }
                  }
                ]
              },
              {
                "id": "eb7fcacd-65e7-45b7-a0d9-2d5ae2ec513f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0ce9eb9b-fe5e-4f87-82eb-1d7ef46bbb9e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f26ba1-9426-4dcf-8e3c-515654e3eea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2f0812b1-6eb1-40df-b0d7-4d5d43392380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d132737-0c6f-4597-948e-ff0a01a51e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ea98d2-e73a-4da4-90bb-a4dd47c02f95"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a492a609-f778-4161-8ae6-7a57ef36d8d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ce1e4222-1e65-4ffd-8343-f7e5a2f5e3e5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00c6352f-e182-4ed9-82be-ca578f087384",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "94496e36-e0d9-422a-84b5-73145577f386"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b04c7a2d-29e4-4835-9aad-a54e24b88aeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "942f9d74-2222-407c-a600-38fd133edcd8"
                    }
                  }
                ]
              },
              {
                "id": "8aa72fa0-1c8b-48f0-a359-992e3f4cfddf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "218af693-d51d-40b3-9134-8cffeef0650d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e73acd6a-dc82-4b92-97fa-e66853b0da9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db8ce1aa-7505-44b0-8423-2d753488384d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2dc8a4f-9981-400f-a963-9c681652e03f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "868095b8-b82a-4315-bfa6-e9503c394b59",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fa28765f-004a-45db-9258-9316fd52aaea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e719f71-dcbf-48f1-9a92-99d0bb81d1cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd4fd62e-7566-4aab-b5d2-71a3a25358c7"
            }
          }
        ]
      },
      {
        "id": "998c0ab7-3212-4fc1-9e1e-3dad647667c3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e4a3cd23-d403-4e79-99cc-607a8cd4f977",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c317ceb5-9894-4c6f-994b-f0d66e058ea1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8b3b24-81bc-4aa8-a740-026c8d029b37",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b585784b-325a-42f7-afa0-141855a735dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269f94c4-43b1-48b9-b0fd-cb8e812f2f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03d053ff-4dc4-423f-8003-046bdb1284e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3829362b-565e-4cc1-aec2-c08ab6ce4f9c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dc6817-dfb3-4ab7-9d5c-0bc41cf38677",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "290009c2-2305-4919-a303-3f16590d3478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700f9b06-a14e-4d89-9171-62aeb74c6fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaf9732c-a87a-489d-bb98-97f21f846bdc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7272e45f-80c9-4609-a622-8456f46a834f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7038cb7-595b-4dbc-9d0c-21894b27954e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77446c19-2b6c-46d2-8aac-ec0201ef64aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38bc5acb-4b5c-4752-a59c-3ad7ce6e7a7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "792953a3-8328-42d8-87c4-faae4b8219a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7073405b-537c-4c6b-b4e9-6b41707a79c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c04e388-0a32-43ab-ad70-0463ec2d9bc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e3ad96a-882a-442b-aacd-f25347955e4b"
            }
          }
        ]
      },
      {
        "id": "9624755d-c58f-4c82-9c02-67b738906ecd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6a9e5308-e330-4964-b626-c28b1b1f4a85",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5036eb57-f332-4bf9-9353-cbddb23da4f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b930f104-3e81-4d63-868c-a30f58f4a0c6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae5b33d-7654-4540-85ee-9be67e5ceba6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2e7b4e4e-9471-407e-a034-7e475a4ce528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a134ae86-87bf-43a4-9c28-2c28c03db21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90244b82-6993-4166-9e8c-b62e188bfaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cb7364-9ad9-4f47-908d-62922ac1a9c8",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e66a7f-29dc-4ff8-b9b4-0f053e3c935d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e9c110b5-c646-440d-8d89-5ddc2c0f6460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7e6e43-a7d3-44c9-aae4-c296201bd87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d93c1e6-91ab-4b1c-8709-52e93eaa8132"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f72806e-b90b-4717-a346-82019d2db625",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fbb5363-ccdd-4989-99c2-0a7fb17ee1b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e10590d3-2bbc-4a31-940a-bd9cc0dfa8e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec586171-2c2f-4b57-9899-d07f7cb18391"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daa5abef-6538-4c35-8020-f3487b91e79c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8c3cf809-3f53-41da-8732-9de3b84bdbe1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fb6cbf7-bb62-4c86-820d-9a8b2b98dfb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d214a53c-0987-45e9-a01d-efd0c20701ae"
            }
          }
        ]
      },
      {
        "id": "4449c63b-1384-4bfc-be90-669bf06b5c1e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dd2f326e-2ffd-46b7-9298-e966a9a9226a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46e2f7b4-d316-40bb-bd9f-bc7b010fe136",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09513e0c-059e-4dac-ba8a-6348b26a86bd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeb8836-478b-4e87-94f0-bcbb5957d111",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db97c922-85e6-456a-936d-893940fcd272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f14298b-a879-474b-ba65-ea477c0a49d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de008de5-f242-4d4a-9833-d03719b57492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171f2e4c-08e3-41e5-9fbb-fea16ba3ef23",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad18e711-78c6-429a-9b9a-0f74ca74595a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a893d748-743f-4fda-b3e6-d19db6c48335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8604a6a9-93f8-4fb9-b4a4-5570d38dd85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc079a9b-3134-45c1-8388-a6bdddb55ba5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da93634f-2e89-4d00-a0e4-c4f98d732964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03ba7d12-f783-4acc-821e-dcf87f6a9fcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a623d3c7-e206-47fd-b110-6f318a9ff868",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04614e41-02c5-4abe-a532-c47c939922b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbd14e17-978a-4185-86c9-7db667e458dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "61426b18-95a3-40fb-8d63-777ccf2ce04f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce7d356f-21cf-44b2-ae4b-cb52919eac4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0773192d-f440-4c42-bb7d-9193a6a1d2f8"
            }
          }
        ]
      },
      {
        "id": "400fd6c8-1fd8-4d00-ac08-4a9c2f86944b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7e237b8-3d07-4415-9096-4b0238ca4553",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cdb72df-d8ca-4bc9-8c23-e9f00fe976c0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "61ba6af1-c59b-4a34-be04-08de3435439f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81076c36-2992-41b3-82bd-73ae4b291fa1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa876496-b1c6-459f-bbf1-7e028f777bc6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 286.9111969111971,
      "responseMin": 20,
      "responseMax": 9367,
      "responseSd": 916.7111664915969,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676680849181,
      "completed": 1676680934220
    },
    "executions": [
      {
        "id": "b987a6e5-c6f2-42f4-bb43-fbe81021fa1f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0c838370-d1b7-49cc-a17a-e4683820ff97",
          "httpRequestId": "ce10cb37-4d38-4353-a32b-b7458bed18ab"
        },
        "item": {
          "id": "b987a6e5-c6f2-42f4-bb43-fbe81021fa1f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bd52345d-bc40-44f1-b9b1-7ac6d41febbb",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 0
        }
      },
      {
        "id": "4a44e319-3b31-42b4-bad5-0b5655776de2",
        "cursor": {
          "ref": "7de5158c-92cf-46db-82c0-ef39aa6f0a81",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f96d14e5-c7c5-485b-acc4-90607bcf81c4"
        },
        "item": {
          "id": "4a44e319-3b31-42b4-bad5-0b5655776de2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "594234c7-81cb-4c46-bc87-03ba5c65893b",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "c66f9e3d-18d3-4a79-81ca-6bb2439a8128",
        "cursor": {
          "ref": "d41492dd-c308-4035-8a5f-9617f63fd37e",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8706defa-9da3-429f-9f8b-a6f5aebb08e7"
        },
        "item": {
          "id": "c66f9e3d-18d3-4a79-81ca-6bb2439a8128",
          "name": "did_json"
        },
        "response": {
          "id": "ef0658f6-83c6-4c3b-9b75-fb17d1eb7072",
          "status": "OK",
          "code": 200,
          "responseTime": 558,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bddefb-9210-40fc-8354-d1ca2fd6875e",
        "cursor": {
          "ref": "fcb70a33-8e19-4bf8-acd1-9d026b46cce0",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3f31d8d-9b56-4b72-92d4-5e0c536a253a"
        },
        "item": {
          "id": "03bddefb-9210-40fc-8354-d1ca2fd6875e",
          "name": "did:invalid"
        },
        "response": {
          "id": "f03c5efe-6a8c-45f4-a159-c3ef422bd64e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 322,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "03bddefb-9210-40fc-8354-d1ca2fd6875e",
        "cursor": {
          "ref": "fcb70a33-8e19-4bf8-acd1-9d026b46cce0",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3f31d8d-9b56-4b72-92d4-5e0c536a253a"
        },
        "item": {
          "id": "03bddefb-9210-40fc-8354-d1ca2fd6875e",
          "name": "did:invalid"
        },
        "response": {
          "id": "f03c5efe-6a8c-45f4-a159-c3ef422bd64e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 322,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d69765aa-0582-4c46-af8d-f62e6645a3f3",
        "cursor": {
          "ref": "5b481750-d88c-44c2-b8d8-84c066b2ef97",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ff888e8e-928a-4572-88dc-f34d8dc72357"
        },
        "item": {
          "id": "d69765aa-0582-4c46-af8d-f62e6645a3f3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "772bb3f5-349f-447a-b62a-400eb7a51eb7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddd741f-297b-472f-9dcf-7b31c9d36dd2",
        "cursor": {
          "ref": "23888fcf-14a1-4c38-9900-3ef8c5d917e5",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "94bb1e07-4811-463f-978d-babea5fe9f74"
        },
        "item": {
          "id": "eddd741f-297b-472f-9dcf-7b31c9d36dd2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "57e80690-b47c-4f57-95cd-13e9d98740b4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 73,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf1b650-08a5-4fe6-a1e1-fc2c79f9e31b",
        "cursor": {
          "ref": "85bb5516-fdd3-4b07-9e4b-aa608b7dad67",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ed6e33be-abd4-47fd-860d-a819bf2ff2bd"
        },
        "item": {
          "id": "4cf1b650-08a5-4fe6-a1e1-fc2c79f9e31b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7f2361fd-7854-43a0-8535-a52b899a3939",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "c4a98ffa-7b57-45b1-b24a-c3e7b6b64a3e",
        "cursor": {
          "ref": "ee6585b9-5edd-41a8-9660-aa520f4b3e19",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "893420dc-d277-4ffa-858c-a265ca9a7acf"
        },
        "item": {
          "id": "c4a98ffa-7b57-45b1-b24a-c3e7b6b64a3e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cb5d6466-4608-48c3-ac33-2af27ea15dfe",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c4a98ffa-7b57-45b1-b24a-c3e7b6b64a3e",
        "cursor": {
          "ref": "ee6585b9-5edd-41a8-9660-aa520f4b3e19",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "893420dc-d277-4ffa-858c-a265ca9a7acf"
        },
        "item": {
          "id": "c4a98ffa-7b57-45b1-b24a-c3e7b6b64a3e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cb5d6466-4608-48c3-ac33-2af27ea15dfe",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "91e22e06-a4f5-46e7-ab9b-f699310ed9e8",
        "cursor": {
          "ref": "9983a91c-e198-418e-a114-bb2ca304c670",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c6166d2b-a589-43ff-96e7-6976d9364ffe"
        },
        "item": {
          "id": "91e22e06-a4f5-46e7-ab9b-f699310ed9e8",
          "name": "identifiers"
        },
        "response": {
          "id": "cf917c7b-c2bd-49bc-90bf-5d188a8f27da",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a1e0e4-9ee5-4d8e-918f-ef7717f7a979",
        "cursor": {
          "ref": "9d9a358e-5b9b-414e-b1a1-36e02d0d57bc",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a22bff04-556d-4e83-9483-9b98ccdedbdb"
        },
        "item": {
          "id": "71a1e0e4-9ee5-4d8e-918f-ef7717f7a979",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "40cf7481-f13c-4d03-ae89-6e24aa8b920e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a1e0e4-9ee5-4d8e-918f-ef7717f7a979",
        "cursor": {
          "ref": "9d9a358e-5b9b-414e-b1a1-36e02d0d57bc",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a22bff04-556d-4e83-9483-9b98ccdedbdb"
        },
        "item": {
          "id": "71a1e0e4-9ee5-4d8e-918f-ef7717f7a979",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "40cf7481-f13c-4d03-ae89-6e24aa8b920e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a52a7a-92a3-4e1d-a3da-66e98a4ca82a",
        "cursor": {
          "ref": "ead50e6f-ba52-4457-b12b-b67043f228a7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "666ffc6d-13e5-4bb3-aefa-a27fe87ecfb0"
        },
        "item": {
          "id": "03a52a7a-92a3-4e1d-a3da-66e98a4ca82a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "13258724-219b-45bc-be90-73859cb29959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36aacac5-696d-4da4-9ca1-c739a0ddc3b7",
        "cursor": {
          "ref": "e309988f-9991-4d31-a90a-2a04d3751bb2",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "083d644f-193f-445b-976b-5962ff050c5b"
        },
        "item": {
          "id": "36aacac5-696d-4da4-9ca1-c739a0ddc3b7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f186e153-b915-4aa0-9bd1-9542b6acb35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d5187b-acea-4998-beaa-6d23d09baadf",
        "cursor": {
          "ref": "81d65bc3-f55a-47f7-8d16-5aa4f5959cac",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3d840124-53b1-478a-ba91-87988979901e"
        },
        "item": {
          "id": "e6d5187b-acea-4998-beaa-6d23d09baadf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "811359b6-16b1-435b-b2f5-ebdb5b300062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e07a9f-7607-49b9-9ae6-5eee31b96332",
        "cursor": {
          "ref": "fc5205a4-7962-45a9-93ca-1ca40862ec96",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "507a6610-ca98-4ec9-a2ed-e7cdd7b23e78"
        },
        "item": {
          "id": "f9e07a9f-7607-49b9-9ae6-5eee31b96332",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9230a51f-72ed-4254-a637-c6b9ea8439af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b59f78e-e6b6-4b7e-bcc9-449bce35df00",
        "cursor": {
          "ref": "16488eab-e256-4677-a4c8-dbfdfa4eec63",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3ceafd64-86b0-4ee3-a157-dda234b68371"
        },
        "item": {
          "id": "0b59f78e-e6b6-4b7e-bcc9-449bce35df00",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7b1fb68f-46a7-4550-8c0a-c4e18b89a34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764c29bd-445b-4c96-a04d-158668a97efd",
        "cursor": {
          "ref": "09a340c6-64c7-4dcb-acf5-7af23671bdf6",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4d43d07c-c6ef-4dfa-b42e-1a0cc0b3b19c"
        },
        "item": {
          "id": "764c29bd-445b-4c96-a04d-158668a97efd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3061c529-6a5b-4655-9a79-7f26d13415eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29426e5c-fec3-4eb9-8221-7e47a4bfd96f",
        "cursor": {
          "ref": "e880822d-e1cb-447d-80e1-a8c9958f743f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "609da255-9756-4b47-bc41-7b0153343933"
        },
        "item": {
          "id": "29426e5c-fec3-4eb9-8221-7e47a4bfd96f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "81cd023a-f015-4e2b-953c-6f1ecac9d082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a8db32-bf96-4f1a-ba12-dd603a5f7e9c",
        "cursor": {
          "ref": "4e2c5d20-2ee6-49a3-9559-7becd4e08677",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b0a78971-2c8b-4ddb-bc52-bfcb7617c045"
        },
        "item": {
          "id": "12a8db32-bf96-4f1a-ba12-dd603a5f7e9c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "79271a6f-21ac-4363-83cb-fecd36760d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d0a267-aa9a-465c-a5b5-ade54774b8d0",
        "cursor": {
          "ref": "c8805b70-595c-44d6-b977-7cabfc17c21b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8c9f3c81-4f45-4c99-aaa6-53897787426b"
        },
        "item": {
          "id": "f3d0a267-aa9a-465c-a5b5-ade54774b8d0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e026bbf2-0969-4fc2-afd7-d73e822e1967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f33bcf7-d8ca-4d71-8889-516731a742ed",
        "cursor": {
          "ref": "ddacf996-d837-4f0e-b3d9-614594ce222e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f17a7e54-41ab-4873-9826-3b9e1a21caac"
        },
        "item": {
          "id": "8f33bcf7-d8ca-4d71-8889-516731a742ed",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "05d1f489-706c-4bfa-aec1-f288e4621e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cb1902-f180-4d0d-98e0-3ad937514239",
        "cursor": {
          "ref": "dfb625f7-edf7-4c12-86cd-8ab6e8088188",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "22cc9e49-5935-44f7-89b3-db77abece598"
        },
        "item": {
          "id": "c4cb1902-f180-4d0d-98e0-3ad937514239",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a31cf42c-8f30-4b66-a603-16d18c4c0488",
          "status": "Created",
          "code": 201,
          "responseTime": 7003,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f78191cc-cf5e-4903-b8ff-add8321056aa",
        "cursor": {
          "ref": "d90cd8fc-f98f-401d-a5a6-63eedf875204",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5036f0fb-de0a-4f8e-918f-4a8da21c2e4c"
        },
        "item": {
          "id": "f78191cc-cf5e-4903-b8ff-add8321056aa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ad76c157-de51-4ef6-8fb1-56d61694bddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9636a820-fca9-4e44-a6b7-53cb840e9f9d",
        "cursor": {
          "ref": "77ec5483-5e8a-4c56-be4a-3f290d1437e5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d0c3b859-9ca6-4f97-874d-d77765dac1c6"
        },
        "item": {
          "id": "9636a820-fca9-4e44-a6b7-53cb840e9f9d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2f963aab-9787-45a0-b86d-2c7096f5c09e",
          "status": "Created",
          "code": 201,
          "responseTime": 9367,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "bfb0b1b7-6def-4d4d-8a62-d0b52c0afb95",
        "cursor": {
          "ref": "e600c1fb-4dcc-450d-8780-ae39a92fc32d",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "10f1b701-a915-4ba4-9f6d-551b2ae54172"
        },
        "item": {
          "id": "bfb0b1b7-6def-4d4d-8a62-d0b52c0afb95",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ccf1a47-8a74-458e-89d7-b5e51af28429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363f6640-7598-4eb5-86b5-c4438b25dc0b",
        "cursor": {
          "ref": "75bccaff-0b69-4a2b-ac41-626293e51350",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "513be809-226e-45b3-9cf4-ae762ce27038"
        },
        "item": {
          "id": "363f6640-7598-4eb5-86b5-c4438b25dc0b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8e70b0d9-e6ed-4d89-98a2-12cf851a7b2b",
          "status": "Created",
          "code": 201,
          "responseTime": 3866,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "546560e7-137f-4ad5-9366-bc6af23c3791",
        "cursor": {
          "ref": "df678b08-cf7b-4626-a016-43df8b42b8b9",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7776332-2852-4cab-aa37-6d0d63f8fe29"
        },
        "item": {
          "id": "546560e7-137f-4ad5-9366-bc6af23c3791",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a1781b27-fb9d-4948-82e9-0a55239b3f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81315b90-89b2-4358-ad3b-4ae5eeba76c2",
        "cursor": {
          "ref": "309900b0-3973-4bd2-99da-92efddb422de",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7b236560-05f5-4e12-b19e-9dcd06709a4d"
        },
        "item": {
          "id": "81315b90-89b2-4358-ad3b-4ae5eeba76c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "82439f18-1470-42c9-aa0e-4d3de2bae525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7534e8-53e8-4f74-a4cf-58450a260f31",
        "cursor": {
          "ref": "269a8242-1671-4165-bbb7-8cf5e49ffcdb",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3309c179-fdbd-4515-b828-214378827226"
        },
        "item": {
          "id": "be7534e8-53e8-4f74-a4cf-58450a260f31",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "da7fb1c7-13db-4f81-a9b6-6e22cf4b18f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29abc788-69ee-4750-9b13-e7f7df587075",
        "cursor": {
          "ref": "bfe2515d-079c-49ce-a4b3-1bbeb197bdae",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6f6def66-f82d-41c5-9bde-f0bf09a7fb6d"
        },
        "item": {
          "id": "29abc788-69ee-4750-9b13-e7f7df587075",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "91df6ff4-fdee-4903-9e2a-9084aafc8114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6300d9f8-4e2b-46da-8734-0a17d1808e21",
        "cursor": {
          "ref": "f7a03bbb-c769-47fb-a69c-6dcd31cf1df5",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ca211ff8-afe5-42f7-8324-10fd268886fd"
        },
        "item": {
          "id": "6300d9f8-4e2b-46da-8734-0a17d1808e21",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5c923afa-6c31-4db1-baa2-638149ebdaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d3a97b-b995-46b2-ad87-400a2dc67d4b",
        "cursor": {
          "ref": "20c814a9-437f-4f40-be28-17d3c7834fa9",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "db8928cb-b545-42bc-9d73-d1434fcfab30"
        },
        "item": {
          "id": "a7d3a97b-b995-46b2-ad87-400a2dc67d4b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "46e27e9d-a9a1-4101-8288-a737ef8309ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7beddd78-26f4-41d7-ab74-69fc8dd555cb",
        "cursor": {
          "ref": "b8dcecd1-9aa7-4152-93cf-dd45a2b2ec54",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7dba34e4-b7f5-4228-93c0-2e499bfc0277"
        },
        "item": {
          "id": "7beddd78-26f4-41d7-ab74-69fc8dd555cb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a5a7275e-63a6-47f6-85c4-a50d442f50a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c83626-42e0-4cf9-8d72-11bac99eca02",
        "cursor": {
          "ref": "e00c62ae-e278-4cf8-ae9b-66d1d9324610",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "75c9fd72-d3df-4848-8872-8d1cf6259bb0"
        },
        "item": {
          "id": "c1c83626-42e0-4cf9-8d72-11bac99eca02",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "533ee70a-aa3a-4d44-9430-53b2733cdd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4adcc34-90fb-4c3a-aacd-90019cc0e977",
        "cursor": {
          "ref": "1661c21c-5156-4c35-a0cc-b124073ba831",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "60f9afd4-f7e4-4f8d-ba87-27dedd9510b9"
        },
        "item": {
          "id": "c4adcc34-90fb-4c3a-aacd-90019cc0e977",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "31c53691-7bb7-403c-9e56-097874337aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75daaef6-fedd-4db3-8cb1-705fe0ff7420",
        "cursor": {
          "ref": "d995eac6-355a-477a-a8af-a92d1cfb3564",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1ea8479e-c6ef-464d-96c8-4b6a144246fd"
        },
        "item": {
          "id": "75daaef6-fedd-4db3-8cb1-705fe0ff7420",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "42072f7c-8f37-4c3d-afa2-37d53da1be55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2d58dc-f53f-4fa9-a627-111572cd2e7b",
        "cursor": {
          "ref": "c0a9f334-26d7-4bac-9079-f276c4d3c1fe",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "61d696f7-14e9-45af-b464-d9152c489107"
        },
        "item": {
          "id": "3a2d58dc-f53f-4fa9-a627-111572cd2e7b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d49c3aa0-b5bc-49dd-95df-5f88d117c112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127c3691-b911-443a-ab3a-c4e63bebdc9e",
        "cursor": {
          "ref": "b7b1e340-b968-426c-9bf0-bff31438c577",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4eda7d2a-046e-4480-b347-4276590c525f"
        },
        "item": {
          "id": "127c3691-b911-443a-ab3a-c4e63bebdc9e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dda5f73f-54c3-4595-95da-e522038ccadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6bc47e-b2b8-429b-90e5-aa38bf69c4ac",
        "cursor": {
          "ref": "77a7b381-795b-4235-a5c8-9a5395ef1bab",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1758d40c-2af2-4b63-994f-70f82963bd43"
        },
        "item": {
          "id": "2d6bc47e-b2b8-429b-90e5-aa38bf69c4ac",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aa14cce1-007b-4303-a12b-ab48e1dec71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50be96fd-9b50-4d51-bb3a-396178852e6b",
        "cursor": {
          "ref": "635fbe5b-bc0c-4f4b-888a-393113d7be4e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8157d51e-0bf3-47d3-ba9f-6ead92bcab00"
        },
        "item": {
          "id": "50be96fd-9b50-4d51-bb3a-396178852e6b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b3594953-868b-44b5-b4f8-d19d053c3a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd92cea-36a5-4356-b718-4563b3156164",
        "cursor": {
          "ref": "36e2c574-b39d-4559-8f15-72ca789e5e13",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b8382997-e584-4858-bc59-6c942644f20c"
        },
        "item": {
          "id": "edd92cea-36a5-4356-b718-4563b3156164",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f644c6f1-2c99-4094-b856-f7269e93170f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942f5265-7f3b-46aa-929b-d2bd49e78faa",
        "cursor": {
          "ref": "7f11bc46-73f7-4d6d-b24c-bdaa7fa2ae90",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "07876df1-a292-4dcb-9571-3f8e7b006ea4"
        },
        "item": {
          "id": "942f5265-7f3b-46aa-929b-d2bd49e78faa",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eaccb580-ecfd-4b4a-816b-a3f995c4f46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7d2252-ca41-4a58-b24d-665bc07c9797",
        "cursor": {
          "ref": "fc1e7a35-f1ae-487c-ab37-56ba580b3cf1",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9938f3ce-18a7-4faa-bea8-b66f4b699d01"
        },
        "item": {
          "id": "2f7d2252-ca41-4a58-b24d-665bc07c9797",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0d3bde15-b00d-4a29-ac16-211143c22ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48de8cf-56f5-45e8-99ca-c402c99eb8d5",
        "cursor": {
          "ref": "6fa01b6e-5a10-45c6-bc99-a269813c38f7",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d1886b77-73cf-4040-9728-3866f199d0e6"
        },
        "item": {
          "id": "f48de8cf-56f5-45e8-99ca-c402c99eb8d5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f399b200-4072-4ad5-8d7a-eeb16ccdcc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26f387b-b4ad-4fee-baa9-3bd288f741e0",
        "cursor": {
          "ref": "bbb758d0-a57f-4552-9cf6-21dd72045966",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "59ca63fe-a09f-4399-87f6-7abcd4d14b2d"
        },
        "item": {
          "id": "d26f387b-b4ad-4fee-baa9-3bd288f741e0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "99658b56-9479-4b99-aeb0-b26a5e56e1c0",
          "status": "Created",
          "code": 201,
          "responseTime": 3186,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5fac815f-9fe7-4d44-bcc1-0229b6577a90",
        "cursor": {
          "ref": "d5e749a2-1238-425c-a999-a09575471ae7",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "17cbad41-f22c-4b18-965b-f3db5efa6b05"
        },
        "item": {
          "id": "5fac815f-9fe7-4d44-bcc1-0229b6577a90",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fcd7447a-3f9f-4878-874c-c68a5076562e",
          "status": "Created",
          "code": 201,
          "responseTime": 2580,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e3691c25-df0f-4354-85bc-b19f56f601cf",
        "cursor": {
          "ref": "cbfb16ec-ef21-4db5-a559-8d297e025855",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a37205ee-c159-471b-a634-a99b000b3120"
        },
        "item": {
          "id": "e3691c25-df0f-4354-85bc-b19f56f601cf",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "53a7649c-a0b5-49ce-940e-ccce2ee84b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6721f619-eaac-4b35-aad0-287766022dc2",
        "cursor": {
          "ref": "72684f39-33fd-4fac-af79-c3d9191c796d",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b630405d-458a-4454-826d-5d6f34d74e71"
        },
        "item": {
          "id": "6721f619-eaac-4b35-aad0-287766022dc2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a4cacc65-e9f2-405a-92c6-22186b7ee93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6bcfed-e5e6-4818-b73e-a6cbdf4a6536",
        "cursor": {
          "ref": "fbdb7de9-6e2f-4a0e-b056-d6ad30dd4deb",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ca139334-b84c-4f3c-88a8-935ad9c4243e"
        },
        "item": {
          "id": "aa6bcfed-e5e6-4818-b73e-a6cbdf4a6536",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a67e7c95-005d-438e-9ec3-9f0907d7f768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fae2c29-07d7-4d13-ba41-6574ad03cdae",
        "cursor": {
          "ref": "3f181581-36dd-47da-9cbc-2f78cf4704fb",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "88d54e54-1f22-4dc9-937a-fe15d22d5b22"
        },
        "item": {
          "id": "4fae2c29-07d7-4d13-ba41-6574ad03cdae",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "138ee251-0b99-4696-954d-034984371364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e9af2b-8315-41d7-ad57-733266c4d2d5",
        "cursor": {
          "ref": "fbbfd02c-5e7d-46ad-af52-956808ee5622",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1969bdf6-3eb1-4b64-8d0a-548ceb822ad0"
        },
        "item": {
          "id": "41e9af2b-8315-41d7-ad57-733266c4d2d5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "68e5682d-9b5e-45a8-85e8-147b7f94d8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683ff059-bcd4-4110-9678-6862ac40e22b",
        "cursor": {
          "ref": "1a364335-ec53-40fa-8b24-650e25ebc095",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f2770384-41eb-4257-8b30-99f8dcb4a9c9"
        },
        "item": {
          "id": "683ff059-bcd4-4110-9678-6862ac40e22b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cc306e0c-0b77-46f2-a68d-b9073d4dd82c",
          "status": "Created",
          "code": 201,
          "responseTime": 2705,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4fe7d765-e708-4fac-af6a-eaefa251971c",
        "cursor": {
          "ref": "b3737ecd-5719-4af0-9ac4-85f951284ff9",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "75d49d5d-d147-4e4c-bbbb-44ab9ce028f1"
        },
        "item": {
          "id": "4fe7d765-e708-4fac-af6a-eaefa251971c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f538ad9e-3ae0-4bcc-8996-de0ff2a15588",
          "status": "Created",
          "code": 201,
          "responseTime": 2222,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "010afcef-e29f-43fe-8c54-3eb3cab03b7c",
        "cursor": {
          "ref": "944d4ce3-c31f-4a99-a6bb-f12cde1aa204",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "828719ef-85bc-4cba-8763-83e61574eb6d"
        },
        "item": {
          "id": "010afcef-e29f-43fe-8c54-3eb3cab03b7c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1d92e175-b39d-4241-8a99-ebc010458288",
          "status": "Created",
          "code": 201,
          "responseTime": 2459,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "29b701eb-0ad5-4050-9f29-06f7987eef72",
        "cursor": {
          "ref": "b4b96aa6-0bd3-4dd2-9699-2b15101288e8",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9e51fb5a-2b59-4625-8556-7ed19d0b0ecb"
        },
        "item": {
          "id": "29b701eb-0ad5-4050-9f29-06f7987eef72",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1835121b-3074-4660-9f4f-fa55db41c01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc08c17e-f19d-41b5-867d-4f905594fadb",
        "cursor": {
          "ref": "94f7f9fa-5797-459a-8862-eae31616a5a3",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e19f108c-dbe7-4cee-8d63-bb111797e684"
        },
        "item": {
          "id": "bc08c17e-f19d-41b5-867d-4f905594fadb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5c591ed8-9176-4c62-a0bb-aed191c3691f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197d418a-403e-49b0-a531-744fdfafdbe2",
        "cursor": {
          "ref": "52b62159-2221-4f55-97cb-60fd918726cf",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cfac6997-499e-4308-b88e-477b6c6017a3"
        },
        "item": {
          "id": "197d418a-403e-49b0-a531-744fdfafdbe2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c7692624-70f9-411f-bc25-504383ae1a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17926537-9d94-4ef3-bc4c-eed598db598c",
        "cursor": {
          "ref": "71079e6f-c6d8-46af-b9bc-dca4a9755dd6",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d3b1b0ee-bba1-4c6c-ae9e-dfe7316a8886"
        },
        "item": {
          "id": "17926537-9d94-4ef3-bc4c-eed598db598c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1b1af26e-69a7-4f63-a9a2-07913ca16400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa137f7-7a16-4c5f-8c74-7c47111cc4b4",
        "cursor": {
          "ref": "4ab0652d-ce58-43f8-ad7a-0cf86356b965",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7e5a317e-a6ca-4ec7-bd4a-eea708bc2dbe"
        },
        "item": {
          "id": "8fa137f7-7a16-4c5f-8c74-7c47111cc4b4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9a8880e7-6058-4cff-95ab-35dbba0a859e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1f98df-03e5-4328-a4ba-f43d5a9984b2",
        "cursor": {
          "ref": "13695359-74d9-4065-a16d-2ee7c64c9e08",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8cd17396-9fb6-41bc-9459-a495007e3bb1"
        },
        "item": {
          "id": "7b1f98df-03e5-4328-a4ba-f43d5a9984b2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "051b9971-1859-40a1-bce6-17701391d5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527a8f46-5c2b-44a2-938a-615a077bf957",
        "cursor": {
          "ref": "49706ef1-a9ae-4542-bf51-c2977c63be9f",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "23abf71b-e32d-4795-ae2d-74076cea22f7"
        },
        "item": {
          "id": "527a8f46-5c2b-44a2-938a-615a077bf957",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bf8303b7-50c9-4a4c-a279-93a1d5abe746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a0f627-7744-4fba-a981-dbbf17a1bf4b",
        "cursor": {
          "ref": "c7b1a4b0-42c4-47dd-a25c-40d22ae9340b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fb5d5373-f4c0-42a1-89fb-8c816d2c699d"
        },
        "item": {
          "id": "07a0f627-7744-4fba-a981-dbbf17a1bf4b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "afbcfba6-07a5-4952-80c2-4a9cae197e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e5957f-b302-4a2f-b6fd-5a89e7a70226",
        "cursor": {
          "ref": "a153d769-d3fd-4a5d-b0ba-3f4d9cfecdde",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8bf31cad-7464-4f88-a382-e7319b55feaa"
        },
        "item": {
          "id": "94e5957f-b302-4a2f-b6fd-5a89e7a70226",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d71cf0fb-76c8-4112-be4a-b3f3da49ba5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03900f9c-52f4-43aa-ac19-3a02d27da118",
        "cursor": {
          "ref": "43d8072e-e4ac-4f1d-9a0b-9103bf3580b6",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6f67c290-83b0-4498-811d-fc4e2c6cd876"
        },
        "item": {
          "id": "03900f9c-52f4-43aa-ac19-3a02d27da118",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "afeda173-331e-4327-8734-4cf75e6d353d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43551faa-530d-4f99-8371-918a5b2ae6b9",
        "cursor": {
          "ref": "13dd2d94-c14a-48f7-9984-a57d2dfcc5b2",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cab56de3-ed81-4ba2-95a3-9f128090a9b6"
        },
        "item": {
          "id": "43551faa-530d-4f99-8371-918a5b2ae6b9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "80cddfac-a139-4f16-b6cc-5b647f51c097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c3c097-4a2f-4164-b74c-3be13aa9a32e",
        "cursor": {
          "ref": "ad9fc952-4a46-474b-82a2-3fb2d6284b17",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d876c10-397c-4eb8-b6c5-df84812fa80a"
        },
        "item": {
          "id": "59c3c097-4a2f-4164-b74c-3be13aa9a32e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2d8c6168-eee6-4d37-9ec1-3dfa83a0c6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfba044-2d54-491f-9150-fb51cc0d0a07",
        "cursor": {
          "ref": "13565c72-fd2f-48a7-9253-7498d8235279",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3d405968-a1b4-4dd4-b155-ec461aa8df2b"
        },
        "item": {
          "id": "3bfba044-2d54-491f-9150-fb51cc0d0a07",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1541b078-6d1a-4d10-8217-03ee12721120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23831314-b2a4-4492-8a7c-03b37f5be819",
        "cursor": {
          "ref": "f2736f08-bb19-47f1-a837-75d79a22dd7a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3919899f-9e0e-4570-9c7c-e28fd74ad63c"
        },
        "item": {
          "id": "23831314-b2a4-4492-8a7c-03b37f5be819",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a1e13643-f86a-4baa-bbce-8a001b0a5971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f08eea-e0f9-4f80-9e8c-f7747a097e67",
        "cursor": {
          "ref": "3ecb3ecc-f855-4687-b612-6370d23a7259",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "18272c3b-af85-40cc-b8b5-08bbc24a408e"
        },
        "item": {
          "id": "92f08eea-e0f9-4f80-9e8c-f7747a097e67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "62786e09-8301-4665-8921-16c49d6abec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32343053-bba4-41f7-bfe8-918b60ba0d79",
        "cursor": {
          "ref": "7392ca3e-5e5d-4f3b-8942-918f106f9600",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "37c9f3f9-fcd3-478d-8a31-e34a23f2e1bf"
        },
        "item": {
          "id": "32343053-bba4-41f7-bfe8-918b60ba0d79",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8479c33f-e80f-41a8-81e3-3771b3440428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8f5519-0c7c-4b1e-9847-7c1d213d958e",
        "cursor": {
          "ref": "859a7791-c27f-4a90-850c-7e1a6a56c5a7",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "30e06fda-f46f-47c6-82bd-b847b683d5c8"
        },
        "item": {
          "id": "1a8f5519-0c7c-4b1e-9847-7c1d213d958e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "46eb167e-753d-4db0-b171-4bcba0c13e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2638ca08-245e-4713-8624-9b55c03b4855",
        "cursor": {
          "ref": "7b635e74-3ff0-4bf0-b44b-923ecf45ca8f",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "159c6b1d-f63b-4e97-ba24-affe0098806b"
        },
        "item": {
          "id": "2638ca08-245e-4713-8624-9b55c03b4855",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "98e52b3c-bfc9-496e-8085-48bf80898758",
          "status": "Created",
          "code": 201,
          "responseTime": 2008,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c17a4f1d-336d-4062-a6eb-ff2d3e0079d4",
        "cursor": {
          "ref": "57a6dbef-4bc0-4e89-9892-eb6343e7d775",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2f7acded-e76c-453e-8ec6-48364aeca4fc"
        },
        "item": {
          "id": "c17a4f1d-336d-4062-a6eb-ff2d3e0079d4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "225eaf0c-88f7-4532-881e-0e20dc29b405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1036cfd-ad8d-43c4-a7ef-28b9f3212520",
        "cursor": {
          "ref": "79556d69-04c0-44d2-8ba0-f2c051fa82fb",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1afe4c82-1134-47fc-be87-39684d40a51d"
        },
        "item": {
          "id": "f1036cfd-ad8d-43c4-a7ef-28b9f3212520",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7a3d0273-d7d4-4252-8b80-d3742c887d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1885ad1-f7dc-4c47-80bd-ad5cdd09beaf",
        "cursor": {
          "ref": "ceef5db9-1c42-4923-81c7-772225955959",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f54f960b-6357-4f72-b237-9dd8c868b149"
        },
        "item": {
          "id": "b1885ad1-f7dc-4c47-80bd-ad5cdd09beaf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "885d724f-9d9e-45d7-805e-45abc7ba348a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d1d2b3-11c8-428d-8450-d870ef0b0078",
        "cursor": {
          "ref": "01d36f45-387c-4ad8-ab93-105888f68638",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "366ecb2b-fc32-4f25-9171-38c4d357b9cb"
        },
        "item": {
          "id": "b1d1d2b3-11c8-428d-8450-d870ef0b0078",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "09060792-f591-4fd6-80e8-1b76a0e53814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a8ee52-cc12-4f43-8d1b-8a3410174fb6",
        "cursor": {
          "ref": "848a2d89-f51d-47af-995f-143bdde12bae",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5d73dba5-5fd0-469e-ba65-1b1529ad9ed3"
        },
        "item": {
          "id": "f3a8ee52-cc12-4f43-8d1b-8a3410174fb6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a67240b4-d147-403e-848c-6097f22daa28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53e65bd-1aef-4d88-9bcb-a183f27ab7de",
        "cursor": {
          "ref": "c478eccb-00b8-437c-92f7-8ed46174b941",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "76ae5804-7c1b-4ffc-8f88-76fc7ea5b661"
        },
        "item": {
          "id": "c53e65bd-1aef-4d88-9bcb-a183f27ab7de",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "501d09d4-3090-4902-ae2c-0cd26b355d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809d73c4-59dd-4779-84c9-a744524ea934",
        "cursor": {
          "ref": "a4ac2a97-425b-4581-80f5-bce2a2936e92",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f1e8bae6-1627-4625-860c-0a9c6f700d60"
        },
        "item": {
          "id": "809d73c4-59dd-4779-84c9-a744524ea934",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "240a00c8-f6d5-4b8b-a791-665b13a3dc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5856b874-8dca-458a-b0c4-d396bd281d40",
        "cursor": {
          "ref": "03582f79-f43e-4279-8f0c-eb1f6bd6d67e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "13359199-5856-43b3-8476-3a1caa3ac201"
        },
        "item": {
          "id": "5856b874-8dca-458a-b0c4-d396bd281d40",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "571146fe-cd3f-4d8b-950b-7c9c2e47d7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6218dcd-e548-4cb0-9f06-b898d7da4838",
        "cursor": {
          "ref": "52ea3d3d-02ed-490d-bfe8-de9c45f20fcd",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "45df4fbe-2fa7-4e99-a18e-7378c18bb271"
        },
        "item": {
          "id": "b6218dcd-e548-4cb0-9f06-b898d7da4838",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "467d60d1-f109-44b4-a89d-54705893baf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4b217b-8231-4e93-9394-379a85b5d1bb",
        "cursor": {
          "ref": "67802b8d-e796-4828-a315-5e3fabfee87a",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b9af42c9-fbc0-4725-9c65-9009967e6ec8"
        },
        "item": {
          "id": "0f4b217b-8231-4e93-9394-379a85b5d1bb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7523d57e-2c00-43e2-b026-ff6ae97fb133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0ec7fb-7689-4c59-96e3-908f715eed42",
        "cursor": {
          "ref": "e0d13187-184e-4bb7-b707-791d90cb682b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d881c06d-f205-43e1-9b03-1f9bef721bad"
        },
        "item": {
          "id": "7f0ec7fb-7689-4c59-96e3-908f715eed42",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5bfec03d-cf6d-4aff-926e-c99f2cd39b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e82b22-be1d-47b6-9d9a-341449c0c655",
        "cursor": {
          "ref": "89b6aa5b-d675-4c88-8696-04611f8ceda1",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "19c470ed-59ac-425b-ab16-f1e488bcaa1d"
        },
        "item": {
          "id": "57e82b22-be1d-47b6-9d9a-341449c0c655",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "654925e7-e99f-4257-a413-28b4065839be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdef4a28-9344-4c3d-a28a-31cbc24673e5",
        "cursor": {
          "ref": "38503bdf-f8c4-46a8-8b59-08824920c389",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0b40e767-0d25-4c33-98a1-943159ea037e"
        },
        "item": {
          "id": "bdef4a28-9344-4c3d-a28a-31cbc24673e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d1787735-805d-4ee8-8e48-4812e886af79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bead02-fad8-4d33-8a01-88ba87308065",
        "cursor": {
          "ref": "d537509e-f904-4087-93b3-beaa0770e975",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "70c43327-2f23-4335-89a2-8eb88ab03ca5"
        },
        "item": {
          "id": "f9bead02-fad8-4d33-8a01-88ba87308065",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4a3b7992-a83b-474d-b7bf-67b9510a31d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185b33ab-3ece-401c-b4be-a236a507cb87",
        "cursor": {
          "ref": "9f77c3c1-41f5-411d-b46e-59ec01be5e4d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7f169996-24c5-4617-a2d2-97ee685f75e3"
        },
        "item": {
          "id": "185b33ab-3ece-401c-b4be-a236a507cb87",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "edd5ff01-b8a6-4bc8-9ecf-eca3e410e1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bc84d3-0ba6-400f-bf3b-efe55de513e6",
        "cursor": {
          "ref": "1e00e116-74e4-4b9f-9e2f-004eec004fea",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cbd47549-8c3f-47ef-8691-49f7349ee604"
        },
        "item": {
          "id": "a6bc84d3-0ba6-400f-bf3b-efe55de513e6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7f8d3b37-60e7-45b2-9106-d860d831adfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0033500-f9bb-4ddb-ad6a-39e6bde284c8",
        "cursor": {
          "ref": "8e06937e-a076-40cb-8c55-eaf0ac85e83d",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "208252b9-f650-4d6c-8111-d49ae76b8277"
        },
        "item": {
          "id": "c0033500-f9bb-4ddb-ad6a-39e6bde284c8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5fca741e-b275-4273-a9aa-d346b010172c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab42ba03-f402-43f9-b536-d41655ef63db",
        "cursor": {
          "ref": "ddd2681a-653c-4c59-be05-eee3ba8f5d88",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9e41acef-fe6e-4863-ada4-dd974c94292c"
        },
        "item": {
          "id": "ab42ba03-f402-43f9-b536-d41655ef63db",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0c22e68e-72e2-4771-86ae-903c5c4b3464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52de20e-9247-49c7-9aa1-02b66162f755",
        "cursor": {
          "ref": "55155250-daec-47f3-8a29-97a67d4493ad",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "90e3b6bf-8576-4b4a-9360-077321b87b1f"
        },
        "item": {
          "id": "b52de20e-9247-49c7-9aa1-02b66162f755",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "08c42a7e-4562-4f30-8bdc-d6f5e77428c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f270839-f580-4eed-b0d8-d9e344ee44e4",
        "cursor": {
          "ref": "87673387-4fe5-42ee-90a6-790006887a27",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "93d3d422-fadc-43ce-b8e5-593675e7579d"
        },
        "item": {
          "id": "6f270839-f580-4eed-b0d8-d9e344ee44e4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "eb7fdcaa-588d-41e7-b7cb-2e0d62934211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6a64fc-d786-43ba-87b5-cfce816530ee",
        "cursor": {
          "ref": "7c6b5f1b-3f34-477b-a7c3-7d528c7a3f90",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "68c5940d-5287-4a6a-a6e9-58224b4b8423"
        },
        "item": {
          "id": "4c6a64fc-d786-43ba-87b5-cfce816530ee",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7f6e7b72-d59d-4fbb-9e10-4cf7c28a0c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dec3e43-8e94-4f81-89d5-b4ee70cd166e",
        "cursor": {
          "ref": "5d0c1465-4c70-4a07-beb7-1e2feb8be880",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1332f016-0d3e-4bfb-bb6e-ba9c004d0404"
        },
        "item": {
          "id": "7dec3e43-8e94-4f81-89d5-b4ee70cd166e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "79da4428-ffd6-408c-aa7b-dda2370e13de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dd1e76-2dc1-4010-89f7-e5b567ce7666",
        "cursor": {
          "ref": "399106e9-1c47-4f2a-8e99-b392f0b8bad0",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f9eb662a-ff21-44dc-a7cb-41147f8f0c79"
        },
        "item": {
          "id": "d0dd1e76-2dc1-4010-89f7-e5b567ce7666",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3ad875c0-206e-4440-8f9b-e25a69fb0ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6d3e2d-69bd-4134-bd81-9f6152a4b270",
        "cursor": {
          "ref": "efb4d10f-c0d0-4f69-9244-4af91e0a2ced",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4a908d2c-f661-49f4-a64f-2d13817ea99e"
        },
        "item": {
          "id": "8a6d3e2d-69bd-4134-bd81-9f6152a4b270",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e6677b86-2ab0-4390-b8a5-9f5618e09691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b20a82-ad20-4d7e-a9e3-300747e50fa8",
        "cursor": {
          "ref": "e0e42fc0-d62f-4ab9-a02e-d771ba422235",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1889e52d-1349-4f0e-ba83-1b26fa1f2f54"
        },
        "item": {
          "id": "08b20a82-ad20-4d7e-a9e3-300747e50fa8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dca20220-2b66-4087-9f82-27f3d8062a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03994d3b-a7d1-4149-ad49-0a67a664f1cd",
        "cursor": {
          "ref": "df90c825-6977-4d10-9239-dba64ee2c3ac",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0a549c51-be2f-4316-b965-0fada94250de"
        },
        "item": {
          "id": "03994d3b-a7d1-4149-ad49-0a67a664f1cd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1bb036fe-9180-438b-96e6-78be8508c2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1a8c6-f3d5-4482-8ac6-f72b669f6733",
        "cursor": {
          "ref": "a2b985c3-00cd-4508-a236-c9e1a21296f5",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f8bbf91b-e35d-476a-b8e4-e5993c35a2df"
        },
        "item": {
          "id": "c9f1a8c6-f3d5-4482-8ac6-f72b669f6733",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "493d7b99-fcf5-48ef-adfb-c64e93565332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750515bc-4ac4-4479-b9c3-f8c1d619efa3",
        "cursor": {
          "ref": "d4bd5b9e-0da5-484e-8071-cec07e101fc5",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7355408a-6b71-438d-81f6-a8d50e754b5c"
        },
        "item": {
          "id": "750515bc-4ac4-4479-b9c3-f8c1d619efa3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5e9662c0-dddf-49f6-a349-cecb5d8967c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162b7ec4-3971-404a-a63f-79828e220c40",
        "cursor": {
          "ref": "6d0233c8-4505-475a-ae6b-4e66d4fae5dc",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "324874fe-32a7-43c7-9f25-d9e2e39abc8a"
        },
        "item": {
          "id": "162b7ec4-3971-404a-a63f-79828e220c40",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2f33ae8a-5b50-4d81-8110-94047f8c3ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb372419-5d8b-4ed5-8da0-a37f48647fbd",
        "cursor": {
          "ref": "4be03159-4772-4f72-89ae-154cbfa1f9c3",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2e6660e0-359c-4fe6-b670-f5dec48f9720"
        },
        "item": {
          "id": "cb372419-5d8b-4ed5-8da0-a37f48647fbd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8eeb135c-db3a-4925-9e5d-82d10d7b67ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd6c71a-f9a4-4ce6-907b-8f270f867e67",
        "cursor": {
          "ref": "d356d873-2093-4e3c-a7d6-bb926cacfb7d",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "327bb63f-ba91-4df1-bd55-91139e99aeb4"
        },
        "item": {
          "id": "ddd6c71a-f9a4-4ce6-907b-8f270f867e67",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "92ea7783-0e4a-422b-b2aa-5b759120e56c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3df48eb0-e904-41ea-bc0c-0073e8f3a260",
        "cursor": {
          "ref": "01986c9f-47cb-4319-9887-aa042cecf8ce",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8c3b7aef-ab2b-4e83-aa8b-ae1a747a097c"
        },
        "item": {
          "id": "3df48eb0-e904-41ea-bc0c-0073e8f3a260",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3ddcd463-6b13-431c-aae5-b2d4553cdc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "af3fd1e2-5628-4c1e-960a-41342d13e321",
        "cursor": {
          "ref": "02f1dd2f-a803-4f85-8375-4105fc7965bc",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "422cb5c7-6e66-446b-a1b8-de1d0ad8a836"
        },
        "item": {
          "id": "af3fd1e2-5628-4c1e-960a-41342d13e321",
          "name": "credentials_issue"
        },
        "response": {
          "id": "18c0bbf6-cfeb-4a1d-9ab1-890c5c536a30",
          "status": "Created",
          "code": 201,
          "responseTime": 1981,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "daff2727-26eb-42d2-ba40-bc1281d65eb6",
        "cursor": {
          "ref": "29875d0b-1aa3-465a-baba-c7084c67ce41",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e4e394af-4f7d-4007-b69a-fb9b40bc7332"
        },
        "item": {
          "id": "daff2727-26eb-42d2-ba40-bc1281d65eb6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6c5cc79a-ec82-47db-89b8-ebbdb8f13188",
          "status": "Created",
          "code": 201,
          "responseTime": 2274,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d62700-6077-433b-9473-cc7bbc7e7f55",
        "cursor": {
          "ref": "29bd8e41-11ab-4223-8444-a77fd333f948",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "046f0611-1d67-41e5-8d3e-c554b3695185"
        },
        "item": {
          "id": "36d62700-6077-433b-9473-cc7bbc7e7f55",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "79b999c6-b578-4239-b9c2-2a6c495294c8",
          "status": "Created",
          "code": 201,
          "responseTime": 2274,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "877e82d2-678a-4282-8b22-f1f7b80529d1",
        "cursor": {
          "ref": "28c345e5-9fdd-420a-8fa7-0aed3a5de73e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "52121b0e-3ca6-465d-90fc-832aa1429285"
        },
        "item": {
          "id": "877e82d2-678a-4282-8b22-f1f7b80529d1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e9744010-b25f-4273-aa13-4950effe48d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2243,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-18T00:41:46Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-18T00:41:46Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "9d2e59e5-c48f-4726-90bc-44c0b4c45672",
        "cursor": {
          "ref": "8b229a86-7d7e-4af5-b005-ecddc1e511a3",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fa5f928c-e8d3-4194-9678-5c5c84e4a7b6"
        },
        "item": {
          "id": "9d2e59e5-c48f-4726-90bc-44c0b4c45672",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7e715ad5-9817-4614-919f-8c299fda9978",
          "status": "Created",
          "code": 201,
          "responseTime": 2246,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e42da9-c4dc-47b0-9e09-ea2cffe664aa",
        "cursor": {
          "ref": "72c3838c-a80b-442c-b799-51869a7820a2",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e2d39b33-1201-4afd-ab3b-db2a4c575e0f"
        },
        "item": {
          "id": "c4e42da9-c4dc-47b0-9e09-ea2cffe664aa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c5b8718-dffc-435f-bfd2-267ea6c17e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e42da9-c4dc-47b0-9e09-ea2cffe664aa",
        "cursor": {
          "ref": "72c3838c-a80b-442c-b799-51869a7820a2",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e2d39b33-1201-4afd-ab3b-db2a4c575e0f"
        },
        "item": {
          "id": "c4e42da9-c4dc-47b0-9e09-ea2cffe664aa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c5b8718-dffc-435f-bfd2-267ea6c17e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8436b5-1760-4004-98bf-7c2b3a5c5386",
        "cursor": {
          "ref": "4e6551ad-7f89-41f2-ac4d-50eef8562189",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2a8f4a8a-499e-41dd-af55-5558f64b9bf3"
        },
        "item": {
          "id": "da8436b5-1760-4004-98bf-7c2b3a5c5386",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08e49fad-7a9d-4f24-9bf3-89b3febcd8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cc2b43-1bdb-4e74-b502-75aa0669a2e4",
        "cursor": {
          "ref": "ebf3c4d5-ca40-4609-8f05-db5c553f5513",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ccfa349f-63cf-48f7-8b61-02d9eb308544"
        },
        "item": {
          "id": "b0cc2b43-1bdb-4e74-b502-75aa0669a2e4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5ac39f15-9c0b-4b60-9fa2-737cf453e45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72383dde-b29d-407b-9f28-bb231e78e6ae",
        "cursor": {
          "ref": "633d6c83-a02b-4703-bbdc-8156e9777bcd",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f314060b-c26f-4cf9-9d02-1715c630afb1"
        },
        "item": {
          "id": "72383dde-b29d-407b-9f28-bb231e78e6ae",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0f740d91-45da-4756-8df2-9777462eea15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7478cca8-dd03-40a5-9314-64f3e81138ac",
        "cursor": {
          "ref": "1fcf4e36-495e-4f5c-aa40-05fb4a13eee6",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f7cd191c-14da-4606-bd8e-ccc229d53dc5"
        },
        "item": {
          "id": "7478cca8-dd03-40a5-9314-64f3e81138ac",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "36035809-77c4-4db6-9dd0-f6a849fe7141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93003b5-4a26-42a0-be25-5f7323cae35d",
        "cursor": {
          "ref": "37a93a14-ef5e-4c95-b425-5e2e4886e9ba",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b7449a4d-1e18-42af-9874-6af37bd8cce5"
        },
        "item": {
          "id": "c93003b5-4a26-42a0-be25-5f7323cae35d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fd49846a-8c88-46d2-a2bd-e3771100a687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282e6ea0-d7f9-4b5b-a9b2-6c03dd4e86c2",
        "cursor": {
          "ref": "b5dda395-c58a-48ce-bedc-579a186c7db4",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ae62064d-744d-4811-b348-dd5092fb38c0"
        },
        "item": {
          "id": "282e6ea0-d7f9-4b5b-a9b2-6c03dd4e86c2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5e7d767a-af0c-4fbe-8eab-279f2932b1f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee7581e-7550-4efc-939d-4d1051c0d28b",
        "cursor": {
          "ref": "1ea8980e-32a0-4624-9041-c2d7b8b506e7",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2ee7bf88-8a2a-41a7-99af-b04604b9e2f9"
        },
        "item": {
          "id": "5ee7581e-7550-4efc-939d-4d1051c0d28b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "76ef633d-0ebe-4f56-8c5c-099fd16cdcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7567d8-37a7-412f-876e-2aa0f983a690",
        "cursor": {
          "ref": "887a26c1-0e59-4d4d-8082-2467ae826f51",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a67647f6-54b2-4c05-abc3-9e51e56915d0"
        },
        "item": {
          "id": "3a7567d8-37a7-412f-876e-2aa0f983a690",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e7170524-ab96-4857-9158-dd60ab9cae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4353e639-0e69-48ac-be12-4be4fca1b7be",
        "cursor": {
          "ref": "95870f38-82ac-45d8-908e-d6435cd1027b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b824ac47-c785-4076-a490-1d23cd509dd1"
        },
        "item": {
          "id": "4353e639-0e69-48ac-be12-4be4fca1b7be",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2d3c776d-e8de-454c-ad43-38cfdb754b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7b7a15-6c09-4d6e-97a3-20827195d420",
        "cursor": {
          "ref": "d4bd6261-4cae-4e3e-a774-45e779d2a1a5",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "481debe4-e638-4aa0-b65a-b5df57b9ade2"
        },
        "item": {
          "id": "5b7b7a15-6c09-4d6e-97a3-20827195d420",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "49cbcbf5-ad32-4ecf-a2a3-0714331e099c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a7f2fc-8af3-46f9-97c4-0bae665469a1",
        "cursor": {
          "ref": "6598f46a-143f-477f-94a8-8eb79952057a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c8ed43cc-328b-42b2-8666-db6cc1ca59bf"
        },
        "item": {
          "id": "44a7f2fc-8af3-46f9-97c4-0bae665469a1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "075dae58-d7fd-435a-9141-29af811a28a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c63521-4fce-4bff-af34-61d5f5ed1fe5",
        "cursor": {
          "ref": "c6ef2707-ce79-4e32-bd69-270650df525a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be612066-a175-4d0d-9204-465e62a9a710"
        },
        "item": {
          "id": "b3c63521-4fce-4bff-af34-61d5f5ed1fe5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "52395269-1167-4fde-b884-f10fa634ecba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264abd6b-86fa-490e-b70f-f3b29f1d2a12",
        "cursor": {
          "ref": "778c9a53-51a6-4b87-8861-fceb38743d52",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5187720c-4b19-4c30-952e-60fda1a8de08"
        },
        "item": {
          "id": "264abd6b-86fa-490e-b70f-f3b29f1d2a12",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e1400eef-5018-4f46-9d6b-f84d3fd25865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7b1252-479b-4232-90d6-05c882ea9696",
        "cursor": {
          "ref": "2c92aa7c-9f46-4169-ad3e-667c7b322192",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "011f287d-5f8c-4a24-a25a-73aea5ddd213"
        },
        "item": {
          "id": "ea7b1252-479b-4232-90d6-05c882ea9696",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ce19372f-720d-47af-a835-c061bfb94ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b51ffc8-b978-4a10-a085-e04f2c9baade",
        "cursor": {
          "ref": "e006ab52-24ad-42a6-ba8c-5c6394d39a5e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "365eccca-2b29-4724-9b3c-f1dbb0e02720"
        },
        "item": {
          "id": "9b51ffc8-b978-4a10-a085-e04f2c9baade",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "81c867d6-9aa1-4786-ba87-a454500713d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d15c88-a400-4cc4-80cc-85673ef3d0bd",
        "cursor": {
          "ref": "a285e355-c841-4490-b90e-64604c9f10c5",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f324386f-2473-4a18-ad72-6d078bc44ddb"
        },
        "item": {
          "id": "b5d15c88-a400-4cc4-80cc-85673ef3d0bd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8cd6bd28-8cff-407d-b3c6-93b23e78bdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7f99d9-0dd3-4c2a-92ea-540b204ef411",
        "cursor": {
          "ref": "669da89d-4b9c-4450-834c-042d57b12dd7",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "33dd7e41-c47b-4210-babe-ef0c51e76116"
        },
        "item": {
          "id": "9f7f99d9-0dd3-4c2a-92ea-540b204ef411",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d399a6c0-1ca2-4b7d-b3fc-685aa59889b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd03d90-7f12-4fe7-a171-59736fe22c76",
        "cursor": {
          "ref": "70cb7d10-abff-405e-a3e1-d117877bc523",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d543638c-9426-4f40-a9d8-07ce84778cf9"
        },
        "item": {
          "id": "7fd03d90-7f12-4fe7-a171-59736fe22c76",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "575a38eb-9756-4159-b256-437985cf1502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1410e3cc-1be6-4444-b3d7-33e012be07e2",
        "cursor": {
          "ref": "60884738-f43e-4969-b319-51851b51e75f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dc9d1ab6-c6a9-4259-8eba-8c9ae75e825c"
        },
        "item": {
          "id": "1410e3cc-1be6-4444-b3d7-33e012be07e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2b968700-4968-4c45-8f77-0fa45dfe5f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f8fe65-ca3a-476a-935f-5a43fee313c4",
        "cursor": {
          "ref": "63233abf-0b82-46f1-8e92-5b0246a8be2c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cddaa469-5c74-4290-afeb-3b3a16ff6412"
        },
        "item": {
          "id": "20f8fe65-ca3a-476a-935f-5a43fee313c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d8991e89-48f8-406a-84b2-5472c9a871d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 921,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f57238-920c-426d-98d1-f021e347f586",
        "cursor": {
          "ref": "1ccbd3be-cbf8-4109-93e9-f666bacb5c7a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8fd6115f-48b6-4193-b66f-ad2f74ad953b"
        },
        "item": {
          "id": "d7f57238-920c-426d-98d1-f021e347f586",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7b30d338-7c62-4c5e-855a-dffb3f885f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e50122-bfc6-4f88-a171-ef36a42a27ae",
        "cursor": {
          "ref": "39d11d96-cb0f-4d96-90f2-bba38136ac7d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1d291745-45ec-4097-a78d-97176936fc7d"
        },
        "item": {
          "id": "c3e50122-bfc6-4f88-a171-ef36a42a27ae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f6397bb2-3e25-4716-bfaa-cb39afc74254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339646fe-1f4e-4f1d-9773-7e1d40168fa6",
        "cursor": {
          "ref": "4260f653-5004-4b45-a378-2cc8f32f8fdf",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "693847e0-dc85-43bd-a93d-970d2ef0a93d"
        },
        "item": {
          "id": "339646fe-1f4e-4f1d-9773-7e1d40168fa6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1b6d39a6-e211-441b-ab1c-9d6800f1a1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5594a3d-1387-49dc-bf31-c88292a0eb73",
        "cursor": {
          "ref": "b3713fde-d494-43d7-8c65-c5d5c0ef1442",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5e0258bc-eb22-429f-8d9e-89b1ab7d69d0"
        },
        "item": {
          "id": "e5594a3d-1387-49dc-bf31-c88292a0eb73",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3adb9b88-6012-4488-bfc7-84d8c1275e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37d0d0f-0f9f-402a-8f71-5c04c66ad185",
        "cursor": {
          "ref": "998cf7f6-739e-4a7e-aecb-f786b6b696f2",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "85d98506-46aa-4314-b8e1-601441d18800"
        },
        "item": {
          "id": "b37d0d0f-0f9f-402a-8f71-5c04c66ad185",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c72207e2-5c02-4ff9-b754-0a8f9b46e2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3297af29-908d-4c7f-bd05-e7043c5c1faf",
        "cursor": {
          "ref": "933d4e0d-7045-400a-80c4-c217c878b8c9",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ec36f0a2-b29a-4351-9eb0-7e5185191c3c"
        },
        "item": {
          "id": "3297af29-908d-4c7f-bd05-e7043c5c1faf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d736755c-2807-4c4d-8c89-35da79acee65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d03fa2-aee4-4b16-98bd-2747f03e94ec",
        "cursor": {
          "ref": "bca0fd4b-acb5-4df7-add8-ca184a3a1053",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "13de6a75-7e71-4752-bd33-de0cce2b24cf"
        },
        "item": {
          "id": "c9d03fa2-aee4-4b16-98bd-2747f03e94ec",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1cda558a-574e-4c37-a634-612213402e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835e391d-26ed-4ef6-b0aa-f6b251d6aa5a",
        "cursor": {
          "ref": "ea7e2b5f-c10a-4468-8f35-ad09205e6954",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7578ca7b-9706-47c3-bc6b-a1741e8878ba"
        },
        "item": {
          "id": "835e391d-26ed-4ef6-b0aa-f6b251d6aa5a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "112f70d9-3de8-4e53-ad46-a57d8430a259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ccccca-55cd-4f40-aaff-bd271968e954",
        "cursor": {
          "ref": "7d817a9e-d038-4fe1-a7d1-9f630231c545",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9015d0af-837f-4b66-8cf8-ee754fc9e429"
        },
        "item": {
          "id": "f9ccccca-55cd-4f40-aaff-bd271968e954",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2509b036-35c0-4099-8e5c-e57474ddd98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25121b7-8a4c-4566-b701-964b022bab89",
        "cursor": {
          "ref": "35ac5850-368d-42b1-8ad7-96eb1c42d845",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bbd34300-9989-407c-9cf4-053d04a80c0f"
        },
        "item": {
          "id": "c25121b7-8a4c-4566-b701-964b022bab89",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "93fc4ea1-c258-454c-a550-6383db2d63e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ed60d9-3aeb-4a71-a13a-ccdcb951d368",
        "cursor": {
          "ref": "7d41fcb0-ba39-4c90-9b1f-488030db639e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "454b3372-f586-49e5-97da-3ada2ed13803"
        },
        "item": {
          "id": "29ed60d9-3aeb-4a71-a13a-ccdcb951d368",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "53108c88-5e21-40ef-8704-7a7de917cc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fc31f8-cd10-4ebe-965d-1769e4ffe755",
        "cursor": {
          "ref": "875eb67e-8f8c-4d22-b52c-c2a2eee03e1c",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ac635604-81c6-457e-8090-b7f52d65d274"
        },
        "item": {
          "id": "e1fc31f8-cd10-4ebe-965d-1769e4ffe755",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7db605da-32c6-4b1c-835c-2b9aa315abbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f6f16e85-dc79-4701-9cfc-9533d89878c9",
        "cursor": {
          "ref": "c792a8aa-1991-4dad-971e-3d7c5bd074cc",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "18223739-36f4-4be6-9097-c98219d303bb"
        },
        "item": {
          "id": "f6f16e85-dc79-4701-9cfc-9533d89878c9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2f0ccf21-1775-4132-bc87-faeb1790a50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f265e7bd-647b-4882-ad79-ee70ae78a4c0",
        "cursor": {
          "ref": "facdec5b-608f-4207-9577-385151fc16ec",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "efbce7ee-1669-4de9-a02b-a8931c23a5e7"
        },
        "item": {
          "id": "f265e7bd-647b-4882-ad79-ee70ae78a4c0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f8cdb215-b570-40e1-8d66-59f1f982a41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f265e7bd-647b-4882-ad79-ee70ae78a4c0",
        "cursor": {
          "ref": "facdec5b-608f-4207-9577-385151fc16ec",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "efbce7ee-1669-4de9-a02b-a8931c23a5e7"
        },
        "item": {
          "id": "f265e7bd-647b-4882-ad79-ee70ae78a4c0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f8cdb215-b570-40e1-8d66-59f1f982a41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7f3878-ae82-422b-8213-f4a099a6788e",
        "cursor": {
          "ref": "31a83ff8-5adb-4666-8a54-5b63fb703ca2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6aaef673-4d19-4207-a4b6-bda4a31bee94"
        },
        "item": {
          "id": "de7f3878-ae82-422b-8213-f4a099a6788e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c3b08631-5eec-4e3c-a904-d38370489e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e42e71a-c15e-46b5-96eb-185972821889",
        "cursor": {
          "ref": "5a7d609e-ced1-461b-bc98-ea5faff0aee9",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2840e627-4ca6-4aa1-ad93-0612bc05701e"
        },
        "item": {
          "id": "9e42e71a-c15e-46b5-96eb-185972821889",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "157987b0-7caf-40c4-8e6e-9be55cb93ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d5a314-2396-4335-99c3-8cc67e363666",
        "cursor": {
          "ref": "5c5c972f-c274-46ed-be54-dd3e74f0b1af",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "56253435-d505-4599-a583-5f9122e02748"
        },
        "item": {
          "id": "e0d5a314-2396-4335-99c3-8cc67e363666",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bb3d63cf-b8b8-47e9-9f6b-51dbf3a54a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9227278a-7503-443a-81f7-eb9761914506",
        "cursor": {
          "ref": "de7b6f8d-2fd9-4098-8a84-186f714a0c2c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5fdd48e2-4d08-4abb-b31a-48485d806244"
        },
        "item": {
          "id": "9227278a-7503-443a-81f7-eb9761914506",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2636d787-c71e-4f2e-b003-02b42340ab9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdfe998-e7ff-41eb-a338-98d4c0c7d351",
        "cursor": {
          "ref": "94ed1f4f-28c2-4601-a455-d32bf3d8553a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "402ec939-902d-4d90-974e-6d156598d93b"
        },
        "item": {
          "id": "3fdfe998-e7ff-41eb-a338-98d4c0c7d351",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "400701ea-499e-4195-8530-503cef246854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8164b4-1dd8-497f-ac17-1756aca8f0cc",
        "cursor": {
          "ref": "f7acb32f-1bed-449a-85c7-77e5e65d2233",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7b672481-0dcf-49ad-a2e8-ad68482f8ba9"
        },
        "item": {
          "id": "cb8164b4-1dd8-497f-ac17-1756aca8f0cc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "74736a1d-fe00-44f1-9925-82293931ec06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be1db6a-e6ac-468c-8945-0539b1c3506a",
        "cursor": {
          "ref": "df05f2f2-309f-45df-a4b6-86babcf23267",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0e016382-6cdf-495d-9dba-ccb11d58f6e5"
        },
        "item": {
          "id": "2be1db6a-e6ac-468c-8945-0539b1c3506a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f7a2deb0-1157-4de5-b787-e853649ddc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8946fda-2788-46b1-835c-561a4ff6c20c",
        "cursor": {
          "ref": "a068c68e-473d-401f-b54d-84d9933882ca",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8a30a7a8-0de7-4f5b-885b-902398e8fe5a"
        },
        "item": {
          "id": "e8946fda-2788-46b1-835c-561a4ff6c20c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "04e0a3c6-81ad-4b49-8489-3c7271a5f032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91434a5c-1779-4550-b7b4-7f2b6457cc9d",
        "cursor": {
          "ref": "b051f7c8-e38b-4411-8f12-d9987ea2ca9f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e7208fe5-e310-4cf3-8c12-88a73997f5c0"
        },
        "item": {
          "id": "91434a5c-1779-4550-b7b4-7f2b6457cc9d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f7583b49-a08b-4ea0-87bd-140e220b3b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0f2c43-5e48-4bcd-a63e-071fab825861",
        "cursor": {
          "ref": "04fd31b6-5e05-4c32-affc-d54e7709c0aa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5785e3ce-9318-497b-98e6-437889c65dd2"
        },
        "item": {
          "id": "5e0f2c43-5e48-4bcd-a63e-071fab825861",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "46c6dcc1-f1e0-4e03-87b5-398a5b56f00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4da69e-2793-4c0f-895f-21e266fd0811",
        "cursor": {
          "ref": "41e81e0f-eed3-4a9d-99bc-5d9b694ddfcc",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4f5ed871-953c-4b48-810f-5a4fa047cb6c"
        },
        "item": {
          "id": "5a4da69e-2793-4c0f-895f-21e266fd0811",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0a2bba6e-59bb-4592-83a7-f15846a0250e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06283e29-0ba8-4cd6-8321-74c4ca4c9f56",
        "cursor": {
          "ref": "2d66f346-d93f-4895-b765-f67423bce681",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bdde92e3-ab24-42ba-a7a5-79d3be601023"
        },
        "item": {
          "id": "06283e29-0ba8-4cd6-8321-74c4ca4c9f56",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "07d5cc39-bb0e-494e-b6df-c1434177094c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e01e2a-51d0-4be5-8b99-f81f8587fa5c",
        "cursor": {
          "ref": "18460b5d-43f6-44ea-9a01-aafa154e4d0d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7fd4022c-d307-4709-96c1-cdd374606e71"
        },
        "item": {
          "id": "a5e01e2a-51d0-4be5-8b99-f81f8587fa5c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "baaca7b0-9128-4fa0-a367-5edff316f781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd56227-2c2d-46b6-803e-d9e173d36df2",
        "cursor": {
          "ref": "f6373ae2-f538-4c3a-9800-9febc5c85fd9",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "855d3520-ed13-40eb-99e3-102236bc93f1"
        },
        "item": {
          "id": "dcd56227-2c2d-46b6-803e-d9e173d36df2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3506eeea-c5f0-49bd-a5de-3a519a3c190c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c049e3-f486-431d-a55b-17b45142e684",
        "cursor": {
          "ref": "0af89110-f790-4bbb-8027-79bd2506cdbe",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4e8c900a-8f45-42e9-b992-c4651e9d4ab9"
        },
        "item": {
          "id": "74c049e3-f486-431d-a55b-17b45142e684",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d88aa49c-7218-4e1d-8b8c-a9affb7b14cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9d238d-63a7-48ad-a747-640408142be9",
        "cursor": {
          "ref": "d9556329-9764-4ee3-9f95-bc62957401bf",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e6214343-29c1-43bd-94d6-e1af778b9ae9"
        },
        "item": {
          "id": "db9d238d-63a7-48ad-a747-640408142be9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ae55fb51-876a-4a23-a1b1-cf120d3c7fdc",
          "status": "OK",
          "code": 200,
          "responseTime": 350,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "99d19522-b496-48e3-a111-0d88eef2c6d1",
        "cursor": {
          "ref": "946298f9-ded5-42ea-8b74-7d4836b95dab",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c74cc902-cee4-440d-85d0-6f80937b326d"
        },
        "item": {
          "id": "99d19522-b496-48e3-a111-0d88eef2c6d1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f540f8a2-4939-4871-b036-21993e3b669b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481e5a17-1dd5-44b4-b054-a93b6c31457d",
        "cursor": {
          "ref": "d6238f8f-7855-4ec5-aa46-ed2b4c5e7f41",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "854a70dd-32bb-412a-b979-386b7eba9f7a"
        },
        "item": {
          "id": "481e5a17-1dd5-44b4-b054-a93b6c31457d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a79713ad-0319-4618-9457-f998053ffdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b04dcff-2b6b-4b3c-9a58-7876433a402d",
        "cursor": {
          "ref": "84fed77d-02a4-420c-a5d7-667f7162f90a",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "87631220-ccdc-4589-84cd-e5ce1850372b"
        },
        "item": {
          "id": "9b04dcff-2b6b-4b3c-9a58-7876433a402d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "31a51de1-4dc3-43a1-b02d-deb2f58e6ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0977d177-aafa-4a13-8465-f0746ceff18f",
        "cursor": {
          "ref": "2c884ba9-edc4-40c7-8ae6-65c35bcdfb80",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "39850fd8-164b-47d2-8776-da0969ba5284"
        },
        "item": {
          "id": "0977d177-aafa-4a13-8465-f0746ceff18f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c6091134-b780-44fd-8292-28c93adf2aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eceac445-9e53-415b-b8c5-20899a6e7fc3",
        "cursor": {
          "ref": "a9f6cdb7-c3f1-4ee7-af69-8301dc90a8a7",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "294ce87d-ba18-45fa-9929-8cad55c1b7af"
        },
        "item": {
          "id": "eceac445-9e53-415b-b8c5-20899a6e7fc3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0a8ceffc-d573-4c25-963f-e3ca5a60e9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117ac775-7c47-4ccc-990b-eb34038a3707",
        "cursor": {
          "ref": "cb9c4067-eb5f-4af3-8313-12953041cfa8",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1db554cf-10df-4204-b5f7-c01c907cecd4"
        },
        "item": {
          "id": "117ac775-7c47-4ccc-990b-eb34038a3707",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e3431677-0cd4-424e-85b8-48af189ff443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b6b0a4-a209-46b9-a8e3-73b7871c1406",
        "cursor": {
          "ref": "162047eb-c572-4acd-8345-c410ac2cd8d5",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a18a33d9-e53d-4c26-b4ff-795ccdc74603"
        },
        "item": {
          "id": "a6b6b0a4-a209-46b9-a8e3-73b7871c1406",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7a18aa6c-bc74-4be0-a353-0547252c7f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b7af61-6b63-4c51-8b0c-6e639639ad4e",
        "cursor": {
          "ref": "701b5798-8e1d-4ec8-afd9-8f684aa2dea6",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "935489fc-72af-43d3-b131-8531b9535353"
        },
        "item": {
          "id": "a6b7af61-6b63-4c51-8b0c-6e639639ad4e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "329975e5-c880-4df9-ba15-2d5f506740a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1d1682-6029-44fb-9ff3-6e74fb4949a0",
        "cursor": {
          "ref": "f5edbbb4-d1cd-451a-af56-6d00ba03911e",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b7393567-f334-4722-a9da-2747e3a0cf12"
        },
        "item": {
          "id": "1f1d1682-6029-44fb-9ff3-6e74fb4949a0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d250c5e7-1a07-422a-95c8-e3cb81e9af57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defdc3d1-62a9-449a-8313-183ec1be8975",
        "cursor": {
          "ref": "655caef0-b877-4910-a235-ad0ce40894a9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "573be85a-ce2a-4dad-974d-462df0880f4b"
        },
        "item": {
          "id": "defdc3d1-62a9-449a-8313-183ec1be8975",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bca50180-59b8-4750-abaf-5c825757f23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456561bb-9eda-4b45-a732-26ee16d77437",
        "cursor": {
          "ref": "e72e42d6-b63a-4d75-a119-20f06367d349",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3e43464e-7739-4870-8dde-efe43966d5c0"
        },
        "item": {
          "id": "456561bb-9eda-4b45-a732-26ee16d77437",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d4e33b50-85a5-4453-a728-36fd149a8830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43e9fe8-538c-431f-bf91-93b83047cd38",
        "cursor": {
          "ref": "d8ac8f3f-16f3-4156-a64f-2da6ecc5da99",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "aac53379-304a-45cd-9125-cfeeda0b5423"
        },
        "item": {
          "id": "d43e9fe8-538c-431f-bf91-93b83047cd38",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "459219aa-b0bc-4fea-b69f-57f08d6113a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a49cf0f-bed9-45bf-a440-f1539b64dbce",
        "cursor": {
          "ref": "fcafa393-62b0-402d-a066-efec43e011a8",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3c5b1102-f071-4320-b07d-7144a7b9f603"
        },
        "item": {
          "id": "1a49cf0f-bed9-45bf-a440-f1539b64dbce",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3ab87f55-07ee-4a2f-b823-69630a7c8050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd495f14-837f-4bce-b21e-b536a0130f73",
        "cursor": {
          "ref": "de5cee4d-ce36-4835-99e6-3173afc2d11c",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5f5a24ae-a8a3-42c9-9e11-6598d25ef66b"
        },
        "item": {
          "id": "cd495f14-837f-4bce-b21e-b536a0130f73",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7b38f3b7-b85d-44e4-a22b-744b40f9e86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8faf60-9968-4b13-98b6-042b16ba5a5b",
        "cursor": {
          "ref": "86188434-a834-4f97-9940-8f1f2b7b7461",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c0241118-b3ce-44c3-b763-3cf6026e97d1"
        },
        "item": {
          "id": "1f8faf60-9968-4b13-98b6-042b16ba5a5b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "de945ce5-2931-40d9-8bff-d969cd88653a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7867dd93-5897-4f4c-87f2-e5fcc24a9e69",
        "cursor": {
          "ref": "b140d1e6-3a87-4cef-9d82-dc00ee1a2f45",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "63ef49cf-759c-4898-a805-44919d5f72c3"
        },
        "item": {
          "id": "7867dd93-5897-4f4c-87f2-e5fcc24a9e69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e9558ed8-a03a-4ab7-afd0-5279e2808e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc1dea6-ecd6-4be3-93d5-150adf226b9e",
        "cursor": {
          "ref": "12e1451f-1945-4584-9211-834a61dfe5de",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3222f09e-9e5f-46c9-9490-a71a1f86d0ca"
        },
        "item": {
          "id": "0fc1dea6-ecd6-4be3-93d5-150adf226b9e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1c5e548b-8779-493f-8b02-5b08af54417b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca6603b-c626-4ad0-9322-5edf55acacb3",
        "cursor": {
          "ref": "e362356f-a51f-4714-abf7-508e6448c1c2",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "43c6b233-8d08-44b9-91f5-fd4d2f2a6abd"
        },
        "item": {
          "id": "1ca6603b-c626-4ad0-9322-5edf55acacb3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3a927749-63ed-4e12-9e14-59d0a972c4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad3ce92-245e-4aaa-b3fe-956093006316",
        "cursor": {
          "ref": "970b9dc0-9181-4b9f-968c-819a8e24c102",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2f1d3f7c-8ec9-4f94-af57-d3676e7bc4e1"
        },
        "item": {
          "id": "6ad3ce92-245e-4aaa-b3fe-956093006316",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2342eeb1-604d-4a71-b7f6-cb12ebb95777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95857efe-4be5-4626-9b3a-2ed240342233",
        "cursor": {
          "ref": "8efb5322-bbbd-4e69-94dd-a44875ead07e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4d0a1a1d-76dc-4b92-a26e-b993f5217181"
        },
        "item": {
          "id": "95857efe-4be5-4626-9b3a-2ed240342233",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "29b29796-c937-41b0-8aa6-e6767a4bbb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af570b8d-b55d-4724-b3b8-35dbf590e747",
        "cursor": {
          "ref": "79c0c4a9-b209-4197-ae81-5afa8bb4bf3a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cf580545-8a92-4b9a-b74c-10e378ea116b"
        },
        "item": {
          "id": "af570b8d-b55d-4724-b3b8-35dbf590e747",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d139862f-1dc4-48dc-8475-4532a191ad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a052d6e-f940-44a0-a9e1-10c554483a14",
        "cursor": {
          "ref": "e12bc959-7104-4d70-946d-32fbed34d6e0",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "81c6b4db-9b1c-4f3b-88e6-0a35838f2b1a"
        },
        "item": {
          "id": "0a052d6e-f940-44a0-a9e1-10c554483a14",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0edb6c70-ac0f-4c0e-acae-37f7d7ecf029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b67340f-3b2b-4235-a661-d766f9d37b23",
        "cursor": {
          "ref": "9f196950-2b17-4503-9265-b6339762fd05",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9f56f970-cb53-4b4c-8b2f-f91b225d6e63"
        },
        "item": {
          "id": "2b67340f-3b2b-4235-a661-d766f9d37b23",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6eefcccc-f131-4757-82bf-f0bebe737616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63568d66-ed48-4c2b-a609-7be5d8f95647",
        "cursor": {
          "ref": "7de975b0-c8e2-4331-8584-adfb93abe112",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "28271a7e-1102-403b-b99f-9c39583367e1"
        },
        "item": {
          "id": "63568d66-ed48-4c2b-a609-7be5d8f95647",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8980019b-42c0-4139-b7e3-edcf1eb53cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc8b553-51b9-40d7-9cb9-5832a7f8c10f",
        "cursor": {
          "ref": "45323015-8d66-4f92-92cf-e13983194052",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3abb7e7e-3cac-41fa-875a-ab8f06344a1b"
        },
        "item": {
          "id": "fbc8b553-51b9-40d7-9cb9-5832a7f8c10f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bec6141f-468a-47f6-9452-d8ea36254eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d121179-b03d-4ca2-9252-59505fd52807",
        "cursor": {
          "ref": "9263283d-2ce3-4196-83ee-fe61bfd170cc",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1871e82d-205f-444d-a620-e7e0f057d1b3"
        },
        "item": {
          "id": "6d121179-b03d-4ca2-9252-59505fd52807",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8f9c702d-175a-47f7-b652-a97503e68465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fcb242-5ed6-4633-b707-bc297e42ce0f",
        "cursor": {
          "ref": "48dac4b7-6491-4569-b2d8-12a6dbe04564",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4d283d02-5ae5-4ddf-84e7-37ec2af9f3e1"
        },
        "item": {
          "id": "d2fcb242-5ed6-4633-b707-bc297e42ce0f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e88f6d24-8e8d-406e-b402-2244682a663e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caedc66-a3fd-41a0-a56d-ed9de67792fe",
        "cursor": {
          "ref": "b4739494-a455-4dac-9480-d3ef27ed43d3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "836835e4-b4fb-4670-b027-cc7ffbce6ebc"
        },
        "item": {
          "id": "9caedc66-a3fd-41a0-a56d-ed9de67792fe",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2b643af2-f5f7-4ace-99e0-d10986938f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fafb7a-9cb4-402d-9d72-881433a3df82",
        "cursor": {
          "ref": "dd262dd8-0c10-4749-8077-72213b7fe45e",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "73552e42-a15b-4c24-a316-16824203d896"
        },
        "item": {
          "id": "b6fafb7a-9cb4-402d-9d72-881433a3df82",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7a5b01a7-eda9-48ee-940a-4dc1ba5fe0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231efe71-2450-47f9-8862-0ed7d0ab00ce",
        "cursor": {
          "ref": "c910ff40-005a-4b0a-bca8-9799dc93d351",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4e89d343-9d38-440d-b2ea-6e409a5be618"
        },
        "item": {
          "id": "231efe71-2450-47f9-8862-0ed7d0ab00ce",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2ec852d7-8b01-41fc-b29b-21649796cc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c75767-4066-4abd-b391-46805aa620c7",
        "cursor": {
          "ref": "336021a5-7ad4-417a-bef2-10e0df3d636f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e675c84b-e674-4be7-849f-f5e2665d910f"
        },
        "item": {
          "id": "40c75767-4066-4abd-b391-46805aa620c7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "663d9333-a5ad-4c8e-b28e-e49f6fe969ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443ff665-e0ee-481c-8aea-32639c93acfc",
        "cursor": {
          "ref": "5a2b69a3-f590-4977-ad0f-9fbdfb191ae6",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9a1e1c38-3238-48fa-af3c-440475b93ac9"
        },
        "item": {
          "id": "443ff665-e0ee-481c-8aea-32639c93acfc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "381b835a-fa22-41e1-89ee-4b7292684797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a170c08d-057b-4bee-868d-e01bc12cea9a",
        "cursor": {
          "ref": "612adccb-c37c-455d-95b6-fe3d99e9f9ec",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "71c594b9-efe7-4789-a847-e4361526b6db"
        },
        "item": {
          "id": "a170c08d-057b-4bee-868d-e01bc12cea9a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d8ba794b-7471-4454-913b-92189464bb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d5d476-372c-44ec-aaed-edaaa4970a02",
        "cursor": {
          "ref": "63701f64-4439-431d-b783-9dcfb5643095",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5cc64f60-36b1-483e-84ed-2b87f63b53f8"
        },
        "item": {
          "id": "13d5d476-372c-44ec-aaed-edaaa4970a02",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c8f2df52-0e0f-42c2-9b62-319816269fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c10c8c-75db-4600-b84c-18b1604f78e4",
        "cursor": {
          "ref": "0e2f4d3d-8bec-4e58-9fe0-fe00ea6e7c67",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fe8742cc-ff19-43cf-9cb1-c42afd985bda"
        },
        "item": {
          "id": "d1c10c8c-75db-4600-b84c-18b1604f78e4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4cf0f958-d1c1-477a-ab65-944023c6e2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4a13b5-6cfd-4b0a-8d61-de5c19418c00",
        "cursor": {
          "ref": "d9720d0b-14e4-4d3a-9913-b457ad34fd6c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7b0b9b43-0d8d-4d9c-840f-17947aeae5e9"
        },
        "item": {
          "id": "ed4a13b5-6cfd-4b0a-8d61-de5c19418c00",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a85320f9-ef16-49a8-9767-003cf1cd32ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965a1029-dcbb-460c-befd-887642144254",
        "cursor": {
          "ref": "15313d20-9f50-4d1a-a2c9-1bde6ad75e26",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "72b82a39-131e-4680-88c9-d71a3728b6c3"
        },
        "item": {
          "id": "965a1029-dcbb-460c-befd-887642144254",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "909f3304-7532-40a8-b056-c4c67d3933dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4520a74-6cba-4729-b4e2-d9cb4ced3d2b",
        "cursor": {
          "ref": "2e506f3d-e742-4538-b268-b8ea168b40bc",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9c7e42fa-cdca-4454-b19d-5c654eeb9073"
        },
        "item": {
          "id": "e4520a74-6cba-4729-b4e2-d9cb4ced3d2b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e7fc213f-1e2e-4e75-aa40-2ba67a62fa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f370f48-4b23-407b-9958-4f00cdfac92f",
        "cursor": {
          "ref": "52abb19f-b7f3-4bc8-9bd4-ee0305af79c9",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ce388dcd-ae69-48d5-8828-77aaa032fe0d"
        },
        "item": {
          "id": "1f370f48-4b23-407b-9958-4f00cdfac92f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e098d92b-6fac-4414-8ddc-22fd4aa0439a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230db002-c61d-4d85-a5f3-25a3d27ceefe",
        "cursor": {
          "ref": "6b7cc84b-163b-45d5-a737-69ee85f76d12",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8f8f4e17-4110-4301-92e3-c476e7387bd4"
        },
        "item": {
          "id": "230db002-c61d-4d85-a5f3-25a3d27ceefe",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d6ac4666-f696-48b7-b891-11c6ebecd9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc573ce2-c31c-4874-bb6f-0b5a7004c5f8",
        "cursor": {
          "ref": "4a6f0144-f7d7-4ff8-990b-94fba81dd4cf",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "672e8e50-d976-45a7-848a-5f8b38c44e7a"
        },
        "item": {
          "id": "cc573ce2-c31c-4874-bb6f-0b5a7004c5f8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fc6bb01d-0a13-4bd2-b37f-7bf1f44bfb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa10e35b-c0fe-492d-989f-2841f601b953",
        "cursor": {
          "ref": "d52d6e02-3535-4354-86cb-457dacf1c402",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "49c321fb-34bc-44e1-aab6-380b1bc0f1ae"
        },
        "item": {
          "id": "aa10e35b-c0fe-492d-989f-2841f601b953",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "35bc1cd3-de31-4065-9ac2-182b918d905e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaead1d3-a6f8-4f26-8683-dda365e729fb",
        "cursor": {
          "ref": "d486eb1f-fd91-4c80-ba48-af19e231f31a",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f3857ce5-0797-4213-bee0-df722090c0a3"
        },
        "item": {
          "id": "eaead1d3-a6f8-4f26-8683-dda365e729fb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1e08751a-5b4a-49cc-9e30-8b15eff93ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53294d6-863e-4f79-b291-5e11344f1bec",
        "cursor": {
          "ref": "932267fe-9f46-45de-9dd6-c276d8dd4379",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cde0f6cb-0ca7-48b5-9fa8-29e71c51d5a7"
        },
        "item": {
          "id": "d53294d6-863e-4f79-b291-5e11344f1bec",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53e89496-26c0-41a5-a0e3-ce315425cac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2160f972-9d36-4c0d-9147-cd8f5b5481b5",
        "cursor": {
          "ref": "d7b98352-2cc8-48ed-a610-79a753e9ea39",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "29061143-0d24-4ccf-9e83-8b774e2897e8"
        },
        "item": {
          "id": "2160f972-9d36-4c0d-9147-cd8f5b5481b5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "589afcc7-d602-44cf-b902-397af836f171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1204add9-807b-4ae0-92f5-5b82c2d4edf6",
        "cursor": {
          "ref": "190cf8ec-0d2b-4c14-b79d-16769d38f89c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "769cef21-c588-4baf-be78-3f7c62592b5f"
        },
        "item": {
          "id": "1204add9-807b-4ae0-92f5-5b82c2d4edf6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "83a2e049-c444-4599-bee0-24a861e16f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84da75b-2c8a-4755-a2a5-3601f0175c9c",
        "cursor": {
          "ref": "47a90951-f8a0-403c-a43d-6c8aac7d9ba5",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f7eb82fb-ff6c-4838-b940-f9ad50dd5a53"
        },
        "item": {
          "id": "f84da75b-2c8a-4755-a2a5-3601f0175c9c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6cb49b59-decc-4118-8e3e-09413a974b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa73564-a50a-4a79-8076-1f661988d4b1",
        "cursor": {
          "ref": "03c27fa7-ff25-4cb4-939d-39d9a8f7bb76",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "03245a5d-0813-46b8-8ccd-55c435f60a47"
        },
        "item": {
          "id": "cfa73564-a50a-4a79-8076-1f661988d4b1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "93169cb8-d1ba-47ec-882d-c4bb13f177ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37290ca-4c1f-4396-8b4f-dfcb529a8df6",
        "cursor": {
          "ref": "662c3080-da68-4ffb-9ef3-47b74c2d4b96",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dcb8b0e1-a2e5-4e73-8b8f-a4ad824d3b91"
        },
        "item": {
          "id": "c37290ca-4c1f-4396-8b4f-dfcb529a8df6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fa6afa2f-bc33-456a-8550-88e1e0adad16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbe6a8a-85ae-4b43-9a67-a7fd8e9d9f52",
        "cursor": {
          "ref": "e1b2b13e-d3dc-4b73-9d85-1b467455a09c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "446ada60-66fb-496b-a27d-973c28b95e32"
        },
        "item": {
          "id": "edbe6a8a-85ae-4b43-9a67-a7fd8e9d9f52",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e640e815-4f49-418a-93f5-dfdeaced91cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cdc771-7ba4-45fe-ae6d-9b8e6ad9c309",
        "cursor": {
          "ref": "56ed2681-7208-465f-94f6-acdbeff6341d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "be4f60db-103b-41da-80a4-330e5a67acc0"
        },
        "item": {
          "id": "79cdc771-7ba4-45fe-ae6d-9b8e6ad9c309",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "68a447b4-0d56-4093-af3f-71ba88c2dd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1c4566-982f-44a1-a968-8e67fe36d765",
        "cursor": {
          "ref": "4e2dc507-3667-442c-a17b-52950d37ffba",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "efefb8ec-3925-4734-85cf-1fc75012c329"
        },
        "item": {
          "id": "0d1c4566-982f-44a1-a968-8e67fe36d765",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6e1ffbe8-2577-4340-8e0a-d0b1f89679bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3f5e48-82bc-4599-9b4d-4fafce74462e",
        "cursor": {
          "ref": "d38caa96-b645-4621-a17d-d037b4cad119",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "81086afc-7614-4ed7-a894-0c4d32eddb47"
        },
        "item": {
          "id": "4d3f5e48-82bc-4599-9b4d-4fafce74462e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c0b123c5-c2c1-4f8c-aebb-a9c1863bf154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7d0a1d-0a05-4da4-977d-332029dd1965",
        "cursor": {
          "ref": "eb81a433-9e3a-40ed-a5c7-85a583409789",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "72b45bb9-d672-492a-b36b-ac5f945675b3"
        },
        "item": {
          "id": "ff7d0a1d-0a05-4da4-977d-332029dd1965",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4d48e386-3fad-485a-96d4-03a9097efa0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc44399-cd5e-4a3b-a0f2-413e1f8147c1",
        "cursor": {
          "ref": "7e1e93d2-61ba-4511-a9d8-34f22d9da045",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "92028285-82af-4a98-a47b-ef16f503c413"
        },
        "item": {
          "id": "0dc44399-cd5e-4a3b-a0f2-413e1f8147c1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "46fcb3b9-a324-4e22-b9cd-f5d6a67e5c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79bbe94-dc5c-450d-b780-686e34b4e499",
        "cursor": {
          "ref": "1c348f42-b7e3-4e68-a558-97f5097d4ce1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d1bc4845-f555-4f0c-b662-87d78cc38c8e"
        },
        "item": {
          "id": "e79bbe94-dc5c-450d-b780-686e34b4e499",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "02f9fbb6-7042-470e-8c71-bd396bac126b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a58466a-a562-4914-b3f3-87e674ad6fbb",
        "cursor": {
          "ref": "c96c8d54-3e07-4dde-93a9-bdf50db5c6ca",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c4cd3e80-d5ef-4541-8b46-4cc808d29cfd"
        },
        "item": {
          "id": "7a58466a-a562-4914-b3f3-87e674ad6fbb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9f66e114-8efe-448e-a622-6eb015d1a2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348e95fc-4ffb-444f-b8d2-fb66e2f1f9af",
        "cursor": {
          "ref": "ac3f66e3-8f7e-402a-aad7-0a70708a5ccc",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4875b1a7-a4f2-4e13-adf2-0dd21fcdbcde"
        },
        "item": {
          "id": "348e95fc-4ffb-444f-b8d2-fb66e2f1f9af",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "578f31e5-0885-4716-884e-43b472ce6cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b50247-1e68-45f9-ab8c-bd3f4dbbacd4",
        "cursor": {
          "ref": "352b5c8d-d422-402e-85cc-4935cffbb404",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d78f8b17-0417-441c-9b16-a08da40c2907"
        },
        "item": {
          "id": "a2b50247-1e68-45f9-ab8c-bd3f4dbbacd4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "91add7cd-3e24-4e05-9d60-eb1bc81e05b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb1468b-2659-4284-b94e-e0f3fb0c85a9",
        "cursor": {
          "ref": "245be79e-c635-4cc3-a21b-15ce3cc56b9e",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "642689ce-7260-4250-97af-825945b35c15"
        },
        "item": {
          "id": "5bb1468b-2659-4284-b94e-e0f3fb0c85a9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "47ca9ea0-8f14-4d75-b575-15c972033dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9af35a8-e8a2-4bf6-80b7-24d8b411d5e8",
        "cursor": {
          "ref": "cefe4a56-1c86-4139-ab6d-8a20ccda6c97",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d39b04f2-51f0-48f6-81a4-5b7821c257aa"
        },
        "item": {
          "id": "a9af35a8-e8a2-4bf6-80b7-24d8b411d5e8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c1a4f9d7-db4d-4d78-9eba-b556f04ce879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1ba88e-591e-4625-9cb1-b2c8ab58cb42",
        "cursor": {
          "ref": "8e137b70-2abf-4dd5-bf77-09e56ca336fd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b216c2f9-5312-4951-807a-3c23e22b076a"
        },
        "item": {
          "id": "df1ba88e-591e-4625-9cb1-b2c8ab58cb42",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6840beea-47d6-4abc-9b9b-21cc2a2f1792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a4b1b7-f73c-42e8-84ec-3b896284ab14",
        "cursor": {
          "ref": "4188a7ef-165e-4376-8e0e-685ead4d1707",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2ab89c77-3899-4577-9ae9-a2898aef0272"
        },
        "item": {
          "id": "d7a4b1b7-f73c-42e8-84ec-3b896284ab14",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5bb427e5-d860-4a5e-ac12-76d416a270b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7b8fea-b566-4af2-bc50-ed042c65537b",
        "cursor": {
          "ref": "1526a01d-6505-4c81-81c3-150403e96ced",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6a920b53-7745-42fc-82a0-e0039066db88"
        },
        "item": {
          "id": "4d7b8fea-b566-4af2-bc50-ed042c65537b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e78f4acc-f8d7-436c-8c55-b95c02dacdd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40dd1d4-2cfc-427e-83cc-065be9a3bcda",
        "cursor": {
          "ref": "ebf42b8d-63d3-4a61-867f-5025ef4734c2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f6c3f0c1-3f10-4747-8eda-2134909c93fc"
        },
        "item": {
          "id": "c40dd1d4-2cfc-427e-83cc-065be9a3bcda",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c23ea0d5-7ca1-4c29-ac8a-9eb9c6d939b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830e45bc-cda8-475c-bca9-dcb3432cc46e",
        "cursor": {
          "ref": "bbd0c911-337e-405f-922e-a7347fb183f4",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cfd1abc2-cc10-431e-815d-0d5e610413c9"
        },
        "item": {
          "id": "830e45bc-cda8-475c-bca9-dcb3432cc46e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8548b480-e3ba-445e-a6f6-3351fccd9555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50941457-310a-4112-a514-76b76327cee9",
        "cursor": {
          "ref": "91c72e05-3d30-498f-b675-625bd2cb1ce8",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "de938214-b0e9-480b-b56f-da0978ecf08f"
        },
        "item": {
          "id": "50941457-310a-4112-a514-76b76327cee9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f8cf5e5f-0114-4e02-a8c9-6368adb2799e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52b06ba-e051-4f47-8e7d-7010cd4e9039",
        "cursor": {
          "ref": "da45db1c-884a-433c-ad7f-cb62d4737e3d",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "873b5766-4799-4d35-80da-decb8a474765"
        },
        "item": {
          "id": "e52b06ba-e051-4f47-8e7d-7010cd4e9039",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6d15833a-ccc5-4ad2-8eba-35e854bf7c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d9bd51-9ba5-4ce2-9b2e-646d24bdb2c5",
        "cursor": {
          "ref": "5a2d7c38-9003-48e7-ac2e-b4d2b06a630d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1a69fc6b-35f6-4f97-a773-8df8428f8ca7"
        },
        "item": {
          "id": "00d9bd51-9ba5-4ce2-9b2e-646d24bdb2c5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "22b3908c-f809-46a1-a0d5-796f21aaeec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd18bcb-4ae7-4c97-87be-fadf7f5a8bd3",
        "cursor": {
          "ref": "b3a8fb8e-5c64-4d8e-b7b6-5aba42dbeec6",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c0dce3e4-6422-4082-8f0c-3733016ac1a1"
        },
        "item": {
          "id": "7bd18bcb-4ae7-4c97-87be-fadf7f5a8bd3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "75851e35-7b0a-44ba-81c1-1c1207ed22dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe7d698-84fd-4305-bd95-c7f54bab10e9",
        "cursor": {
          "ref": "aa9060a3-be7b-47ab-b264-01caf3f9bc66",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "958e5ae7-c6b6-4ce8-8621-f79b3c8a818b"
        },
        "item": {
          "id": "abe7d698-84fd-4305-bd95-c7f54bab10e9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cf0c5a14-e42b-41b5-a7f4-b60b7ab985a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ce3968-20da-4b35-8dd6-926607c2968a",
        "cursor": {
          "ref": "59aa7fd6-fe98-40aa-a6ad-534c26c9ffeb",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2b9ed9ca-4499-43de-b7e6-b0e51034d369"
        },
        "item": {
          "id": "71ce3968-20da-4b35-8dd6-926607c2968a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ebef06e7-b675-4716-91ad-93a497353d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a510279-5e0f-486f-95c7-e0a4f5f5b9ac",
        "cursor": {
          "ref": "2ec054ec-beb4-4521-8b10-1427f671e2ce",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b6230df1-81b2-4b21-a5eb-a101f22f4152"
        },
        "item": {
          "id": "8a510279-5e0f-486f-95c7-e0a4f5f5b9ac",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6c119e5f-ddc5-494b-96b7-438d86a11f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14f90a2-0f58-413a-bde0-e006c0455a5f",
        "cursor": {
          "ref": "72c5f56f-16cc-4f23-b458-11ec52812b57",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "26801f38-4c66-41ff-b5a8-d7f89fd57608"
        },
        "item": {
          "id": "e14f90a2-0f58-413a-bde0-e006c0455a5f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c1ec2e28-a51a-44ba-a72f-f74fff96fa40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2abbf4-3a45-44ae-8881-a9f74d462101",
        "cursor": {
          "ref": "f7725674-fb57-4a11-9e26-cc08b1a6dff4",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ea2bffa2-d697-437e-8ec3-63a994bdb14c"
        },
        "item": {
          "id": "1f2abbf4-3a45-44ae-8881-a9f74d462101",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ec3ba3ed-895a-4f23-81ff-aa48d69a30d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ed92d6-74c2-4991-8a06-35c00902abc3",
        "cursor": {
          "ref": "21d5ce42-1d0a-4119-aa3a-198b4e6e1da2",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "56dd513b-acbf-4bb2-8eac-37bc758d459e"
        },
        "item": {
          "id": "30ed92d6-74c2-4991-8a06-35c00902abc3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ffd29ea5-874a-4e17-8015-47053c119302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5af600c-8499-4897-8be3-7c29892aec57",
        "cursor": {
          "ref": "984a60cf-556d-4afa-bab0-5f2c29a6733a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dbac9496-4368-4ce6-9476-8a6ac4421031"
        },
        "item": {
          "id": "d5af600c-8499-4897-8be3-7c29892aec57",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "25e78815-fbd1-40ea-b058-b323912b8529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34a4819-a282-4b1d-9842-756aa77dc237",
        "cursor": {
          "ref": "08894423-43fe-4582-9f6d-6272167a9988",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "80c4bef4-43eb-493a-8ff6-8e71f4650967"
        },
        "item": {
          "id": "c34a4819-a282-4b1d-9842-756aa77dc237",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1c730667-bfca-42d7-9e18-790cefc32aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2701bd7-784c-48d5-8d21-2f80777acc20",
        "cursor": {
          "ref": "954c4cfe-3e4b-4652-9b8e-14a599ae5b5b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c0830af9-a3bb-4fd2-94ff-ad1b63ccbcc7"
        },
        "item": {
          "id": "d2701bd7-784c-48d5-8d21-2f80777acc20",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "797952b2-f434-4c8a-aad1-c7ddf8a7a897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a54ee8-a1d6-4064-90b5-19f24f13d5d6",
        "cursor": {
          "ref": "f75afe2c-f661-4759-86f5-87aaf293d17d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1d892cdf-f77e-4d20-a2fc-bc1a0a9c660e"
        },
        "item": {
          "id": "d0a54ee8-a1d6-4064-90b5-19f24f13d5d6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5ab93f4e-f901-4da8-9333-734491a93bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2010da-b861-4d6a-9d78-1a7804817c6e",
        "cursor": {
          "ref": "b4c4a595-7e63-4c0f-8625-8c3423b95acf",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "565e0a03-2a90-4228-9d11-0bf72bd7e635"
        },
        "item": {
          "id": "2b2010da-b861-4d6a-9d78-1a7804817c6e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d6383679-ffdc-457c-bf8c-f56f34dc92c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "52ea2924-997d-4708-b739-912be87aad14",
        "cursor": {
          "ref": "3ec6b0a8-0ddf-4ac3-a0e6-e695d3f907e8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "172818ca-9125-4bef-b73a-1cbd915ab983"
        },
        "item": {
          "id": "52ea2924-997d-4708-b739-912be87aad14",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "567ce4e6-3db8-42ee-9d9f-f039855a1812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0ce9eb9b-fe5e-4f87-82eb-1d7ef46bbb9e",
        "cursor": {
          "ref": "1140b16a-6239-4b3d-a3a6-42861eb23fe9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2ac2c00f-6b23-43f9-a42e-e369f0c1ee38"
        },
        "item": {
          "id": "0ce9eb9b-fe5e-4f87-82eb-1d7ef46bbb9e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e74bea65-3595-4481-90ca-fa355d61d115",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1e4222-1e65-4ffd-8343-f7e5a2f5e3e5",
        "cursor": {
          "ref": "f9d78fd1-70e5-4a8b-8257-ed69034f7cfd",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0f6682cf-0e0d-4b99-9c27-3f27aade31f4"
        },
        "item": {
          "id": "ce1e4222-1e65-4ffd-8343-f7e5a2f5e3e5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "65f36834-f309-407b-ae57-20ddf620b719",
          "status": "OK",
          "code": 200,
          "responseTime": 3307,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa72fa0-1c8b-48f0-a359-992e3f4cfddf",
        "cursor": {
          "ref": "043c31d0-2219-4440-85ef-eb6a77b6e950",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "543adfe7-8283-42ca-868d-77cf0acab9db"
        },
        "item": {
          "id": "8aa72fa0-1c8b-48f0-a359-992e3f4cfddf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "78b28319-61b6-4034-b71c-fd95480285d8",
          "status": "OK",
          "code": 200,
          "responseTime": 2499,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
        "cursor": {
          "ref": "f60663a2-6f33-44c6-ac6a-c7eb8eda5fbf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0883d294-8747-433f-8d0f-614d48313068"
        },
        "item": {
          "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f9c20935-0ed4-4a25-8a63-2af4b5c78384",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
        "cursor": {
          "ref": "f60663a2-6f33-44c6-ac6a-c7eb8eda5fbf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0883d294-8747-433f-8d0f-614d48313068"
        },
        "item": {
          "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f9c20935-0ed4-4a25-8a63-2af4b5c78384",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
        "cursor": {
          "ref": "f60663a2-6f33-44c6-ac6a-c7eb8eda5fbf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0883d294-8747-433f-8d0f-614d48313068"
        },
        "item": {
          "id": "77f23300-3a81-44c3-bcf1-7653af532b5f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f9c20935-0ed4-4a25-8a63-2af4b5c78384",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "3829362b-565e-4cc1-aec2-c08ab6ce4f9c",
        "cursor": {
          "ref": "24320f59-d0e5-4520-862e-ed97fe24fa8f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7479c25d-8386-4285-9c8a-008e5301eaba"
        },
        "item": {
          "id": "3829362b-565e-4cc1-aec2-c08ab6ce4f9c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c3fb59a8-d510-47ef-8e05-20ad79aeac5f",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b930f104-3e81-4d63-868c-a30f58f4a0c6",
        "cursor": {
          "ref": "75d75569-12d0-43de-92e8-a277e246950e",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e48470a2-10b5-4bad-a886-1e8a448f383d"
        },
        "item": {
          "id": "b930f104-3e81-4d63-868c-a30f58f4a0c6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "479c4842-4293-4786-8771-ffe3a35c2d18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "b930f104-3e81-4d63-868c-a30f58f4a0c6",
        "cursor": {
          "ref": "75d75569-12d0-43de-92e8-a277e246950e",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e48470a2-10b5-4bad-a886-1e8a448f383d"
        },
        "item": {
          "id": "b930f104-3e81-4d63-868c-a30f58f4a0c6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "479c4842-4293-4786-8771-ffe3a35c2d18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d7cb7364-9ad9-4f47-908d-62922ac1a9c8",
        "cursor": {
          "ref": "f15b1029-b466-4809-aefb-35e6f1bffc7b",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "777a417d-663a-490d-a65f-1c17e320b28f"
        },
        "item": {
          "id": "d7cb7364-9ad9-4f47-908d-62922ac1a9c8",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7539a181-ddab-4229-a3a4-ce5ef1b119f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "09513e0c-059e-4dac-ba8a-6348b26a86bd",
        "cursor": {
          "ref": "3d101106-8a2d-4862-b12d-1c7799eefadc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "47e94680-9582-4539-befe-076b7746cfc3"
        },
        "item": {
          "id": "09513e0c-059e-4dac-ba8a-6348b26a86bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "05771e30-b736-4d8c-9b58-cf610552bdd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "09513e0c-059e-4dac-ba8a-6348b26a86bd",
        "cursor": {
          "ref": "3d101106-8a2d-4862-b12d-1c7799eefadc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "47e94680-9582-4539-befe-076b7746cfc3"
        },
        "item": {
          "id": "09513e0c-059e-4dac-ba8a-6348b26a86bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "05771e30-b736-4d8c-9b58-cf610552bdd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "171f2e4c-08e3-41e5-9fbb-fea16ba3ef23",
        "cursor": {
          "ref": "4a3e89b6-ea85-47b4-8d11-845309c1e11f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5a6c2fd2-b83e-413b-8705-2642c6412a0b"
        },
        "item": {
          "id": "171f2e4c-08e3-41e5-9fbb-fea16ba3ef23",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "983bd926-6894-4418-acd6-746b485bdb5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}