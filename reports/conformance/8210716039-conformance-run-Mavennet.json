{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3a170940-72ee-4e0d-aab8-ad13502f36a2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2b13703e-478b-4f26-9e6c-eebff7483099",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3b0cd4a-c51a-4dca-89dc-b187c12c9282",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "67cb29d8-9d43-4a00-b706-7614a30f83d3"
                }
              }
            ]
          },
          {
            "id": "a66aee6f-9a5c-4dcd-8865-d25a49cca2b5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e259784-0c9d-4cf9-b126-d00bed0002ef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "eead4918-0db8-4584-ad70-6b780d51178d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "41a155be-3f83-4b63-ac86-7d9b6138429b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a8e29c4-cc0e-48c8-83fe-5f103f85e406",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db4758a4-9ac4-4386-b32e-961b28f1fe00",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "382241e7-2a45-497c-b4e1-877d8b277086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0eb06ff2-7130-4103-b177-a88a37e24828"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8678e5c-e55b-4851-9990-ab13f590c765",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5933cba-ec5a-4111-8dc3-a9595c4297fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bf6d556b-54fe-403f-8916-535b071b54cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f1b3b72-be23-45ac-a14b-9f209482f910"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69df08d6-56ed-4225-8ed9-b9a8248c0cbb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ec7cb216-206e-4b0a-a108-37111e4a6191"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "256fde8e-4077-454a-af4f-860de49125f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8a1ec35-2cf3-4b4a-ad15-9b04e406cfc3"
            }
          }
        ]
      },
      {
        "id": "f4fee76c-a429-41df-974f-d92e951eef6e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "af1de7ea-637b-4c0a-9b07-847adc23a71a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c1595ed-4608-4670-9952-b08ab46f8803",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99e1c216-7b9f-4121-a563-c9b268891d45",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522c752a-e14c-46f3-bfac-9a1b078a63cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a7ee780-fef3-4da2-b686-7217f3b89961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be80b5b-3a7e-489d-a7ee-abe7ebb626b5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d6b621-e19e-4cf2-98c7-9f293ba839e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3654d075-1866-4ae2-bf22-1cd128b02616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583e0b24-a2e6-4b27-bce9-2ea6565c1539",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "541f098b-01e4-4892-8869-dbdbba6c7e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a87018df-81c1-4ae2-97a0-a9f09d83e7b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aca04d65-e690-4e35-a51f-3964f609f9c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8254d9d-d93f-42b4-ac44-a9d72d15659f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba4b1c3-9cf3-4ebb-9ed4-db9767c9d4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "406d0331-9aee-494a-a2d4-0f952299aced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e4bcaf-c750-49fe-87b5-f3d55d2ece90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80b9e7a-ae84-403d-a4fa-7c5ea9c08095"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bd64f1b7-739b-4e51-a75f-fcfa570a9187",
            "name": "Positive Testing",
            "item": [
              {
                "id": "45153a49-1a1d-40dc-b619-29f9ad1bb7fe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "353086ac-d106-40d9-8d09-9cc66da6100c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ebd8f615-2046-416c-8419-e427177f812d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34a0310a-11d9-4ef3-a6aa-7df9563f4990",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2c27737c-7c7d-4cbd-b2e6-d64e11e29244"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9874c756-bdf4-4019-bd60-6b1a84fb2ed3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2b07341-f404-4403-8621-75f3fb221950"
            }
          }
        ]
      },
      {
        "id": "9066ffb9-41f8-4f50-be3d-a33d638dd455",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0dcdfa78-67db-4d03-ab0f-44679eed580f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d907722-6848-47b4-bb13-74f9abc9c159",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9cb6c9b4-f058-4e81-acd8-edbc9a20619f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b3dc47-6d9a-4977-b8c6-de0976c54f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78dc4989-7dc7-4b5f-be6f-88787a5f3551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886bb882-b781-4bd6-a81f-7e52be50009c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a357c790-b91e-4344-b645-3ddb74808b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24c4108-00cc-4ee5-9bda-c4d1a2433642",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fecb34b-9f2f-4d03-a966-f631fb6494eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b7be38-5b41-47db-a10d-8852dca2663a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9789795f-bd2b-435c-bd2e-56ee0be28195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fac56db-c1a1-468d-bca4-dd00931e6cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389d47af-ab52-4ba1-a8d0-cf9bfb63ef4a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65341ee8-1a62-42b9-8650-1b72aadbe934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb878aa-d507-4711-8457-4806eb25cab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c82724d-8ec7-413b-bbdb-eb3b7bb6acc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4387f085-5491-4721-b425-877d18dcc5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ea72db-1276-497c-a5cd-9d04beea920d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12ed522-cb1c-46d8-9c9c-92ae43ef23e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7b43a1-87f4-46b7-ad2a-991337693360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f53432-089e-47d5-a509-5d60773edbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84e893df-9f1d-4aef-94ac-7555c81ce255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef6a3f3-a45a-4f10-a5a3-c6677b6ef0c1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a321440-b128-4831-b2ec-c3eed5cd3cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14e5d6c-12f9-4878-801c-717004dbf575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fdb901-ac7d-411f-9802-142323918e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca6dc8ac-8b66-4333-b69e-035c0a26b573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba746e3-8a2a-45a3-923e-66a8aed0c476",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651e2527-86da-4951-a1e0-b29042c35fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e8aef6-701c-4a1a-9724-c36fc0dc558f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411a3fe-7b28-4709-abf2-afc2a0a7082b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d9bbbd4-91dd-41df-b1b9-7d9c912bbdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c561e88-5e2f-487f-8f09-0d793236c426",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a348f6-1f24-4ff7-8f6b-9b453b459f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0ee592-1ac1-495b-aff3-4900267ccb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d8503c-b66f-4538-a2d7-ad05f515c87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59e79335-7380-44aa-9636-81c8753bae77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3d946e-8ea5-4029-8fbd-18ceb1fc235d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1932ceee-263d-4c44-ae91-0cd17babc867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ef7c62-0e3f-44f1-8e10-880dc8648141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f63ee64-6d99-4ce2-9f75-6ccd960870d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a396bc33-aa50-4bfd-b66c-a6fc73244705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e4fd1b-ed0a-452b-ba3f-b5e5e6e7f7ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d575135d-4502-434f-9075-8fadf773b765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9054419d-6be9-40f9-9f2f-9947b865e1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1476bc99-dd4f-4c7c-9c54-82fbb3891a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0906819-545c-455c-b567-c512109a3411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d46bd98-143f-414b-997f-254de32c792a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bb1f43-4cb4-4340-b019-02579b7e7514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc6ebbc-a02e-4dcc-9dac-19520a967d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482a5201-c76a-4db9-addf-aee7d2b3f38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94aa70d9-ea9f-4d0d-90d6-0af8bbd60dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d75a51-166f-4e7b-a4e4-a32691dea6e6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cb09b7-e0f5-4b75-bc33-a450dc3b387b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d498d8-3393-4824-a922-12f875e9379a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7391cedf-861a-4a99-a3a2-9e8c4303bc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59a6fd99-635e-446d-aa9f-380d2708c27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80401592-da3b-4337-b2ab-1d5de6f14ca2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d605d2d-ef1f-4783-9bc2-c8bed3b58e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1cf026-836e-4e34-8de2-3e665547dd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5321274-1d84-4548-86ea-91b559baa69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9672e7f6-9ee2-4f39-bfc0-d7af82a1b512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d55829-fc75-4c7b-b0bb-e3cb2dd7bb9e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ede3d5-07c2-4c5e-b652-14c4ace012be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf3a0e0-c1ce-45f3-82d9-973d1c74f6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbecdc2-ae99-46cf-b51b-8a809f945eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cca06d7e-b6a3-4dd0-b98a-aa13a8ef2b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fd2cf7-f74e-4031-8f7a-13543bc6e371",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ec8e0c-358a-409d-a56c-5317e289b4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed9e782-ba74-4297-b89a-e0fc26cda26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b6d162-ccd4-4da4-a514-f693eb97a129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d90c9389-3c2c-483a-b2ef-141f7b45fabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b4f035-5ae3-4588-b558-c98aae35e7ea",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebf707c-8381-4e52-b0af-032ba23701eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de4c8f8-6c1c-4fed-a343-524c455ca5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8276bffc-1608-4f19-b5ba-d9e893d6fffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a01fd8a3-38d0-462c-bd84-189a0e35b27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8fec0b-772a-4275-95ff-31649b8216b2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320b8b8f-33e3-4b87-8ee0-5a22ac5ec4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44c05c1-ffe4-4114-8795-10b128a1506b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d531ec90-e135-44c2-acda-622b2efb4d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5b9ea8c-632a-4298-92f8-159d54b9ac08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbf35b1-6b1b-4fe1-8900-d5a8dce09a0e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34339fa9-829b-4932-9c7f-3e7198dba70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a322bb67-168d-4686-9a79-d51e1e8f3fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4ef3e4-251d-4f4f-9160-d075ae7fe663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fa34a53-c59e-4a4f-9de4-b08c0da09423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d20f98-d72d-4a16-97e0-43849f546eb3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4b9d63-e4f4-45e0-bf27-96cd4374e3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37d285c-8164-4b99-9197-4a2764314c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e815b87-d22d-4aea-9f5a-0ea2eb4f3c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf84667-fce1-4d7e-a5dc-266e76c30587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0d8a72-65c3-4236-bbf0-6230581f3f53",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfaa0b4-e9ba-4611-b9f1-63e2614eb9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edee860f-8f67-4507-97ec-eedf451e2f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7f022b-343d-4263-9a1b-6c907386cc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0d2556-a91f-4ce3-92bd-123568be992b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5597dfe-734c-4758-9b33-e71f559a69b7",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3962b73d-314c-4689-9001-a7510dc780b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f353aade-b014-4d87-8019-d0e8b4076083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1ba754-13a8-493c-8624-e70b552179e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d604e8a2-5d3c-427b-b3e2-efd2e170d775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d1e1ac-0153-474e-87ee-f926b8563695",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c047f3bf-7a7b-4e00-9531-0293078e106e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d911cf-0903-40c5-86f4-64f82127f7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3ae209-1551-4147-a942-8251a7a82a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76aae2ca-c61b-48b8-8f47-b8f2e3ce9d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eabf3a1-8a95-451a-acb4-39439091c65a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76958ab1-b8da-44d0-8cea-a44701ed1af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab7e246-ad7d-49a2-9599-28ec240d589b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dd3893-0066-4ff9-a853-b490b1c8772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e86f797c-78ea-4dba-821e-b846a23f8e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a7a1e6-529d-422a-8dc6-da518d17050d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ec7f02-29f6-4f9b-8bf7-77568b97395a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c716e5d-bfb6-4a6e-8578-66d3c4b66e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d755a69f-fcce-4595-9cff-a04171dd8013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48add7be-0dc7-4d3d-8ccb-b7aa9287e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94327e53-3721-4020-adf8-6e2239956c24",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34103239-1f47-407c-bf6f-5cf10c9f6bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f53bd6-94d1-4085-b035-19ad0a815d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5952b3e8-0e8a-4ae5-846c-e08a44725420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9409dd87-1b31-4161-959a-3d91654c3b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2d9a57-c286-4cf3-9e8e-c57691a52604",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4773535c-46fc-474d-bd4d-35892cc38020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedeca46-32a8-4c90-9963-f15b0589eb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a18e3c-3a72-48df-8017-269c7ba78f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dafaeb6-5afc-465d-8c64-bad5318eb7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce87d608-7138-448a-8c4f-5068b8e92c6d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef78e087-6a6d-4c44-a3fe-0711e20451fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9826162d-b837-4c82-8ab7-5ba63452cbc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea44832-f66a-4e4e-9616-e5517e633f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96beeba7-1859-4a6f-997f-32d4fb56921f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f37bd4a-199f-40df-829e-698f039321cc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f698c475-bc7a-4e44-8ee8-38586d726806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06afee91-1a27-4ea3-a777-ffe791c7adcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9036def5-a284-4f63-87cd-e45ba7792081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b0f46e-00bc-4513-9baf-e93e481c45d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e254b9-b84b-4313-a359-6f985797a5ae",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c1793f-60c7-44a3-81e8-843e8c2e2a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6935369c-74b2-4a2c-82e3-b97bbc5fe02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935a8cc0-892e-463a-9359-515a0bcf16df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "580f6327-8d84-4bf2-8237-6007ae050a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9534472a-d90f-4152-b249-dca739638c4b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd1ace-ae1a-449c-bfe0-85c58122dde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22da5c4f-2fc5-42b8-b5e5-b9eccbeef912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9966bfa-42c5-44e7-9764-e65d274a0a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f16c081-2de4-4479-b5fc-3a2f252945a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59751c60-67a3-425c-88a6-7f3fcfa1a964",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7f0593-09a8-426d-a80e-9c46edf4c733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc786da-747b-4fc8-b946-d9b6a0dbaf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167a4113-a2a3-4a9d-8fd1-cea35b3781d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc9180a-6b31-40a9-9e0f-6b40848e7c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293378de-de68-4d1b-8bed-f8e92046bc96",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47d5215-b8f7-44d4-a190-978d38192515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87eab869-aad3-4031-9d77-1015eac95e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b112611-7b0f-4988-b7ad-464091c82e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac775175-31b5-45f0-bb42-4b04eb73c748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae38a6d-76f4-4e90-8814-da0cb642ef57",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10a1b8f-4873-4580-9afb-0f979c4a944f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54487ad4-0d7b-4da9-bb8a-d1a693c86075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a762fe2c-a916-4700-95a2-36beee971361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c58752-bb64-40b7-8514-8216d54d6792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941d6fdc-8ce9-437a-b6d6-f44c154fb62c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ffbb8a-1dc8-4572-9ecb-81c393aa0d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb3ae1b-5a6b-447d-b299-d8541697bf29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1e39dd-2e75-4bc9-bb06-197297f7200c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc74ae2e-3fce-421b-8714-5dbdc0752174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d745af5-c227-4ac2-acb9-49ec57801025",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3764bd18-bd17-45df-9299-7c48b8dae010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d59ade-f40e-408b-9585-f66a4ad01b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4357df-4266-45e4-8304-587216d9dee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "016973a5-09d1-41ba-84cc-a1d29634d4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bde60ff-8a35-4bd1-a540-dc455ca4410d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2648b5-4e41-4a49-8a18-90b1bcd4f35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511b8fbf-2a59-4e6f-b4eb-880cbb3cc717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a5a27b-bfa1-4d0b-a55f-e8f2d9719856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb96675-9d64-460d-8757-4be6dda8a3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dc0414-0439-47bb-ab81-204d76910060",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6caece3-4041-4a63-8a71-bfd4e2fa42e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1762f8ef-5ca3-49b6-adb7-880a1f9de6be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d00d4f-12e1-4454-b6b5-65509a04e26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6959dd-c564-4cb5-959a-92c8dd21d4b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c98d87b-7ede-4fdc-9ad2-2781834b938b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8e853c-0010-43cb-aa59-d69affaaa54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a205991f-9f4b-4721-bf13-d8511bbe37bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dcabec-91bd-4e86-b729-a5f68061c108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "849596ad-cd6d-46d8-8f13-2b65773cd039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051f3622-e1e8-401f-8107-4ba9a072de9f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da37c79-34f6-47c4-8add-9cd1780a847f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7efc7db-4b7d-402c-b130-eee8de3d8085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e192f-7376-4143-a730-6ad267cb2b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "317ccbf2-9634-4ee4-8a52-b69dff6a55e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8291d94c-6e40-4dec-8bf1-487435dc032b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8345dd9c-775c-4a9b-9823-744da237099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf0945f-3031-41a6-9c93-de533369523d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9578a19-d6f4-4588-8ab7-f0f0b6e0df1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1b25b8-2adc-452a-85e1-394c6570ce56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc96e9e-3fbd-41b3-8db6-0831f731eeeb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fdcba4-5216-490a-a29e-ed9bf5e3b0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b874223f-258a-41c8-8019-4c3e4bcb9cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5840e2c1-1a6a-458c-a921-24c5d84d21c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "38f06cdf-6f31-4dd1-8aa9-dc0dd0e19db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569f48ed-574f-44a0-8b04-ee7d95f4fdfb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a78256-b000-4eb5-a022-0e6e17b42800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc7830c-994d-4ec8-8a81-78a40fd1c316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a6aa82-a7e4-4909-9306-121b8e015b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8edd8476-3ba5-4fd7-986d-6934a0de8ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e0bdca-a961-496f-aaed-da96315f99cc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78296f3d-f872-4515-8f42-e26a69e55a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb512f5-4506-4ee5-9e73-02479a503cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00dc2d8-9bc8-475a-a8a7-82bf3ad1f5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f11123ae-3575-462c-99c7-a8551215e3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ac7eed-4d7d-4d78-828b-e193ca8edc9a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8b51ba-6377-4f7b-bcf4-ccf259b28614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc609a53-b1ad-43d8-9a1d-62c32ca17282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04a3851-fcb2-4223-b19a-0bceba2a5271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c985fe-0a7d-4dda-a3ef-9793f2fa6bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087ebedc-3ff2-4761-af1c-0ad70d155993",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15d38c1-566c-4b9b-ac78-6a11e64671e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a4f7b8-583c-41c8-b8ca-107a0311d735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0b2ab6-6256-49df-ab2e-69b74ebedd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3131c0bd-1846-4b30-8832-92fcbb49e007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4a7867-b9fe-465c-899f-8ee365bbad4a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0977b951-6481-4d20-9b7d-5021a18c4095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefe2a00-cab7-42ab-8f7e-5a55d1bcc0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74f1cdd-fd7d-4fb3-adcb-883dcff9de84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42e7ffd0-09f9-446d-90c8-be1a738f6696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfa8a7f-3b85-4856-bf79-207fe907eb89",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff3a895-e987-46e6-9657-96893ba3364a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27cd1fae-2b5e-4302-a7fb-f97016b66238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92aeb2e6-c770-4e4b-bbea-a7bc7982c259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fc3558-1d24-4ffc-aad7-62183f5747c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab331287-4d39-473c-b257-930ed8b9ebef",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3c0974-deef-4139-88c9-bec8cde4b940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aeb9ab0-a6f5-48bb-802e-fc7d1307d95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ecfc54-6165-492c-a74b-0a06137b1b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87642d56-3edb-4934-9264-25b3ecb2ef85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0985f7c-b177-4c77-b21a-7447d464c8f0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe444a1-619c-4b4d-aa61-f7dc083234c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddc3903-adcc-4fef-92f1-501c75206658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318330a4-b86e-455a-844b-ad7079b35102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd66a91-8105-4742-b5ec-cf9a3ae5b188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bf95f2-440f-4a2a-9659-9ce65726c042",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5cf645-46b4-444f-92e2-da94369b4706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be7cfde-8a35-44af-8e57-4be08118184a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3670683a-b612-4260-8c68-b3aa7b0dc539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb4deed-c614-461b-ac14-57e646dee233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340017fc-6356-41ea-b818-e1e87240202c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd16408-e77f-41a2-ad37-2d8e294014e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1378038d-64dd-44d0-ae4e-fcdd12fcaf5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb02b58-45d2-4de1-b211-bbac29f62062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb035e43-d925-451e-a25c-2a93f7010248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467cae76-9e18-4e92-a4fa-76f2dd3c95fe",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3490955-3e8b-49aa-b48e-0620cd4d6904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fceffc8-12ff-4b9c-b7d3-33f6441ff97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9858c7-25fa-4c13-beec-e2f823dc3b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3366505-546a-4c6b-9cf0-81b656f808ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180c8bbd-b84d-4b40-8554-4556499e7b3d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fc23ab-c9eb-4c92-a416-1f8d48bed577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ace17d8-1445-4cc6-a74c-458500957f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e236e133-c22b-4f92-ac07-a122108c3601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec16a6c4-acea-4e67-9af2-ff828844bee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2496a0c6-35be-4695-9612-a89df2cb4367",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622f9e55-de44-4e86-9624-0d7ddcb0882a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c823c9-f82d-446b-9a47-b5b32c299ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1beed4d6-1bef-42a0-892b-845753dc1ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53667307-44de-47ca-8579-318ee76d21e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9aef871-a861-45f8-ba5f-964d8c0b23ca",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c51be6c-3b38-40e8-a49a-d5b07b843179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7a5a8e-b4a8-456a-8541-be1dc825205d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0783ca5-1999-4e34-b607-ca0fe2e1d003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56b8da52-1683-4285-bbdb-62e679802883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e07db0-2816-420e-8b55-7df5eeeb5ace",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510913af-b8b9-45c2-b6dd-28bbeb15226c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd97ed3-b2ed-4f09-bec9-839eaba61ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d666ca9c-5f0c-452b-9b6e-06f517324af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0d9205-ecf7-4ca5-ba3d-72abea60248c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f3519e-eacc-4f02-af42-4f0877ef2a3f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696ff480-7e5e-48d5-8be3-97cc6b8ac5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83dba51-5213-4d06-ae2e-fd0f89b4770b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6e6e33-7924-4952-8cc9-f45f8af68334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6602e8-bb2e-4250-ae05-138355dc3afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd32860-f498-4e3f-9469-b516194587ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68addfea-10c8-44da-937d-98a2e4baa302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb10217f-eef8-43bf-9b6a-807edfa7bca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e0790a-05c7-4cac-9729-5f3c33fff28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df0ca253-d16d-49f9-9312-e279cb924c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a160585-9507-4f85-a26e-76eb07d05301",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa271b52-8321-4a69-9f71-42f6f010121b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f75a6f0a-a300-45ba-8bbe-a1d2f66dd892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acff941-39b0-4eb7-88fe-6ecd2956f8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4be3c3-ac8a-40c7-b039-e128b9e9622f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a063ec-a890-40a5-87ec-f7bc0b0d6523",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8815c980-6f74-4a75-b1a1-ec326a2a0175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe1d71a-f1c4-4660-a941-73da8858f0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff41ed83-b965-443e-b62f-064dc472391b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f395e0d-92a6-48ba-b506-a0f84d2717aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d947e3af-b275-4deb-af5e-1722617740e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33abdf8-dce0-445f-8869-766c69833c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464aa326-91ec-4e3e-88cd-a6bb29715c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5842db41-210a-4b07-b045-5adeaa8cddb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8d9b7d-1213-4290-b455-64fd87842a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a33e1b8-464b-40b1-aee7-1066644ee254",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e8a42e-d9a6-4e95-bbbf-9e70929644c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6e4dff-4216-4165-b402-f7d41e0fa174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204e16e6-725b-470e-95c9-83cc0c810bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2893b7ed-e2b9-4a56-b964-84df36a41ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12a05fc-daa6-450a-97f0-9e8a0e851fc1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0833b7-d3a8-4063-8daa-4c2eab4f2120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439bc7b5-7552-442e-a15b-c65c74679dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3d6dcf-3149-439a-9743-d7ba42ec3d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "34e96e2f-11da-4a16-b8a3-17cda234b6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c980d040-b4d3-472f-bdce-8e1721a945cb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f5f2de-ca86-4170-a453-ac5552925bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa1be398-c34d-4a13-ba52-7fdc3f1f0be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a501caa-5e69-41a2-b61a-8b56b6c1c39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd8e978-b7df-4b65-b0a2-4d6ad81c63bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc77009-35fc-4c1d-82d4-3ee9930b3137",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bfa143-3824-42c3-9110-97964c8d124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75369275-4452-4207-9c68-09909b8f147b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8655708-3c84-49d3-9fe5-2be0b4901ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad70eec-a624-4e62-bdf4-3864975fd558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a952a099-e5f5-4b16-aa5d-9e58ec2ede20",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0847bf-f283-45af-8a53-3f03d17ee410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6f61f4-0911-49e4-a24d-3e6e210e6be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0efbde-2cb1-49e2-9761-9f4718e05d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d15fc896-b4c0-4ce2-9a25-a19219f05217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68b2069-35fc-473a-9939-e9bb9dd2df74",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b034ca4-ae84-4fcf-af59-081b64d78da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390b836c-1b44-4845-86a3-948a78bc3d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b65011c-348a-411b-aa8b-93320e265509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bc27fb-ffac-4854-aa7e-855d07597ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f463f71-8dce-44a3-8b37-cca76c960d57",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf78403-f10c-4297-bd4b-61929e16d6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d207691-171e-4caa-b899-2034334af3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff468d7b-f7c1-43a7-a99c-e096edd43eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6fd530-5ae4-4eb6-927e-209548d5ba25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ed091a-eaa8-47f9-83dd-4d6cc4cf0307",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8136cecb-0959-41fa-b0ce-2e955152f439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1f0a3d-1331-4808-b309-04e08f401c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e21520b-c978-4572-a660-ffdce69c9951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dbf0368-6ae1-4d1b-afb7-b0e80bd99d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131c11ee-5529-4fa5-9f09-738936068da0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7f9570-6608-4b55-a252-61293402bb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c54b08f-33aa-4c3a-adc2-e4d53d79d442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76da282a-c639-4d49-80b6-33ade571deeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac3095e-1e5a-4e20-aa5e-a2b714840736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168e1570-6a51-497b-8911-625b6ae7774c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0a1291-2749-47fa-9077-4e5ff83cd480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7a4873-5c39-4a31-9c3a-4e6e8247b18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0137b1e-4179-49e6-8bdc-33dfbb408483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f981138f-e73e-46a1-8f6d-d4dee0ed8873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466feef6-badb-4dd7-9c8b-b5311f882382",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798942ba-6ad2-4c6d-a158-94ac01a81767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a516add-e41a-4655-8589-3107f90f8989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f256297a-cdfc-4778-9ef7-b79bdbb9fa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7659e991-c09c-42c9-b03a-188b5d073796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdcb800-5784-40d9-99a2-0e3155b35651",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ff0df9-5b54-45df-a6b7-83d4d37f703c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b178e27e-7ce9-4776-9b0b-3ae07261d4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df698e6b-bcd7-4e29-b567-be059b26e5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc378827-859e-424d-bf05-cd0b79fbb981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ec6241-d926-458b-a248-edcc35fcf950",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d90513-6d48-4861-a75c-3ab91baec178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec6d99a-cef1-49cc-89f0-2803ecf207f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00450df4-c24a-4bf2-ac76-af48e684d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "843f5bc0-a197-4860-95d3-e085519e1911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bcdf8e-2a5a-4f55-bd57-73224aad8af7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee5ad15-888b-4213-8f05-7db8b9071dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e58eea-f32d-412f-a464-931dea4f2dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b7cac2-812c-41ef-92b5-58b540a59da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4adcad9-25bc-44fa-824f-ad7245b0f59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d026a4-2d41-4315-9c9d-f84b3824b17f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7ec651-630a-4504-9c43-8e5dc8ed3aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3144d485-8aa6-4ae0-b3bd-0b86524659da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f900f7-d57a-4920-ad08-a158103c52fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "047022ac-08da-4b7d-9c76-42f500eb3682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a6046e-c0a9-4d0d-bc0d-12c773eab941",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfe3ddd-587d-4ecf-935a-e62977cf9c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6814cc80-127a-463c-9bf8-b96b8b0081a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ab80c1-1b83-4db2-b060-857c31246702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca32ae7a-6e1f-43e3-8c83-4f761c96bc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b8306f-eeb6-46b2-8837-9f9b11abf73f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ed8305-99ef-4c23-841a-2e6c19a9bc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d4a6f4-fe2d-4b7d-8055-05675b186087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8334d82a-8439-4f29-a469-67a7b5040199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42bfc80f-cf19-4ee0-81a0-26bc16e5235f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cac7a9-a2c4-44e3-812d-acab6e3a23a3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c8e429-2448-4340-876e-6d47ff79e20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321c25e5-d777-4bdc-b45a-14a2f9099f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20de0cf3-9fea-4055-9c1a-c09af4f1a1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f270ae3a-4cb7-4d3e-94f1-9a9ba30724ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b39668-bfc0-4290-a387-1d28e6b0f2a7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95179383-8bbf-4985-8c58-647259e82d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2347f505-1227-4076-93df-b7cd1e2d5d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4188f6d2-0765-45a1-beac-dbea72c8baaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd54e40-4801-4efd-af80-a9f68b4428ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61edfe6-85fc-405a-a9de-05a60bc56d64",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de79fa8e-c6d5-4ced-9b15-36d4a83f3862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df507f41-69b4-4551-a371-118ac053c3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3a10b9-e101-4943-86d6-2011c36714bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea766ffb-7a1d-4d50-8fec-c859becb3e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458a147a-50d4-4ff6-88af-52873b2ee62c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4453c8fa-159d-46ab-a496-c5bfa0923409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85823953-96ff-4176-a318-8c0e3a43a7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97c8294-791f-4726-be60-a8c6647bee0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6352f6f0-70e8-4510-b6f3-5b54683f64a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5629c18d-c2d2-43a4-a90a-3dea4c29a0f9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13af5f6e-3325-49c9-a5e9-b078acc9e040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09b73be-44e8-4877-ba89-179943f0c2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d29506a-37d5-4f5e-a13c-2977bbbf8092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65b5ebd9-ab2a-4eb3-bf22-60c1e6ac71f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd4bf43-9c52-48cf-af31-7f1a5b40b57e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdc9eb9-60f7-4e59-b2c7-83053781f900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e695ab6d-96c4-40a1-b7ce-71b67b1ccfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08702a03-0602-4f25-9454-d662fa2f53a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d6e7c8-0212-4adf-9882-edeb0d753a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ce878c-c334-42d9-bf78-7adcb4b0a02a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bcfad7-15f9-48cc-a404-a04126b262fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7df8c8f-2497-478b-886c-2aa566730420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef356d1-d33b-4477-a0a7-e0dbd4ef7844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8517d5eb-aa75-43fa-a1c5-f6b29c5f2408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9179ce1-9386-4785-a0ea-186cde262462",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194b7df6-64d3-4ff5-b4a8-0bcf2d459754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61768114-aa26-49a6-8cab-9237790b2077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1baa6a46-9682-4f81-93eb-b671015adb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "617b7295-bd1f-4751-b347-35b319fd2f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4a3ae1-88ac-4492-9289-1d1f1ecc9e0c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5302ec9b-18bc-465b-8a7b-3be0cadec7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd12e3b-d880-4a45-938f-1c846a001435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28680e8a-b98e-4887-a1ec-9cca4f944558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b06dc85-afa7-46f4-9d2f-4fdc1046afd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fc3147-304d-4a48-9ec1-07bf2f556188",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fa5c8b-94d0-4625-8334-079d64a14d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907e872e-3c5a-4826-916b-d88b4068175c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301d99e1-8931-48e9-84a0-f9b973173d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "98fa2307-b46f-403f-81be-75b349327efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c34859-24ee-475e-b72f-30bfe7bfabdd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7a81aa-b8d0-41a6-bf57-53a495e56d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d3386d-6df8-47e9-9801-1c8a12e8b8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc87b589-a514-485c-8532-300d3c740952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "39733901-8a40-4f72-8f5c-0d59cf933385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d980e5ee-dfd7-4c02-b0a2-f0ca31747dff",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957aa5f6-77ff-45e4-9172-b3a1e1086c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d726125c-2330-4077-aa07-f048e4fd19ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68888bdd-7081-48fe-85fc-ac8d1a247a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cc7c97-3038-4d49-b139-1177aa91fe30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829e629f-fcf6-4907-8558-64862de2eafc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755536d4-ea68-4f55-a387-38488056f8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e164ca-168e-4e95-ace5-32eb0b4219fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bc86d6-ce4f-4adb-9aaf-dd25d73699b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2611bb-50c0-4cad-957b-16e51805a2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0f8764-9af3-4069-88fb-e698e4a0e272",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0dcc0d-091f-4b58-a207-9583eb464521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36eb9566-e420-46d5-aa7a-393e7fc9b6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a960d68-e14b-48ab-8923-ad74a0ec0207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "63ea4425-0275-499b-8450-88d09be97ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f37dd2-db39-4072-88ad-25ce13e44203",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6254e3-1470-4bd6-80da-cf60482ff42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e8e58278-602c-4aa4-bac7-aebedc28f23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad770d74-62e6-459a-ae97-8b3e16b33760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc7bc8c-6fb3-4303-bdf7-ac912b71c23e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7bdc2877-d53d-464e-acf2-7928f4cd3fd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d05256e3-0064-4e39-92e6-722d8fa1343a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6869b4-551e-49ba-bfbf-c63b8591592d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d759d35-001e-45f1-8d0d-568a43452e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09d7f4e-3445-4302-ae87-0ccb33d1ff5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d081bf7-7525-46c0-8c0a-20ac41099aca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f15fa663-7c40-46fc-938f-d5aa7558a476",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd4fd25-dbea-4337-95b4-4066637de242"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2618757-c128-4cfa-bf87-7e74f908e0f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6c798bc-aa1f-4682-bf61-ad899f40a6d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1852715-58b1-48eb-ace8-5e6b94eb13a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21381294-5771-4d83-99e2-2cad191e9980"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb820b0b-acab-426d-8970-b7b880228d47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2c89357-4164-43e0-a84b-386b04fc73fb"
                }
              }
            ]
          },
          {
            "id": "9112e9b1-4f46-42a5-ba38-30b593d3bbe5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fdeeb105-f369-4cd8-a207-f67bb7139871",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "84c4e880-07c3-4c0e-8416-ed212453f75d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31894ac0-bd06-4afd-90fb-7540ef6edbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3d9b353d-2a58-4dd8-acfa-80f1b341a60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785d9876-2267-4026-8b6a-0acf19ea49b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65bf797-20f7-424d-ac5a-8a2b21242cc4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58b8dd35-0a64-4a61-98a8-b8b794e162ef",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae54c81e-a95a-4e5d-a7f1-9881026f2dbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49d32f6b-245d-47a0-bef8-c4839d214dec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8e0441b-33c5-4974-8cc6-6f8bb0a254b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "06a6cc57-751a-4a4e-8728-8ea9f854e63d"
                    }
                  }
                ]
              },
              {
                "id": "a2098955-3b83-494d-a59e-0bd1ecc92bdb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc66860f-cf7d-4dc7-87cf-38f16be8bbcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d32f5dd8-a8c5-4ce7-a262-e3481118f5ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d22a5a9-fd74-474f-b48f-31fa74cb0932",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65d4fa3b-5240-46a3-9ea2-1a9c2e2a9220"
                    }
                  }
                ]
              },
              {
                "id": "82c718aa-bb96-4807-811e-008880a56ede",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb58debe-2f72-48b1-bbb9-299e7cc2791b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "999aa730-f833-436e-9cf9-9f4482f612c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "319960b8-0c52-45af-85e5-f04648693cde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4807b94a-7c9a-43cc-9403-08c2d58bc77e"
                    }
                  }
                ]
              },
              {
                "id": "a10c813a-fd36-45e2-9ee4-c90026a457bc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe266e74-e8df-44ed-ac99-3be7705fdfe5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "648edfe8-33eb-4316-92c5-eb3c9a432180"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f85af9c7-0669-45bf-b0be-ec2235a4a298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "98d38c69-8573-4de9-8dea-0c2a556503c5"
                    }
                  }
                ]
              },
              {
                "id": "44644e6c-1f6a-445f-8a57-50a0276ef8f0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77d4f564-0a29-405e-b404-43e0792a84b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5630e467-6142-471d-9945-af9b6f4056e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35534200-a81b-443d-8dc7-2e58f30b60bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cbaf6250-479a-415f-9844-ca6817e957e5"
                    }
                  }
                ]
              },
              {
                "id": "ca33dee7-02cc-4c67-b0f8-2982a11f6d8a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d998fe0-c198-4d5e-9319-6cf964ffddd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa460c9e-6b43-457e-9374-bef238bb565e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45bf113e-f4ae-40f7-be92-dda4b492f95b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ecd8b8c-7ed0-40a9-8994-46d54ce661ca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f5304d0-8700-4dc5-9bcb-4222478bdbe8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6fb4db3f-f9a7-4b14-92d0-5b764799db6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf7f1017-3024-480e-bc07-db433dd88f8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2a0dcac-3b4f-4734-8837-d0c7ecb1c8e8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcf9c578-a20b-4ec5-8b94-502f0f9efd30",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b8073edf-818d-4215-b897-a8f78dbdb9f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "190297b1-5652-47a6-a5da-93d4334e714e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6f7d4f3-4a00-4a0f-85bf-17c44e807732"
            }
          }
        ]
      },
      {
        "id": "403f71e0-ecb8-4a22-b6c0-059e04e7bb97",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "df818815-d7a8-47e8-9e15-3147d4e69972",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64a5bcc1-5b7a-4fdb-b761-51ea722949cc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8a43ca6b-7dcd-4c10-a5c9-6a16a53d875e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41e19bc-9dba-423f-9d49-889dd8aa86d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d5eac1-36a9-4356-aeff-f5ce46e0a727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ba0b26-8983-44d2-94b2-013155e33948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e9a1d4-a463-432e-bdc7-231b724b8de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e3cb08-75d0-4552-8ff4-5addcbbc6349",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22289a9f-b001-4c7a-a599-1b092896a86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8b605e-f51b-4045-9b7b-bab70233a64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d778de-ce92-4ab8-a788-5a4589751da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c02ed445-094d-47d7-9f67-adc6afa8aa8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfab624-8967-4d8e-b9ac-954adafffe8f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2ca1c4-d2bb-4e25-a245-e3497be60d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb66c08-b740-4af5-aced-fb556d4a3274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d92fec-d442-4069-9f3a-96434fa81136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "736cff32-f5a1-49e8-80e6-9517d93d6ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae34ace-ab04-4af6-9c6f-4f6363aa65a1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033a818d-9e9a-48ca-b307-47fee47c7bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216cc891-31f7-4f8e-b22b-95e9c49299b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880dadfe-6e13-4a20-ac6e-86fa0cbb9e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea895a53-77fb-41ca-8780-b8428bfa02aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb93c6c-8809-4513-b8e7-6a65339a7b09",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494aff2d-3c8e-4d9b-998b-b76fea7ad22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f1f3ce-f812-4c41-a37e-b71e588af222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823f4f3e-a21f-420d-85e5-f6363b2601fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10a1d23f-0fdc-437a-b38f-9b6f73e53515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3224ce17-e6fe-4ec1-92ca-3cc0c9afd600",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f528a5-1fd7-43a0-873c-7fdc1c03e050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a694c277-adfd-479b-95a3-043d530382a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6f7643-6f46-4b56-9d8c-73232ca6ab15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c115a961-d3ad-440a-a532-c9a5a41403f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3c4dcc-9d76-4b3e-b692-16645aef4556",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2266a4-3c6a-4f79-b696-4261070d895f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d745505c-ae9c-43fa-bb93-0375a2fc632f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0f2486-ce25-4aed-a92e-63ca75b045ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c57c0070-ecfc-4dad-a107-81057e84cbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b92d42-56c9-4b6b-bed7-e00d3ada05ad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9f1b66-b0bb-4b58-a756-2bcc9e4541a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c81221c-0040-4a6b-a567-440104776083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500eb9e0-048e-4f5a-b7b7-b81472b9d7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe554b8-31ba-4bdf-a1c3-03a6902e27fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed58a94-1375-4321-b28c-d2526dc5ef82",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8befa401-8486-47c1-9fed-ae0c1a963013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39f8118-a616-4f78-b906-71def7127c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751b1928-1806-4392-b3e3-c9984d3a301c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "735afe33-a25a-4103-8b60-81cc0b953935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83b3fa3-e051-4c14-8e2f-f8201fe8520a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3d83fc-debe-4702-a2bd-672b4c535a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3bb4ca5-5b38-4b63-bb1b-e2e09dc36a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985b53f0-db56-4f65-ab6f-0ff7f8c4fb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8131ad8-7c0f-43b1-a760-92ad8b16c961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d054dd-6c11-444d-b85b-67f42b5133d3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dd67e5-e195-49be-8971-a43ea46ad58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0f6286-d6cf-4f33-9df4-e78a1dd2db5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd6a5ec-3c71-4bc1-88d6-fcbd9494af96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "920c045b-25ea-45bf-8b8c-5db66a8727ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b848b6-a4a9-4857-84aa-82bcd1d0c583",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0d1cc8-242a-4933-9b5f-03a0fc437b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa51686c-e1ed-403a-a972-f0d1e2bc9ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721e728e-c266-4fa1-ba11-a691f2d34558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93cd1c6b-7c08-4e83-bff8-5bfdb903c057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830baf54-4b13-492b-9d72-6e412d66072d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea67b67-0eee-447c-a069-5d3a532f7b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb69797-d48f-4e84-a35a-6c86ab440a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497e275d-aa9b-457f-80ce-2f941cc8b533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fce0e71-020d-4159-b840-4d6c5138838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967d1a87-c8e5-40a6-a333-a32b4a145981",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e8d5ab-6837-421b-9314-01020820dda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be0bc8d-e591-4ca0-9db8-987ba8d52237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2900cf0-6df6-4a9d-bd61-760c57331a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "24a9d122-df76-4189-a16d-3428471cfe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002cd15d-30be-4612-a739-506cef662f3e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2117fe-b61d-4aac-bce9-822e9cd8244b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197f1a50-2a60-475c-9599-4b35a7c36c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657697fe-613f-477d-bfba-0d88dd7875cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ec168f-3fb9-4e6a-b362-bab57f5db524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122e8ca1-238a-4dcd-a241-c4934923483c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea1798e-f6d4-4fbd-90bb-e71d2036ea75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c03831-2682-41c9-a0c1-31e16eb4b47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860617f5-a099-4d0d-a20c-09b3ed532f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "11084c1a-af52-4a42-b2ff-be9fe08e02db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cb4e9b-daf7-4091-b0d7-8362f4fde333",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c62b42-dd84-4c8f-8828-099fe4592a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd422aaf-b3ba-4122-826f-eefba6e7f869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0666ea56-0463-4b33-a356-0a6fc8622bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e56af25e-f3e8-4902-a73b-5f5cc50a0010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f99ecfc-d95b-4c9f-a847-858f9604b7ba",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c91ed24-b294-4b6c-b3dc-35c1bb663415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad174344-ca31-46cd-9f75-824c9d4c15ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7d897d-50a2-41de-b776-91f01d30daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8acd7cf9-27aa-43bc-ad03-87e6b687e980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a48f616-9f18-4ebb-8233-08fd1712a67b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1102af86-e67a-49d3-a42a-f28c88315123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58732a06-4574-4c8d-a8f4-be57b233e2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4671846-fac7-45f5-9f7f-46ad22b345a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6af5c1a-e94b-475c-b466-14a0e6c79ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647421aa-8dcf-4fb8-bb4a-e7388f3664b8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87daf21-526b-4337-8e11-e806d707cb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2b1cf3-bd1f-45f5-9c07-1fc16a528cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec6f820-0b5e-4bd5-a257-a650732ea114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52488328-fa74-402e-8c03-b216c2bec9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f51976a-c955-47c3-868e-653364836e42",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fcc119-1d2e-45af-a3dc-5ba562cdf331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b6e519-923e-47db-a258-4b255125b654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb28a363-ad38-482a-a6ae-c46c10d20d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c378d5-1e23-466d-9ae7-1d3fa8a9917e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4099b1f9-7845-4ba9-884c-243c1dd8e450",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56217d1c-8581-4496-8f23-ce31469c9e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0371d9-1c60-4d0c-995b-76c34398f152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312c6130-f13f-4b2f-b15c-9377104c0fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18616d61-5c0e-4b9f-924c-b180a5a717ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270eee7c-cd84-41f3-914f-5c88aa92e1b2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c228285-b679-44c4-ae9f-5fe54c2cce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446339f2-42c0-438d-9204-84706dce8cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c60e0bc-3de1-479c-bfdf-0209f6b858f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e722699c-dabe-4cb7-8da8-cab5007f68ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59427bfd-08dd-437c-9c11-bfc3eb673d56",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93069f1a-b550-43eb-840b-eafee586beb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8eb3bb9-ed3b-4eba-b4d3-87c4559f23f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa861137-454d-40d4-9d74-14c284405cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c532bf1-5550-4f8f-8f9f-61ceaffc69f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff890a02-1a49-4100-8ef2-ac975346e233",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309f963d-f0d1-46c7-a88c-a1893fa4e566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6732ab-dcf3-4b07-ac8a-063aabf66a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e3dc4b-48c8-41bb-91be-22c2be520e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a902f89b-db84-4705-b800-1312553980b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996e0cad-14aa-4a63-ac8a-a1ad40c04b50",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfc7a5a-72d3-4ddb-91f1-440a36685225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aca9fc6-5fff-43c7-80e0-5a34e193240e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c901d7c-fe19-4088-af2b-d492ad834ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb41aa56-fc76-4cba-88d7-1e7ecf82a961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee414941-458f-473b-a66f-d3647cc9e796",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68878eb6-046c-4b85-b105-e1bdd7a61f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96040142-0acc-45e9-a65d-676bb4fb5bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a56dd31-c535-4e9b-b2b5-d864d8ad9ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa4bf76-63e2-4d68-a2bc-42833f1802cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb20effe-53b8-46d7-a953-ede0f97371c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea689e7-ab2f-41df-8147-aa95e7263c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faeac1a7-848f-4fd6-a20d-4fe04eb8cc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6300f572-f6dc-44e4-919c-7781caccf74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6525891c-fbf6-470f-8b2a-2f98bd19a6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba366cb-1394-4044-94fd-b512cdae718a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5387b4a8-3b51-4d3e-bdeb-69e3677b8853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c09dc7-e070-48d5-b114-3bf324c4f716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e070379d-9201-4e38-a9ac-203aad2fd2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5789c223-1b60-4435-bf99-46031c03b54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072a6331-3b04-4cd8-87cd-96148dac0a1a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbeaa379-746a-4135-92f3-3a1170dc2d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306e85ba-6e10-41c3-864f-ca2b1c28a6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f59061-64fa-40bc-bb53-7af6dadef119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5dbc20-1cff-4dfc-8c7a-1765f60ea118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e48b8ea-109d-4267-b5b5-ef51cd155b2e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63204c12-0e2e-4bd9-a57e-9c0fd75bcd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05be2181-38de-4eab-8d2c-04056f821b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2f5ed3-f1a9-4e95-bd5c-a4e29b9d0b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2f05a6-a06f-4918-a058-cd3991cd2b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c696dcea-e61b-4ceb-bcc2-72411ec5441c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dbf692-319f-4580-8568-e3b848581814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c77b1d-36f7-41d8-8fd6-baaad7a4515a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b23362-adcd-4348-8187-faa8a8cae7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "339902e2-b9b0-4046-a1cc-70b5ab86175e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "daf91fae-8c40-4969-ab91-6cad31b8f2f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "907e00b5-3a60-46a0-8453-3acd83058f0f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed9aea2-4459-4fa8-ac1a-d03e5f2b7e0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0f80e024-2429-4055-bdc6-96f04a705102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8770089-4e06-45f3-a992-f1c581a154a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18455fd2-0c67-436d-aa76-8c4cf9b43906"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ac6de9a-d9d8-4d3d-9207-a3ed0fbdedce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0791c9c5-fcc9-491f-93af-596a38c3a834"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7eba835f-2d66-478e-a28c-92e5d2aba05e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc498621-1d9f-4030-ab0b-e35b16cc2c12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "835f8d85-97e1-47bc-825a-a75656f81a27",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "daccfb02-af71-4000-aa9c-7babb16a62e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd23c85b-6628-4cc4-b720-772745872a06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2113db23-d280-4cc9-984b-95f004331706"
            }
          }
        ]
      },
      {
        "id": "432f390a-78ed-452c-a769-91b1a136348e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "32abc250-eddd-467d-a8c9-22ebcbbdbec3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cd8ac7e-5d96-4692-b0e6-6a4fa17b71d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d84b597c-24a6-41f0-9027-bfb7787ce4ee",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e60b848-e67a-4ddd-a259-47db0d3ff8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd63e63-78f4-4fa1-b691-26557f5ecb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b718b00-d045-42ac-ae45-7ead9012884a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e06cf3cd-1b58-44d0-b6b4-d08e5fd2607d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631a2c38-9d66-4734-bd54-517420c924e6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d212c24-ceac-44e5-a17a-4c6dbc494aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcad889d-3866-4733-b859-7b6982a96ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba73dc4b-6dfc-47e8-8bf8-1a24c19196eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d62029-8444-473c-b31c-abde6b87eaa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4fc07b-e2eb-43a0-8938-10bf8eb69593",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb24fa6a-7467-4308-94d2-859922dac69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a357ed0-0604-433d-b1d8-fd1a146ae0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f0068b-df22-432f-943c-20a3c0e5df0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4158cd-dc7e-4a37-bd95-884f8608eb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef4017e-667c-4a36-927a-86cf2bcf04eb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a651a91-0ed5-4d1a-95c4-cdd29e2b7f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285b21d8-6d84-413d-9b30-bf0f0b87249e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640d5cab-d59d-4d42-b180-f5591ea2981f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3cb532-2a47-4f27-a2dd-4476912cba2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c65294-fcfa-42a6-bece-868ef8ec1ff4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70efb70-32c2-4e66-a198-1cd9a4d7353b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efccee8-9f59-4d80-906c-5e5b307873dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e38a61-5ce5-4548-9237-ccd483a3c0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a459a68-d265-4846-933d-8ca5aecf2b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd80b62-30f3-41cb-86fa-1e094011179c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7717c288-56e3-4e44-9105-99f97809d475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a72ae56-169d-4bc9-9bcd-cfd5d1d530c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd65e52-88c8-49bd-b97a-71afa4c47041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a11ff2d2-b3aa-4a89-a188-c750bba3a41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbbef89-c90a-412e-b2ce-6d1787974d34",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc9bf1c-a748-4b75-8b83-b2ebbac1cc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da6146b-ffca-449c-b096-d0d5425f2d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e7ccbc-99af-49d5-bda6-a4b38cbafad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "07bf5ec4-f6e9-4a9e-bb1c-c918111c99c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9d35c6-8ae9-4b6d-b4dd-089326ecc1af",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85835ea-9748-4e70-a448-59d3996d54cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d526b7-0c8e-4450-85a9-bfb2d9e551c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d857ffed-8c59-4867-a41b-2412f7b12b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63bf1efa-9a01-48f5-a7e8-83e70184cae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df19137b-7de4-41bf-8834-663562ba88e6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5387d3c2-8d6d-46c7-85e6-b60ea6954cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6bb59a-deb4-4481-9d34-251fb36cec78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9420e52f-2868-40a7-aabf-11003afb520f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66c1eacb-23ff-4e45-a26b-c2af0f834a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664abcd7-6b4e-4896-9395-35fd6312ea1a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27087a8b-0ada-43cd-a381-af64eb473c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2181b10c-fafc-4823-86b0-c7b21d2290fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bee9cf-db02-4547-afb8-507933711518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23838919-2f5b-415d-be86-61891a5f7f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28220888-a366-4687-b0d4-4952562ee478",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22f4150-7659-4515-bc20-b53d3eabc4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08be7486-67d5-4ebc-8e2b-ccb843651788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712b9391-5e07-4423-8005-38952f2c6f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d075121a-d685-4bfe-abbe-3d415cdc3d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a12c3c-d6e3-46e9-92fc-c8aacace05c1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5528ff-4896-4a59-a330-f97a785bf463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91d0857-a09c-4d30-bb2d-61bacbfb0628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b57f71-3d63-4281-9688-592b5c5ef61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "654b53ed-7585-44e6-a416-2dd7fad11f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8af90be-6d9a-4ec1-a76f-672bb0a8378d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade4ec18-4ca2-4e55-8f66-ca2b64a6dbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54063603-cca5-4eba-b013-56f1dd3f1b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c3d421-d1c8-4e71-ac82-67b7131dae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c6e473-69bd-496c-a27e-40a43f2c5ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a628a6b4-0b1b-4801-965d-397346ed0fe0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fb1340-e76d-4800-a190-2f0797257c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562e73b7-928e-4580-9515-1f0572130464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3beb7f56-908f-40c6-b811-06d19ebd7af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "096c59e0-b12b-4753-9c2e-49225422ec7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a275351b-d736-4ffc-baf3-ec3f910f1bfc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f27b7f-5e5c-4a17-9d14-4e92eee71fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967d70fd-1a91-46ee-a6fb-e2c5e3af90d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf0dabc-d373-4e1d-997a-bab658a0536d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a24f38-a32d-4536-a9c0-9f422be8d775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f3e763-0124-463e-9873-7baabab44dc0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defce3fe-d8aa-442e-be4d-4f8a81fc7415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36b9c41-d2e4-424e-a0b2-3b7e3179f752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c119eb-e23f-49f2-87ae-001e7ddd7817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5219fe-140f-4220-90be-6867de0d6bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31e4b9e-109f-4eed-832b-a5af09c8285a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d6a12a-80fd-45aa-af58-e0d1c7dd63c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0e0ece-9f65-4706-93b3-534f4523955b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd79c322-21a0-4c6a-96a1-aa623427c5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1378a9a6-da3c-485b-9840-b5486fea6ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0285087d-3395-40af-96d1-05aabcd8299e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf4f61c-46b4-451b-bc28-598e8d0c2f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f30d74-43f9-4c7d-99bf-d6893ff611e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfe83c1-e886-4d37-8115-f5a0305e0bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cee7b14-fca5-4f64-9bed-a9f1fda5f849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6355f1d6-4764-4a9d-9528-93dd61a226b2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573f5670-d2a3-4321-a0c4-bb1ae685d6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e016d0bd-3bdb-408f-90ca-d5ec551de12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427a7be3-e8e4-41a3-bd80-4e7e2c175ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "650bf419-36fb-4b9f-aeda-6e776bf99df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a3fbb8-5bd3-481a-8945-eab4a01113be",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc89fa9-21d6-41be-a4e5-1a0d58147bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3864a289-e363-46c6-88db-51cf42039122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb1e1fb-d285-4637-9bb5-d3f477f1ec4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79e21de5-2fa6-47ba-b6de-d754c0832ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91403d0e-1fac-4a6e-a3a9-a79e4f2cd029",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91353a28-b673-43c7-8d85-fb9b9ca08172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b580fb2e-e337-42c5-abe0-445194148263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08759888-280c-41bb-9d91-0b0dc583b920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7640f76c-151a-4f72-b5b3-aeb521fba3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1a4b49-94c9-4eb7-a690-ba9c006a4b69",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a209b879-30cd-46f6-aff7-d32bf0869520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc30fa20-c27c-48c8-8adf-8c9a36739bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dac7725-e7e5-4ba6-8d6a-d0e9af91b27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee2551b-cc97-46ed-a1cc-f1f27f1393f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde50679-2cfa-41d3-8c80-e232a289113b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd89162-90a5-402e-87af-23c9394ca7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2ad97a-6909-4eee-9c41-7c985aca5bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b8882a-e29c-4652-9846-c3249406aad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c01156e-1ff3-4d46-8f9c-173e8d1028f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04f3550-d6b1-4dce-a8a0-6fbb4757952b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162c9340-30dc-424f-a21e-a9973b5b6fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aded0c3f-ff89-4b61-9839-1c9d3c17d76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6d1aa6-a1e0-4d0d-950d-c98eb7b7ad0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f86743-4231-4a07-960c-a0547358acbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a97c72-38e2-4327-ad45-60d08b1e1e2f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca9a348-15fd-4d44-8d63-10f842d6730a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05807d84-60c5-4c9f-8bb1-aceb835738ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f41d4c-8279-4f0d-9827-8f0abcf668a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "869afd2b-40f1-43cf-96e4-e917db55b4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0637640-9552-439d-987d-4f9c211f5946",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbb019e-bfb7-44e1-a833-1b123b2d218b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef2c22c-ac63-40f1-8eb2-c22f9f4533b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e9671d-e4d5-4ecf-b45d-b29fc6e35da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59abe2a6-1e30-4080-87eb-0f2064a10a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912272c6-1ca5-446c-a610-94a6aed1c224",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afb1f34-e89f-40ae-bb1a-9a12adeab722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44439e0-c853-4c70-81a1-318606d83e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da11d050-3e0f-4d7e-a2aa-3e9b38eac8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdcd0a71-1cc4-4d32-ba12-314110724f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1a242e-6879-4aeb-8278-4010191dd1a2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b69021a-348f-4b69-b43c-b4ae8236e054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b06fd53-c2cf-4e78-b83d-8a74397c4171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b298272e-d15d-49a0-a59e-0d32cdac3e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ddb822-a309-448a-b031-57524759dcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b20a2d4-79f3-4fc5-963c-87c721e12827",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8863872-14c7-481c-9b7e-804d41abf45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd48cc3e-5542-4c97-b220-b885c6171a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42109495-60a8-4d56-9908-ecd9ff74dbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "047486a2-9505-45fa-8875-408f84547c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2744fa0-70e3-4eae-8702-d4fcbe0d0b31",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e46cc5-71b1-4cee-9f69-d969d456cd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733aaa25-aad2-43f1-aa0a-1773fa7ff170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628424a2-d158-444f-90b9-32d9f626e047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e186b73d-4539-4da0-9bf8-06ff62c560f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0668d74-3ce0-41a5-85e9-2bdddd30e05a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6246dd4c-aab1-4b5a-957f-bcd469e502e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80abea3c-fb83-488c-8789-02a81e0d5324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91876717-a7d5-4f83-9204-46fe403933a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93880b2-9832-4256-887b-de13db448d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669d2e7b-7ac1-4dce-85a7-ecfc067fb988",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdc1ebe-688f-40b6-922f-a811185797eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a83a737-9b8e-4863-9c29-1b8ecfb68ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78cb922-8a20-440f-a027-cf4a69996fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c83d786-9010-439f-b12f-caa517b3bff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c1457d-f483-42e1-a9f3-fa5122629403",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f93a41-c3e6-43ab-a866-0257e98550e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496af43f-649a-4237-ae3f-fa162ff59fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045e91b8-92b2-466c-8246-c3e9d4b8bb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2216fb3d-99b9-4de3-b185-c922ca975b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c233833-f36b-4fe7-8224-e6bf93d773e9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967e4df7-1464-411b-a690-7d7312bb8bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdb5ef3-99d4-4f2c-8595-7264755b131a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709b3fbb-465a-432e-ba60-2b8c22b86b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "313d835d-244f-43bf-8e00-47814d03f78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb0709f-c7e0-4b6a-b28a-6e503cf0002e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da64dc9-fe61-4e97-821d-a2ab0d758e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22edbea3-9ff8-4aba-a020-8beae4d05d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a0799e-725d-4726-b3ee-67eb871266cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "615981d7-110c-4d12-8ede-93d3bf97d19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3682561c-81e8-4fab-9d61-160b2effed02",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ad62f4-0e6d-4268-9388-027f4a99e993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bac7c6-8d14-4c0e-9ae5-995f6113e87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b43a8ef-baad-4355-b09e-e2746d2ad6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "749fe8cc-e27c-4076-807d-b2992f051ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58a69f4-7309-45bc-81ba-2f7e07826f80",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92c456c-2d59-4493-8ba7-00bc2bb59a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd117601-2845-4454-9509-c4eebf3edb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fce01d5-a602-4d94-a581-e2c523da1a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38b6ad2-fd19-4b7d-8ef6-1493792f164a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3c2b0137-9cde-4a8a-a09d-0b77ffeae6b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db331901-6ea9-492a-8601-ac937f4365e6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82b8d81-7bdd-465c-b2f7-33d7d027dac6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "81189706-52f6-49d1-a9d3-d46a85aae1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b612ad4e-6e0c-45b5-bde2-1ca021129f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7219438c-c8b4-496a-9d50-a9f35c87d1fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "092f1158-6325-496b-9531-41837d836cc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cdc05ef-6e89-4da5-bcab-b4a60ef66ab6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a0e3ea7-0082-416b-997b-b22e500854a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fcd4b00-1768-441a-afed-7db77ccd4770"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "547707d7-3660-4db2-9acc-45e69eba286a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95a59897-e53b-48a5-b481-e7472ccec43f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2730c637-44a2-4445-b1c7-5224b18ae19e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a88898d5-f2ba-45b9-ba9f-c70a0765a3f5"
            }
          }
        ]
      },
      {
        "id": "4c8274c8-d4b3-432c-8b94-faf1217b74a9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9808303a-851b-43d7-813f-6917383d435d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3d7770e-81f9-454e-9779-4596e1231d86",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b0781103-12a7-41fa-b91c-d57f350cdd09",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee22531-0ffa-4b94-b29d-8dc16276642b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272fdc9f-31cc-411e-af65-6953a167e676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70eb6ba9-9a7b-474f-9176-fad75c3c5e3d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e09d2d5-f6f5-425d-8f1b-36e3998f42be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fc45f1-77c8-41f2-b60f-763e4f94d521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43feed3a-aee0-4450-9e40-2446ec0da5ab",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae5ff18-392f-40a2-a7d8-cd3fab639b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83015ee4-274c-4f30-ac95-b7d3706d030e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6cd391-704f-426e-9cff-894564fc3444",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b349f56b-5e7d-44ba-8e6b-faebc1e334a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f688afe3-fae8-47fa-aa7b-9df1b96e4871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d22035-a70a-4c4c-b5a4-7f76d1d50945",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf8e169-3643-4f2d-9b90-aa8c40d5cdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402f4b8d-839f-4fb0-b2cc-dd394f70a2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c999c77-da8c-4be9-9cf1-12fe9258ae7e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb6c765-a819-42cc-ad56-4f6c0a9abda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d36e47-0665-463e-85ce-7200e0d9001c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193cd407-1b55-4cce-b83f-59b82e9dba0b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf109b9-cb62-43fc-b082-fef5c4d3ef98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f133989-1ba7-4d6f-9d45-ce587e4f7c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b269ad-c663-4800-8d5b-da336bdc37fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0721295d-7f7f-433f-983a-0d1c8c6a4ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014c6fa0-3fcb-4afd-a4af-9e2deb6aa6f8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e1e093-56f2-414c-a2ac-efe2a1e49f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1a0deb-f8d8-4e7d-963b-d0f86e3b0023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4784587-00f5-4687-8702-f29b85180132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce568bc-3d08-4fd2-949a-eb5e9c7d80fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c7a6d8-26c9-46bd-aa3b-d15e1ae89821",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efe5fb6-9142-46b3-a905-ad8d0371f74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8468f9b6-3894-46dc-b3aa-66b34eea5ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587aab0e-4077-4890-b4b8-6ccf5d2bae17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df2e61b-df55-4e8d-93cb-0773e43365e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e63ba0-b032-4762-a189-333cc4bf33b4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae7dfb2-5853-42bc-a794-6f476c0789ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5302cb3-49da-4d77-a0c2-4fecf5881db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7fecc0-d9f7-4a09-9cc8-ca322ef9a5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cd5b2b-d401-49bc-8d35-a2ab1b1eb120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b38b8c-8c07-4d9a-80ac-d578e444d3d0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8dcc768-3c4d-4c2d-80be-ab453b33a6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ac506c-ce98-4aa9-ab2b-3f825f08e1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a0dd7b-d15a-4fc1-b3fe-94161c2ec111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee05b043-82ab-45ae-b8fd-d5bd31260d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb23dbdd-44d3-4af7-a211-f5cc2ca1261f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1976d3-ff3f-4a53-b12a-33e1d749f003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be0d73d-2045-413f-8ea1-bc350ebbc8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662d967d-8865-44f8-9753-9f87094e80b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc942b27-3a1d-4238-97e4-55ea149571f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04dded1-17e9-4397-8199-98c12ef8d43d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c905d44a-2f44-4613-bd03-ed2b4fcaa11f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4ef15f4-1d8f-43a6-8f77-ddb2d7f969ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52df1136-424e-4be4-a611-70668af79eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778d8a31-f85e-4166-b418-44150232f8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe5fb4e-d214-466b-a67d-1d74d6e985fa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b3a7a0-1627-4336-a88e-ff6afac2e492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c55ab4-4714-4599-86d6-ab8523a15c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27aeb909-9435-4b42-8aeb-48ebebff1c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f135b53-389f-4c91-962c-fe31114e07ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612017a7-0748-4c8e-8271-ef3131278e87",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a3ff8c-c825-41df-b277-3fd90cd3c04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bac91c9f-5c2c-49b4-978e-4fc7c2888394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bef049e-150c-4d48-87fb-271a92c34912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1238d495-ab11-4b43-9cf6-ad26f7d2daf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97b3381-5a69-4fbb-8164-c47c40ecca4a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb7459f-7854-4002-bcd5-c61a6da66fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93fb4885-5149-46de-aa51-d6e6fa6ad717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4e355e-4115-4eaa-bb7a-a45326052c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bd32eb-2317-48ae-9600-61a7becf1c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d2141f-6ada-43dc-b987-06f9f0fee8fa",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c764e2e0-bade-4f78-9ffc-04d56e555d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e6cad9-acb2-4257-a2c9-addf23511d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5b566a-aec7-4f47-a28a-3f264eb87514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0968c3-b45f-46ac-983a-d81986bbaef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f82b4cf-eefc-4e5a-afb0-75ca15ba85c7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97e7682-7546-4bcf-973c-4661a5f3decf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3095477e-641a-4b60-b9a5-f00a1cccff2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7df89d6-f056-4a1f-bbb5-f10d8c00703a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0666920a-34b9-487e-a8a0-95b729462235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2aa774-495e-4076-919f-7c168c186fd6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3891ede6-5057-4929-bbf1-8449c740d1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404fb7e2-0f5a-4616-8617-9b7970052412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f899a2fd-2ad2-4fbd-91a5-6903d705a015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc77c486-af4e-482f-b536-1e1b3bed9eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8e2d0a-4d21-496e-9604-9fb8d0865c22",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc656af5-46ba-48f4-b850-14827ced891c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196fc011-cf9c-44a1-8235-261941ffaa0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99edfbc-6cc3-47d5-8156-5a5a8d9f5cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52f7010-d1b6-4495-99ad-d177275fc8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29813ace-56a9-48f7-a2d6-5e0362c4d103",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d5a0e3-e028-4343-bd7e-f59f1da4042c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb8978c-9a65-47a9-88a0-c1e7a437490c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42361040-4966-4513-8f52-fac7cfb13f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223032bd-6f04-42dd-9072-29aaccd9988a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c57225-f0f7-4ba2-b5e1-e5d38f0d4b55",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75757f6a-6a41-404e-a252-e04691908e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b5d311-2b91-4fbe-9230-2427f5a3ffb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "116cc9b9-8f8c-4c59-9f67-bc0a84e62b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8586e2e-4312-4442-89ea-3b8e1c7d054f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdca527-6148-4061-ad8c-29ea6449eddb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab477de4-a837-4633-8a80-031b3b623f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c23287-28cf-4ede-9479-5489343187ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171ef3a3-22fa-4afd-b749-254b2d135e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c959e3ca-e7f5-4db9-8382-99cd0d837b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b20058b-8934-4399-a0b3-8cf131e09fd4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c1f323-805f-41b2-9485-7c47327a47bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eebc2333-b202-4e27-bf04-80bea2405262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583be505-0200-4731-8a30-4f1979163975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b521b2a-0421-45e7-baa5-8dcaa3a4cd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d78f03-b27d-47ae-aba4-e5885d371d73",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f15f557-fb2b-4a97-a482-771b7eb8d8a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06980c7-6375-4a76-a38e-737912665d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e173520b-6fc8-48b5-b48a-0d4e217f5bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cb53aa-dcb0-4283-82ff-3d14d191fe42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7fc68f-7e4b-4814-990a-107afb8698a6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db659b1-794c-4090-a4c9-151a09ba9076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d51b6e6-266c-4c36-9d90-c6ecdb00fa8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36a0bea-763a-43f6-8484-5ed40eaa365f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15abf7b-9278-4355-a211-58b3ff3c659e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c0dc80-6daa-4f6b-8fff-12d5a8bacc6c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67f766f-edf6-4c6f-92ab-f48008b1db23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1de8ef5-8a5a-4e2e-bf96-c22f18d4fadb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09564102-4272-4ec6-be96-c42879a14a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb7ed06-73e5-484d-b35f-26ba74049114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad22280-7216-4480-bd83-7e84c47a68c4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62ea0aa-a506-442c-8b57-7664875fd33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cd0cb0-60aa-4f70-96af-2662d3f80707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c8735e-39a7-4d46-96df-930fda83eeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740e37dd-6dce-44ef-ac06-cdb236ebc787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614d0e0b-d0e8-4332-9376-af3c10e48ab7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a25a178-21bd-42ef-9ed0-ae3cc8389b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c303fb-461c-4a79-aa27-8e15fade01c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3d535e-03b6-4d16-a662-0e6b37bb8bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f2c0aa-babe-4584-95ef-0ead006d63d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3d6a6d-db0c-425c-af54-06c429adf045",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c547c6cc-0260-4699-8cbe-a6e05b314b34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b231729b-2b21-46fe-aece-06d10480cb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315bad28-63d3-44a7-8b87-634a33bd43f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec247cc3-8b14-4e20-9f6f-dc5df6dec2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71f281e-3e9f-48f7-9295-7b7f941b9ab1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ac5a4e-3c7b-4f3b-9a12-07d730f36a68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93591c63-4755-4811-9089-24640c44c019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bc8bc5-bab1-494c-b85c-15c7047e3813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c541c8-381c-482d-9022-da9d786f697e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1958417-8819-42d2-9442-fa2f2fcd409b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb7ff17-2f7b-498b-96b1-c9ee0e50b306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d258fb-622f-4497-8477-06ddae4538b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a501b9b-329d-42e9-84e1-436264c819bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae42bc2-2ff7-4680-84cf-83d195531332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e94700-6c90-45c3-85e2-04d013772747",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4792554-0af3-4822-8cb8-96754b357811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a61d70cf-d8f9-4691-b633-28943e204e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fd00a5-3195-47e6-ba3e-25223761b8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f684bef-b894-4802-9685-861b88e61859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e5ae2b-6962-4d31-b95e-88501ef2c72b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275504ca-4b57-4135-a154-18d3042b58c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45216301-2b1f-40c0-8d34-e5b3dda2d1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a08553e-3d00-4bcc-833c-9ffe0b654b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a060354-52c7-4618-8063-bdb0e8528aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0248d2-b26a-49f5-8da2-ac8a74d04d43",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635dfe6d-7c9b-4ec3-9880-1930853884d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc0fbf0-0bdf-47cd-a541-895f60c0cb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59bd18-b274-4d72-90e5-a64569c9f39e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ae7e58-f783-4219-8965-ff0cb5f85ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7370b4-6634-4d6c-9198-76d9e6d49819",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93e0cec-cc26-4f8d-b872-807c92a27af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758de490-feae-4f8d-8830-3a5a5417c88c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0844dc2-8b8d-4a4c-9cb3-74f74f719f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d034063-b203-4654-880e-649ccccf659f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e55b454-9219-4b4c-88d1-212ff3b28aa1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7953a260-b085-41f6-bfdc-5865ccf180cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c33f4af-72be-4924-acfc-5ab9019f5846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15781bb0-0349-4e7a-a5d2-e5747ce01387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652ad3c5-44c1-49c9-9909-8b01f2762171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8242d7d-dfa3-4cd1-9605-0a6ef355d7b3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d09e8b-88a6-4be6-8203-5b34c052c35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f513daf6-f16c-4552-b4c7-32ca243dbdcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d41689-fa0a-417d-9132-484a5dd91762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f81e3d1-5fd6-4b55-a10e-465de654ee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b929eb02-3197-4df2-a2dc-13a261199b3a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa5ba7c-d1d1-49b7-bba9-476a9addbcfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2789b77f-c2e7-4d2f-9483-355cc844def4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a823d7-369a-429a-a8d4-9396f67723ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f3f0d3-2e1a-414a-ae51-c67ad36014c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63469c27-803e-4a31-be66-e56a3a473bc1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e199d5-e62a-4fe8-a566-6160dec4b1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8b9ad1-66e3-41de-b33d-1d71173d172f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e862fba-33b7-41ec-96bf-c021362de978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53adf13f-f391-4b85-b40d-a60cb5eb747f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b9d21a-f61b-46b2-a120-5ad58c9c4476",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca5fdc9-0cc6-4ffe-8e19-8410b24fbe10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aadef17e-227b-4d7a-988e-9a3fb0470070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f34837e-efc2-4bb0-9708-79d97dd7e438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b911b5-f99d-4b54-abed-a77d0789a40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd2090b-19c6-483d-8cd8-64e8ca1009a2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d782e6f-de68-4004-a9cf-a6e9d481d2b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173067f6-72ec-455f-b8c1-9908e782630a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a3799f-3128-49ee-aec6-af779c00188c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ca430c-695a-47cf-8d4e-c232c890b223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6879338-e569-4b4d-bcc9-9e1ef01182f7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9495f74-9c40-4fbb-aafb-ae2adbecd83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b0ea6b-45d8-48b0-8b6f-902382ad9953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b18af9-0b00-44bf-a6fc-fe2f58e47cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d412e3-6ecb-4eb9-b750-41e155d15a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701cdb11-ee3f-407b-b507-1ba257ea4c26",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdd8b0e-e94f-4010-81a5-be4dd1b574f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f521c5-b7a8-49c5-90c9-5390d9a68908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d042163-bf2f-498a-867a-01866e407f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6984789-965d-40ae-b30d-7ae7d88e5fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b99cb45-d0df-4fa2-bbc5-d705676f150c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c2e33b-3558-4fe8-a53a-f850f8158a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c243a547-c117-4cfb-9e36-7b176308c99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3e532e-17b2-492d-9661-e0627a91b0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef36618-d4bd-43c4-99f8-75596c46220d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184ecd47-635a-4e7b-a1f9-66c3bb3c0157",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b526c7c-fe7f-4ed2-95c7-9d5d44d3e9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dd59e4-dcb3-40a5-96db-771d48c47f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e89b557-cf3b-4053-bb08-e3b423ce05f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8b1e4f-92eb-4ef7-9b96-793a1b78f59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea73fe3-b0b2-460a-9312-4e8806e271c8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ec73df-0907-437a-ba94-fd1fed43fd12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab84f56-6220-4f44-892e-b92946ef7d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb29c03-8ca9-436b-8550-07523719038e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b7a664-1b9a-4134-9fda-73b1c043d4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e691736b-73fa-4327-8695-31324a95846b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e812200-0b73-40dd-bad4-a0a239cd0f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352ec8b1-fa35-4dd7-9b44-2ce211e82390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c751ab70-cb00-4f75-96ba-21a1f4a2cbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f631b8b9-ecd8-4a08-9e65-bae4e9234aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1591178-54b0-4cba-83e1-ff11a45dd915",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c0dad-1f08-4d39-b540-f774eb203c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ec991c-95cb-4812-ae9a-a3f9a505f94b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f37132-ca7b-42fd-a7a5-98bb3f04fec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02abd331-ef85-4157-b2b2-43eab9108061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ed729b-8c3b-49c7-b169-7aeb2a5950ff",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dfaa97-9a39-4baf-a5e1-d721f38ff181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be09ec92-a0b6-455c-88a8-c50fe9676032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c8b649-af56-43d8-ab36-f8b115f4c7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdb42a5-691d-4972-a5eb-0799c4da6955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb00084-495a-4887-97f4-d9eb573a9e52",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd045c0-239f-4e60-83d4-a6f07a15860b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2470a36-f61a-4f0c-a685-84e0fb05c47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17c6f96-76b4-40ea-8a2d-d35a7d1309a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b5feda-c228-4028-9874-840d8561a098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ecdff1-5603-49e7-96dc-84bd2a831a9d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e493893e-520e-4fba-b95d-9e50d9613c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d22903c-a4da-4631-9aa7-64b27a14c4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79660667-8adb-46a1-b291-38920e0c4f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edfcf7e-7d29-47ea-bc1a-42477d60d98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542464c7-c85d-4be0-a1c4-3b6cab5ea276",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01a15b9-67a4-428e-be42-028288779054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72371219-0e08-4c52-a76d-07526e724b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9fc924-1688-420d-abb1-fae6c7b585ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ef923d-ca37-4e82-86dd-e21aaf293fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df104d5-49a7-4a54-8959-58c109381c6f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b76c79d-220e-4796-926c-e6afe1d0c6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa08791-6f50-4a35-8c01-f50682035ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f815ea-e2f1-4bd8-9e53-f436fddea4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf74875-b6e5-4053-8394-4752e7535a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa5d707-3254-4c7b-b806-87e3bb3521be",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75196a75-1343-403d-b8e1-5ecbab8b2eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87540859-1e99-4764-94cb-089eeb6cfb7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d074b4-279c-41ee-9853-250ec7fec63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6839eb-8c7b-4fb4-97db-8b40b06132d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163345d0-b492-4927-adb6-b46120e76f39",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55ccfe1-dc2b-4d32-8f12-1285b4027c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52e9d22-fb6d-44e6-a745-c22cb9a726e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde97bcb-e22c-41cb-bbb8-0ae1837b714b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea6296e-1b46-4cf7-8fda-78225dde24a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fd60d6-695e-4757-8101-b2663330d4cc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a9da10-b2e9-4997-b5f5-35d25a695f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06a1305-72e0-4236-a9ff-d92ee86112d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e5e099-5a91-4434-b931-a0c2b8b8240c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28984876-1f9d-47af-a582-f4be6c83698f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791bb38f-85ff-4aa6-bf65-69f1163a5ab9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfa2883-b366-4296-9297-140b733e5520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3581d0-5334-4f96-b53c-5e04b2707e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513a059d-f36e-4c93-8743-99de7110534c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e53bdf-dd55-4198-b843-7db37a3b2134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33e1fec-1176-4c7d-80b0-1a7feb7872f0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8f1770-bcbd-4ddf-8cd3-11ea1d641460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cb4ea1-ec0e-4a73-aa36-5d400bfc8030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16530d23-149d-45ea-af21-dc7c358f3b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1546da-c9c5-4cc6-ab1d-490566d37a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db2b396-7848-4489-97b1-3ee6d6af713b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3366c879-af6a-4fa1-87d7-760cc9c777c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d9008f-bf40-4780-8ad1-55e2cf50af7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83f0760-428e-430f-a3df-ece9ee5f5bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2a8739-95a7-4f14-ae22-58d640fde26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1440781-7f34-41a0-9d04-72de4f6e0805",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9358a96-2e80-4631-ba9c-cb1d32ce9094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0635ef72-b5b2-45d7-8408-c660af7c48b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cce0186-c223-4bc5-9059-c49123050d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08f297d-0ac0-45ef-92dc-fdfbe9cbaf32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c524aed-0492-405c-aef7-d46c607e5345",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47060277-e07e-4e22-a011-d72b1a20fdc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8cd1d0-3b3c-469a-8b1e-a21a46de3490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c872ab3a-051c-4e7e-95f8-ff7acc5a80fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b6d522-3b99-4649-9e24-4b0cd10c700f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f548f29a-582a-425c-bf0f-50e10357475d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddec5636-63c7-4dc1-a50f-4c4684ff5549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fdd593-05f0-4f4e-9a3f-9a6f517d0af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cd0ccd-baf0-4f90-8d6c-999f97f9a8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4111e17b-2a18-4cc2-9ba5-a76ca96b80b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487e2603-1fc5-4b03-a672-a0f4f95a69a5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d11457-b3d9-4670-a139-8104ade851f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e9b861-f73b-486f-8c16-7b37acf5cbe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48150154-bf93-46db-a366-7001664e9d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83657345-effc-4ed5-af71-7dc51d08fbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a472ff-5b83-4c83-b6f4-53528d14fa36",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3963ef25-7091-4df2-9354-6c78c6c6a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc7b38bf-e76f-42a9-a359-22c76de004c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da85a91-d545-4ad9-8430-81337694429b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6faa5d51-5930-4428-9649-9b00dba2b240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb68ef8-ca12-4cea-b73f-263facbe68cd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9c51ff-b33b-4920-bd8c-ccac276d25db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bca6e78f-8394-48e2-b8a3-23aa3850426d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8088fb51-3e20-4b9b-b1c5-d05891d01e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9fa94e-c18b-4b45-a9d3-bac1aa679771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfdcdac-5244-4729-a827-c936bdd86299",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1860bfa-eb0c-43c4-b93f-5f3761068ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90fd3c47-f3e6-41b6-8fe6-a6987f411cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2800d8-89f7-4fc7-97db-313de7f6c51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998e06fb-7f34-43f0-b5a2-4ba4ca409cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149b163c-9364-466d-93be-c4c4f0809458",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690e3e34-18ef-4f83-9cf5-847d1ba3fe69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42ad8f87-c352-4df7-b4fc-f224e0be9af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb90d41-d706-434d-a43d-045a3ceae827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e12953f-32be-42ec-aabd-df6264a19722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0845ef92-d793-4bc4-b818-6303a386c11a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deaa2b7a-9418-4023-b42e-04eeeb677599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af2e4afb-89ad-46ff-847b-195474750fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a29783d-c6ba-4cf7-b0c6-ed16e7d571fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c98bc59-39b8-4fd8-99d0-50d407b7061f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306a1a3e-2c01-4bba-8e1f-e7f883df65da",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1397ee0b-bdc7-4e28-b1e0-e05065981dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af3f13c3-986a-4dae-a8e4-dd5dc46d6b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54b7d07-e45a-4aba-9637-248aaf616d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab81182f-8791-445b-8040-740aa5c58711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d1c28d-d299-4981-a109-c7f2450a19a8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6603754a-36f6-4e6a-a733-599ff9723604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1b82e76-5e1d-49fa-9aaa-65ff67447834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f7c037-1698-4b16-a2fd-cd4b15fa6b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf4f6cd-6b2f-490d-9278-e850eaa6689e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472ac45c-362b-4579-a850-0c8af67f1f1c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d85f8c-0eec-4156-b6d1-db0a869eee30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bdfba05-7152-4e65-ae3d-1ea37a67c8ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5770c2ff-d563-4c88-b5b6-9d93c3e1c0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee8a0fc-c325-4b6b-bfef-8b137f9434ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d40f4b0-0d94-4a38-8dca-acfd7a55ae49",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e46ec58-c034-4105-bc1c-cd6576621b9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c4b3a3-7462-4d62-abcd-10a894e8fbc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cc5521-5d4b-4b1b-a09c-fb20863536c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2a2112-dbaf-4e3f-95bc-01514601d4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a94f8b-025f-47f7-8624-4619e54f9f31",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580569e5-bebb-412c-8ac6-1084a6e08fbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d6d13e-5dfa-409f-a180-32d31902f754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9820d9ee-52fb-4c81-8d89-a53762cfaf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e2c949-03d9-4cd8-a30b-7e1bd0f199a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf678bf3-2587-4039-9654-fce30747fbd0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532654a8-a993-4414-a27c-7bf8cab71e58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4970d5a-b226-4dd7-8d01-1f50de8b0050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d59791-2bae-445f-a217-d7c3129a3a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39c52d4-bd0c-4d15-92bc-02d4425b9f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58eb1c1-3ef0-4002-83a7-1c01839b07b5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74480be-e871-467a-9ac9-def4a4d1eac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09710bd9-4768-4929-9114-f265c3e8c360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ec84ea-e0fc-467b-b45d-9ce087cd74c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd27531-821e-48a2-b8bb-12ea45157a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d10cf3e-6c73-4133-8df2-553665e319ae",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c8b806-27a5-4f8d-9354-b17c504b960d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def82c52-7e33-4f66-b7bd-f28b52a6c112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08849396-75f2-4f3c-bd43-618de674e086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5f51bb-9bb8-4e1a-99c5-62d7d975e4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234f4d16-0e8e-4b9b-9356-3c11d0ccebde",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6bf0ae-6733-41fd-9f0d-c301774e9770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9653c73a-c6e3-4522-ac2c-fe550e252294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7548571d-0dc5-4719-94fd-bdfa69b1028e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be84284a-e422-4ed5-9618-fb72ecf46f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ae48dd-79cc-4625-a054-f29952c24b8e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c38e9d-83f4-4d4a-a009-d6700a70cf21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28801611-f9fb-4058-994f-791282dd3da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30bd3a0-3a74-468c-a5d9-c21af1810571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81030168-0e88-49b1-8540-ef2c5adf05aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4c32fe-abca-48b6-b635-c795fcbc595c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e35d11d-5c4a-468e-b543-9076dc985036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee820ce8-7d21-4049-b083-88dea367d03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f4e83f-0755-4cbd-8b69-86c70ffb03b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fe03f0-c1aa-470a-9fb2-c24cbb3e6a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1f0a0f-9449-4a97-9855-b5251c378a44",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9e6b5f-28b2-4e28-9c2f-5e1c8b14090c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd384d9f-efb6-4cff-aaa0-d1c5fa5db3d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19b506a-eaa1-497f-bbfc-89cc26fad6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a37dee6-7367-4d47-a84b-517569f7872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1f9ff3-a158-4a17-bf63-bae3580a9e63",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4825af20-baa6-4139-94c4-ab2d3675eca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81816404-a387-41c8-92e7-209541d28b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a55d6bf-3928-4108-9f6e-66fa8eb293e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b89fe0-3b70-4cb7-95cc-7843bd32f16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9622c920-2d1e-4451-99bf-5723bfa5b3cb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5733b08-38f1-4046-b813-9eef606ec24c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff0c58c-8685-4218-987e-ff1009562224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b21f715-a255-4afd-bc01-c27db5712b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b30f20-2b79-4974-a934-1d796331e776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fb69b7-2315-4b84-846d-164ba5d37680",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e50568-4f0c-4371-884e-6cf55f6946db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bf11a55-0620-45c4-b8b0-c34b7bc12d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e31a14f-d96f-498e-8e16-8099b0368c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a162141-654c-420c-b3f7-688a081adede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c88d3a-9f8a-4245-bff3-264d9a597ccc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f4f50-1cd9-405f-a475-622360eb8e58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "248414b1-77a8-44d3-bb6c-01af4466dc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d733354-04a0-4942-93e9-f0d1ff637ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a70c556-07e0-45b4-a3a9-54f5884dc053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f1c486-b3c2-4628-bb23-5273709ad879",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44715970-b6e2-4ed1-a590-7417943dfd3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6580978e-9865-4d49-a086-ff509080595a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6185c956-ed06-4b57-9135-295f0775b4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9506050a-71ec-4b8f-980f-97a7961a8cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063f716f-4f17-48b5-9332-f1773f6860e8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccfe2ab-dafc-4414-a490-3ee3755ef8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "577a432a-19ca-4103-bc31-aa469c14a491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eba81cc-c963-4442-9ef8-191993dfee23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cd3413-532f-421d-954a-b5fd515a46db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928957b5-a199-4f8a-bb9b-8a8ca85583a5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7ed9af-9280-4059-953a-109b614e6da3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57b6125-9dbb-4abf-a6fd-91af99ea64e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41c21bc-f43b-4686-82e4-3e99677b88fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379d7647-2286-48f2-b0a9-14db40b06ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f429b7e3-fa58-439f-9599-cf1098c99407",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5f7b07-4e20-43de-957f-feff6f992331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53af627c-2fbb-4f3a-9246-04f445740f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194728a9-bc2a-4c11-a96a-5475b81f8584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a43d43-c0d4-4a25-88c0-fa668dbf2d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd8acb2-8081-41dc-a8b7-e06d2111022a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408c3fc8-4750-46b6-b83d-e7b4efc9a5c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45b0c445-0cf2-4f1a-99f9-fa26db885708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11037681-e231-4e03-bc1e-dc311b42dc85",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4359926-7a12-4a6f-8512-1097d9a4636e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832c142a-046c-4781-8439-af49d59b5696",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e266d93b-dbdf-4f22-9bc6-c2e0469b48e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90f8d4ab-72c7-4940-9fac-a8c67880008c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "047d1164-ecba-447e-bb6f-5117dc57e86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8088c725-ddc0-4b86-9247-f82a1f61b1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d65ec12-0227-4053-a389-7be279003e71",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df95f997-d3c2-4b29-843f-1c4db077337c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e8456cd-aa0e-439a-aa48-b4f72a38a804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b624690a-2612-4cd8-9319-432c79dbf2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6bcbee-55e4-4f01-8d1a-fc5031462288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f99222-12eb-4389-b5d1-37976a99a8db",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b59873-6add-486c-90c4-7cb9ec3b300e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8839b85a-9a28-4205-826d-9c98f828278d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6babf4ad-9e93-49ae-8100-ef73ba82d187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1e5e35-273e-4a77-a139-095655c6fd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a60ce7-916e-45fc-aa54-914b34aae6c6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3594571-b420-4eb6-88c1-24b0a9b97a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94e32763-07c2-4b05-9342-546703c475bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc33e07-8cfc-457e-bfda-ccd7e97ba64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e3f576-a20f-4dca-9591-d61b513c44b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d6911d-6020-4145-b097-3d67598d8949",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c10d757-a121-428c-93e0-3f9c79b7f308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "627b6f84-a241-44cf-ad15-c73bfb3d4a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73d7db2-8424-40d4-a2cd-26449c66445b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4edcc3c-fc4e-4953-a145-93f8cc747897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b35ce5-830d-4725-bbf7-f8f9480f02b9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8656874f-82fc-478f-a8ae-36c376aed90c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5135bf89-2cd6-46e1-9084-a0cfbae7f4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f2c871-5140-41d2-9e06-ac8b8e28fc94",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785feeca-16d0-4943-b135-5de9fff15dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b68db7-6268-4d12-9c36-ed6f5d4a64ee",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03631362-1ed3-4c83-ba32-da08a7bab4d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2fec34f-27a1-4e35-a52e-8edeb02bc3bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e513009e-084b-41b3-977c-7ad2d9add79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef53f4d-6fd8-4c28-8f4d-c7014f2e4480"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b95a5cb-554d-459d-ab35-77cded9b23f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30a0eed2-ddf5-4e62-9cf2-bc116cd17438"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b97f605-c9f0-4e49-ae58-c95644c1c171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c76aa25c-12fc-4e72-80fe-0568f2e9ecce"
                    }
                  }
                ]
              },
              {
                "id": "f48771ba-5e0b-412f-8dc5-02046da1df35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0f57240-31d5-4e69-8cc2-ab2878db6321",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5beec20-3f72-4597-8610-9d1aef10c620",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "17e33b76-f37e-43d2-aebb-2fd19b45b53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3674de17-698a-4780-a108-f22ca406b726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fab3acb6-a59f-4662-9079-72fd2e6392de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e3bc5ba-9417-47fd-9728-020a30d8bea9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6027d472-2986-40ea-9c88-ce5248e0143f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6049ab8a-2a2c-4a2a-b1c6-126f2bff8edc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "946c331c-0da9-4619-9f6b-765def51e8e0"
                    }
                  }
                ]
              },
              {
                "id": "581121a6-8964-4dcd-bf15-93298dd47dfc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8e2a4039-29d4-46af-8b91-c8107a1c53dd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dfe394-e18f-4d10-9548-a6356f24917e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7710856a-6584-4f74-9dcb-f25a47c0c7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af76e502-b0a0-4f96-9494-c2e7773c05b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78ceceb-b009-45b2-a9b2-30a4950dbc36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3a57a13f-736a-4b69-b9cc-9ef27e34424d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f759bc9-dd3c-4ae8-978a-1a8856b54f61",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e325cc3b-27c1-4a85-a309-2f3264adc364",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ef57baa3-f1fb-4ef2-b744-c83694e92403"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68dbb759-dc0d-4fd0-a1a9-af66f838a6e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b7ea91e-de0b-4805-b1f9-589a9256d4da"
                    }
                  }
                ]
              },
              {
                "id": "99779277-4968-4b54-ae6d-263349aada31",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb694b80-3f37-4ff4-b44d-946f6d81f2ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "52309279-f0d6-430a-ab0b-4c370b4c7731"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6b08aa1-0e32-4823-8bef-469a3c748d44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "607df4e7-c0a5-4468-849b-ba693d689752"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb0accba-f0a2-4fc1-9715-36b91d240b05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8e36e93c-3328-4cc6-8079-1ab45a926a51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2494361-be83-4c7a-9e12-d2fff9bd3d05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f63f52ef-230f-41e1-8656-f3dd869be1c7"
            }
          }
        ]
      },
      {
        "id": "477383fc-a8d3-4930-bb35-9216f20686fe",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b6bf0f9e-2241-41ed-8d7d-3ac2682e4996",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10567485-6968-4dff-917a-1d20a4050b25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4a9967b-8783-44fa-a207-052dfdcd86b3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8e616c-35dd-451c-b013-17625e540b20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "66ed2742-4900-42fd-ba80-10382462e7a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab933e01-062d-483c-ba23-2cddebc27739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71bf29ed-ce8d-46e4-a5c7-016342d01840"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "433e71fe-7b56-4780-9f93-5fb295507eb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73efb81d-a621-45f3-9b82-44fde7b57a89"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ea30b8f-32ad-4636-80d2-a40e7c12492c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f63c5189-7fe3-4150-9d27-a90ae66652d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3d669c0-e2da-40f3-9904-ef6d3210e2b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "38a2ab7f-47ae-489f-b2e3-ac232ef96d3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "755e5431-e407-4590-a7ba-de83463b516a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52b5aacb-d20f-47b5-b304-c30844b6036b"
            }
          }
        ]
      },
      {
        "id": "d0ce3d90-34af-470f-bbf5-637039878075",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e4466308-77e9-4cae-a3f5-c937bbebe97d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f58b5638-a5de-44f4-b42a-f6ee4b1e9113",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7eaba193-c994-4c28-abc9-8c59ede951b7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb08795b-5236-4f36-8a7d-f51b77b1fb58",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab21055e-c8cb-4a02-9349-a06b433691a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371dfb3c-b7fb-4c09-b8a7-95a465bd8436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31b60730-51af-48f7-ae4b-a594745c67c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5900728-d785-45fc-925c-02fba368cdab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "926894c3-c936-42f5-927c-0ea97bd79838"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1de09f28-a6eb-4c14-b94b-0cdbfbf61a6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0cd5b29-12ea-4eef-98f9-f838e0b88ad9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1da33caa-1b72-4295-9992-37e28f66f73f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81514eae-38be-4bed-ae7a-e50e9561cb97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffb9fc65-ebf1-4837-8748-0961e023fdd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3e8937a-4525-4f58-a631-be044df7d758"
            }
          }
        ]
      },
      {
        "id": "3f831660-685c-4d01-b6d5-5de278bd16e8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d34b5329-9477-4761-80ce-f14371cade94",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d149c67-47cf-4074-894d-53693d310b12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1d3381a-dde1-449b-9ab5-7655434c9f99",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a425728c-2944-4945-8137-a9371ec42811",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f53dbff-3a23-42e1-bc03-54e684bf4350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "accae8fc-5cd0-4dc5-afa4-1f2446a8dc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cdb6a28-bcca-406b-8318-09c7bbd8f52a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aca9801-e1d7-4452-abab-f0ce66286204",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b3769d9-3258-4d2b-872b-d5bdee0b2b2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e74e579-52fb-446e-9492-3595e25d4590",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b66a250-ec23-4314-8f03-fda04571c946"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b435698-7806-48c1-a448-74bba6bf7ed3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8bb7bdb3-04b8-427b-97e5-2610e073f6a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15682445-5f35-4c56-a2ee-ba67a42500b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "059b12fa-6544-48cc-9d02-64d2c8f6ec5c"
            }
          }
        ]
      },
      {
        "id": "37ee0c77-3c84-4fc1-948e-96c61d0354eb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cda1ea58-dc8d-469f-b763-d02a48d0aa2f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2649b5d0-9dad-4409-b0cd-96d653d1a5f4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5d9536bb-efdd-48da-bddd-37a314d1f539",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73c61578-2513-430c-8e69-cea0803d5cd2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1886a17d-7f70-416e-901d-f3265a5cc3cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.2842105263158,
      "responseMin": 6,
      "responseMax": 588,
      "responseSd": 89.75795872345404,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709944366491,
      "completed": 1709944400406
    },
    "executions": [
      {
        "id": "2b13703e-478b-4f26-9e6c-eebff7483099",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "30ef519e-195d-443e-a010-ec2760b7699f",
          "httpRequestId": "9dcbfd1e-fd54-4013-a0a4-b372afd19d7a"
        },
        "item": {
          "id": "2b13703e-478b-4f26-9e6c-eebff7483099",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1563fa6f-cfb8-4378-9f40-1a0187096b41",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "a66aee6f-9a5c-4dcd-8865-d25a49cca2b5",
        "cursor": {
          "ref": "842a82c9-abfe-4d1f-8af3-441e147cad97",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "feec9593-5dd5-4892-852f-93d753a702da"
        },
        "item": {
          "id": "a66aee6f-9a5c-4dcd-8865-d25a49cca2b5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "43e9b0bf-2b35-4583-ab2b-6e6b971d5a20",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "db4758a4-9ac4-4386-b32e-961b28f1fe00",
        "cursor": {
          "ref": "e869cc11-fdc9-4e84-951a-73aef158322b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d19a7cd5-5780-4a22-95a9-57305e4a9018"
        },
        "item": {
          "id": "db4758a4-9ac4-4386-b32e-961b28f1fe00",
          "name": "did_json"
        },
        "response": {
          "id": "30e4c7ce-2a11-42b1-adbb-f11c2d03b628",
          "status": "OK",
          "code": 200,
          "responseTime": 572,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e1c216-7b9f-4121-a563-c9b268891d45",
        "cursor": {
          "ref": "51ee4031-fc49-4825-92be-0713105adac2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e900825-78c2-4e2a-8d15-b08bde0633a1"
        },
        "item": {
          "id": "99e1c216-7b9f-4121-a563-c9b268891d45",
          "name": "did:invalid"
        },
        "response": {
          "id": "1498ddb6-dbd7-4a1f-be71-245223915ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e1c216-7b9f-4121-a563-c9b268891d45",
        "cursor": {
          "ref": "51ee4031-fc49-4825-92be-0713105adac2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e900825-78c2-4e2a-8d15-b08bde0633a1"
        },
        "item": {
          "id": "99e1c216-7b9f-4121-a563-c9b268891d45",
          "name": "did:invalid"
        },
        "response": {
          "id": "1498ddb6-dbd7-4a1f-be71-245223915ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be80b5b-3a7e-489d-a7ee-abe7ebb626b5",
        "cursor": {
          "ref": "e298b136-2efa-426d-b6c5-72b71a797127",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fdf137e6-d624-4847-88f1-3ad68b011c70"
        },
        "item": {
          "id": "4be80b5b-3a7e-489d-a7ee-abe7ebb626b5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "97f59107-5b7c-461a-a12b-3e5729a44fc2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 108,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583e0b24-a2e6-4b27-bce9-2ea6565c1539",
        "cursor": {
          "ref": "e83a5a10-3ad5-4b0d-afd2-78020ab7ca57",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c8496968-fadd-47af-af31-3f73fb2fc614"
        },
        "item": {
          "id": "583e0b24-a2e6-4b27-bce9-2ea6565c1539",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "80138aee-982d-4e11-9e5e-037f68c8be72",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8254d9d-d93f-42b4-ac44-a9d72d15659f",
        "cursor": {
          "ref": "de6ffdd2-64fb-44b4-9eb3-8d8ac9b4d32c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "477b955b-3baa-45ea-9324-8e3a5981c0f8"
        },
        "item": {
          "id": "c8254d9d-d93f-42b4-ac44-a9d72d15659f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "eb1ba20f-4831-4832-b92b-00f072265885",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45153a49-1a1d-40dc-b619-29f9ad1bb7fe",
        "cursor": {
          "ref": "df0a92a6-d9c8-4c6e-9b0c-3a82159512af",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "247ea825-62f3-4efc-a63a-3732cd5ce95e"
        },
        "item": {
          "id": "45153a49-1a1d-40dc-b619-29f9ad1bb7fe",
          "name": "identifiers"
        },
        "response": {
          "id": "442bed4e-4080-46a4-ac0c-62253ca1afe8",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb6c9b4-f058-4e81-acd8-edbc9a20619f",
        "cursor": {
          "ref": "6883a889-1f21-40b4-a939-c5300c3c6e75",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1e5099b6-8edf-40f5-a187-354d91b5abb6"
        },
        "item": {
          "id": "9cb6c9b4-f058-4e81-acd8-edbc9a20619f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6417f22d-8496-40af-9d82-f21749a2b79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24c4108-00cc-4ee5-9bda-c4d1a2433642",
        "cursor": {
          "ref": "e81f86aa-1317-4e8d-92c6-f2901e6dff3a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cd49bfb4-51ef-4ec5-9f33-5cdfae9c12fc"
        },
        "item": {
          "id": "a24c4108-00cc-4ee5-9bda-c4d1a2433642",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5ba4d6ac-f023-4113-bc07-78b3bdcb6bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389d47af-ab52-4ba1-a8d0-cf9bfb63ef4a",
        "cursor": {
          "ref": "84a2be25-514b-467b-97e5-c977a5ee0bb2",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dcd4d2a8-1202-44ce-8e8d-db9a62f466a5"
        },
        "item": {
          "id": "389d47af-ab52-4ba1-a8d0-cf9bfb63ef4a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3eae21a8-5acb-4421-a6ee-2056fa0decb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ea72db-1276-497c-a5cd-9d04beea920d",
        "cursor": {
          "ref": "beab87a2-42f6-4773-862c-a2ad499d3a1e",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0ad2bda6-4e3f-4eea-955f-8665f203fe75"
        },
        "item": {
          "id": "b9ea72db-1276-497c-a5cd-9d04beea920d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c963b18b-c1b8-42f5-baa0-03c33ed473d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef6a3f3-a45a-4f10-a5a3-c6677b6ef0c1",
        "cursor": {
          "ref": "45e3abe7-a116-41b7-9aad-5049e0ae79eb",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6fc20a05-e8f5-44f4-903a-f380932c38b0"
        },
        "item": {
          "id": "aef6a3f3-a45a-4f10-a5a3-c6677b6ef0c1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d181bf95-a25c-4a51-92ce-a3197e5e0850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba746e3-8a2a-45a3-923e-66a8aed0c476",
        "cursor": {
          "ref": "e5e4b41d-3025-4303-af7f-6b135261d4d4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d31601bf-96ca-4cab-9141-bedfb7094a9b"
        },
        "item": {
          "id": "6ba746e3-8a2a-45a3-923e-66a8aed0c476",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "07de5607-d490-4b52-a17a-5ac1e6bd8b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c561e88-5e2f-487f-8f09-0d793236c426",
        "cursor": {
          "ref": "a669bd99-59d0-4715-960c-b5911a74b652",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1602c69a-37b5-4fbd-b5a0-aa3e5b632804"
        },
        "item": {
          "id": "4c561e88-5e2f-487f-8f09-0d793236c426",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e86ebd6d-85eb-4884-b614-362993310c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3d946e-8ea5-4029-8fbd-18ceb1fc235d",
        "cursor": {
          "ref": "04e1a7e8-5ca0-4780-92a0-95e3a288685c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "629bba67-25fc-4645-9658-53fddc91ccfa"
        },
        "item": {
          "id": "ce3d946e-8ea5-4029-8fbd-18ceb1fc235d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e3e0ade0-84c6-4286-9fef-8caf79995372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e4fd1b-ed0a-452b-ba3f-b5e5e6e7f7ed",
        "cursor": {
          "ref": "4dfb9a68-07f0-497a-b762-8d2e94146ddb",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "55f04d01-df4b-4ebb-841f-100bc4e206de"
        },
        "item": {
          "id": "28e4fd1b-ed0a-452b-ba3f-b5e5e6e7f7ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6d91cfee-d3f2-47c7-bd25-07fefe782a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d46bd98-143f-414b-997f-254de32c792a",
        "cursor": {
          "ref": "2d50ce17-6572-4a73-b161-15699a57fcfe",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "21fff80c-aee5-49a5-af61-65a78215d723"
        },
        "item": {
          "id": "3d46bd98-143f-414b-997f-254de32c792a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e78b2a3a-d3f2-413e-acfa-784313b061a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d75a51-166f-4e7b-a4e4-a32691dea6e6",
        "cursor": {
          "ref": "bca6a1f9-23c4-4736-a527-63927f43bfd1",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2ce00063-13e7-41b6-bf67-0f756434e0d4"
        },
        "item": {
          "id": "94d75a51-166f-4e7b-a4e4-a32691dea6e6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "64755184-cf77-43c1-b105-bf352ce12a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80401592-da3b-4337-b2ab-1d5de6f14ca2",
        "cursor": {
          "ref": "a7a7cea9-fe55-4a9b-9035-1769df189db3",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8efdd4fe-975e-4789-8644-f0c397d01167"
        },
        "item": {
          "id": "80401592-da3b-4337-b2ab-1d5de6f14ca2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ef56f1d1-6810-411b-a3f3-cef01e8ebbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d55829-fc75-4c7b-b0bb-e3cb2dd7bb9e",
        "cursor": {
          "ref": "843df900-cab2-447a-9b09-9e63c8236100",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b771831b-0c3f-4eb3-a525-1c2723e8c787"
        },
        "item": {
          "id": "68d55829-fc75-4c7b-b0bb-e3cb2dd7bb9e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "430dc995-249a-4db5-b349-ae91dc58696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fd2cf7-f74e-4031-8f7a-13543bc6e371",
        "cursor": {
          "ref": "12099383-3f44-4ad8-a4e5-74cb7287b1b0",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "562cb4c3-c96a-4df7-8449-18dda4f6c726"
        },
        "item": {
          "id": "11fd2cf7-f74e-4031-8f7a-13543bc6e371",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d0a2a3e7-aad9-49a4-b93f-7d2d7e0e7967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b4f035-5ae3-4588-b558-c98aae35e7ea",
        "cursor": {
          "ref": "5614bbb4-f894-4185-82ef-467dbbf0bd31",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "31b3b728-a1b5-4d53-85e8-897f52e9a6c3"
        },
        "item": {
          "id": "55b4f035-5ae3-4588-b558-c98aae35e7ea",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3434d151-147f-4f3e-8b6a-1d072e954197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8fec0b-772a-4275-95ff-31649b8216b2",
        "cursor": {
          "ref": "321b10a4-70e9-43da-8b59-fbd6fe0126e3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eca8e1ef-5502-47ed-b9f7-28858ed2ddc5"
        },
        "item": {
          "id": "9a8fec0b-772a-4275-95ff-31649b8216b2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "27a218f4-c6a9-425a-afba-d0d1b7c730ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbf35b1-6b1b-4fe1-8900-d5a8dce09a0e",
        "cursor": {
          "ref": "9a57437f-4a39-4a18-8702-f40c4d590c5e",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ad61fb65-964a-4114-aaef-a185495b662a"
        },
        "item": {
          "id": "dbbf35b1-6b1b-4fe1-8900-d5a8dce09a0e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0c24c18e-bdd6-46a3-afd3-c30d6732eed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d20f98-d72d-4a16-97e0-43849f546eb3",
        "cursor": {
          "ref": "e4375862-7d96-4d0f-929c-ca5bfe6ad012",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7fdbdfc4-0c50-40d5-8038-7aaad404b33a"
        },
        "item": {
          "id": "49d20f98-d72d-4a16-97e0-43849f546eb3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "65c4e640-12fa-4eb0-b822-ac351e35db66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0d8a72-65c3-4236-bbf0-6230581f3f53",
        "cursor": {
          "ref": "5241883f-629a-4bf2-9344-8eb9d58bedd7",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "032aa20d-0530-4461-8873-729f968b05f0"
        },
        "item": {
          "id": "4e0d8a72-65c3-4236-bbf0-6230581f3f53",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1923114d-25e3-4ec1-b87c-c4d43be0cf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5597dfe-734c-4758-9b33-e71f559a69b7",
        "cursor": {
          "ref": "b72b26b0-9ba4-4bfa-b389-f005b24a564c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d24120c1-fce7-4f90-808d-262ff375a5a0"
        },
        "item": {
          "id": "b5597dfe-734c-4758-9b33-e71f559a69b7",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6f20534a-1684-4dbf-9a6c-b997e5171e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d1e1ac-0153-474e-87ee-f926b8563695",
        "cursor": {
          "ref": "b493034e-640f-4418-81fc-44b7f3f33944",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3ae43ee9-5e2b-449a-875a-04e713233351"
        },
        "item": {
          "id": "54d1e1ac-0153-474e-87ee-f926b8563695",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6c1ec191-c835-41be-a491-420d11b524b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eabf3a1-8a95-451a-acb4-39439091c65a",
        "cursor": {
          "ref": "2fe0ecf4-ba12-44c9-b781-5ad8e8f80c67",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "685884a3-2dce-4b7a-bfc4-16cdae8285d3"
        },
        "item": {
          "id": "3eabf3a1-8a95-451a-acb4-39439091c65a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "51d63643-aa3c-4d1d-a048-739374ad28ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a7a1e6-529d-422a-8dc6-da518d17050d",
        "cursor": {
          "ref": "8cad6630-6652-4b20-8a49-ff123a12119f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6633c59-60cf-49e3-8503-14048a77b896"
        },
        "item": {
          "id": "f8a7a1e6-529d-422a-8dc6-da518d17050d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "368471af-1f60-483b-a12a-0258f7bc73ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94327e53-3721-4020-adf8-6e2239956c24",
        "cursor": {
          "ref": "f602e152-55ec-4ae0-b5bf-0e25abce5afc",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9c806b40-c1b7-44cf-808f-fa7053481f13"
        },
        "item": {
          "id": "94327e53-3721-4020-adf8-6e2239956c24",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0b5d9b88-6c16-4cc4-a815-dec8ff9d6976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2d9a57-c286-4cf3-9e8e-c57691a52604",
        "cursor": {
          "ref": "881ed5a4-65c8-4d0c-b3f4-7957ea49c6a6",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1857c8ed-f498-4214-909f-34c1cab03b40"
        },
        "item": {
          "id": "0f2d9a57-c286-4cf3-9e8e-c57691a52604",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bb92efa1-150e-480b-b253-63a7643657e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce87d608-7138-448a-8c4f-5068b8e92c6d",
        "cursor": {
          "ref": "2cdf597c-2d97-4628-aa05-b8d43f18536c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2ab1250e-f6c5-4d3c-8ce3-6bf6b26a6425"
        },
        "item": {
          "id": "ce87d608-7138-448a-8c4f-5068b8e92c6d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2e929f79-3452-4da8-b9fc-9045c30753e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f37bd4a-199f-40df-829e-698f039321cc",
        "cursor": {
          "ref": "375d32c9-4325-4a75-9b3b-2e4925c450c4",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4dbe631d-b422-4ee7-bdec-d0e5d0b57bfc"
        },
        "item": {
          "id": "5f37bd4a-199f-40df-829e-698f039321cc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "76fb44f1-c59b-49a5-b8a8-9729a2ac773e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e254b9-b84b-4313-a359-6f985797a5ae",
        "cursor": {
          "ref": "0fc4d899-7aae-4bbe-8453-337c9b7c1c50",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f67c9f04-69a0-43d1-bf39-84eb8bd80493"
        },
        "item": {
          "id": "13e254b9-b84b-4313-a359-6f985797a5ae",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "712576e6-1eb2-41e7-a1db-73c3bce491e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9534472a-d90f-4152-b249-dca739638c4b",
        "cursor": {
          "ref": "f8f8d7ab-37a1-4641-8820-530833af8a67",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "35d18cfa-025e-4f56-bca0-9372fc6fa3a2"
        },
        "item": {
          "id": "9534472a-d90f-4152-b249-dca739638c4b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "99daaf18-1c9b-4f69-a29e-9db891c86bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59751c60-67a3-425c-88a6-7f3fcfa1a964",
        "cursor": {
          "ref": "a8806247-2e88-4119-afca-088eefe8923b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "06291994-2663-4ad4-83f6-1a7fcd26223d"
        },
        "item": {
          "id": "59751c60-67a3-425c-88a6-7f3fcfa1a964",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e0ad36f5-6f41-4ff5-9f62-f135c5a7a7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293378de-de68-4d1b-8bed-f8e92046bc96",
        "cursor": {
          "ref": "4d61eaa4-7cac-45c8-81e7-aca9b22685c3",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8151ecc3-b54c-475a-a8c8-e9fdc87101ed"
        },
        "item": {
          "id": "293378de-de68-4d1b-8bed-f8e92046bc96",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3c49d8f0-db8e-411e-9522-54661d8449de",
          "status": "Created",
          "code": 201,
          "responseTime": 588,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2ae38a6d-76f4-4e90-8814-da0cb642ef57",
        "cursor": {
          "ref": "d1677a9d-864a-484f-ad60-0b5eeb033f42",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "244d4227-8ec7-4d75-bdf1-da7b1f041085"
        },
        "item": {
          "id": "2ae38a6d-76f4-4e90-8814-da0cb642ef57",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b6c272c9-8c88-4a98-a486-403b1b10deba",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "941d6fdc-8ce9-437a-b6d6-f44c154fb62c",
        "cursor": {
          "ref": "d849a30b-2002-4640-a4d2-1e49281650d4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3969f09e-47dc-419d-8915-9b008d2b09e8"
        },
        "item": {
          "id": "941d6fdc-8ce9-437a-b6d6-f44c154fb62c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "13935f44-349c-4998-9a5f-d7cbac981c7d",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8d745af5-c227-4ac2-acb9-49ec57801025",
        "cursor": {
          "ref": "199f86e7-2cad-4299-8acf-a9be8143dd77",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8fc0d195-7809-4966-a7b7-0acac8ea0e86"
        },
        "item": {
          "id": "8d745af5-c227-4ac2-acb9-49ec57801025",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "476e98fa-4452-4059-b025-ff9759ce44bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bde60ff-8a35-4bd1-a540-dc455ca4410d",
        "cursor": {
          "ref": "a4d7a1eb-53a3-4298-ade2-c72068f5594d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c27242ca-041b-45b7-9561-a904f4f9cb93"
        },
        "item": {
          "id": "8bde60ff-8a35-4bd1-a540-dc455ca4410d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "afee46d2-a773-4ccb-903c-13ef427b9ace",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e7dc0414-0439-47bb-ab81-204d76910060",
        "cursor": {
          "ref": "6f04aa70-1515-4c50-a9b1-6eb2be4f9c27",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "99e91280-0c73-4704-aa2a-a8b44a2e5440"
        },
        "item": {
          "id": "e7dc0414-0439-47bb-ab81-204d76910060",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "df643ada-1cb0-4f31-afac-a0e7ad76b6cd",
          "status": "Created",
          "code": 201,
          "responseTime": 409,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5c98d87b-7ede-4fdc-9ad2-2781834b938b",
        "cursor": {
          "ref": "0f74bfda-9aa0-4fdb-9333-06abf5c4a89a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "20134ab6-23a1-4eaa-a828-df723737b0e6"
        },
        "item": {
          "id": "5c98d87b-7ede-4fdc-9ad2-2781834b938b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d6b41537-e6f5-407a-97dc-9eb1922d753d",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "051f3622-e1e8-401f-8107-4ba9a072de9f",
        "cursor": {
          "ref": "a14d0b71-ead1-4385-8c9d-551adc81884d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9b4b8e68-eca5-4379-a60e-7f7640bd7351"
        },
        "item": {
          "id": "051f3622-e1e8-401f-8107-4ba9a072de9f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8548f4e0-a14a-4046-997b-7c535a6d2999",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8291d94c-6e40-4dec-8bf1-487435dc032b",
        "cursor": {
          "ref": "720eac15-2097-4e27-81bf-1789577c3e68",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8ec487ce-bf55-460c-aba0-88502c530407"
        },
        "item": {
          "id": "8291d94c-6e40-4dec-8bf1-487435dc032b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c8905a94-fb72-42df-9e23-836ffb980474",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9dc96e9e-3fbd-41b3-8db6-0831f731eeeb",
        "cursor": {
          "ref": "b28d1c09-4b67-49fb-a246-c363e80650ab",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "81964526-55b4-4af0-9f48-f3f69ee7599a"
        },
        "item": {
          "id": "9dc96e9e-3fbd-41b3-8db6-0831f731eeeb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4e9bddaa-f0cc-4d5e-9bd7-06727b369ada",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "569f48ed-574f-44a0-8b04-ee7d95f4fdfb",
        "cursor": {
          "ref": "6a38b4d1-509c-4bf8-b302-00c83d1aa896",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cb4110ce-fded-4271-882f-4357c59ccb40"
        },
        "item": {
          "id": "569f48ed-574f-44a0-8b04-ee7d95f4fdfb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c0a3d7af-b2b7-470a-b2f6-49b4e8b54f6a",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "72e0bdca-a961-496f-aaed-da96315f99cc",
        "cursor": {
          "ref": "bf5516de-1711-48ae-9731-935ca42bd78b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f88e0c96-1868-4e3e-997e-a9951daa1714"
        },
        "item": {
          "id": "72e0bdca-a961-496f-aaed-da96315f99cc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "673a685d-feaf-4380-a4bb-0b3bf84f0b8e",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "17ac7eed-4d7d-4d78-828b-e193ca8edc9a",
        "cursor": {
          "ref": "11699912-78aa-4ce1-95d0-ea32cc2049a7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "23c77f84-d6bb-4963-989f-d849041ebe16"
        },
        "item": {
          "id": "17ac7eed-4d7d-4d78-828b-e193ca8edc9a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "00d85087-b1bc-46b0-b245-6ad45c58eb6e",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "087ebedc-3ff2-4761-af1c-0ad70d155993",
        "cursor": {
          "ref": "676ecc3f-2937-4380-8b07-45d6701035cd",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0dc474e0-03ce-4f73-bdd8-b27ec9af8ef6"
        },
        "item": {
          "id": "087ebedc-3ff2-4761-af1c-0ad70d155993",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2adae36f-53fd-4415-a5c1-c8f619894a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4a7867-b9fe-465c-899f-8ee365bbad4a",
        "cursor": {
          "ref": "f736a3d4-de74-4a27-ab01-8d90d1cc9458",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f0b36979-3f98-4e50-8fd4-6f44f102188e"
        },
        "item": {
          "id": "8e4a7867-b9fe-465c-899f-8ee365bbad4a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c4bb27b7-2f04-4fc2-85b2-b1d27ee2a563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfa8a7f-3b85-4856-bf79-207fe907eb89",
        "cursor": {
          "ref": "fe00e955-ff75-4e37-bc8c-230dc17332c9",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9943319d-387a-4276-bbe0-97c7a948a832"
        },
        "item": {
          "id": "2cfa8a7f-3b85-4856-bf79-207fe907eb89",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e71e4158-19ea-4a08-87a2-a02697a4e68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab331287-4d39-473c-b257-930ed8b9ebef",
        "cursor": {
          "ref": "d0547265-c94b-44bc-8abc-4d0a8826a3ab",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a9e6e367-1f9a-49ba-beae-f77e7f025fb6"
        },
        "item": {
          "id": "ab331287-4d39-473c-b257-930ed8b9ebef",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ad121a2a-5795-4d9a-8ee5-566d45e19fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0985f7c-b177-4c77-b21a-7447d464c8f0",
        "cursor": {
          "ref": "26ffdddd-814a-4d71-af2e-75d40e3cccf9",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5076cf52-042d-4843-9469-89905a04cb3e"
        },
        "item": {
          "id": "f0985f7c-b177-4c77-b21a-7447d464c8f0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b7a99de7-0888-4ac8-9588-faed16756c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67bf95f2-440f-4a2a-9659-9ce65726c042",
        "cursor": {
          "ref": "67740347-40a5-4332-a63a-14623a681cd2",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1d39bca4-bee4-4ed7-b154-3f1e82a45ae7"
        },
        "item": {
          "id": "67bf95f2-440f-4a2a-9659-9ce65726c042",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a9fe2840-0610-4b71-9861-bc1d69c5fd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340017fc-6356-41ea-b818-e1e87240202c",
        "cursor": {
          "ref": "b9d8c389-6f32-47cc-9e16-857e575b19aa",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d5edfb7a-ffe2-4a80-9c15-2c30eb7a9dbc"
        },
        "item": {
          "id": "340017fc-6356-41ea-b818-e1e87240202c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b9c9f3b7-04d4-4fad-abea-25877f7ad12e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467cae76-9e18-4e92-a4fa-76f2dd3c95fe",
        "cursor": {
          "ref": "ede2411b-0d42-4053-8fc0-b5c2a76cd3d2",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "def676d1-bff4-4e55-8c4e-5bb8613eca0d"
        },
        "item": {
          "id": "467cae76-9e18-4e92-a4fa-76f2dd3c95fe",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c390fbfc-cb16-4f28-b3a4-8a5bfa6e95a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180c8bbd-b84d-4b40-8554-4556499e7b3d",
        "cursor": {
          "ref": "56d2f799-cfe8-4b9e-8306-a3501e0f9421",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a3ef2b48-1fbd-4428-8f24-b2a8f026789f"
        },
        "item": {
          "id": "180c8bbd-b84d-4b40-8554-4556499e7b3d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9a3304f7-add5-433e-b23d-e0418779ed9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2496a0c6-35be-4695-9612-a89df2cb4367",
        "cursor": {
          "ref": "79674907-8d97-4452-8764-8d23d6d30070",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a9f72d2c-b000-4567-8036-b9c17a052ed4"
        },
        "item": {
          "id": "2496a0c6-35be-4695-9612-a89df2cb4367",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3d304b2a-e3df-49ad-8c19-87a2f87ee454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9aef871-a861-45f8-ba5f-964d8c0b23ca",
        "cursor": {
          "ref": "ff546aa1-621a-4154-9f85-9605e3e19157",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c3ed195b-9b52-4108-b5f4-9d47bd23de1a"
        },
        "item": {
          "id": "a9aef871-a861-45f8-ba5f-964d8c0b23ca",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d8241fc0-d31c-4305-8b50-699942dff2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e07db0-2816-420e-8b55-7df5eeeb5ace",
        "cursor": {
          "ref": "8950b0f1-577c-46b7-8565-a3e3c96f8a2e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1c808646-db0d-447a-9de0-dafcf083c468"
        },
        "item": {
          "id": "e6e07db0-2816-420e-8b55-7df5eeeb5ace",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f1e68961-9352-4133-a19d-0c243b2a60b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f3519e-eacc-4f02-af42-4f0877ef2a3f",
        "cursor": {
          "ref": "f2b8ceac-5ef0-48bf-a3fa-d17f15f32d31",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2548ef7a-e20b-4833-bd8f-bd0aedf61f4b"
        },
        "item": {
          "id": "16f3519e-eacc-4f02-af42-4f0877ef2a3f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d1d2afc6-696f-4109-9c6a-a171a1fc853f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd32860-f498-4e3f-9469-b516194587ea",
        "cursor": {
          "ref": "183eb78a-97be-495a-a50b-984a38eb0137",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "63aaf1ab-324b-48fd-8604-c4b806386941"
        },
        "item": {
          "id": "acd32860-f498-4e3f-9469-b516194587ea",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f5255d17-6c1e-465f-9fb7-bd874eb28dbb",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7a160585-9507-4f85-a26e-76eb07d05301",
        "cursor": {
          "ref": "6f560523-5074-4bba-ad4c-3b26b23dcab9",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1ada474f-7d64-4134-9090-955acdc80c3a"
        },
        "item": {
          "id": "7a160585-9507-4f85-a26e-76eb07d05301",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c7952763-8cb5-403e-a536-38c31b803e50",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d8a063ec-a890-40a5-87ec-f7bc0b0d6523",
        "cursor": {
          "ref": "8bd538be-1e9a-487b-8f89-859eb753fc87",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "77f42264-8e57-4084-8968-af92e986c7eb"
        },
        "item": {
          "id": "d8a063ec-a890-40a5-87ec-f7bc0b0d6523",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "78e67c24-abad-4b2e-9f27-3a885d50986e",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d947e3af-b275-4deb-af5e-1722617740e7",
        "cursor": {
          "ref": "c604192a-560f-4122-a0b2-546296767b36",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d93caf08-39a7-4e61-989a-57ffa242ec61"
        },
        "item": {
          "id": "d947e3af-b275-4deb-af5e-1722617740e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8e74f9a8-e646-4e46-b935-d8d1e76b4b52",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0a33e1b8-464b-40b1-aee7-1066644ee254",
        "cursor": {
          "ref": "00d1920c-02a4-41a9-bcd4-cc79a75ad0ee",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "357eab5d-12a3-42bc-acc4-7bf77e34e615"
        },
        "item": {
          "id": "0a33e1b8-464b-40b1-aee7-1066644ee254",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "75eb3db0-310e-40e4-9449-0f5660fe5a76",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a12a05fc-daa6-450a-97f0-9e8a0e851fc1",
        "cursor": {
          "ref": "c2c7aca0-9277-4995-973e-17a61b78dd5b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dc22add9-7b51-42ec-acac-0195d59952e4"
        },
        "item": {
          "id": "a12a05fc-daa6-450a-97f0-9e8a0e851fc1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "97e8987e-4540-4608-aac8-914bdba2f09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c980d040-b4d3-472f-bdce-8e1721a945cb",
        "cursor": {
          "ref": "531a5431-6583-489d-9c4c-878ad45a15c0",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "21a61f52-7b00-4208-b134-6dbf5bffffa0"
        },
        "item": {
          "id": "c980d040-b4d3-472f-bdce-8e1721a945cb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f7203e79-0704-4646-9aca-178343b3c74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc77009-35fc-4c1d-82d4-3ee9930b3137",
        "cursor": {
          "ref": "314eb5a7-706e-4552-9ac6-fa4717e9c71b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fb83a62d-b5d5-4d3f-8a92-98b631009188"
        },
        "item": {
          "id": "4cc77009-35fc-4c1d-82d4-3ee9930b3137",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2a0c56a5-c551-4828-bd5e-701f488d8b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a952a099-e5f5-4b16-aa5d-9e58ec2ede20",
        "cursor": {
          "ref": "293819d1-2b32-45e1-bd15-26596428d56c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "13b7205f-c884-4e17-b52b-4a600f8357dd"
        },
        "item": {
          "id": "a952a099-e5f5-4b16-aa5d-9e58ec2ede20",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8e360d16-eb5a-4283-9fa3-9d29e0398f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68b2069-35fc-473a-9939-e9bb9dd2df74",
        "cursor": {
          "ref": "005b436a-c0ef-4abd-a741-517eb327ccf1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "da93ef69-32a4-40ca-b2f5-3f105aff0ba3"
        },
        "item": {
          "id": "c68b2069-35fc-473a-9939-e9bb9dd2df74",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b9ed2a46-92e5-4d6d-b2d9-3d540f68f5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f463f71-8dce-44a3-8b37-cca76c960d57",
        "cursor": {
          "ref": "cd838e0b-f01b-49f0-940a-10e331219955",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "15987c7f-a77a-465e-a997-8876c22835b3"
        },
        "item": {
          "id": "0f463f71-8dce-44a3-8b37-cca76c960d57",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ed369594-168c-44bc-a87d-a5081bcd42bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ed091a-eaa8-47f9-83dd-4d6cc4cf0307",
        "cursor": {
          "ref": "53a898c1-dd06-437a-b389-899f6b64788d",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0abe8859-a67b-401f-9aaf-ec53d944df1e"
        },
        "item": {
          "id": "e1ed091a-eaa8-47f9-83dd-4d6cc4cf0307",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "75f246b6-42ba-4ef5-9aaa-3d7b34b9db83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131c11ee-5529-4fa5-9f09-738936068da0",
        "cursor": {
          "ref": "5afde921-814b-42a7-8803-0595348c5637",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "50784082-6913-4a23-a888-7824d1b5c997"
        },
        "item": {
          "id": "131c11ee-5529-4fa5-9f09-738936068da0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b776cb56-5ccb-49b4-969c-d38935841f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168e1570-6a51-497b-8911-625b6ae7774c",
        "cursor": {
          "ref": "e017a58a-a3ae-4612-acbf-82eb35ed96c6",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "27662b34-805b-406b-b606-cdb9aa049b89"
        },
        "item": {
          "id": "168e1570-6a51-497b-8911-625b6ae7774c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "68ed17af-7f1e-4a06-bf5c-9e5ac60e9ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466feef6-badb-4dd7-9c8b-b5311f882382",
        "cursor": {
          "ref": "0cdcf87f-0792-47a8-9d94-0aac128bd289",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a3e98740-c048-49c2-b3dd-7de4d5e01f61"
        },
        "item": {
          "id": "466feef6-badb-4dd7-9c8b-b5311f882382",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b9fc5d1c-36f7-4d74-b57c-7d10ff454c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdcb800-5784-40d9-99a2-0e3155b35651",
        "cursor": {
          "ref": "61189eb8-472b-4432-a7c0-25f8dc5a9a33",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "01b7a9a2-dc86-4e3b-b877-0b7a5c554f85"
        },
        "item": {
          "id": "9fdcb800-5784-40d9-99a2-0e3155b35651",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a0c5f3b9-5aa9-40ab-985e-159fbdafa00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ec6241-d926-458b-a248-edcc35fcf950",
        "cursor": {
          "ref": "b190f006-8521-4a2a-a686-bab4416128fb",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c1613620-2455-44c6-ae3d-75ed3ed7f6a5"
        },
        "item": {
          "id": "12ec6241-d926-458b-a248-edcc35fcf950",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6bf25cc0-9460-469e-a34c-05ff6ce9f2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bcdf8e-2a5a-4f55-bd57-73224aad8af7",
        "cursor": {
          "ref": "6af41fa5-17c1-42e7-b8a9-7f334c3facbf",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "934e9cb9-1870-44a8-9da9-18470878615e"
        },
        "item": {
          "id": "44bcdf8e-2a5a-4f55-bd57-73224aad8af7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6f1d6aa2-25ef-46fa-9240-8c841c686418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d026a4-2d41-4315-9c9d-f84b3824b17f",
        "cursor": {
          "ref": "232159e8-d2af-452e-88c7-5ab95bf0d0d0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7ba472e6-9878-46c7-8063-6341ee13225b"
        },
        "item": {
          "id": "00d026a4-2d41-4315-9c9d-f84b3824b17f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "627cbbbc-104f-44c3-87e6-5f8cc325a1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a6046e-c0a9-4d0d-bc0d-12c773eab941",
        "cursor": {
          "ref": "354db16e-97d6-4707-95ea-f494778b7701",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7bffa0d0-a858-4b76-b49a-8173a05b0542"
        },
        "item": {
          "id": "a1a6046e-c0a9-4d0d-bc0d-12c773eab941",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "31006d92-5319-4d11-80e6-364203ac1cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b8306f-eeb6-46b2-8837-9f9b11abf73f",
        "cursor": {
          "ref": "c49b3a40-c74f-413d-a378-04e202cdeaab",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8be01e20-5c09-4a2b-bedb-dd7c453a6c72"
        },
        "item": {
          "id": "41b8306f-eeb6-46b2-8837-9f9b11abf73f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0b9a326b-31c4-42b3-b7b1-f2b812894512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cac7a9-a2c4-44e3-812d-acab6e3a23a3",
        "cursor": {
          "ref": "4f7cde3b-9d59-46ca-94a5-3ce52816b43e",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f3e90f9e-6c85-4ce2-8d9b-babe11b9389d"
        },
        "item": {
          "id": "b7cac7a9-a2c4-44e3-812d-acab6e3a23a3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ec78e862-8a41-44b5-8171-be8036958cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b39668-bfc0-4290-a387-1d28e6b0f2a7",
        "cursor": {
          "ref": "d9f98793-dd6d-4ae8-8320-b104dba70618",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "abb342f9-b793-4bdf-b6f3-299118ac6466"
        },
        "item": {
          "id": "65b39668-bfc0-4290-a387-1d28e6b0f2a7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5da9807d-4a79-474e-a538-6fc0f453987d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61edfe6-85fc-405a-a9de-05a60bc56d64",
        "cursor": {
          "ref": "edac8983-84fb-470f-9c2c-1949c111524b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fb9a3e3d-348a-442a-9323-821f35b45791"
        },
        "item": {
          "id": "f61edfe6-85fc-405a-a9de-05a60bc56d64",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c5feadf5-735d-45cb-9a31-e1bcac46ad1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458a147a-50d4-4ff6-88af-52873b2ee62c",
        "cursor": {
          "ref": "17c3f373-0fa0-4689-bcb0-be6fdb95f10d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b4e4002a-520b-4d15-9fa0-5589bd2cbecf"
        },
        "item": {
          "id": "458a147a-50d4-4ff6-88af-52873b2ee62c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7008373c-63c3-41a3-b662-63f689c43b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5629c18d-c2d2-43a4-a90a-3dea4c29a0f9",
        "cursor": {
          "ref": "fc5db2b9-ac0f-41f1-ba73-a5199969f558",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "11de8310-56c0-49e6-be03-41b6b51159ad"
        },
        "item": {
          "id": "5629c18d-c2d2-43a4-a90a-3dea4c29a0f9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "eabf9d91-662a-44f1-bf52-e33a315d866d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd4bf43-9c52-48cf-af31-7f1a5b40b57e",
        "cursor": {
          "ref": "47bcadc6-fa69-4ffa-bbd0-5b338fa7a1f4",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "77d18057-2f7c-49d0-ac65-9d544936f729"
        },
        "item": {
          "id": "5dd4bf43-9c52-48cf-af31-7f1a5b40b57e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9e6bebff-8b5b-427c-8540-8dadbb8d4ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ce878c-c334-42d9-bf78-7adcb4b0a02a",
        "cursor": {
          "ref": "8fa31d9e-8b9b-46ae-a81f-12a8f443e4f7",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6c043e89-431c-4aeb-851d-922d8c4d6709"
        },
        "item": {
          "id": "e4ce878c-c334-42d9-bf78-7adcb4b0a02a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2054c220-6c40-4739-904d-2b75df951d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9179ce1-9386-4785-a0ea-186cde262462",
        "cursor": {
          "ref": "e2ac517f-5079-4d38-a225-3228180431e5",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1194b0e6-aaf6-4c27-8379-18efef24a012"
        },
        "item": {
          "id": "c9179ce1-9386-4785-a0ea-186cde262462",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "faedb0da-81c8-489e-a7a2-16f2520e081d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4a3ae1-88ac-4492-9289-1d1f1ecc9e0c",
        "cursor": {
          "ref": "ef89c204-ac4d-4e4e-a7b0-76b8c8a76938",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2113b0af-1c49-4c0e-9862-8279f89a0853"
        },
        "item": {
          "id": "fb4a3ae1-88ac-4492-9289-1d1f1ecc9e0c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ecc0d45d-98e8-4d82-b912-45f1f52c41b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fc3147-304d-4a48-9ec1-07bf2f556188",
        "cursor": {
          "ref": "a02f71a8-8783-4159-904c-f41a7b7a59e9",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "257c910d-491a-473a-a8d4-9eb2590e7688"
        },
        "item": {
          "id": "d0fc3147-304d-4a48-9ec1-07bf2f556188",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0d870df1-69de-4004-834f-7f64f6d2e811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c34859-24ee-475e-b72f-30bfe7bfabdd",
        "cursor": {
          "ref": "bdc2307c-f96e-476c-93ce-2372ccb7558b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cc9cd704-73c0-46ab-a404-1664bb76312f"
        },
        "item": {
          "id": "c4c34859-24ee-475e-b72f-30bfe7bfabdd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "84140a06-abc9-461a-95db-fac4fb610e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d980e5ee-dfd7-4c02-b0a2-f0ca31747dff",
        "cursor": {
          "ref": "fb158626-02e3-4308-8e04-421763df1135",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "01e5252b-e57a-4c17-b366-fc035ca2a14b"
        },
        "item": {
          "id": "d980e5ee-dfd7-4c02-b0a2-f0ca31747dff",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a5c97cef-3bd0-4f37-8af9-87278b8337f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829e629f-fcf6-4907-8558-64862de2eafc",
        "cursor": {
          "ref": "c927491e-9296-414e-bffe-e93613b93c5b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dc6eb44c-fd24-4abe-aa3f-ff9d5c7484de"
        },
        "item": {
          "id": "829e629f-fcf6-4907-8558-64862de2eafc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "300945f3-0c58-4860-bd9e-4468fbbb541d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0f8764-9af3-4069-88fb-e698e4a0e272",
        "cursor": {
          "ref": "4891f2d7-5f2d-4e0a-83f7-8eb912fe9320",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6e45e71e-e935-4acc-8edb-004967bd6582"
        },
        "item": {
          "id": "af0f8764-9af3-4069-88fb-e698e4a0e272",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0130fecd-7310-4a40-8696-47651d8cb88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f37dd2-db39-4072-88ad-25ce13e44203",
        "cursor": {
          "ref": "5de68919-7ddb-4796-b46d-13d132239abf",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "95fc7a0f-0acd-47dc-9fce-30955a7de128"
        },
        "item": {
          "id": "24f37dd2-db39-4072-88ad-25ce13e44203",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "22afe462-291d-428d-bfc2-b0bb4ed92313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05256e3-0064-4e39-92e6-722d8fa1343a",
        "cursor": {
          "ref": "58f66b6b-b4b7-4570-ae1b-2657d3885176",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e7c359ab-4114-47ee-8e27-e3dfa2e64d91"
        },
        "item": {
          "id": "d05256e3-0064-4e39-92e6-722d8fa1343a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "149b8bff-c2c8-4f48-bf22-bf8b91290b95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c4e880-07c3-4c0e-8416-ed212453f75d",
        "cursor": {
          "ref": "40a870dc-1d88-4713-aa4d-f24964d7fd9f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7b08ef21-3fc3-470a-8c57-be52c797f748"
        },
        "item": {
          "id": "84c4e880-07c3-4c0e-8416-ed212453f75d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "bbe73ca6-1980-4e6b-9387-d6a19fd63bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "58b8dd35-0a64-4a61-98a8-b8b794e162ef",
        "cursor": {
          "ref": "ccc2bc7f-41e6-405e-a5ef-05bbe5b1707d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5ab96c20-12c4-4582-a630-e6e5d0ee5ca0"
        },
        "item": {
          "id": "58b8dd35-0a64-4a61-98a8-b8b794e162ef",
          "name": "credentials_issue"
        },
        "response": {
          "id": "30a41916-861a-4eb7-af59-1821607c994a",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2098955-3b83-494d-a59e-0bd1ecc92bdb",
        "cursor": {
          "ref": "f8445cbe-9298-4255-98c3-abeef75c8ff6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7407d05a-3789-47e3-98c8-6ef21e3bcde9"
        },
        "item": {
          "id": "a2098955-3b83-494d-a59e-0bd1ecc92bdb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "233cf56c-89fb-461d-880d-cd9071733fd5",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c718aa-bb96-4807-811e-008880a56ede",
        "cursor": {
          "ref": "e8442735-d6e3-4ef2-9789-842103b98c98",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4525760e-41cd-4d25-8036-23cb4962b007"
        },
        "item": {
          "id": "82c718aa-bb96-4807-811e-008880a56ede",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5aff6d09-f5ae-4aa8-8f1a-62865c906071",
          "status": "Created",
          "code": 201,
          "responseTime": 451,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10c813a-fd36-45e2-9ee4-c90026a457bc",
        "cursor": {
          "ref": "55406001-9013-4063-b693-3bd6820d8a82",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "01e366d2-d618-4177-8832-c887238f41f5"
        },
        "item": {
          "id": "a10c813a-fd36-45e2-9ee4-c90026a457bc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "62deb863-0531-421b-bbf3-5b1bb8e5c3f0",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "44644e6c-1f6a-445f-8a57-50a0276ef8f0",
        "cursor": {
          "ref": "1e3c7e62-4be1-4fe9-8b5b-01d5c77cb635",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b02bc6b1-3d58-4154-8bed-72f37192c8c3"
        },
        "item": {
          "id": "44644e6c-1f6a-445f-8a57-50a0276ef8f0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0b343666-0f76-49f0-bf74-db83294f06b5",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-09T00:33:03.062Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-09T00:33:03.062Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ca33dee7-02cc-4c67-b0f8-2982a11f6d8a",
        "cursor": {
          "ref": "79aaa571-274f-467a-b792-e0107e6b7eb0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7f79b0e3-4f6e-4100-9221-199dbd2dc429"
        },
        "item": {
          "id": "ca33dee7-02cc-4c67-b0f8-2982a11f6d8a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1a8beb6b-feb1-4a48-b302-59c97cfd4a14",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a43ca6b-7dcd-4c10-a5c9-6a16a53d875e",
        "cursor": {
          "ref": "06bc6126-b6d3-4874-88ea-380077228057",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6ff9368f-f3ed-47ed-8960-59cbd3b96bee"
        },
        "item": {
          "id": "8a43ca6b-7dcd-4c10-a5c9-6a16a53d875e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f20665e6-7ece-448f-97f4-3ab3ea439da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e3cb08-75d0-4552-8ff4-5addcbbc6349",
        "cursor": {
          "ref": "c5037849-7700-4fd4-a96e-f308819dd58a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4eb71cb5-ba83-4a9f-b32b-1d0df1995d5d"
        },
        "item": {
          "id": "68e3cb08-75d0-4552-8ff4-5addcbbc6349",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "186e66ea-519a-457f-8235-5305ab5fadd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfab624-8967-4d8e-b9ac-954adafffe8f",
        "cursor": {
          "ref": "d7cfbd52-40fc-4930-b523-6e622976b287",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "97193301-adb0-479a-9a66-a24a4573460d"
        },
        "item": {
          "id": "5cfab624-8967-4d8e-b9ac-954adafffe8f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cbf9e31f-5ad4-4f61-8ff2-c41aee460f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae34ace-ab04-4af6-9c6f-4f6363aa65a1",
        "cursor": {
          "ref": "59b83fa0-24eb-437f-ac10-64c571ef08e0",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dcbc73ea-1e48-4df7-a8ba-bf26f88870dd"
        },
        "item": {
          "id": "fae34ace-ab04-4af6-9c6f-4f6363aa65a1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b0dc0b0f-4dde-477f-8e02-c197b12f3e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb93c6c-8809-4513-b8e7-6a65339a7b09",
        "cursor": {
          "ref": "625e67e8-61fe-4543-bd2e-8c66940e23e4",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6148f6fc-e656-4299-97b2-c7e05945af5c"
        },
        "item": {
          "id": "5cb93c6c-8809-4513-b8e7-6a65339a7b09",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b06bd0cf-17c2-4f42-9714-bd37668e5283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3224ce17-e6fe-4ec1-92ca-3cc0c9afd600",
        "cursor": {
          "ref": "c43a22da-e11b-4910-a90b-bdce1eccd52c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2339d52f-bcbd-44da-89cb-bdf31cfbe47b"
        },
        "item": {
          "id": "3224ce17-e6fe-4ec1-92ca-3cc0c9afd600",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "07cc99c6-3585-43e4-b2ad-25d9bc572453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3c4dcc-9d76-4b3e-b692-16645aef4556",
        "cursor": {
          "ref": "b1e0fdcc-94c5-48c9-ba44-db16dec79d38",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3323b1a0-9d4a-4a4e-bd89-55043ab7bc41"
        },
        "item": {
          "id": "de3c4dcc-9d76-4b3e-b692-16645aef4556",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f0643d5b-ca7e-4837-8e97-85e19ed7209c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b92d42-56c9-4b6b-bed7-e00d3ada05ad",
        "cursor": {
          "ref": "33bcc4d1-3a29-4cc5-8985-7053aba1c15e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bd7f28f2-6b1e-4f16-aa51-8a0e6f066fb6"
        },
        "item": {
          "id": "97b92d42-56c9-4b6b-bed7-e00d3ada05ad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d30d8fd4-e57d-42f5-a0c0-1f30402d09ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed58a94-1375-4321-b28c-d2526dc5ef82",
        "cursor": {
          "ref": "0fd1dcd3-8282-4d22-b52f-8dd381277928",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "47fa06b1-9b3f-4f6b-b17c-65c9f1b23b78"
        },
        "item": {
          "id": "6ed58a94-1375-4321-b28c-d2526dc5ef82",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b3c23d5f-cf4d-4a47-bafc-7b63f3773370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83b3fa3-e051-4c14-8e2f-f8201fe8520a",
        "cursor": {
          "ref": "0c6533d4-6475-426b-999b-04ee1795da1c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a9868447-4062-4558-86a5-6b176b4b9f88"
        },
        "item": {
          "id": "c83b3fa3-e051-4c14-8e2f-f8201fe8520a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "056f9ea9-4197-4f51-b1f1-51f937300e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d054dd-6c11-444d-b85b-67f42b5133d3",
        "cursor": {
          "ref": "261a7f2d-befc-46ac-b735-604744319c47",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "72e3e644-8026-4bfa-9052-089cb1fb9fcc"
        },
        "item": {
          "id": "f0d054dd-6c11-444d-b85b-67f42b5133d3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9516664e-db06-4936-b446-66eddc8a806f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b848b6-a4a9-4857-84aa-82bcd1d0c583",
        "cursor": {
          "ref": "1620a20f-8750-4a97-843d-c007b23b6ada",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cbeba6dc-3401-4ee4-8b1b-e4b653600650"
        },
        "item": {
          "id": "59b848b6-a4a9-4857-84aa-82bcd1d0c583",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a746defb-a0da-4c04-8f28-a6944c0ca3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830baf54-4b13-492b-9d72-6e412d66072d",
        "cursor": {
          "ref": "37ae369c-e399-429d-8ba4-9336b22f5a1f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cab757e5-15fe-4246-a060-670705d1a03e"
        },
        "item": {
          "id": "830baf54-4b13-492b-9d72-6e412d66072d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9fd15e1a-3ad8-44f1-bc2e-e932ca253883",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "967d1a87-c8e5-40a6-a333-a32b4a145981",
        "cursor": {
          "ref": "ebe6f1bf-7c20-403c-9a52-b2ff920f14ec",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3551aaf8-9499-429c-b024-49a870b44d39"
        },
        "item": {
          "id": "967d1a87-c8e5-40a6-a333-a32b4a145981",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6436c9f9-33ff-4742-bb52-1762a50ca028",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "002cd15d-30be-4612-a739-506cef662f3e",
        "cursor": {
          "ref": "f87bde93-d26e-41d5-ab41-b2911f4df5ec",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1293e9d9-1c20-4c63-b07c-bbbb2eab6333"
        },
        "item": {
          "id": "002cd15d-30be-4612-a739-506cef662f3e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b32dc724-e631-4da2-b6cc-bb531c4035c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122e8ca1-238a-4dcd-a241-c4934923483c",
        "cursor": {
          "ref": "c2bda1ad-ff81-4ef5-b10f-d3f2358fe8bb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "88a37820-264d-44b1-9962-003f7f98e724"
        },
        "item": {
          "id": "122e8ca1-238a-4dcd-a241-c4934923483c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2a6289d9-cce8-484f-91f8-bc166d80099d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cb4e9b-daf7-4091-b0d7-8362f4fde333",
        "cursor": {
          "ref": "d76b8792-fe78-4ec6-b242-8c79cbd2b3ef",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6e70f121-9fa3-4ae3-932b-5ccd2b3c0f5b"
        },
        "item": {
          "id": "00cb4e9b-daf7-4091-b0d7-8362f4fde333",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d6eeeef7-152a-44d2-aef6-f8620329fdd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f99ecfc-d95b-4c9f-a847-858f9604b7ba",
        "cursor": {
          "ref": "337fbe76-474d-4edc-b75e-8f94d37012ed",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ba90ba3e-9cec-4f5b-8d85-404465efdcd7"
        },
        "item": {
          "id": "2f99ecfc-d95b-4c9f-a847-858f9604b7ba",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "100d0dc3-a108-430e-9b97-8260354844f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a48f616-9f18-4ebb-8233-08fd1712a67b",
        "cursor": {
          "ref": "10174573-a239-422e-885e-d45abce5e820",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1983c935-44c1-4346-88c2-4cf8f3d65e9e"
        },
        "item": {
          "id": "8a48f616-9f18-4ebb-8233-08fd1712a67b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aca9df60-5cde-4469-adb9-1de573ab6dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647421aa-8dcf-4fb8-bb4a-e7388f3664b8",
        "cursor": {
          "ref": "3b3bcff6-d557-4f53-9807-3d1cac05663e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4289d2ec-a8c9-4dcc-a3c2-5d3e23ff32c8"
        },
        "item": {
          "id": "647421aa-8dcf-4fb8-bb4a-e7388f3664b8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6c901b69-aa26-4ee6-8581-498ed360de2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f51976a-c955-47c3-868e-653364836e42",
        "cursor": {
          "ref": "101851f2-810b-4c80-be2d-211ef5ebe4f0",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c1329420-17c2-43b0-944a-a765fab4160d"
        },
        "item": {
          "id": "5f51976a-c955-47c3-868e-653364836e42",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b49fdcfc-2808-42b2-80c1-943532f4be40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4099b1f9-7845-4ba9-884c-243c1dd8e450",
        "cursor": {
          "ref": "83099ab9-2f8a-437a-a4e1-54035954f7cf",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "abb674f5-70cc-4697-8d1e-e8e9c537bbe8"
        },
        "item": {
          "id": "4099b1f9-7845-4ba9-884c-243c1dd8e450",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "57c5d4aa-f562-4274-b51f-544e3906b50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270eee7c-cd84-41f3-914f-5c88aa92e1b2",
        "cursor": {
          "ref": "903d1acd-81b6-4cbe-8879-6708fa705d8f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "af08a1e8-53ef-4330-bb06-523ce552dd7d"
        },
        "item": {
          "id": "270eee7c-cd84-41f3-914f-5c88aa92e1b2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "10b8a3b8-efa8-4d4a-b065-4f7c126c750d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59427bfd-08dd-437c-9c11-bfc3eb673d56",
        "cursor": {
          "ref": "ac17a6f3-1081-4655-8da6-15b6a961fec6",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "61ef2ac6-7ff1-4b51-b60e-ac6610e4ed24"
        },
        "item": {
          "id": "59427bfd-08dd-437c-9c11-bfc3eb673d56",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "21f78d75-51c1-4956-a039-4d5644eb6a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff890a02-1a49-4100-8ef2-ac975346e233",
        "cursor": {
          "ref": "a941ce4d-9d2b-4458-9f64-7aac0d7a654d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "938f8a78-9113-448b-b742-235124a4adfe"
        },
        "item": {
          "id": "ff890a02-1a49-4100-8ef2-ac975346e233",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "96f8b8ba-7aa3-4974-a0aa-edccde38ee5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996e0cad-14aa-4a63-ac8a-a1ad40c04b50",
        "cursor": {
          "ref": "8284bc6e-ebbe-4a96-93b0-15eb38870597",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "59dd83f0-c6b3-47bd-b32d-6fdfff1076f1"
        },
        "item": {
          "id": "996e0cad-14aa-4a63-ac8a-a1ad40c04b50",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d918f5d8-113a-4a76-93df-5de5c625b022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee414941-458f-473b-a66f-d3647cc9e796",
        "cursor": {
          "ref": "06388ee8-1590-4690-9dab-35a42c67bfb6",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "508f2c96-5a03-4967-b878-5ca78fbbc82f"
        },
        "item": {
          "id": "ee414941-458f-473b-a66f-d3647cc9e796",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1d86250e-a3da-4765-968c-ae3b738ca7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb20effe-53b8-46d7-a953-ede0f97371c7",
        "cursor": {
          "ref": "8bfaa327-de1a-4a39-b14d-388e5faefc4d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "16f0a430-e741-4798-b09f-734c185cf54c"
        },
        "item": {
          "id": "eb20effe-53b8-46d7-a953-ede0f97371c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4f925207-aef5-4cfc-9a1f-0af00870c382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba366cb-1394-4044-94fd-b512cdae718a",
        "cursor": {
          "ref": "201cb8ad-ec46-4212-8ef6-be639de5bf1f",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "86a4c35d-6623-4748-9623-f0bb8f7b8679"
        },
        "item": {
          "id": "dba366cb-1394-4044-94fd-b512cdae718a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "608d31ed-ab21-4786-b41d-e7ffd5246af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072a6331-3b04-4cd8-87cd-96148dac0a1a",
        "cursor": {
          "ref": "6db5b771-22bc-4245-a237-3cc1bda901c0",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c8b35c60-1e88-402c-bbf6-82a6b39f742b"
        },
        "item": {
          "id": "072a6331-3b04-4cd8-87cd-96148dac0a1a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c0a74154-2835-4599-9afd-3d38154b4214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e48b8ea-109d-4267-b5b5-ef51cd155b2e",
        "cursor": {
          "ref": "98fb713c-cf78-4220-8945-40b3f03322b2",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d727a215-27ba-40a7-820b-09b6a22d1461"
        },
        "item": {
          "id": "7e48b8ea-109d-4267-b5b5-ef51cd155b2e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7af84463-4d47-416b-8446-4cce0e7ae0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c696dcea-e61b-4ceb-bcc2-72411ec5441c",
        "cursor": {
          "ref": "e21d8fef-6faf-4bcf-a3c8-30eed3bf5fac",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e25d7b09-ef4f-42cf-8436-365a6cc5a922"
        },
        "item": {
          "id": "c696dcea-e61b-4ceb-bcc2-72411ec5441c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b07c90d2-20bb-43c9-a3a5-b1d297e1a79f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "907e00b5-3a60-46a0-8453-3acd83058f0f",
        "cursor": {
          "ref": "e72d07de-f8d1-43b4-8b10-eddf13dd691a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "48bd9540-93e4-4ff2-98e6-7098862973e9"
        },
        "item": {
          "id": "907e00b5-3a60-46a0-8453-3acd83058f0f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "29bd58e9-b270-48c7-9c3d-b4ef44399a00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84b597c-24a6-41f0-9027-bfb7787ce4ee",
        "cursor": {
          "ref": "9d80b159-622b-4690-8bdd-95ba1a32d98a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "18f4ffe2-ff73-4c0a-9b67-e764b1c3e16e"
        },
        "item": {
          "id": "d84b597c-24a6-41f0-9027-bfb7787ce4ee",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b28413e2-033b-4480-8894-9c76a04d94fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631a2c38-9d66-4734-bd54-517420c924e6",
        "cursor": {
          "ref": "eaf11194-7dfd-4043-aeaa-ffefa51508e0",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c0549881-774f-4855-955a-03b3cb8801f3"
        },
        "item": {
          "id": "631a2c38-9d66-4734-bd54-517420c924e6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ac25b65f-1204-4546-b8e1-e34ce89b78d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4fc07b-e2eb-43a0-8938-10bf8eb69593",
        "cursor": {
          "ref": "d27af073-95c8-4753-92bc-c8c1aeb5bf6a",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "47ac123d-f510-48a4-8195-2a2dbd6d4ec0"
        },
        "item": {
          "id": "2c4fc07b-e2eb-43a0-8938-10bf8eb69593",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "62da670d-ae1f-4f42-a50d-733f392797b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef4017e-667c-4a36-927a-86cf2bcf04eb",
        "cursor": {
          "ref": "de522715-58a7-49af-8ccc-0d6aa93c3f4a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e76ce2ac-5b65-4e2c-b5c6-b4677643173c"
        },
        "item": {
          "id": "5ef4017e-667c-4a36-927a-86cf2bcf04eb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c50e1ae-1270-4de6-9a3c-ddfce05c65ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c65294-fcfa-42a6-bece-868ef8ec1ff4",
        "cursor": {
          "ref": "1b573b17-5e0b-4b7e-9548-14106e554cbf",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c2b56699-d944-4d86-b930-94fc8fd237b0"
        },
        "item": {
          "id": "f9c65294-fcfa-42a6-bece-868ef8ec1ff4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "926c21b6-c897-4712-a762-285148de281b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd80b62-30f3-41cb-86fa-1e094011179c",
        "cursor": {
          "ref": "980bb1aa-0e1c-461c-b221-97d94a80e76e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7f9f0e8e-fea8-4e71-89d8-31854d4236a0"
        },
        "item": {
          "id": "1dd80b62-30f3-41cb-86fa-1e094011179c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5b8d3284-9e1a-4bff-8b30-dd013a2a787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbbef89-c90a-412e-b2ce-6d1787974d34",
        "cursor": {
          "ref": "76e6c13d-2f46-49be-8aa2-0f0b6356fb11",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5c74fbb5-d4d6-4f28-84e0-69ceeb705e79"
        },
        "item": {
          "id": "efbbef89-c90a-412e-b2ce-6d1787974d34",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4a193a57-a5de-42be-9188-f24ca82daa2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9d35c6-8ae9-4b6d-b4dd-089326ecc1af",
        "cursor": {
          "ref": "9fb32612-8184-4209-b36b-cb203b888232",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8034d1ea-4ce4-40ad-adbe-a315626feba2"
        },
        "item": {
          "id": "4f9d35c6-8ae9-4b6d-b4dd-089326ecc1af",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "804eb713-3f5d-4657-97d8-a9b5c4911822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df19137b-7de4-41bf-8834-663562ba88e6",
        "cursor": {
          "ref": "8888de25-ab16-462a-9a5c-cf21d81c085f",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "77064cba-dbcc-4c32-966f-486439e33c8c"
        },
        "item": {
          "id": "df19137b-7de4-41bf-8834-663562ba88e6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2e4fa538-81c5-49b9-bdd9-158c7a33e066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664abcd7-6b4e-4896-9395-35fd6312ea1a",
        "cursor": {
          "ref": "24c68393-09a7-4545-93d2-182a616aa2ce",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1ffdb626-c0c7-4fb2-8f39-715601fee6a6"
        },
        "item": {
          "id": "664abcd7-6b4e-4896-9395-35fd6312ea1a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e3fc32ca-6687-4d71-8e10-105b7314a199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28220888-a366-4687-b0d4-4952562ee478",
        "cursor": {
          "ref": "cb6c61f5-e2ac-4516-87e6-91c4d776542a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1d9f038b-c3fa-49ee-a7f1-2c6fcfd4f49a"
        },
        "item": {
          "id": "28220888-a366-4687-b0d4-4952562ee478",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1dc489d0-e08d-40a9-ae6f-6beb74f84c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a12c3c-d6e3-46e9-92fc-c8aacace05c1",
        "cursor": {
          "ref": "f4afe9e6-5d47-42c2-9d03-89ec3500f9a0",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8317a3da-ed6d-4dae-9a30-3705e4940683"
        },
        "item": {
          "id": "09a12c3c-d6e3-46e9-92fc-c8aacace05c1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a5c43b72-6196-473f-a691-d16ca87b2727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8af90be-6d9a-4ec1-a76f-672bb0a8378d",
        "cursor": {
          "ref": "2da7e226-4ac0-4ff8-b4bf-cbfd05f5c422",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "524f8e68-fa45-4f31-a846-b90d4ae3a3e5"
        },
        "item": {
          "id": "c8af90be-6d9a-4ec1-a76f-672bb0a8378d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c1bdc263-4c8b-4893-b267-4f104ef1d90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a628a6b4-0b1b-4801-965d-397346ed0fe0",
        "cursor": {
          "ref": "aea3186a-7964-4662-bb51-807388fb8009",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "21e9cb0f-4ac0-4c16-9c3e-e6b33f7a3c42"
        },
        "item": {
          "id": "a628a6b4-0b1b-4801-965d-397346ed0fe0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e6f34636-69bb-4f4e-b363-af52b92847c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "a275351b-d736-4ffc-baf3-ec3f910f1bfc",
        "cursor": {
          "ref": "0050184d-751d-420e-b2d9-8d44026ae01c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2fcfae81-ed6a-4cd3-ba6e-6d4bce3a7d6b"
        },
        "item": {
          "id": "a275351b-d736-4ffc-baf3-ec3f910f1bfc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3d0a900c-060f-4bf0-a521-3986cdd4012f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f3e763-0124-463e-9873-7baabab44dc0",
        "cursor": {
          "ref": "bd21c117-316a-450b-ad27-b8e4b68a9aa1",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2b2e8b66-4fa9-46d9-a19c-87e5a8a8fd54"
        },
        "item": {
          "id": "b4f3e763-0124-463e-9873-7baabab44dc0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ac156a12-11b0-47be-9128-8e8a07507465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31e4b9e-109f-4eed-832b-a5af09c8285a",
        "cursor": {
          "ref": "47725b10-bad3-4db4-8a98-44461ebc88fd",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fe01a99b-405b-4e6a-b153-ea91c9552367"
        },
        "item": {
          "id": "b31e4b9e-109f-4eed-832b-a5af09c8285a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e9ae649a-6231-423e-a531-9ef4a04a079a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0285087d-3395-40af-96d1-05aabcd8299e",
        "cursor": {
          "ref": "b7ef124a-018f-429d-8cbc-066bafe8462f",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "25d073d2-4ab7-40d3-8003-63db14e24fed"
        },
        "item": {
          "id": "0285087d-3395-40af-96d1-05aabcd8299e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "04653fd5-9157-4fd0-9066-d0170da4f06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6355f1d6-4764-4a9d-9528-93dd61a226b2",
        "cursor": {
          "ref": "c8c8f4ea-5877-42e7-9705-539c5b745de4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "786d9dc7-4d0b-48cf-9581-9a42668fd89d"
        },
        "item": {
          "id": "6355f1d6-4764-4a9d-9528-93dd61a226b2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a7b0f939-e6b1-4408-aaea-4323f029a79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a3fbb8-5bd3-481a-8945-eab4a01113be",
        "cursor": {
          "ref": "b79c8a5c-242c-4822-9f7d-312c8a48a01b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c8973170-75a5-4a11-b4cf-b0bb6796f5a2"
        },
        "item": {
          "id": "e4a3fbb8-5bd3-481a-8945-eab4a01113be",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eeef1e27-47ba-47fb-b0e0-358cafaaa292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91403d0e-1fac-4a6e-a3a9-a79e4f2cd029",
        "cursor": {
          "ref": "7d695ff3-8298-4593-a214-0f9bae27f593",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c98a24d8-65db-4b54-98e1-5a5219f3f20b"
        },
        "item": {
          "id": "91403d0e-1fac-4a6e-a3a9-a79e4f2cd029",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c4723800-00b4-4a5a-b5e2-fbf54452a165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1a4b49-94c9-4eb7-a690-ba9c006a4b69",
        "cursor": {
          "ref": "91919c32-7fb0-4f4a-9f8d-382bde0a4041",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3ad64c8e-e658-4bf7-885f-90bbb2394ac8"
        },
        "item": {
          "id": "bd1a4b49-94c9-4eb7-a690-ba9c006a4b69",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ae9901a6-a787-47a9-b757-c0a52beebb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde50679-2cfa-41d3-8c80-e232a289113b",
        "cursor": {
          "ref": "2ecd46ff-0b33-488a-a624-1947c9770e30",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48e57c54-502a-48ec-9eb7-aa0479ad0289"
        },
        "item": {
          "id": "fde50679-2cfa-41d3-8c80-e232a289113b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "80570e94-e2fd-48b9-8d56-bacfcb4eae0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04f3550-d6b1-4dce-a8a0-6fbb4757952b",
        "cursor": {
          "ref": "b144d45c-ae3c-47df-b06d-d41f59e9eabd",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "409bb6c4-a63f-4f86-a82d-e6eb22810d05"
        },
        "item": {
          "id": "a04f3550-d6b1-4dce-a8a0-6fbb4757952b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "361089e3-3646-4d30-8621-63eb0773057c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a97c72-38e2-4327-ad45-60d08b1e1e2f",
        "cursor": {
          "ref": "9e973f83-683b-421e-87cb-37a9197193e5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3e861be2-f106-40ef-9e47-aed50560d937"
        },
        "item": {
          "id": "44a97c72-38e2-4327-ad45-60d08b1e1e2f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "62960727-d0ba-4b54-b0e6-c8e3d292a372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0637640-9552-439d-987d-4f9c211f5946",
        "cursor": {
          "ref": "56b1cddd-ed17-4aa6-a75a-99047e0b5c09",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a6000b4f-bf41-400d-8e31-79b3564d0eb1"
        },
        "item": {
          "id": "c0637640-9552-439d-987d-4f9c211f5946",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "74b0106a-9ce4-48d9-853f-9b1f1592fa97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912272c6-1ca5-446c-a610-94a6aed1c224",
        "cursor": {
          "ref": "09a7cfa8-d2f6-4c8b-8ed5-be23c6a53892",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4cb87e0f-0d57-492f-af1b-622742d626d2"
        },
        "item": {
          "id": "912272c6-1ca5-446c-a610-94a6aed1c224",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "21175530-9b20-44f8-916d-b6124affb317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1a242e-6879-4aeb-8278-4010191dd1a2",
        "cursor": {
          "ref": "79847ef7-c84f-412c-b8f9-e7035e0e79f6",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ecf708df-bc9c-47a1-8bd1-dd80e84ba4f4"
        },
        "item": {
          "id": "5e1a242e-6879-4aeb-8278-4010191dd1a2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "36dc92e6-ec33-45ee-81f4-896ce2d1693f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b20a2d4-79f3-4fc5-963c-87c721e12827",
        "cursor": {
          "ref": "cccd0a2b-6c9e-4a9c-89c9-a57d1e6c7e2e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ad73960c-8a5b-4726-8be0-bd3a582bc10a"
        },
        "item": {
          "id": "2b20a2d4-79f3-4fc5-963c-87c721e12827",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7a4d6280-11ae-44dd-b2fc-ed1ca9e03238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2744fa0-70e3-4eae-8702-d4fcbe0d0b31",
        "cursor": {
          "ref": "1c677b25-687c-4993-90ac-b7ec2b5d3296",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "950fe43f-4424-4589-950c-a7c5c48a8905"
        },
        "item": {
          "id": "a2744fa0-70e3-4eae-8702-d4fcbe0d0b31",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "45e6daa2-e69d-4b64-825d-388a8850c1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0668d74-3ce0-41a5-85e9-2bdddd30e05a",
        "cursor": {
          "ref": "b554c230-9b5c-42c9-b126-2a13cee4456a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c74e21e1-1cd9-4d70-967e-7194b547fdd7"
        },
        "item": {
          "id": "d0668d74-3ce0-41a5-85e9-2bdddd30e05a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "250f2ced-bb59-49c0-92ad-ebe54f4abb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669d2e7b-7ac1-4dce-85a7-ecfc067fb988",
        "cursor": {
          "ref": "b8e353c1-6b63-4674-a723-123390dd243f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4f0a3ed7-05aa-4958-a0db-b7ebac0108f3"
        },
        "item": {
          "id": "669d2e7b-7ac1-4dce-85a7-ecfc067fb988",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f4c78ac4-73f9-45e1-bad1-37f8d47c6eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c1457d-f483-42e1-a9f3-fa5122629403",
        "cursor": {
          "ref": "17fab72a-96d7-49b0-a3a4-9cb5e30d728e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bd63e9db-2726-48c5-97fd-1b8d367d56be"
        },
        "item": {
          "id": "e4c1457d-f483-42e1-a9f3-fa5122629403",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "37873fd0-b05a-4480-a55e-a1681cb1884c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c233833-f36b-4fe7-8224-e6bf93d773e9",
        "cursor": {
          "ref": "edc5c067-cc64-45cd-8798-1cbe7d710b2b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ead2527d-fb82-4058-9c90-34357b877ad1"
        },
        "item": {
          "id": "5c233833-f36b-4fe7-8224-e6bf93d773e9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6676fe5d-9d70-4abb-adc1-cdc721982a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb0709f-c7e0-4b6a-b28a-6e503cf0002e",
        "cursor": {
          "ref": "e6e18d1a-18d0-48d2-b449-711da116b3b6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "28b86c51-f1bc-4bf8-b458-2efd78118055"
        },
        "item": {
          "id": "ecb0709f-c7e0-4b6a-b28a-6e503cf0002e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3ebabdee-c0c4-4fee-9562-d52655e0a13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3682561c-81e8-4fab-9d61-160b2effed02",
        "cursor": {
          "ref": "f2e29c38-272b-4b05-bdd8-a7c1d3b8cbbb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7f2ddf67-328e-4efd-bf14-5431682d3684"
        },
        "item": {
          "id": "3682561c-81e8-4fab-9d61-160b2effed02",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1943227d-7fb1-4251-985e-24965e0ac54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58a69f4-7309-45bc-81ba-2f7e07826f80",
        "cursor": {
          "ref": "0b7b53df-9a97-4bba-a998-e9e579079f91",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6a506c96-83ae-448f-94e2-2e92531a2148"
        },
        "item": {
          "id": "f58a69f4-7309-45bc-81ba-2f7e07826f80",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "86be483c-b9c1-4e34-90a3-fe7bb32f0a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db331901-6ea9-492a-8601-ac937f4365e6",
        "cursor": {
          "ref": "f11dd7ae-f5cf-4df8-ba38-dca914bfdfe4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "590c0026-39f3-4df1-976c-5b1d400ca338"
        },
        "item": {
          "id": "db331901-6ea9-492a-8601-ac937f4365e6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2cc046d2-337f-4c90-9ed9-9506cc60e4d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0781103-12a7-41fa-b91c-d57f350cdd09",
        "cursor": {
          "ref": "ce3615ef-a99d-4882-a9bc-b0c9f13116ee",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d454604e-f1a3-4af0-b2b2-f3322faf3cae"
        },
        "item": {
          "id": "b0781103-12a7-41fa-b91c-d57f350cdd09",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d3d1fe64-dd1e-45eb-8a13-6a0a8248d1a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70eb6ba9-9a7b-474f-9176-fad75c3c5e3d",
        "cursor": {
          "ref": "6af60753-f279-4936-a109-9dd548bc2826",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b84290c9-20d8-4788-86b9-7f8d7bd4e7ce"
        },
        "item": {
          "id": "70eb6ba9-9a7b-474f-9176-fad75c3c5e3d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ec8b77f5-3f7f-4a70-b4b3-5934cf2eaf23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43feed3a-aee0-4450-9e40-2446ec0da5ab",
        "cursor": {
          "ref": "d6b10553-5059-4004-86e5-35eabbece9e7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c7f5eec1-9815-4d3d-a8b3-32118fe5d4c2"
        },
        "item": {
          "id": "43feed3a-aee0-4450-9e40-2446ec0da5ab",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d0803bc2-7617-446a-bc8c-bc5e919fcc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6cd391-704f-426e-9cff-894564fc3444",
        "cursor": {
          "ref": "01767c2a-396d-4e4d-b6b0-8f5df5eeeb90",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c77e45cf-2824-4bf6-b748-5c98f15ae9fa"
        },
        "item": {
          "id": "9c6cd391-704f-426e-9cff-894564fc3444",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4d67083e-b976-48d1-bf3c-78cece4411f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d22035-a70a-4c4c-b5a4-7f76d1d50945",
        "cursor": {
          "ref": "68914e53-1c7f-41cd-af0f-082916357154",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "deed6673-9721-4b00-8dbe-7d1fe9fa4061"
        },
        "item": {
          "id": "e3d22035-a70a-4c4c-b5a4-7f76d1d50945",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b8243ba4-6f8b-477c-8b4a-4acf91da1588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c999c77-da8c-4be9-9cf1-12fe9258ae7e",
        "cursor": {
          "ref": "12c77568-58e7-48ad-b337-56d47651d221",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "63f231a9-ef6e-4b34-b35f-681519a0751d"
        },
        "item": {
          "id": "2c999c77-da8c-4be9-9cf1-12fe9258ae7e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5b3f7889-4933-4107-9496-c8de2a7a8ab9",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "193cd407-1b55-4cce-b83f-59b82e9dba0b",
        "cursor": {
          "ref": "649d24e4-3347-4155-b934-800843fc9455",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cb819038-9429-4fd6-9e7f-12258f81b7e0"
        },
        "item": {
          "id": "193cd407-1b55-4cce-b83f-59b82e9dba0b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c3498f46-4615-4a37-846d-72cc3a32085a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014c6fa0-3fcb-4afd-a4af-9e2deb6aa6f8",
        "cursor": {
          "ref": "372c7da7-c221-4c2d-aad8-368f5fa28742",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "44dcf003-4778-47be-b4f0-b8507e7282a7"
        },
        "item": {
          "id": "014c6fa0-3fcb-4afd-a4af-9e2deb6aa6f8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2937233e-c6b2-41b2-87d8-45c69fb8d4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c7a6d8-26c9-46bd-aa3b-d15e1ae89821",
        "cursor": {
          "ref": "47d1201f-3a84-49c0-8a21-4e360ed84bf0",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0211056d-d770-4c3e-960a-28c2447342bb"
        },
        "item": {
          "id": "97c7a6d8-26c9-46bd-aa3b-d15e1ae89821",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf0f735d-d4e8-4ea7-8fdf-9f50aa180d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e63ba0-b032-4762-a189-333cc4bf33b4",
        "cursor": {
          "ref": "f79fcef4-18fa-496f-896e-38a29eecc410",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "61a7e081-3cd6-4bf7-9ed8-c121d01d3523"
        },
        "item": {
          "id": "11e63ba0-b032-4762-a189-333cc4bf33b4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7523c580-b2d9-4a9d-b134-a58681e45c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b38b8c-8c07-4d9a-80ac-d578e444d3d0",
        "cursor": {
          "ref": "62d2fc2f-2e1a-40b5-8533-623851e7e0e4",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2280cd5c-9dcc-4c77-90b7-04be1a5e8931"
        },
        "item": {
          "id": "96b38b8c-8c07-4d9a-80ac-d578e444d3d0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e9ab746c-2c35-42f3-900f-cec0ad91f831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb23dbdd-44d3-4af7-a211-f5cc2ca1261f",
        "cursor": {
          "ref": "7eb73d24-c766-4ce8-ae62-6a63ac7b25e3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "63b16894-a6e7-49ed-8f05-27508528f7c6"
        },
        "item": {
          "id": "fb23dbdd-44d3-4af7-a211-f5cc2ca1261f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ac9f8551-f405-4e8c-b1c2-21958adaf862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04dded1-17e9-4397-8199-98c12ef8d43d",
        "cursor": {
          "ref": "16836b6c-f781-43b6-9025-1ae617cee797",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f8438589-652c-45e8-9f46-ebf8a45dd0ec"
        },
        "item": {
          "id": "b04dded1-17e9-4397-8199-98c12ef8d43d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "789e8c1b-c046-423f-a17c-8cede085b624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe5fb4e-d214-466b-a67d-1d74d6e985fa",
        "cursor": {
          "ref": "a46c59cc-d480-4453-a6f2-e6a78ddf685c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "502e05f7-1af9-4edd-9a18-467c7b71c602"
        },
        "item": {
          "id": "dbe5fb4e-d214-466b-a67d-1d74d6e985fa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "250af6e1-3669-4d1d-9d39-d805547a6993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612017a7-0748-4c8e-8271-ef3131278e87",
        "cursor": {
          "ref": "88cf29c9-839f-40b2-8ce8-542551e988b2",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e2477eab-9cc6-482a-bf8a-c76f898981c5"
        },
        "item": {
          "id": "612017a7-0748-4c8e-8271-ef3131278e87",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c7d62671-4e15-4d40-985c-a0e6eb7ffad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97b3381-5a69-4fbb-8164-c47c40ecca4a",
        "cursor": {
          "ref": "beb71c95-fd95-44f4-94be-fad1d4bdd04c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3bc70baf-bfd6-409c-b794-c4dbe62bb381"
        },
        "item": {
          "id": "e97b3381-5a69-4fbb-8164-c47c40ecca4a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5e880cd4-1b1d-4195-95d0-c219db8e8dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d2141f-6ada-43dc-b987-06f9f0fee8fa",
        "cursor": {
          "ref": "38ea7627-0e62-418d-9030-6197c49e7d92",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "57e9b7a9-e774-4801-81e3-d7a8c8ef2ec0"
        },
        "item": {
          "id": "80d2141f-6ada-43dc-b987-06f9f0fee8fa",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8d62999f-eff9-4fa5-9237-72ae4512e9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f82b4cf-eefc-4e5a-afb0-75ca15ba85c7",
        "cursor": {
          "ref": "14a78f81-c75d-4157-9805-03b636b738fd",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "74beb979-b767-4727-b40d-807d9290cb9d"
        },
        "item": {
          "id": "4f82b4cf-eefc-4e5a-afb0-75ca15ba85c7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3232a0d8-a750-46a4-87a9-3ad6d0c88115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2aa774-495e-4076-919f-7c168c186fd6",
        "cursor": {
          "ref": "9ab0f0b0-bdc8-4c81-b497-a675f73e9e04",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c827e466-7885-4b62-9d26-fd4dfbf373e5"
        },
        "item": {
          "id": "0c2aa774-495e-4076-919f-7c168c186fd6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "442cd71d-df33-4eb2-adb0-6cd0dd346876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8e2d0a-4d21-496e-9604-9fb8d0865c22",
        "cursor": {
          "ref": "6b3ba2b0-42c5-4daa-a6b1-0334563b4c14",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ba941324-198d-4e88-b679-d615c680b0a3"
        },
        "item": {
          "id": "1a8e2d0a-4d21-496e-9604-9fb8d0865c22",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c8ad9cf1-ef6b-4447-9553-1b7ebd885cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29813ace-56a9-48f7-a2d6-5e0362c4d103",
        "cursor": {
          "ref": "87023154-0b28-4f19-9ced-bd2c0c69fff2",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "94310d3e-e665-4601-91f7-271aa9c50e3d"
        },
        "item": {
          "id": "29813ace-56a9-48f7-a2d6-5e0362c4d103",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3612dc0d-a021-4d03-8d59-385e4416a0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c57225-f0f7-4ba2-b5e1-e5d38f0d4b55",
        "cursor": {
          "ref": "9973f3fa-1140-453b-afe0-c9c09f83f0ad",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8abbaab0-70a2-4cf0-a522-9affc204c80f"
        },
        "item": {
          "id": "89c57225-f0f7-4ba2-b5e1-e5d38f0d4b55",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f6c92a20-c242-49ae-9683-2f5b42d0fc21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdca527-6148-4061-ad8c-29ea6449eddb",
        "cursor": {
          "ref": "6a8a1ad4-f244-4edf-81e9-232f8ed0f60c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "778e2442-a7d1-4e16-a628-c05c14d75b91"
        },
        "item": {
          "id": "cfdca527-6148-4061-ad8c-29ea6449eddb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "97834c17-85a5-4565-8f21-cdd9c5ece126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b20058b-8934-4399-a0b3-8cf131e09fd4",
        "cursor": {
          "ref": "0af0876d-d7f1-4557-a135-51de5df9015c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "25acd446-2e18-4f98-9877-015ce99cfa8b"
        },
        "item": {
          "id": "1b20058b-8934-4399-a0b3-8cf131e09fd4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e6ce7039-7265-47ba-8f9c-14aece3d8f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d78f03-b27d-47ae-aba4-e5885d371d73",
        "cursor": {
          "ref": "3b5d07eb-241d-40dc-b01f-5b8ee33f7697",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a0d1a2d5-6e04-4c50-b139-9383147011bc"
        },
        "item": {
          "id": "c9d78f03-b27d-47ae-aba4-e5885d371d73",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ac29202b-2172-4111-83de-b97768174192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7fc68f-7e4b-4814-990a-107afb8698a6",
        "cursor": {
          "ref": "0d69c2a5-587e-406d-ac7a-4ee335f52b69",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4a825781-c73f-47a2-8661-335ae0e89468"
        },
        "item": {
          "id": "de7fc68f-7e4b-4814-990a-107afb8698a6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "22f35d86-f4b6-4243-a44b-211bb1f1ae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c0dc80-6daa-4f6b-8fff-12d5a8bacc6c",
        "cursor": {
          "ref": "dd90cd71-ed85-4a16-b819-0e9ef8849df8",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c064bd3e-07fc-4cf7-8d62-671fa62003ce"
        },
        "item": {
          "id": "03c0dc80-6daa-4f6b-8fff-12d5a8bacc6c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8311097d-0d7f-4a92-97e2-ec23608b3227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad22280-7216-4480-bd83-7e84c47a68c4",
        "cursor": {
          "ref": "09b42753-c5bc-419d-88c5-797f0c4e7fba",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3d5d99d5-b352-42df-b488-e850a8a7c8c3"
        },
        "item": {
          "id": "aad22280-7216-4480-bd83-7e84c47a68c4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "40d53929-566c-49db-ae37-9f8f6623df72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614d0e0b-d0e8-4332-9376-af3c10e48ab7",
        "cursor": {
          "ref": "95780ac5-98a7-4883-880a-85635d188833",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4bb21988-cc3d-43b4-9bf9-b1f980d61f58"
        },
        "item": {
          "id": "614d0e0b-d0e8-4332-9376-af3c10e48ab7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f3e76046-7521-448d-a5bb-b941ee264d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3d6a6d-db0c-425c-af54-06c429adf045",
        "cursor": {
          "ref": "0cbaebc3-f19f-4a3b-b7a6-1c7510bd9e44",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6fc2f6d6-f256-4717-baaa-b8dccea63500"
        },
        "item": {
          "id": "0a3d6a6d-db0c-425c-af54-06c429adf045",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c1c374e0-8315-459a-b2f8-d72f9c2632f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71f281e-3e9f-48f7-9295-7b7f941b9ab1",
        "cursor": {
          "ref": "5d053bcf-42e7-45bc-938b-6f15d4b8c97e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "15751fa0-f073-4f44-9c06-59e10b97cb92"
        },
        "item": {
          "id": "e71f281e-3e9f-48f7-9295-7b7f941b9ab1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "eb199577-91ac-45b6-9b79-70f94035040e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1958417-8819-42d2-9442-fa2f2fcd409b",
        "cursor": {
          "ref": "d0c6f11e-247a-46a0-9a8d-9bc62c3ac875",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d06d939f-fcec-4460-81a4-3c2b6f32986d"
        },
        "item": {
          "id": "d1958417-8819-42d2-9442-fa2f2fcd409b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "28ba25d0-f9a7-4d34-b1e8-f9a3c8ec5546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e94700-6c90-45c3-85e2-04d013772747",
        "cursor": {
          "ref": "300c634b-b597-4fae-b560-759dfefdf8e5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "604f93f7-c41b-489b-bc25-9c6479383e36"
        },
        "item": {
          "id": "75e94700-6c90-45c3-85e2-04d013772747",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "876a80a0-665f-4fbc-9c9c-963a0f92e214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e5ae2b-6962-4d31-b95e-88501ef2c72b",
        "cursor": {
          "ref": "da46af02-d11a-40f9-9046-7e420c85a571",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1c7a13e0-60a8-4f87-985b-0283f8a5d601"
        },
        "item": {
          "id": "47e5ae2b-6962-4d31-b95e-88501ef2c72b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6c1aafb2-6feb-4a90-bf0d-5c5a9c8b58db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0248d2-b26a-49f5-8da2-ac8a74d04d43",
        "cursor": {
          "ref": "1db114ab-8e12-4da5-999e-f81e8b84cbc1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ddc2fe79-8c0e-481d-a89d-35ecf80cd164"
        },
        "item": {
          "id": "7e0248d2-b26a-49f5-8da2-ac8a74d04d43",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "04901a3a-3d1f-4f57-9b68-b6f7028527d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7370b4-6634-4d6c-9198-76d9e6d49819",
        "cursor": {
          "ref": "004325ce-d3dd-4e45-9914-457d54422508",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "15f5336d-378a-44a3-9587-ccbaa77ca56d"
        },
        "item": {
          "id": "ec7370b4-6634-4d6c-9198-76d9e6d49819",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "20583c49-9aff-4998-93de-dbb480e9782d",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6e55b454-9219-4b4c-88d1-212ff3b28aa1",
        "cursor": {
          "ref": "df270049-4900-40fd-90ad-b22fd79f301b",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e57fb9bb-ef37-4829-8aa1-59fe81bd8e73"
        },
        "item": {
          "id": "6e55b454-9219-4b4c-88d1-212ff3b28aa1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b94574d0-ee27-4832-9942-fe490af125dc",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d8242d7d-dfa3-4cd1-9605-0a6ef355d7b3",
        "cursor": {
          "ref": "86b1a1b3-f1df-4c15-a15e-c6de98e966d5",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "268c5179-296f-4dd1-aa75-352263fa78ee"
        },
        "item": {
          "id": "d8242d7d-dfa3-4cd1-9605-0a6ef355d7b3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c59b970c-d092-4f64-b8d8-2d4baa53f29c",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b929eb02-3197-4df2-a2dc-13a261199b3a",
        "cursor": {
          "ref": "75ec2500-39d7-406a-8896-5562c1882d6b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fac491ee-d73f-4806-966b-696da612bb25"
        },
        "item": {
          "id": "b929eb02-3197-4df2-a2dc-13a261199b3a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cc83a3d7-0e11-4ee1-b4ab-c23e9cb5eb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63469c27-803e-4a31-be66-e56a3a473bc1",
        "cursor": {
          "ref": "47b8be1a-90e6-40c1-a43f-4e79b8f17e0c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a6acaa11-46de-43d0-a041-5cd7dae79eab"
        },
        "item": {
          "id": "63469c27-803e-4a31-be66-e56a3a473bc1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "89d3b8d4-b062-4196-b6ac-649240961c1c",
          "status": "OK",
          "code": 200,
          "responseTime": 270,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f8b9d21a-f61b-46b2-a120-5ad58c9c4476",
        "cursor": {
          "ref": "711605ec-653b-4498-b51d-58b3d44da060",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5bbb6b0a-b7aa-4f95-9262-e61365056158"
        },
        "item": {
          "id": "f8b9d21a-f61b-46b2-a120-5ad58c9c4476",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1ab4de92-8624-471d-a937-1323a475cc09",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "6fd2090b-19c6-483d-8cd8-64e8ca1009a2",
        "cursor": {
          "ref": "ba2ac092-a44c-4256-aca7-0ade03eacbf2",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "77e062ef-b633-4fa5-ab29-5bba158edc0d"
        },
        "item": {
          "id": "6fd2090b-19c6-483d-8cd8-64e8ca1009a2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "775a5131-2f9d-452c-a27c-f9571029e21d",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c6879338-e569-4b4d-bcc9-9e1ef01182f7",
        "cursor": {
          "ref": "72dc54ee-5470-4dd0-8fa1-176c2d24d960",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "15d73da9-d50a-4dfe-b08d-7b87a5d98db8"
        },
        "item": {
          "id": "c6879338-e569-4b4d-bcc9-9e1ef01182f7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d8f02d70-c78a-48aa-ba76-27bddee3bbb9",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "701cdb11-ee3f-407b-b507-1ba257ea4c26",
        "cursor": {
          "ref": "df65d1b8-34f6-4308-805b-f52c9447b723",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2708ee5e-1b1c-4412-91d7-58362ad82d96"
        },
        "item": {
          "id": "701cdb11-ee3f-407b-b507-1ba257ea4c26",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7c6ff2e2-c3a8-47d0-a5bd-b8c404680ab9",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8b99cb45-d0df-4fa2-bbc5-d705676f150c",
        "cursor": {
          "ref": "104bb1ac-5ba4-425b-a8cb-c5066a354c11",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7fdea574-f820-4863-8c06-61cc3a5eb6cd"
        },
        "item": {
          "id": "8b99cb45-d0df-4fa2-bbc5-d705676f150c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1e2efba9-0f57-4998-96da-7c5aa9f679ce",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "184ecd47-635a-4e7b-a1f9-66c3bb3c0157",
        "cursor": {
          "ref": "3dd335fd-df3a-42f8-9a6d-875b1b25a53b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bb753055-2f32-4819-b8cc-bc514381e68f"
        },
        "item": {
          "id": "184ecd47-635a-4e7b-a1f9-66c3bb3c0157",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c5850df7-0f5f-4fe0-852e-811f906f4fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea73fe3-b0b2-460a-9312-4e8806e271c8",
        "cursor": {
          "ref": "a3351269-f957-4173-8c39-2b1764725554",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6a0f9daa-6ed1-449a-b210-b8659126ccfb"
        },
        "item": {
          "id": "fea73fe3-b0b2-460a-9312-4e8806e271c8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dfac209f-d845-4dba-b757-b7e17118a0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e691736b-73fa-4327-8695-31324a95846b",
        "cursor": {
          "ref": "6df38a1d-8d67-4752-b9ec-904057a79dae",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6220a05f-1d0e-49bd-9657-9695941539fe"
        },
        "item": {
          "id": "e691736b-73fa-4327-8695-31324a95846b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1341189f-b0f4-4af2-b894-c05615a00057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1591178-54b0-4cba-83e1-ff11a45dd915",
        "cursor": {
          "ref": "048af752-81ab-40c7-b1a4-0718c8a82fd1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1124645e-643c-4c28-b6be-2c4bdc8d5871"
        },
        "item": {
          "id": "d1591178-54b0-4cba-83e1-ff11a45dd915",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e3ae2e1e-bb52-41ca-bf7c-2c2632ac227c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ed729b-8c3b-49c7-b169-7aeb2a5950ff",
        "cursor": {
          "ref": "160a3002-cdef-4801-aa8d-a7f73ce9c533",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d2cd8e75-9bd3-4198-b2d8-1e212179df7d"
        },
        "item": {
          "id": "65ed729b-8c3b-49c7-b169-7aeb2a5950ff",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9c7a29d0-2421-463b-8850-50063fcc8252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb00084-495a-4887-97f4-d9eb573a9e52",
        "cursor": {
          "ref": "fbb5b267-2fe0-4812-9424-86052320aafc",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "60fe7a54-b1c5-4e76-b81d-69e5443ba593"
        },
        "item": {
          "id": "4eb00084-495a-4887-97f4-d9eb573a9e52",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1937db3a-d8ab-4bc6-a346-3c7aa8489782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ecdff1-5603-49e7-96dc-84bd2a831a9d",
        "cursor": {
          "ref": "8fed89c1-e93c-496f-b0f0-84808b394e53",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cb9f765f-be49-4e11-bc6e-5eeb6f5d45b2"
        },
        "item": {
          "id": "29ecdff1-5603-49e7-96dc-84bd2a831a9d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b16a5e1c-702c-41c6-9196-bf5b9c48a65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542464c7-c85d-4be0-a1c4-3b6cab5ea276",
        "cursor": {
          "ref": "1ffbd937-4d92-4bfb-85b8-eb92bdeba101",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4d394908-d229-4d95-b1c6-3dfda2b7004b"
        },
        "item": {
          "id": "542464c7-c85d-4be0-a1c4-3b6cab5ea276",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1b748012-f654-4755-bcbc-4bb70dea43f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df104d5-49a7-4a54-8959-58c109381c6f",
        "cursor": {
          "ref": "13ed3420-b3e0-4820-be88-6b17c40f8b29",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "35806dae-15bc-4a29-bc3b-f287bb8872a0"
        },
        "item": {
          "id": "9df104d5-49a7-4a54-8959-58c109381c6f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5046380d-299e-4cc9-bba5-89b8a208834e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa5d707-3254-4c7b-b806-87e3bb3521be",
        "cursor": {
          "ref": "a3f04322-80f7-4862-8cc5-91258933f9bf",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "028fb0fd-49e5-45b0-af36-af6ac4e25068"
        },
        "item": {
          "id": "0aa5d707-3254-4c7b-b806-87e3bb3521be",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1e0bc317-d14e-450e-a4fc-b515f141feaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163345d0-b492-4927-adb6-b46120e76f39",
        "cursor": {
          "ref": "934f90e8-8598-4710-aa2a-7e91b4250966",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8c96e362-55f6-47b2-bb3e-49c11fbb4ad6"
        },
        "item": {
          "id": "163345d0-b492-4927-adb6-b46120e76f39",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7d0c5f1b-ddcc-4f2c-9a5b-97fdcc9553d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd60d6-695e-4757-8101-b2663330d4cc",
        "cursor": {
          "ref": "8fc474f0-4529-40e2-b0ea-aef6642a2946",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "647b1013-b39a-410a-b2d2-021848c9c713"
        },
        "item": {
          "id": "29fd60d6-695e-4757-8101-b2663330d4cc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8654b43b-9701-4275-8931-25c125298905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791bb38f-85ff-4aa6-bf65-69f1163a5ab9",
        "cursor": {
          "ref": "87cc03bc-e22c-497f-be61-c2f2666a2249",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5a3f4053-e4c5-4dd1-9ffa-7ca53f9f75c3"
        },
        "item": {
          "id": "791bb38f-85ff-4aa6-bf65-69f1163a5ab9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "28342196-0d82-4536-8b34-9322ad951f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33e1fec-1176-4c7d-80b0-1a7feb7872f0",
        "cursor": {
          "ref": "168cbb94-566f-4b1a-804e-3ba80bee6194",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b8320bc0-0fc9-4e49-8e5c-260a810f62f0"
        },
        "item": {
          "id": "e33e1fec-1176-4c7d-80b0-1a7feb7872f0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "630ecd65-8717-4f2c-a1ee-b4a0569827c1",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7db2b396-7848-4489-97b1-3ee6d6af713b",
        "cursor": {
          "ref": "787242da-3f64-45f0-98a1-55c178ebf2ee",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7acfa92c-1cb1-43cd-bc58-ec77dbf6b378"
        },
        "item": {
          "id": "7db2b396-7848-4489-97b1-3ee6d6af713b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d05294dd-7232-4f51-a361-15c1374e612a",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b1440781-7f34-41a0-9d04-72de4f6e0805",
        "cursor": {
          "ref": "9de6e793-e2a2-45a5-8782-0345efc6d882",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "153ecab7-fad0-4055-8507-a7914e3e4337"
        },
        "item": {
          "id": "b1440781-7f34-41a0-9d04-72de4f6e0805",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a198e513-fe9f-4222-84a4-a80d5d1bea6c",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2c524aed-0492-405c-aef7-d46c607e5345",
        "cursor": {
          "ref": "d5de7355-d6bf-4e55-b06e-92a8ca015aab",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4f8b8bb3-24c6-4abf-a951-a0ed73c6f6d4"
        },
        "item": {
          "id": "2c524aed-0492-405c-aef7-d46c607e5345",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "968609ae-112b-4af9-b1af-7f4fa440a417",
          "status": "OK",
          "code": 200,
          "responseTime": 211,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f548f29a-582a-425c-bf0f-50e10357475d",
        "cursor": {
          "ref": "f00727a2-0a1e-4609-a543-64c60f0a63f7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c9e52ec9-63b7-4e18-800e-9be7916d45e7"
        },
        "item": {
          "id": "f548f29a-582a-425c-bf0f-50e10357475d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c888718d-311b-4609-bc27-4c2f44e90b3e",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "487e2603-1fc5-4b03-a672-a0f4f95a69a5",
        "cursor": {
          "ref": "95d9bd2b-f2f6-4c2e-a58d-82416b872605",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "28312caa-ba5d-483e-add4-18a38b5ec348"
        },
        "item": {
          "id": "487e2603-1fc5-4b03-a672-a0f4f95a69a5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2e284ce6-7163-4e0b-97e7-2c96d33a5288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a472ff-5b83-4c83-b6f4-53528d14fa36",
        "cursor": {
          "ref": "d13a30d8-8650-4bcb-9217-37b627090e55",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a0868c88-3229-4785-990b-40b9a32226e2"
        },
        "item": {
          "id": "a4a472ff-5b83-4c83-b6f4-53528d14fa36",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0699c6f6-8d7d-40f6-84a2-a345750e2735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb68ef8-ca12-4cea-b73f-263facbe68cd",
        "cursor": {
          "ref": "92a588f8-d3d2-4e09-8b4b-0f16a248d6fc",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "04ff5dde-e16a-458d-8623-c1aad5737a4f"
        },
        "item": {
          "id": "6cb68ef8-ca12-4cea-b73f-263facbe68cd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "70d6aacb-3f5e-4243-a730-7433bd7e23c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfdcdac-5244-4729-a827-c936bdd86299",
        "cursor": {
          "ref": "efda9260-3869-4b58-b2f6-e0f67cc08445",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4359fc19-78b4-45fc-9a8d-a66b6493b188"
        },
        "item": {
          "id": "5cfdcdac-5244-4729-a827-c936bdd86299",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1a9b3738-8f84-459b-85ad-4c6de6a153bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149b163c-9364-466d-93be-c4c4f0809458",
        "cursor": {
          "ref": "deb6117e-139a-48dd-b785-99861db36caa",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6509a33a-a8e7-49fa-befb-446acbfc3a05"
        },
        "item": {
          "id": "149b163c-9364-466d-93be-c4c4f0809458",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5a64a595-e9ad-4327-bb95-aa5aae43efba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0845ef92-d793-4bc4-b818-6303a386c11a",
        "cursor": {
          "ref": "fef87ed5-633c-4405-9a8f-cedf60b49056",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bff0dcdd-34d8-4bd2-9c3d-6b19f0b38143"
        },
        "item": {
          "id": "0845ef92-d793-4bc4-b818-6303a386c11a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0f02e967-cbee-488f-9138-6d4527e42297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306a1a3e-2c01-4bba-8e1f-e7f883df65da",
        "cursor": {
          "ref": "dc3b674f-80f1-4a53-a0b1-9abc3fbf0b68",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9843fd27-9bfb-498e-9f64-34b3f49a8553"
        },
        "item": {
          "id": "306a1a3e-2c01-4bba-8e1f-e7f883df65da",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "010378fb-cf76-40a8-a231-3702d10e09d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d1c28d-d299-4981-a109-c7f2450a19a8",
        "cursor": {
          "ref": "08295b06-a513-412b-ac98-788719313412",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1df4fe58-7b26-4c2d-9e5b-2fd2b6a8c294"
        },
        "item": {
          "id": "b0d1c28d-d299-4981-a109-c7f2450a19a8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ed8b14e6-b4f3-4b0c-a646-47d01cd6d65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472ac45c-362b-4579-a850-0c8af67f1f1c",
        "cursor": {
          "ref": "f0282690-db3e-4cff-9427-45c690d9184e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b3a1eee8-8a57-4386-8ceb-064043d85d83"
        },
        "item": {
          "id": "472ac45c-362b-4579-a850-0c8af67f1f1c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "da6272c2-3a76-4c50-bad8-bd8a51a2d225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d40f4b0-0d94-4a38-8dca-acfd7a55ae49",
        "cursor": {
          "ref": "ae089bb8-2380-40bf-bff1-6f4e52756f2d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "87a07d22-c5c4-4e26-8dfa-603bc4a6c587"
        },
        "item": {
          "id": "2d40f4b0-0d94-4a38-8dca-acfd7a55ae49",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "aa7f4420-ad0d-43d7-9fcd-7bf7b991f653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a94f8b-025f-47f7-8624-4619e54f9f31",
        "cursor": {
          "ref": "2a75c0be-5a51-4f87-96da-c30f94cf5276",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e6b3f684-382b-403a-87f4-bdc0ac5a9ac9"
        },
        "item": {
          "id": "89a94f8b-025f-47f7-8624-4619e54f9f31",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2fd79025-a3f7-49df-88ce-2ac669d87af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf678bf3-2587-4039-9654-fce30747fbd0",
        "cursor": {
          "ref": "41818d6c-f4e5-481c-9562-da47f1b21f18",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "461c186e-6a10-4153-9910-15d741c880da"
        },
        "item": {
          "id": "cf678bf3-2587-4039-9654-fce30747fbd0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a7e1f32d-d803-46f0-9f2a-9fcd4513ae75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58eb1c1-3ef0-4002-83a7-1c01839b07b5",
        "cursor": {
          "ref": "0908dea3-877c-430b-9734-00573eb6163c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bfc0f828-08df-4eac-a911-f7a29cbb68f9"
        },
        "item": {
          "id": "e58eb1c1-3ef0-4002-83a7-1c01839b07b5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ece51c59-1052-4320-809c-8d1c35aa8a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d10cf3e-6c73-4133-8df2-553665e319ae",
        "cursor": {
          "ref": "a71297cc-e4b3-46f4-9298-e9ab98acb351",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f5f8f154-268b-4045-a1d6-04cd40dc2cb6"
        },
        "item": {
          "id": "9d10cf3e-6c73-4133-8df2-553665e319ae",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f137563d-283c-4d6f-b5d2-6f9567c7402e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234f4d16-0e8e-4b9b-9356-3c11d0ccebde",
        "cursor": {
          "ref": "9cd31d7e-232f-4ed9-a597-588daddc9b00",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e8d278f2-1687-43e3-b822-034e83726316"
        },
        "item": {
          "id": "234f4d16-0e8e-4b9b-9356-3c11d0ccebde",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "579a5a7b-cdd3-42cc-aef1-8e79d16b2078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ae48dd-79cc-4625-a054-f29952c24b8e",
        "cursor": {
          "ref": "e3656824-1dd8-4b82-81b3-9da424b0874c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "cfb55280-23a1-40f8-865e-1d80536ab698"
        },
        "item": {
          "id": "41ae48dd-79cc-4625-a054-f29952c24b8e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ddfea348-05ae-47aa-9f6c-c80250cb4508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4c32fe-abca-48b6-b635-c795fcbc595c",
        "cursor": {
          "ref": "02ee5377-ecb7-463a-9bd4-fc6fe7caa82c",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "035a8693-0b8a-4434-8399-4df8476d1568"
        },
        "item": {
          "id": "ef4c32fe-abca-48b6-b635-c795fcbc595c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3ab76d29-2b4c-486c-b4c9-5fe586f3810b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1f0a0f-9449-4a97-9855-b5251c378a44",
        "cursor": {
          "ref": "ffde3a40-92da-4c81-997a-2e08872b6e19",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b615df94-22dd-4f97-b866-620b60aac233"
        },
        "item": {
          "id": "0d1f0a0f-9449-4a97-9855-b5251c378a44",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2842e635-ad97-4ec1-a024-1b6b08dead1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1f9ff3-a158-4a17-bf63-bae3580a9e63",
        "cursor": {
          "ref": "c632d297-9028-402d-94b0-d16eba70286b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "95a53449-8050-426a-ae9a-3a2d1e1cc7f5"
        },
        "item": {
          "id": "fb1f9ff3-a158-4a17-bf63-bae3580a9e63",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "88b11808-3dbe-4759-bd2e-11c6f5684eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9622c920-2d1e-4451-99bf-5723bfa5b3cb",
        "cursor": {
          "ref": "a5b2d0a5-1eb3-4b64-9094-78be80f6e9f0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "aa0023be-7af5-4a16-aa82-acd9cbbd3d0b"
        },
        "item": {
          "id": "9622c920-2d1e-4451-99bf-5723bfa5b3cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9ca891d9-df60-4a4c-8505-607d4dbf6c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fb69b7-2315-4b84-846d-164ba5d37680",
        "cursor": {
          "ref": "ea45caeb-b06c-4829-bc9e-632e7978bcb9",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fbcbbc15-5881-498e-916d-0ee7f2c8d842"
        },
        "item": {
          "id": "03fb69b7-2315-4b84-846d-164ba5d37680",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7165b921-ff1b-4a6a-8872-b70f0bbb1f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c88d3a-9f8a-4245-bff3-264d9a597ccc",
        "cursor": {
          "ref": "6c4b8fde-8950-4331-941e-28ff71d73df3",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c8bf7c8f-a710-4cd9-a0a4-000f96f1b373"
        },
        "item": {
          "id": "31c88d3a-9f8a-4245-bff3-264d9a597ccc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dbe9fe5a-fbda-48f5-b9d3-df4d1ba5433f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f1c486-b3c2-4628-bb23-5273709ad879",
        "cursor": {
          "ref": "3e889399-9af0-4285-9f28-9536970f582c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c49f962f-bd61-4194-bd29-b535eaab6cb1"
        },
        "item": {
          "id": "39f1c486-b3c2-4628-bb23-5273709ad879",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7ac4966c-e801-4718-a35e-abf09a839c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063f716f-4f17-48b5-9332-f1773f6860e8",
        "cursor": {
          "ref": "533a5dfa-2d52-4510-930d-5c53811c1764",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "dd18cb55-2b02-4bcf-b8ed-7dfc62e4032e"
        },
        "item": {
          "id": "063f716f-4f17-48b5-9332-f1773f6860e8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "89bb3bb3-c1a2-416d-a8e5-8a25f9eeb699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928957b5-a199-4f8a-bb9b-8a8ca85583a5",
        "cursor": {
          "ref": "d37a80ee-7026-4b61-a753-a5198b8bd8e2",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "79b9e96a-fed6-42b3-ba85-f6125ba045df"
        },
        "item": {
          "id": "928957b5-a199-4f8a-bb9b-8a8ca85583a5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b0d04480-73c0-4ef1-853b-15574c8268e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f429b7e3-fa58-439f-9599-cf1098c99407",
        "cursor": {
          "ref": "ad0ce2a6-347e-4faa-a5d5-78f9a0c223ba",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a8410e03-a95e-4374-92df-3876a9ec905a"
        },
        "item": {
          "id": "f429b7e3-fa58-439f-9599-cf1098c99407",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fab9eee5-1caf-4da0-91ba-4a19c9fe163c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd8acb2-8081-41dc-a8b7-e06d2111022a",
        "cursor": {
          "ref": "2d41c9c5-bb95-44b6-836a-c4edc0e4e0d6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "09a31986-ed1c-4dcf-a683-f1ac32e9e8d8"
        },
        "item": {
          "id": "dbd8acb2-8081-41dc-a8b7-e06d2111022a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2b43d1f2-e2fd-4390-a2da-6078b84d95cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832c142a-046c-4781-8439-af49d59b5696",
        "cursor": {
          "ref": "7c651ae0-134f-45b6-a430-38fc9d0852bf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b29dfc40-568e-43ec-97df-bb18de8f9060"
        },
        "item": {
          "id": "832c142a-046c-4781-8439-af49d59b5696",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4e069c91-9980-4421-89da-47073e5b75f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d65ec12-0227-4053-a389-7be279003e71",
        "cursor": {
          "ref": "c7f58626-6b08-4ac0-bc67-4852940ba852",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "92c6632a-e968-4c75-945d-20b393045843"
        },
        "item": {
          "id": "7d65ec12-0227-4053-a389-7be279003e71",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "53155b8a-32a0-4b83-9193-af58d15b3a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f99222-12eb-4389-b5d1-37976a99a8db",
        "cursor": {
          "ref": "c253aad5-f0fb-424f-bb61-47c89b7709d7",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ae7bff59-bf07-4786-873a-6f458fbbcb25"
        },
        "item": {
          "id": "b6f99222-12eb-4389-b5d1-37976a99a8db",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5807aa43-6e7e-4a20-a06a-3c6f8ff5c2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a60ce7-916e-45fc-aa54-914b34aae6c6",
        "cursor": {
          "ref": "7bbb1b40-452c-4a92-be6c-1f10765f430c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "91ec6e84-1163-434f-8e28-3f024ec5cb8d"
        },
        "item": {
          "id": "42a60ce7-916e-45fc-aa54-914b34aae6c6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "108e4c05-4edc-4106-871b-2f696e61724e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d6911d-6020-4145-b097-3d67598d8949",
        "cursor": {
          "ref": "31186288-d375-4bf5-80ee-47651fe7ae3d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "60296136-d96f-4364-b825-f7738b25cebc"
        },
        "item": {
          "id": "d4d6911d-6020-4145-b097-3d67598d8949",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "065da6fe-5077-4879-b62d-7ec02f09d462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b35ce5-830d-4725-bbf7-f8f9480f02b9",
        "cursor": {
          "ref": "7639eafa-2f15-489a-8a25-3c08fdc22f93",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "dafd285a-207a-4c5a-8f0d-b35e097655d2"
        },
        "item": {
          "id": "59b35ce5-830d-4725-bbf7-f8f9480f02b9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "875f7267-896b-43aa-a092-0703243365dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b68db7-6268-4d12-9c36-ed6f5d4a64ee",
        "cursor": {
          "ref": "c6f5e2db-978e-4d84-9a43-a4c883d32535",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5b4c02dd-bea2-493a-bd81-d21555c4710e"
        },
        "item": {
          "id": "32b68db7-6268-4d12-9c36-ed6f5d4a64ee",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f614661a-78fe-48b2-b426-bdff3e696cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f57240-31d5-4e69-8cc2-ab2878db6321",
        "cursor": {
          "ref": "8db1f6ad-e37d-4502-b8f3-fc28742d9081",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5d32755b-f2ee-4819-99d2-75a24567f70b"
        },
        "item": {
          "id": "d0f57240-31d5-4e69-8cc2-ab2878db6321",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "41b77b2e-f7b2-447e-86c0-f8a4bd7d675a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2a4039-29d4-46af-8b91-c8107a1c53dd",
        "cursor": {
          "ref": "5fed0a33-33e7-4ece-90ce-6c75d02f7864",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "47c02835-a504-4672-851f-38863fbc487c"
        },
        "item": {
          "id": "8e2a4039-29d4-46af-8b91-c8107a1c53dd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "da50a8a3-9985-40e9-a58e-7043489d8b8e",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4f759bc9-dd3c-4ae8-978a-1a8856b54f61",
        "cursor": {
          "ref": "d07b32de-f300-49a5-aa54-27017fcfe9d8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8b3a6e5d-8e34-4018-ab81-effbba898b8a"
        },
        "item": {
          "id": "4f759bc9-dd3c-4ae8-978a-1a8856b54f61",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ddd7904a-4f49-40db-8146-e4028d504d2b",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "99779277-4968-4b54-ae6d-263349aada31",
        "cursor": {
          "ref": "337f561b-b523-447f-9877-1e0951d88d32",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4693dbe7-b9ed-4291-bdf8-eec9f6977090"
        },
        "item": {
          "id": "99779277-4968-4b54-ae6d-263349aada31",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "527b9ead-c90c-48aa-ae56-b1be0605a687",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a9967b-8783-44fa-a207-052dfdcd86b3",
        "cursor": {
          "ref": "1a098d3a-4b5e-4370-98a9-322d5187a4b9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7755eb17-522c-4221-8fa1-a112665adbeb"
        },
        "item": {
          "id": "b4a9967b-8783-44fa-a207-052dfdcd86b3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99f8f226-8958-44cb-9400-f3f472c00eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a9967b-8783-44fa-a207-052dfdcd86b3",
        "cursor": {
          "ref": "1a098d3a-4b5e-4370-98a9-322d5187a4b9",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7755eb17-522c-4221-8fa1-a112665adbeb"
        },
        "item": {
          "id": "b4a9967b-8783-44fa-a207-052dfdcd86b3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "99f8f226-8958-44cb-9400-f3f472c00eac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eaba193-c994-4c28-abc9-8c59ede951b7",
        "cursor": {
          "ref": "488b5290-6041-4126-ae6e-f2c642ced980",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7d107cbb-a337-4792-8b1a-b61df9bacf82"
        },
        "item": {
          "id": "7eaba193-c994-4c28-abc9-8c59ede951b7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "166961a7-e000-468e-af92-02112b348b24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d3381a-dde1-449b-9ab5-7655434c9f99",
        "cursor": {
          "ref": "270e86de-f447-46da-8ecb-ee1bea764439",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "15af9fb9-7f46-4156-9d7f-50de4b2a952d"
        },
        "item": {
          "id": "d1d3381a-dde1-449b-9ab5-7655434c9f99",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "db6298cb-9393-40da-bb8e-b161d675b4ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}