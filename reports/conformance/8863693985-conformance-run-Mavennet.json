{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cccaa9fb-909a-4c30-97ca-6d007d75f65d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5d721c3e-dd50-45ac-b999-8abe44779438",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8d9fdbd-a1b2-40f7-adaf-c7da52880127",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "27b7bfd2-4990-4fe0-9ec9-e017273f68ea"
                }
              }
            ]
          },
          {
            "id": "6edfaf02-cf7d-4bc8-a7a0-ed0c5fe6cae2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b16b3ed-6c24-4215-8716-c4f5f785aa4d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f6c0d661-6268-45fe-ac68-985f3bf7c551"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6e14d2e6-e5e9-40ec-a34c-6a3cc6a67bd9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bea78128-e6c1-4976-bc6e-a88dbcbc85b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "496721e5-e1ae-43ed-bf65-36cf4a45f853",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8811c4e8-143c-4ee2-ae93-667b4a076d8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86367640-d761-4025-bc2b-e30a8d34f659"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d031081-371a-4550-b8af-bc93e286aedd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9d5bb2d-69e4-43d2-84eb-e72f76422a2e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32255eba-f2a6-4482-9134-36854d63e1fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c9a2788-9a66-42c5-b6db-1435a701551d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "002ecdb0-e4d5-42c9-9d5a-4998bfc16c12",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "02f516c1-e4c8-4340-a315-46aedf04e1e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb87cf66-3902-463c-afb1-247e18477125",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd2e4a36-c819-4c14-9b1f-f611d899bb56"
            }
          }
        ]
      },
      {
        "id": "e42708e2-a880-4fd8-8e1c-08f8a9af05b9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "97269d6f-964b-4568-aa66-ddb8d2a2e61d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d32c7baa-3eff-47f2-9368-a5295bfe250f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c6dd59a-a0bf-4bbe-babc-d78c4d0ca1fb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59b07d3-55c0-4007-accf-13e9a94ba867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e6f20be-cef0-4742-b13c-6bb9191ccf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd8c515-3c32-462f-87ab-ce0971c9b52b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d2aa5a-7917-4a52-b2ff-41745183a4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17d85a68-26cc-4041-a4bb-d4b3e343f987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6969aa62-8160-4a53-ab27-e097e21dac3c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a547d7-c54f-4ff0-bea5-5a0490e5de1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c04cb4e-5520-4343-99a7-d3adcb66e7f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58ae830b-3986-4540-8499-7ffb0f9ed813",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b19a51c-afaf-4ea8-a7b2-3e894bfdf73d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18577b6-53d7-40de-afb1-a5f146d5f19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e40e40a2-f4cc-4f7d-bd2b-6eb57f1b4104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c26577-202c-4726-b91e-6656a7216341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61bdba31-dea8-4581-973f-db41b0a14cee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0a163285-e7f8-4d71-ab03-29412001aed6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ddc9d9f3-66ee-4bbe-98fd-71d4720c84ce",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5711ef6-35e8-4ac9-b3a4-5efb12d8e2e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1dd50764-b82c-4a9c-a764-a3dea2697ef3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a84c3991-1849-4c9f-8905-f42f0ad6de16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8f09d17c-bfac-41b6-86e8-a0956aae9bb1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b37ffb2-2ef5-4c27-8621-7efa42966672",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38fe8903-191b-48a6-bad2-5c5312752c10"
            }
          }
        ]
      },
      {
        "id": "4fb95150-bc9f-45ea-9773-6fb773202416",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "567877c6-d3e7-4ed1-8d9a-806d6b61cab6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5e1b423-bf6d-42dd-9041-f822961ec390",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "12ee1f94-b77a-4aa6-9060-7468ed6f171b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c68ca6-d9c1-44da-a3d9-197b03beaba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb80006-f9dd-498a-b22d-802b592a5c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95eba9a7-a9b7-4386-aca6-4af8d580787e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4689fcde-dc61-4b0c-8655-ba75a686aa4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2357034b-5bf2-4a34-b280-407747f9f220",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabe7c2a-2f30-4d0c-b366-be3099f95929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e1fa98-31ab-4787-b1e1-6ac65016ebc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1f8ad6-2c36-468b-b7d7-13b3c63af39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e9f7dbc-7ec7-4eeb-a447-be16d3bb790e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0656c6bc-3c21-4191-8f90-175ac2478fc3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9267480-56ca-4a36-9d82-b38a01d0ccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da6d4d4-c667-4100-96d7-e0bbeeaac962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9609cff-86fe-442d-89c2-aecb97cefafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5baa0e8b-d547-4bde-a34a-7e2ffe05820b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a015c9-dffd-4fe5-9401-ed7c1545ed10",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d74f7a-421e-45b3-8a7c-ec99e38760ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f0bc9b-a7bb-456e-adc8-3df30b237e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5a572f-e848-481d-a19e-a9d72c51e40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b96c8319-b1c3-4f27-93a2-1328b78ef2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e8ad98-0dd2-4816-a427-d95580ebd698",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b3d6ed-d83e-4147-842d-e1be0fb9bdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e67fbcf-1ada-4f27-956a-068b8d70f03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1511b3-4946-41eb-9cf4-787a6d32ec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dfe1da6-e54b-433a-8bc6-ec7bf055b80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a820d77-053b-4c30-b4e1-a6ad12f8bb8f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2257925f-d2c2-417f-ac1f-d3572092d705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964a023a-beb9-4d76-a5db-8d7cca5a1db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cbf425-4449-46ba-a51e-46b98df930cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "214d5ee7-62da-4a7b-82cd-defa924c00bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fca0779-9295-4ac8-b872-52d9c15a8004",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6810641e-a52a-40a3-a7e4-6e4559ba6d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69957f14-75a0-434a-8b6f-1f1d35a876e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5ba61e-e8f7-4dd2-a6ce-b96c1acca078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c8fc728-be05-47b6-a224-0295801a198a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b8e6fe-08ac-4d3a-956d-b3f5c95b919e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fded0df-fe70-48fd-ba54-63b4d42e638b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca645e8-f2f8-4a5a-99dd-6e4c8a6b4776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169a9a98-3419-4c60-b29a-32c4a9fa9f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d7a4b6b-9239-424e-a2c8-21c9f2bef609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbdf212-19d4-47fb-93ab-a6c35470e4f4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbfe6a0-8182-4270-987e-553b518bb9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fda5255-f6b2-4fa3-8225-5943fcdaed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f058bde5-b205-410c-9983-406fbce27779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7198cf7-2cbc-4033-98fe-fe3361c72985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2c0706-b6f8-4cd0-94b5-c4f6253f1d58",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ce1e4c-80ac-48d8-a7e2-f13d41e1d358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2150b229-3a03-4a37-9325-80a91f405541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795a1dad-e4c0-414e-8533-b1284a630d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5371621-eb6a-4901-8419-3d6b63cb66e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d7cad1-e803-41ae-b987-d44a7fdfeb6d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9e188f-0938-4926-ad7c-56ff1709f2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298c216b-9c6d-444d-ac7b-df96a561b5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6292cc-5ab1-42aa-8778-6604fa83dc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "846a0c06-817a-41ec-b96c-172c3a99b059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e36d09-c43d-4467-b9b8-1d3b7b9e6406",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dddad4-86c9-4e93-883a-7e0a2d59dd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a31947d-fc1c-49bc-846e-2cf45c92a3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5947ab9e-d60e-41af-8fd3-249538f99001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75b049ef-c1e0-478a-8f28-391e54767da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895b3b6a-83d0-4106-ab35-82ce1b71fafd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a4ab23-f48c-4840-afa1-12e959e1c2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e40e19-86bb-408a-b829-16a141f45ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bd9d83-ff6d-4bf7-8311-728662f3c067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e917e1e-d232-4a45-a3f1-5c37c82a9c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579d9eab-3d8b-4253-b9c9-a0386e76a951",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a051af08-5c6f-44dc-96f5-2e8469534722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee693766-2075-4b2d-bc7f-41ef82e442c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d774866-e202-4063-b555-0b38f138fc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a31163f2-f80a-4a7f-aba5-02ee9e72a968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a601431a-e623-4232-8cb0-ecd49a19839b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09e15c4-9572-46d9-b0e9-4bca2d999970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1357012-7618-424e-8baa-c984cc97470e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2a3f34-2de8-4cb0-abff-c783b08e0785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c708e25e-33c7-4a1f-a39e-6e8fbc5256a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6557911e-7864-44ad-961f-475c59545b82",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ae9b65-b9d4-4972-9927-e0ee683f5e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7564ea10-5e09-4aa5-b572-d8ecd163d812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939df8c6-1193-4cc4-81ff-78eb3fd3cc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c5f485c-441b-449e-aebe-80496329799c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b278d14b-e19d-4c6c-8db8-67de65cbb39d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803a019e-1fe0-4212-8e89-7b8e1b7fcd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26206c73-4a57-4274-89a7-0023d73c4c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f45eb95-ef06-4761-87fd-3e2fdb4e3173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1db3ced-1f35-43c2-8199-cdbbbe7c81ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a939e7-0e9b-41c3-9531-a301f3dc0b8b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b7585-9878-4e4f-a4b3-5aad19c134fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c43eee5-a7e8-4f07-9c95-56da927391a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcd6fc8-dc83-4270-9865-1bde082ff4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef921e2-beff-4def-a5a1-fd8e6319c1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87865c1-9213-4fc8-9cfd-dcc5a2866c47",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c50704-f23d-458f-9d9d-d075b0fe6e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e59c779-4249-46dc-b222-35e20a2afb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8d41b1-4bfc-47fd-9147-1764e9f9c21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a09d9433-6042-4f66-b2ec-86a2dff5ccc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e3138d-c9b4-469c-abb1-8b1303e01b4e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93ee796-06c3-4a58-a3b4-fdebadd9d7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8163e5a-30e1-4849-82ab-bbb4dce665c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3f43ba-4072-4001-9d69-4612da454312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "767a3519-2ff7-4ec2-99c9-fda56a195140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba5a8fe-28b3-4086-8344-8149f49505d8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a18668-ccbd-4d59-96c7-22bec5b6fd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b7964d-1f24-4979-84e7-562afd81e961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058b2b80-2c48-4e11-b094-c30c50fc4bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6a465f-6388-4e20-84c9-10aedfd5e23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06464d5f-433d-4b1a-b666-7a834cb657d8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba6fc97-8256-402c-af79-8dc897c0b3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01918dd5-ce85-4910-8923-c07454b35cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549cf73c-23a9-403d-891e-413bbe8b6e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cda305b-3769-4e7d-a36a-556a8d2597df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697fc331-f88e-4ef7-a0f0-ed091f01e635",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfc014d-d305-4eab-b949-e82164bb838c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccc1f5a-5f59-4fe0-96aa-a4631b8d4e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12a0ff9-80af-4ef8-aef8-1bba22a7e292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ded7644-7040-4105-9be5-6e0b23ef2186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decc939f-4063-4fc9-b9bc-8d29426f2f8c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e96ddd2-51e2-44b8-9831-a130d356d289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ee6132-9df0-4f62-9639-cc53edf2d30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5a46c9-f8ff-48b6-a080-27dba9f252d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5aea579-18f4-47f3-ab53-7f6b6f44682f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b71d3aa-8ab4-49c1-be47-8a4ba184bf00",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a28e3e-039c-47a9-8823-5e6a8ab3526d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e844bc8d-a376-409a-b2bc-41001747f736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ccac48-ec5e-4266-ad5b-6d224cc45308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcbbb149-3a77-436c-a430-e4e3048ff2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdc344e-ab06-4960-aa70-8cdec4d59631",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0fc918-d06b-45c2-a0b0-e1d1673f6041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac77a03-516e-4983-b4dc-67b8cbd1329a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1698868-2578-4226-9e4d-95702dac973d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5377aa2e-cab4-4844-93c2-80248b3c004b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4df047-dd55-47bf-8cff-915d33ff57d9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd4148f-650d-4874-a5e1-33cf7f86a1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e7017e-2222-42b8-9b2a-c4cca929d7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd0b8c1-2536-4a3d-9643-ac81dcbd3913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87582007-4cbe-4a40-91b5-b5ebb59809a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267c3680-a165-48d1-a669-813422bb6ef5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f7bdba-2416-49a2-a0a9-0a4801d8c794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fea5b9e-a675-43d3-9967-7db726939aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abf7887-c0eb-4405-95f2-a954a9547bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73f009a5-7fb6-470d-b137-859857a68205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54156780-4007-4759-bf8a-48ad35eaf2d0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017520ca-8904-4f6c-b98a-9a8e9d72fae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438265ec-3d91-475c-b5e3-fd318a0c70bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd026bf1-7683-4aa9-9cbf-c18166f4b63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8fb4a4-149e-4980-9cf3-68a568f54bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3dcb5c-a231-47bf-a273-f608bb84fb5c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f671cdf9-8f39-49c3-8c84-ce89598248d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a127ac85-ad3c-4959-9f01-f151dc9024b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0f49b5-2706-49e9-a557-1cdaea44f03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f611de2-325a-42db-ade5-f0931965b8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65b51f4-8f29-45ef-b388-ff9125ba0a34",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ce32f6-b94c-4cc2-a9a2-f3dab8939f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de45824-8243-46d4-aa5a-3cc350fc2aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81e8c0b-ec70-4fdf-acc4-c86ebdb3e839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dea8fff-dca0-4527-9cee-b618754ad99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a155792d-bb44-4949-97ce-f8f2a639d721",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124bf065-7a5f-44cb-82ed-923f69aec588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386602c8-2aee-47ea-b696-3c61a6f50377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7af549-c5cb-459d-b66f-3222fa6fcd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d879f686-d634-4d38-8f1c-48d6f9b7810d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddf8962-6883-41bc-8e2e-7d14d6d40537",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c9a076-7119-4c36-b66c-2a8d65fddbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731d3390-4460-4d59-933f-f8da74fa64b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350e59fb-c35a-49c0-a278-d549cf4e7c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "938dc2fd-1d87-4b92-a04b-b3227eb0d85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71568643-8af9-4b9e-bbe7-1c453ef63cb4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69ace49-c8c0-44d2-b355-2163e050286e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb23795-2ec5-4817-be81-ebc3c892164c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecda0e1-8311-41f9-ae2f-f75388388d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a10f6037-d90b-4bf8-b8c7-a11c968ab963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e65122-144d-4079-98ab-6f47119c1b3e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e16f02-b1a3-43c1-86b3-9ccab1da4eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0ed310-67b8-4da0-8b5c-2a102e66abc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e947bf0-183b-4eed-8542-7d09162950db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d018c9d3-6688-403c-ae7c-dbfe0edf477e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f639984a-16b7-4e3d-ae8e-9a072219c026",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298fbb5b-df47-4d76-9486-bf4db5a5bf86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c6766c2-b449-4546-be2e-c24ad9ac7f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130ff9e9-2da4-437d-828c-a0b257527405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f90e69c9-91e2-45c3-837f-b9252c0de7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6f11f9-97b3-4014-962e-8a5bf6330a81",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35084e5-4eb5-470f-9fb1-adae090eb09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ce1223-65e2-458b-a18e-a5474f7b1f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de5b77e-4d35-4363-b3e6-af0763d013db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86e9248d-21bd-4cdb-8258-2bcd5ea36848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6b0041-7057-4000-8d83-5434882dd905",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b3c47c-a678-4cce-be67-8c12a7a01061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72201bc5-6f5c-42ab-acb5-275e36f7a8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee9c12f-64a8-4c05-8ab2-c2222e26d74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "23c31397-8bb7-465b-8fbf-f9300587131f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2a8aec-5245-4d61-84c7-e9c8a791cc43",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0125b62c-f9bf-400e-b206-73e86ba2597a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbf2351-9c03-4021-a20c-b7eba9d154a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059cda57-15eb-4c13-a14b-f99f8b1b61f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1757f2f1-2aae-42da-a5f1-697f9ab168f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b114c5b7-8959-47f5-a955-cbedf3138c96",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9252ab-c7b2-4525-87a3-e147418aaf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c1a84c-3a7c-4040-8118-6a501b011801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab7f782-1682-4924-b922-408fdcee5cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a979c085-2284-43e7-b9bc-ec850f1e4b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0a7fa3-8770-4ea2-bcec-d7ca6d849def",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79c44fd-c72f-4bc4-91f8-3b2ee6cd208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3cb8e5-ef9e-4b3d-a745-49324b09f7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e94c27-9015-4827-88c9-851e1c7582da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "28414a1d-e78f-4106-8281-9caf686c9df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ebb29-7f05-4b7e-8c3c-9d5fbfec3d43",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd830350-310d-42a6-a51b-0b9f71913d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644c3ed8-9a01-492d-971b-4a58488ec4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744ce25b-f2cc-4751-acac-5f5267602c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c42e6f3d-ba6e-48d3-997c-a58d954e2ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8caba7ea-d1f5-4c90-816c-43cc50d3aee7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65de0416-118c-4fcd-8c04-f7adb40971c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e829f9-84fc-44c0-8028-ad7592b2ba99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f987800a-6f04-4413-b509-3ae1d7208aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8abf9f-7c24-4fda-8aca-c51f292c2ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480bf17d-d9a2-4707-8e65-ac86d7f62581",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99abbfb3-93d7-41f6-8c2e-440a1016f0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71d6118e-b4ef-4040-945e-ce9e95a7cbca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32fc38e-804f-48f4-befa-c399a66cc8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d34786a1-f0db-4aac-ad40-37852748faa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819cd8bf-03ff-4c27-b467-f66779f03cc8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896b732a-124b-4f95-a311-ec4d2617ec60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5035796d-ec07-41c5-bf22-49b7d4ab8d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b6546-7286-4fc3-a14f-eaa7084b9257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eee75d2-40eb-4cfa-97d8-15f2a97b1262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fed340a-5be7-4331-b093-29ed95ac2a0e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24b897c-e684-4c75-b842-f6087b396a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19529e3e-f664-4ba3-a0c3-dbc0fa26f5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2bac93-e310-4d24-8ebb-7727b19dbb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82171dc6-26cc-4c64-a3cc-62815538995b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b913f4e3-0dac-4e1a-a227-bf0633ffe626",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe767d9-ad62-406d-b7cd-4c0fa1cb852e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19efc18-60dc-4bbe-afcd-cb1ac4b297d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e2c3db-eea3-464f-94a1-84416ce0c8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb96dc4-bc43-43f7-89fd-3f8fd35e873a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fe593c-1308-4af3-9b76-d3b9bdb79544",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d169825-b5f2-4a24-a6a9-1fceb5f9af02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57096935-663d-4e3a-8800-520c003245a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab64c0d0-8025-4ebf-a836-f9bf925fba46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b31001e0-3fef-460a-84da-f0ca61f339d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3b87ff-805b-4576-acd2-de070393465f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7926bc-7c77-4d22-8e6b-a6e864c5443d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56408ee6-270b-4348-8d37-9ea01e83aa35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bca121-f853-4549-bd80-ffccd611a2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a055343-6f8b-41db-8627-f942a024e63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3bea9e-b64b-4687-b73e-0648cafacc76",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3dc917-f017-4f47-be89-dbdf0f0c4d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a1d6ab-c79e-4981-b140-65cde40ad5e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348ae48d-2ea4-4703-bbfc-3062fe7f9150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2002d2d0-f1e0-46c3-9aa3-88809fc3ecca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79e3d2e-6f37-45f2-8b9f-507a37810c00",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1fde46-7770-4755-872f-84a779a7c818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab817fd-b792-4aa8-9998-5a9b909fb4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a247b31f-4a1c-43ee-9b37-d272d0c6b9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "46619040-3b91-4c10-94f0-ae55295d0fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240e26a6-5b45-4b80-8c19-056ba01a0da1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ff68e1-5b5b-4d03-ac2e-90858c00070c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b76ba62-13e5-4ccd-9d46-d986f1d6e589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c70436-cd41-4626-b01a-c99ac418a4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cee412b-b252-4b76-838c-59a1047f2555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6779b1-e0c6-4e7a-bb9a-6add65475b47",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a254dac-fb4f-4b8e-b8c7-7c3e8f4b771d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4478819f-2b8f-42f5-8895-534f2449d19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83f5dfc-7a43-4c19-8bfd-c18829811c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec5497d-952b-4304-9663-9d01821de80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8aeb1c-ee20-467c-9aa6-9e41079412a0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3bad64-fb69-417b-8e76-8b757740f6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781d8981-4f70-419b-a789-ce6e29f66fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885ba229-568b-434d-9893-27f6914f9546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f448fc7-0e42-4835-a5b1-155ee0846d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1be7448-d5ba-4c9f-94e2-c6560ff3d74b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52aee0-6c9e-4edd-8802-60e8942fed31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44078515-64d7-4fd4-b59d-310ae5b9d8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9372f6c1-975a-45e4-8252-0c53460c6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a41ef072-0a03-4aab-bb82-5197426a33b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cabdab2-634a-4bd8-a651-6165e9f9868c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4234e9-888a-45ca-b294-a3100bac6416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800f8f10-246c-4e7c-90b2-a003571f5c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8df411-428d-4cb1-b7f1-95910ac6de77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c9e5b9-4841-4246-8212-bd19dccfff48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879dee0a-ec98-49a2-b3d2-7f10f7dadcfb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f1d0a0-fdd2-48bf-b85c-ce76e789e109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa10250-d284-4a64-8d47-dedb9994d586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1cab61-9c9d-41a6-986e-2310f4248232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bff90f5d-1c45-4b66-81f1-1b60b07513e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef6b712-6dc1-4b08-8acb-bb0cc6d32fd8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d54e1c-11d3-4794-b218-427298948920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99d13b4-4d58-4cc6-9f5b-4600289b97ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53f71a4-7934-4b6f-88ae-2614326bbdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d17202a-f64a-4f17-aec5-64e4ba770b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af70ac3-3f16-4427-b200-f378fa057e63",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adad737c-16f1-4b2a-8948-52e8d7752b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436fca4a-c571-4976-8d7c-3635c90f48b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3307269-9d7f-4363-b5b2-51b98824d329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae77dbbe-b562-4de2-b11d-2ab41a18ede4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69136a66-1757-4342-9750-96bfdc59cd01",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31c6464-d400-42e4-b7b8-7b764c4bb183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ec46f2-0669-48fe-8cc7-4fa504e57a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ca1ff4-2189-461f-9e5b-78ba7dd5fa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e583a3f3-c7eb-497b-bd0d-b2babdf0c912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f06a546-276b-4aa3-a782-6cb183a5487e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b9b77e-ec25-41ad-9e70-c0f6443b73bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a207a9b-da76-42ef-b784-6efe35278b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b852390-73ed-4abf-9460-a92eaae18089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "55590d76-e8cd-4b75-8f28-10902aa8fdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7dc555-1e3a-4690-b718-179f151d26d0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849627f6-30b1-4043-bb32-f64c498df61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d22a9b9-a741-47e0-858c-733dc997c72f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94393d22-09a6-4df9-ab5e-58d34aa59acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "15714a30-3d8d-4708-be13-d8163e4d1845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808fcc26-549b-40f6-bed4-6822826fc2de",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a426b52-9fa3-4b39-86e8-56cd233a437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f97c75-243c-4a05-9ad2-41302e467d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f83f1f7-fc27-45a5-922e-7d6ed45cf5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5ac1f7-43cb-4fbb-9c45-4f4ee9fb0760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fc6a28-374e-45b2-ba25-d41dbf62676b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8ec560-c457-46a4-b415-94566a913a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5caccc7-7cd6-49b3-a765-eef47b5bda3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63a8b85-78d4-4ae1-9196-f28f8a8a34b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a04d48ed-e2b2-447e-9520-1bb3e08f6c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d00f35-7573-4bc6-9f39-0e8b3d9f0a4d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7779f373-607c-408f-9995-122e22be3ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f479225-ec5f-4231-b9e3-d1349b9aa064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dc4bee-1c24-4ec8-a41e-ac4aa2d58fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae523d0-3e1e-4ccf-a6ef-0795524a7cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fd21a6-a37f-4215-8282-4fb05693057d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d15fdd7-761b-4fb8-8a5f-a5a4bf110348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2e5c3c-7c98-497d-a451-5a818cbcc178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e999bde-3123-4d92-84f8-c3a93017b7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7e1289-7ee3-446b-b68a-e9eaf5d58d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e769c61-8c63-462a-ac8f-00261a7b0760",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9346d4-d787-4a08-a41a-17f7ada2fc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567c8d1b-fcdb-4807-956e-82ed938e139b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da7d20f-4b12-4c3b-9308-fe4a56ceb2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30c69daa-6f9e-4b32-97f5-5a4f4d809086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fc7d03-56d3-4462-b28b-d26b6d385510",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c0460d-0fe7-4124-a3c7-3ff634496744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc8542b-c8e0-4c39-9604-207cc316291d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce1b35e-e81f-4830-ab80-c85aa2dffeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e207d4a-2b32-4f08-9cdd-60d9bb91bde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6f1460-1449-4a68-9b82-9507b53df0a4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301a9e7e-28bc-41bf-859d-1d88d142284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9df3bb1-4c06-4287-83f9-c1e1df55cbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6456d030-bf2c-48cb-94ba-5c85c80e72c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5001a4-1e28-4d13-9c9c-f03a20434a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419c232a-fdc9-48e8-a6a7-0364b23b3cd1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0a3d3e-0d58-4fd0-9b1c-76ccea636f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b77f6c-7bae-4161-925d-641bb0a3801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0043519d-a1c5-4b7a-ba13-1299077772b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "897503f9-dbc3-482d-bb61-5ff5be2d8b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c122b04-3d99-4c0d-bdf0-bea7b456260a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6530ead-aee6-475a-8d04-8fb4a7b69914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b31726-dbee-4bda-b1bb-b4b59c0816d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336a1f4d-94c1-4b05-851a-dedbdb23e3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61fa64b7-accb-4e63-827c-23362cb9b322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa92a6bd-22d6-4627-9a54-0d7ae6607836",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e4066f-72e6-48fa-b8b8-e7618f844545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21945e6c-118d-46ba-acd3-ac6b647989bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00364f5e-edc4-47c0-bea7-a99f11c345fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dade7ad-beaa-4315-80d0-c90fc5d25c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ae7cc2-402a-4fd2-acc8-c36a9049786c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc7dcad-0a14-433b-8c24-24ae8019e043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01123fa0-dc3d-4a51-8003-a158784a042d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaa2df2-5e34-4f30-9120-d0d041c06c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35a60794-d87f-4fd2-8948-8c4f721cb29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2076fc18-303b-46e9-940f-7e5f99bca066",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68ad041-ec28-4887-abf2-5e5cbc82c357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac118ed-4fd7-4424-8863-11eb4833e9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234587be-2059-4ec5-b313-39ccf97d8a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8aeecc-1601-45ae-8ecf-2e0ad9899062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562fa2ee-22fd-45c3-afd6-2c056253d08a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e1d388-8318-4eb2-8053-b3b858140c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b147790-1be1-4336-8cc8-6d58834aab2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b951bb70-017f-41ef-adf6-7ff81c6f7d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "284e8d91-0ac9-46cc-9ea8-a14e899972a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11afee5-3ffc-4420-85d9-778580211756",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e980021e-1992-45fe-98c7-89b1fade9a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978a3603-e7e6-4c17-b704-e4a63eaca6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdec7df1-6d74-4591-856e-9465566cc40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6018373e-2244-412b-92cb-cd577a1648fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a16a99-42a8-4550-ad24-965eb3d6dcb8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64191e0b-0eec-419b-9e5e-6e253b9f98cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bcdd95-d4cc-4199-81b0-838209b963c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582bfbef-fcb8-4ff4-a94b-7029c85873f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc983706-539d-4719-9651-fcab1efdc918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cf3042-8f39-453e-8b2a-1f8755b42d9e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d360580f-c038-4513-a9b9-a4a0bb6b03aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d681edd5-d34a-4433-9f22-cbc754e2d8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9217146c-6d4b-4297-9233-87a454c524c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "461b46e7-3048-4881-a2b5-bb27c6ac1b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc74f7b-bc9c-4a59-823f-b3738b4ac923",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf95cbf-9e1e-4ff7-adf2-5480dce47d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93751e2-2332-4d1e-ba8d-bac0d2f77eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af6ca22-fc1e-4291-a176-5439022697a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3378c1e6-face-44ae-bf0d-17e1aad5d075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b27fb0e-7883-4a06-82df-b5deb0a41b6a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09647e26-d864-438b-9bbb-d6c519f89490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808d187a-ba1b-4b5b-9f47-186bdb78e20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14538423-f9bb-4845-96d3-656f0baaa40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc90da08-14cf-41c4-8a29-ca32f7a067c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04eaf757-7cc0-4554-a344-f1183afea0c9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9169d6-0347-4f84-a084-48ea118fa3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721c3f18-3f90-4a04-856e-e4e4b23080cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca68372-5a70-4789-8343-1f328e583339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c15efe-a2ca-429d-818f-5ead32252d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0df86f-5c3c-4d88-a3a1-5a0a1db9fea8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b29b6c-a094-4558-a690-c36b4db55d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b511c1-485c-4875-9fbc-251bc159bfd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53705131-9adc-4191-bb6b-5799be8a1e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7be7448-e8e4-4bac-9911-5a95ce34f4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da570a36-7895-45f8-9cbf-e0b2a00d4e7f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0cb0d7-80f2-48f3-ada8-de2323eeadc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085b4b58-41a3-429a-b80f-bb903aa041e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420f52a5-398b-4e4e-b678-9d7e64b20169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4405ab3-e24d-4578-8b33-d0ed7ba9b06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586c1959-ea99-4fe5-b7f1-a573aaaf220e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea57df7d-6b5a-496a-b8c5-bb8fb46586ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96eaabcc-f1ed-44ce-9ea5-ac2c476d9694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0011baa-edc9-4037-ae05-6f3152d20a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be4ea9ba-ebaf-4be7-a9f5-1f564502ee92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfed044-9257-41dd-a6e4-daee81403db5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ab43da-9609-41a0-85ad-45892f4f888e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78267d9d-4570-4375-bc1e-a89a29299197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb53ca5-e7cf-4e62-902c-a3ae82acb701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38376584-64f0-483f-9531-e257ed05fb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee9f2db-a729-481a-a79d-3616fca63cb7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f301acb7-1358-4c03-b6fb-c826191a8c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8b6f35-48d4-424c-9913-a514e5dd1cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be766001-7f6d-414c-9f5e-d4aed29ceafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fb7a2c-a775-491e-bd78-4c7942cba4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a68b87d-793c-4166-83bb-af0794884e26",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79ffe53-e23c-4e5a-acb1-a87eb2cbed12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1276a482-8bb6-4f51-9cf6-7bf4d900ba5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36e60b8-7f41-405d-a0ed-ef700956794c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ac1cd6-10fe-4bc0-b6f4-e1783c0f8e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aba2e2c-3e83-4249-83f6-9bcf24127584",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378a7db6-bc11-46ab-97ab-3e43ed6d0a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4376ce52-770c-4d10-8c3c-7a9acb478a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e842a6-aecc-406c-aa83-30d8ee534011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d80bddcb-6106-49f0-8a78-561f185302ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7626f42-9851-48a9-9a46-f18ab6487a95",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0937efcc-7322-40d1-9785-18c569ac26f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e290b5c5-1fc7-4811-9a86-010b9314cdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59101c0c-0c4a-46b7-b88e-4aae4206711d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "587f2a23-f97b-46ed-9656-75c6598380a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31d1e65-dca2-4bea-bf69-d2cfad30bdca",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e963fde5-4623-4f2a-9ed3-e234bfc7fc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ef20fd-c194-4155-91e0-89e199b6eaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb62d27b-4ecc-4f7a-94ea-2d6e5f3293ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f094f19-285f-4431-bf29-b5defabf57a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8423d7aa-4f6f-480f-930f-f98cb603454a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d650e4e-9390-4e59-b1a3-346216fa78f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7ec854-a38d-4a81-9aaf-bc183a8c2be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce1b84f-6c69-4b2e-949a-bd8128c9e54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a24d33-1a1b-4162-8280-5e0cf73918b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642a514b-b83f-47f7-9df4-c21071046f0a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6ed1c2-5278-4828-a7a4-4b3578325e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8b89eaed-bf80-4e1f-b52a-ea97f51e48f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0b4d8a-3522-42d4-a0fe-eb77e59cfe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a17f8a1-9031-4d8f-ba4e-eda61d178887"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8839dc63-9137-425c-b381-1897e98bc566",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c87f7a1-7a9d-4963-959b-955c9eb896b2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc77cd4-f441-490e-8c20-3a7c6810c75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "002b9ded-e6a8-4e12-9373-2a96a408917c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae9bddc-4c68-4403-8f0e-a124e89866b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b62273fa-dc3e-41d3-a281-dadb74ff9128"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97afc2c6-f60f-45a9-b40e-f2a5360df0c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6b8c789-a4a2-4864-b660-aaf45cc0ce2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "710ab8ff-f5a6-4b83-982d-1e62eca85447",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acef72ae-4aec-49b5-8105-9acc86384eba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "572376bd-0818-413c-9586-08c583cf0064",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d814132d-944f-4726-9af3-d47d5f609c88"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e4c61f9-820a-4db7-8eb8-109ded42df45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce82ddf1-bb6b-4f91-b1a3-7618761f397e"
                }
              }
            ]
          },
          {
            "id": "f8a589a6-be6d-46be-99b2-c96e93f262bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e892c818-a434-44f4-89e7-75e543aef22b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "979036d3-2eb3-41f3-91ee-cf6899dc32e3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d32f5b-a334-4047-9a2b-384a60a031bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8fe15418-fd35-4d61-b06f-91032611f374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26887daf-9aaa-4254-805b-435fc3bfbb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2562e1-08d7-4239-a7a9-3055d27d6833"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9768f9ce-8130-46ac-9d43-027bb8a13b41",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b37a7110-a179-4e9b-848b-b088b77e59c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc96ba34-a9b3-4134-86cd-4cb8e357d0bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "161fe8ba-112b-48ea-a53f-e23de6500cf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1de1c2f9-4722-4c54-8566-9d0b74d9ab07"
                    }
                  }
                ]
              },
              {
                "id": "662deec0-f366-4897-b887-a8959097b1e9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f08c1065-59cf-45ef-a91a-0a975121d66c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55b2301c-5f81-44af-ae8f-eafa97993233"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6be3a440-7b9c-4588-a302-655dc97239f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4e6f7527-ca4e-4f6c-9af4-4b79c05e2033"
                    }
                  }
                ]
              },
              {
                "id": "f6ff8b38-4fe1-419b-8d50-accb48838771",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0cdac0e-9389-4d43-8f91-d0ed80e79568",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12f09969-9f2c-4c70-822c-cb4377a1babe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4e049ec-b227-4728-9c6a-f46c270b3c93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "577f4e47-40c0-4bcf-9248-795065f9a724"
                    }
                  }
                ]
              },
              {
                "id": "f160bed1-e440-4f32-8af1-83c7bbe5058b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b31bb52-d7f8-42a3-98b4-a234b0bb028b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3dd2304d-7b3b-4fa7-bd79-b98e5ce42d8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a8b9eb5-d1b0-429a-bf09-84521528ead1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "197c284f-e1b9-42a7-901f-856d197074ab"
                    }
                  }
                ]
              },
              {
                "id": "99857a09-947c-41c8-b78d-e98bb20ed284",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ea04d5e-688f-405f-a907-6c4c95bb33cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7326a368-7261-4c25-824a-a87468a04b05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e407b44a-7e18-4da2-a761-fcd92a44ad24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "74bd33ae-b5ac-4f90-b1b0-d80df74e07c1"
                    }
                  }
                ]
              },
              {
                "id": "445d1329-a189-4607-bf6c-a455923af93b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2457437-f26a-4bc1-afd7-cba2d6ff1c16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1de0075b-1397-4d51-9cca-06977a36f343"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "263a3588-415c-48c8-9661-b696e1dbf175",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cc8bf6e-50d3-4752-886b-cb7db39247f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "642b506e-dc00-407a-8c80-9b8f3362712c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3b9a59a-6ef2-480a-a62b-a37301cee404"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d8ae892-cb92-47e6-bfe1-3c08823548d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fda68c10-bb86-4d44-baae-c0e617a9d438"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32171e85-4f4d-4775-9467-a6469595243f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f67ef8ab-c9c3-414d-8612-6d46821bea3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "657be48c-c302-4089-901c-5d5123cd0cb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8eac27fa-cda8-4dd4-b644-4811d21f6ef1"
            }
          }
        ]
      },
      {
        "id": "e5ae1f95-1eb1-4ba0-932d-02b6001be4fd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d8398a52-accd-497e-832d-66cbed6d3463",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b896e562-236e-4828-904d-ea974b216c3f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74c7ede6-6e64-43da-8f31-79636fc439b1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90312dee-3457-4fd2-b90a-42b929d0aa95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe63740-0f64-43ad-b214-bdeed97a50f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990a8cf8-2c85-425d-b673-5c681ce0155b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb488c4e-0538-4672-8b2d-1b426489ee57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d0909e-4880-401a-b0fd-45796fbf65a7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9151c6d7-2f70-4a5f-a708-61b91720115d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fd75d0-9d15-48fd-abab-0d5537c23ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bf9f58-7f4f-4304-9202-df983172518e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6344e5c-7ffb-47a1-9e0e-6f637326d405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47b7613-5a13-47eb-9bf2-8b184659ad6d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661a729a-cb13-4996-ad87-f29c39826bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e440dc2e-3a93-40a6-afb4-f82a22986341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680acda9-f86d-48cf-9a42-78c8134a5c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8050bbc-fad6-4072-b88c-759978656875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0817c55-5c26-43d4-b5e0-67c22ae24561",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5a9d62-b219-4918-a263-f5b5de1f7dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6593d1e8-4067-4876-9741-5c520eb9667a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a309c7dc-adbb-48a0-a786-8ee9a13a2019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d482de60-7944-4696-be38-1cede89ac2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cec2ea-d781-4731-af6e-ad3c461a5c03",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfb8a5a-6f02-4bb7-94e6-69281bf44226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbe6127-b079-4600-95c9-6e346c1f8cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d278f4-c5e8-48ea-891d-8d2e6a50a5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f5650a-14a6-484f-9401-c2bbc801ff56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2424ef-27c8-467a-aa81-8c4a3bc01bfd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995c9754-c905-473a-aba6-d83a58f16094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de834348-1c46-43bb-a65e-549840af999f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3f5fe9-834e-4b24-b8a8-a1e1e0ccdc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4ae64e-212f-4edd-952d-0048d635967c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db104d97-36ad-40a3-b39b-47940703b346",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7831f252-0b9f-4508-9d96-5901b82fa23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d44404-9761-4991-8dc8-3a94c7e95721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bd7a9a-d880-44da-a3f6-c07de4981b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "47f75e79-dccf-421c-891f-03b1eafe0ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61eeb1c-5002-476e-aee3-5f23d718e793",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e5d67f-5795-4454-9c97-d027ef6043de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5046da7-b81a-408e-aea6-4d4370c646ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99d0c68-660b-4c1e-ad2a-71051e87541a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3e966b-a7fb-47ca-936e-0cf37fe96435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551dea38-8b8c-4181-ad1e-260efe05609a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd3cf18-7574-4c71-8164-3a3bf78be1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7152a776-4358-4443-b259-63982b1c6930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6466508d-2162-461c-a0f1-cdf75041e215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86d1ba82-74da-494c-ade3-a4f5bbe3c115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b5262a-980e-4e47-b984-50b190586a39",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffdd7aa-887e-4c60-bee4-3cfcedaa461f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abea4c5e-603c-428e-ba74-5f548966eea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f016cd-4307-4e04-b1a5-0e454c8895af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72d0a555-2dea-4ea4-81a9-192f5e4315a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20d359a-c1ee-4463-8753-722e150e8351",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2560b8-fb53-4df7-9eec-82f2a44c9e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715c0562-1b95-4186-8792-9a871a2d5942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5ad4bc-f856-4df2-b21e-71df9904467e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "85ba9e0c-d78d-4315-ad31-32fa5bdcbc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659a9d57-b12f-4c2e-b64b-686c51b22ad4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b47404-479e-426c-b210-433b24df002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf52fbc-3c85-4cf2-a7e3-a6e74dce38c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49436d59-4db8-43f3-b9da-c426c09fd2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1852ec0d-5e58-49dd-b9f8-0f5d65b68254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dbc936-2c03-4364-b83a-4ac917cdbb76",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc995e8b-46c6-4066-94eb-2027ff692f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1cc89a7-fe00-45cc-9f84-9e8c5687eb08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aef0a1c-652f-424f-849e-8ea94ccc9c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b794fedb-06a2-4dd9-976f-e07743db3555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9997703-d30c-4f57-80cd-a10d235409f3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6de2f3-da41-4524-85e7-60b5f8a4866b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38395f4-8913-468d-9277-069a1032cc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fd627b-7770-47aa-a026-2d1730c6a893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a44f59e-01dc-4c51-92fd-13d8e6b6ba6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1f17d1-bcc3-4b2a-820f-60ba9d77109e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be577dd4-e0dd-41a8-8d9d-ea353f1b533c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cf56cb-7c4c-46d8-a36b-2bcee5078da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb12e4e-a9f8-4beb-8fa9-167a7548ac33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f27c6c-c8b6-43e6-88b9-aa6ad121e4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edca824-0c97-47d0-82d1-f03eed7980b3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db88d1a9-a9e0-4bdb-bc86-0f12dbb41343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f499e39-3cf6-44c0-b5cc-86c4a45e6b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f29ef1-e84e-4c35-89c6-34cd7ece2a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "879c0f34-ae62-4033-8dbf-15d5e02dce13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1621a81a-f626-4429-ab97-a2656cc878bb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2aa367-ac32-45d6-a864-11aecd8ca91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30add8e-e57a-4ee6-93bf-a11a605b2976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eadce89-2d9d-4132-a4b8-e1d0094d11ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f327692c-3b86-4a19-8d3c-42cacb530bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6955c404-5da3-42cb-a951-45464db10567",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e081818e-ba7c-4ade-9334-bce28f6c54c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895ffb2d-c19f-4557-93d3-a2fcdb440c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226abd16-b838-4a84-bae5-0e786101b584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23051964-ee1f-4511-9a5e-8155cf222629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb08a0c5-29d3-4024-9339-159faf25b39d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b7f0e3-2c11-4ef8-b7b4-6b456eb871cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d91a6e0-9765-4c93-872d-0e4cc153b720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dfb76b-77de-4893-9967-ada599000fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8342ba-af05-4ad2-af53-17aeedaf1aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c605dffe-e48e-4cd5-8595-b559d8bdb0b7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f352ec79-a05e-49f5-891b-8d20d8cefb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e7e6db-b038-498d-8a60-35b8885333f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fce733-ba81-4993-850b-3644c53e29ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "731ac4b6-71bd-497b-96de-b0a404e76f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64289c56-3186-4931-97d6-2c5cdfe17c8d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae3059a-b9c8-43a8-836b-13753dbea991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a878e737-2f17-4c75-9a90-8d466ffbd45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19119fc4-9553-4cb0-986e-489a5cd5f83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a9d8a1-01af-4706-b35f-8d0e772caea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9509546-0d9d-4b47-80be-9154ee24f17a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c549b8-f104-444c-94e4-491333a1c3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb360b5a-1b47-4734-8c7d-bc22aa585763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ebc4cd-900c-4e46-bb67-5540ae31178f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "850aa926-72cf-4bc9-a5eb-3a2567c3ad85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e63191b-dfb8-4dfa-859d-55fbe4476a06",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2787e69b-04f9-4f54-8a28-06adb0fd38d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d35477-d07a-4780-9a93-912e5faa873a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d89cc31-7e12-407b-8389-c62157fc656f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c174ab-7110-4d6a-9696-82ff740abe5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00eb151-5a47-49c3-8e3f-55f10dcbe0db",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ab3d95-4da2-4fbb-85b2-8c19d29bab2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306c99d8-df9d-4264-8791-e4e7cc102eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015cc3b5-1746-44c4-a537-a7d335c93342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3aceb3c-e48a-472c-83a3-e41c874a9f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1419c23-c55b-43ad-b7ed-74239e7db038",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fad8631-a693-4713-a1ad-796a8cf78644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86bcfe4-2030-4848-a75e-986331b7d078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ba33be-b009-42c5-8688-70ff1424043f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbeae87f-0427-4396-9d83-090b810c933f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3bb00c-eef2-4868-8e3f-abdf75b74ca2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5921cd-8aa9-43c3-bdac-d2ec6ed54829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0add9d58-c098-41e0-b356-feed27d27603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb32fad7-459b-4d63-a59d-558557aafd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab860e6f-a753-46f1-bacc-3bd8cdb1b9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fedf283-efb4-41d3-aa30-182c0f49f340",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d2a945-bfd9-454b-8f4f-42bfb5e688cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cf6215-6968-40eb-8e15-5930527e8427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c85df12-ced3-4ed3-9a7b-25fedd7c8a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b4183e0-0265-45c9-b55b-b24ac2da2212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a04b859-b184-40f0-a308-564950747738",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d45bff-7c99-465d-9aa1-2e9c297ddbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c44f71-fbff-4ae1-a3f0-e8a02fd7f1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c6e280-5b8c-46e6-a088-d1e33fc1fd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ddb9e6a-e8ac-4a0d-b53e-196b16236e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31da1cb3-161a-4973-9f58-573ac0eba594",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f75f43-24f1-469a-98a3-47a8dba7d7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2f209c-84e5-4217-91b0-74bb52ab507b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d358b939-baad-48ff-b7e2-55f4c9548d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc99d29d-d19b-4dc0-a8d4-8edbfb75b34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e5e0ce-6660-4ba4-9573-74d4bbb515f8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0dfb88-ea85-4ab3-a8db-b4e435d0623f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a384ecd2-4c82-46d7-b882-89ba59358799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8890bdd5-dada-4bc8-a406-0c00e5e25d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9473f0ab-d32f-44fe-87f8-9ee9a9a8040d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a6a9c0-3dea-4ee6-97c9-2df252cb17f6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed429bd5-7cb7-48d4-9265-d3c48a83d533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483f2eda-9bab-489f-a2b2-5fe72933e87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e769a8d-7601-4d0c-89d4-87716c9f7e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6750f5ad-c3e6-44ef-9a9a-2b9a83d55223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88466d25-0dac-4570-8817-32fe58505e26",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc0f1b0-f915-4c5c-b9ff-fb4a6b6762f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b9291d-d40f-4d2e-b4f6-f2dfc741dbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98724403-5e11-47f0-a2a8-829b6be5e681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a103c7-2a31-491d-a3ea-614f207fb25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12893ca6-e2ad-444a-b1bf-a5b502363191",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c985628-80c8-48c4-87eb-ac596c0e621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fa07cb-7a8c-4553-b73d-daeddeaa3f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0337d8-7f40-4b6e-a20e-1dd48488f841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a9ded0-5106-4f0c-9072-f4ae754a4efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aae5f48-5fe6-438d-a2df-1e9f9b3ea69c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c644d1-0539-42fc-bd82-d0b5c4acbc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3547719a-c65a-4abf-8754-836c9df3ef69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cdf0a6-ccdc-4c09-88e0-f37db38b2b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab2d633-15fe-47e5-81b9-ffdca164915e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e90c73a-85eb-4f88-b4d4-42bd2b49ccd3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4518d2-8fce-402f-a09a-04d16d76f633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6c0032-a0c5-4caf-a8de-da53cc821d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5e7a35-ec8f-4169-a840-e29f65f69ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b728dc-634a-469f-8df8-923ef3545b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd100f1-37bf-485e-adc0-1d5536fc7497",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0ea78c-6350-406d-b650-2464180813be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ab0318-fc66-4d82-b479-5dd4bf1fc6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711c1fb0-410b-4e8b-bd0b-a44d4fb7e841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1e63e9-7397-4de4-8e43-0cfb7fff4e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82018dd0-80e9-4c5e-830a-fd7076af853c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da53fab5-55a5-4940-8170-febe810b7e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c2f213-8c5a-4fa9-bbc4-6dad5783b829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2137304-7a7b-4869-8394-856b4abf7ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68fe3282-7f5d-477e-8683-68c0fb48fa7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "42c24e7f-8edc-4445-8589-400d7ee5a200",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "849c006b-0dad-410b-b967-eff394b8ed97",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6a580e-7548-4f12-9e90-7dcae3df585a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "134bde1a-3245-42b6-a7a7-16ac2686748c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254d0cc5-9b18-47ba-bfec-7330680c5e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3d67e1f-1fb0-4331-bd9c-069f15a92a7f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a470c875-b338-4e51-bc1e-9c65640d8ca6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d847aa94-28d4-44de-97c6-ead2d84dc0ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3101406c-1af4-4f5d-a5d2-8fb0311b1b1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc6ab70a-e660-4aea-be48-7d224feea3fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3524a59a-1789-4cae-a9b1-897d3b7145e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f29d0d29-ecad-4937-b7ec-6eeeafd1d3f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ac6a3af-eb31-4c8b-b866-c26b0464269e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49261efd-0911-440e-aa61-c8998fee41dd"
            }
          }
        ]
      },
      {
        "id": "c4a55abb-05b8-4dab-ad29-a5211cf5634d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d9801387-79f9-44d9-94c2-d2937ff17093",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f00f34ff-d9f6-46a2-b929-fe05fee3eee1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ab638b9-9b4c-4542-9342-2c28be643e2f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceae723-7646-47a0-a7a2-6c214f34ffeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d4308f-2c99-4206-bec2-5e360f253b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6691f3eb-f9cf-458b-a7aa-d3e0492347be",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3e3444-c7ab-41e1-b324-da91e5e767dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b070db-d4cd-44cd-a946-4764b320f31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1942862f-b4c2-4193-a681-ad45fba8481e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1159822d-4683-4bbd-91c9-d6b6293bcf14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006fa6bc-a507-4db7-9919-5c974e4bab44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadba1b8-e433-4e8d-b1da-695b41104fee",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2633c1b-8980-4a46-b363-7c9c00976521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab15a13-a628-4e1a-b576-5081e14bbd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bd8fd6-d4c1-4b02-b740-e9cd7cba410f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f20f6b-22f7-4e36-ab2b-121c6468a6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f1a091-6084-4f46-8817-34991b1ebf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696cc1a1-f1d5-4857-9eea-0429a93dcdc6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29723698-943a-4c3a-95ca-2faebebe9f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf4f6ae-15be-46cc-9b8b-6c43627186e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a4ec41-9d88-4e5a-bb65-8bdacce46465",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dd7575-a1d7-434f-9d78-1da8366b55a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84eeea30-ccf4-449b-8e44-2207724f492e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b9a7bf-a98e-4373-8d52-20fccaf1806a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7244e0-5bda-4c48-81f5-46c460a722da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec8a10d-ec34-40de-bcee-53632459885a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00843d8b-3017-4b5c-a992-0a3dbd8dbf66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "612552fc-e35b-434c-b472-374c8910b1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3412c3b1-1cb0-472e-b620-377f7aa374a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c333b1c0-81fd-4159-b2c9-18e9a653bcf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ff8fb6-e402-4dc3-90f7-92e2e357aa0b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbfd9ac-104d-45d6-8dcb-09ee5d7b0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835411b5-3546-416d-8d7b-50df40bb2f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1077d803-f045-4f7d-916d-042a7f2f614e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ace94a-a9ff-4bb5-a12f-2352cd8f825d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21169b76-9311-4c36-b950-4545da04a095",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e7f248-a34d-4992-b1d2-6cfa77b4ad46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b010cb-5236-4b77-82e4-3affa438d0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bc7591-e348-4b1a-8b3f-dc2497be3597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3be923d-03d5-4bf8-b55f-2784eb78b86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98631d6c-e6be-4418-961f-b659a4109f03",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f2074c-c0cc-4982-ad20-a93979fff576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed46d564-ecaf-40fb-aae4-8b6d07165ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a22ac67-6966-44e0-949c-77a9f483729f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312402b6-de6b-4ac2-9221-1fa7774587f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8238c70c-12c1-4c05-ba26-117cf2e4119a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34712a57-454e-4a73-b711-ddf10a8a8d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a680d01-9307-485f-9212-b73182da204f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "991412c7-a21d-410b-b06f-61ead04d46de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2b7889-efdb-4b56-a8f8-31580b28e459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550bc066-38d1-487e-af8a-d15623338d67",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b2f89d-abe1-49c0-b4e2-9e4d3bee622f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc1f6795-4c94-4e30-8a38-b92d316dc6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3449ffd-ec26-4af8-8a91-33a8943d9cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b8f1b7-e346-48b1-b74f-accf1f4cea86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b120147-ced4-49fd-bcc3-38b073e70aad",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fdc52b-bb64-4232-a4d3-2d024020a997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef2ed3fd-b40f-4118-8f87-d9f723a956ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7201e0-3e96-499b-b2b2-4ee1df44b021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1bea6e-302e-4d01-a123-701cf62b0bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800fcd84-5b54-4ded-9a1f-070f6784cc73",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b0afd9-c6fc-4de0-8535-d4bf5d82a0fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a905a153-4eeb-42a7-bc48-625025ca4e9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e74299-8cce-4e83-a62e-cdb2290b381f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d33ed47-9571-47c5-9ad5-cd1150210387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bec1f3b-3967-4b19-b9b1-1e697923202b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaca838-11fe-4f19-9b40-9c9db74bb98c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa26a08-4f96-4c40-98fa-bd8d7b28b2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928b7b2f-2cdc-4d83-8fac-43eee9c300c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df997a5e-f8ae-4da6-8a3e-27a447cff011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bd1a55-7854-4d96-b661-b36f1db70f1a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f639229d-071c-4529-8419-deaa2c8b61d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a79b43a-feb6-4486-86f8-9526fd000872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c54016a-aa3f-402c-a005-565b37a7339f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40dfb9a-b8c3-4e3b-be52-f651918d6eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79df295d-44b8-4816-a047-8a301f1cf344",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dae1c5-341a-41ab-99dc-88b27156a9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545871b9-2803-45b5-87dd-55948d37d945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08b82c4-a25c-4c46-aedf-2c996b600564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46c20af-9c4d-426d-95dc-f149ddd21bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21948309-0d77-4fc7-9290-6282dd132f09",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5960beb4-16b5-4408-88a7-3fe562a572e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72164586-1dfa-4476-9b20-07a383968935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b172721-0fb2-49cd-b974-f7bc5bed2c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97362d6f-aadf-42e7-b839-8226a8d406db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84f9bf4-6167-4d2b-a435-1f1dd9c648b5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09aee31a-3112-4f94-bc01-0e6aa191964f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48657a18-82af-42e9-9e8e-04d0bc604a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c99568-02dd-4a2b-85e8-9bf906c619e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742619d4-37af-455f-915a-b19f8ac8fac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2014945-c16e-4c4f-a07b-6cb42cef6cba",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d47677-bd90-4d5f-8110-dd8d121ecec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c810b0-1c1e-400c-bed4-737a14b6151f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7c46d4-57b8-4040-9b34-a1d9669e2414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321e8d98-c1eb-42ed-8710-25c1e933e57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd3242f-c0f0-4840-87a7-6c588248ec2d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e8063f-a063-4ffa-a221-43b24169bb90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761ce7b1-293b-4cca-ad42-fd0f325e6596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda65347-8ad5-4738-a5c9-b39fcc7f1790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b4ac88-25fa-4884-b8f5-a54a81da909c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d33af8d-657d-464a-b11e-9c336059c165",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dac80df-10d9-4e14-947b-0cc2c62e8a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d296a6-8132-49bb-b909-6ccc50e58ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c086bd3c-2ea4-4cb2-a983-a8dadc10ce23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868485b6-3c05-44c7-aee0-1a6df6ca0cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8551d347-6552-471c-a4ac-fcab7b98f34b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4923a79e-b6f1-4521-b2df-9feea2997f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7ba961b-9feb-47e9-ba39-29fdbd0f9a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fa7641-bda9-4608-be6c-fe5285a454e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a50a78-49a7-47bb-b883-b9bfe2e5b88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042b38af-ce94-4455-860b-52d73058a362",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb95f3a-5cc8-488e-a563-c0938b8e7a1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edce3214-a51f-44ab-ac6e-01ed994845cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4c631b-c5aa-46bf-b75b-07c64e4f7e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b17355-117a-4dcb-8551-677ce4c93cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16e8de3-b7bd-4ed6-a1a0-f8b70541f33f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f08741-0c11-464f-bf5b-66615f4291dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135b38d8-95c8-4c80-acc8-242c44c149a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d0996d-a556-4e2d-afeb-f6fe4b129ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b71c3a4-c4c7-43e2-828f-f823b4b775f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c3f4f2-a891-414a-9600-5768d89ddded",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e076b259-50d8-4429-bed5-e939e19c751c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3108640f-32f2-4d1f-8643-5a3286edee75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51843f4-9873-4721-884c-5bbc91d36aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f66a30-7be0-49f2-9576-bbe7429af62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29db8964-99f3-400a-958f-42ea0e60a3c2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eeeb819-0177-437a-bbf1-c545a3ef9f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8b9629-40a9-4f50-90e5-75a799adb8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb90eb3c-bbb4-4985-a830-a145be0eebeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd6b929-4818-499d-b249-2683e77bd1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cfa7af-e7c2-4acb-bd21-5e2299286a00",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f69573-1844-4267-8cb1-4cd330a0b776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e77058-6904-4ca7-b81e-5425bb8bf87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7992c5-0104-40d1-bc69-430dc1030fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4956e178-2d30-41bd-9dd8-5b458af232a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08269e04-fb3b-48bf-b10d-dfbbcf1bee6a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3f8099-1512-4cfd-8eac-8320e5cb5eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46924428-8e9b-4d3d-a21c-986e82ff68a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ecd6d7-4996-4f34-a817-badd9cd15c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2eeb74-4049-4596-b4e1-232b81b4055c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35de717b-e9a2-4e6e-853b-96cff22696d8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc64e90-35e2-4b86-97ce-fa88c2200cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d95c8da-607a-427b-a9e3-aa755c75eced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c65a4b-41d4-4566-ad89-2b25ecd94c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690a23c1-37a3-4078-b8fd-7e0750ead965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256eba82-4d4a-4ff3-b98f-a656bd137025",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6b9aab-83dc-483d-93af-40e4efbb102b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3298126c-b0f9-4e1d-a53b-21af64c35c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf68d9f5-e4b5-49f4-a4c3-fb3793f8fa44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8d9e31-5587-4c5c-8de8-7b15680259ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853e4ee5-2eb0-4970-be83-534ab8a5cf87",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d336005c-96f8-4ab0-af2b-94bc8172698d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5110e26f-afd0-45b6-9784-bc404a8cbd94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401a4dce-ba31-4aef-9d0f-32bd1e8231a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5181e691-e7e1-42b7-9c9f-ae3f6f4f45e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6619e987-4d72-4355-bde5-52673e4443e0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d861af-afea-4961-91e1-cc5c89a742b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a95f778-cf5a-409c-b4a5-acf2e30a0fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5ad893-954a-4078-91f3-b1810f5718ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20c4d8d-f61c-48a5-bd64-a1a4e3b2256a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ab6a7c-8304-4bd6-aba2-f9298c7b756d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d62ef52-571d-434a-b868-95d316ea2bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbd6a0a-abab-4c65-a753-da5b67097325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd2a414-425a-42ec-bc97-efc1b2b580e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128b4a57-a955-49ed-90a0-b6d10d200307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e49cf07-fc7e-4ff6-94b0-d0f50a30ff8c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29782421-9591-4dd2-a50d-5f5cfc361994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2bbae61-83de-443f-b5b2-2cfc33800879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad8dfad-470c-412e-8ffb-3a78e3d712d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a132e213-5da3-498a-bc99-df9c8b3e99a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a7e89d-e052-4793-a94f-274ced5500e9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1741a6ff-bf5a-4687-9364-6246e1276d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9780a961-ac9c-41c4-b986-2d43e64021b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a01d138-e67e-4f60-8f01-8550a6686b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f29028a-7a29-4110-a20c-aca91d5d3176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2023a45f-b6e4-404f-bb37-91684caa256b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6361ce17-2894-448e-9509-d33e81019497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d873c42e-8bb2-40da-82a1-aa42f24a5f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1660d12a-6673-49e7-b61f-995473cf9ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85afebc0-430c-4199-9949-c23da30ca007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8492569-3a0e-4882-a72b-cef77f372b8d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c93355-f7af-4047-a1ab-52a9adb29a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2546a3c0-36e2-4f02-8f49-0b436fe7f7f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2200ea92-92c1-4ff7-a0f0-f82322c1b7a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff768f65-5a64-4846-818f-67b3924f561f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb2bf97-a990-48d6-b7b8-6f8a7570304f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13aab0f1-9730-4e8c-a4a5-eeb89c5e8a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd3b9ca-269a-48e1-8360-972823132fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d906063-2977-4a16-a87a-31f398e9e0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e89807-61ea-40be-a5f9-3f50c666dbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727d8dae-3d4c-410a-ae5a-cfd42b47c7db",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b6f228-b664-4627-8c36-cb0eff3adb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e8e2f4-be6c-4c16-8804-8500712da35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bc0507-d225-4a9f-b020-8bebbe3b7b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad08e1d-3213-477f-aa01-236cff416e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797ffdd3-f09d-4ef0-b756-592625196c8d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c449071c-2924-4cf2-8d38-74754dc1bcb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e24873c-1289-4235-bc6f-ff010b0b6c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d8f5c8-3d70-4b9a-8214-01d47229c717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a7d425-ef74-48d2-9143-1f334209e5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a8bf31-a06f-47fe-b3aa-f96a5b4b43fd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0908082c-0065-47e7-b962-865fb0e38d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e6836f-1505-4873-95b1-6d9699611034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5c5b30-340a-4191-ad82-5143ac36b300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ad24d3-8350-4793-b62e-7a56f1ecb714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b2e1cf-9502-4ff2-9869-3bf04cf34dad",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca259ff-dd8d-4621-8704-8e2a79f2cb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40da4df-3c6e-4386-9e4e-716ebbeb1b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef83b80-4eea-4eec-8470-5318fdd7a9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebdf161-20b7-4fed-bb7f-c664496041dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac39ee0-e8ef-4352-8cbf-d08fe86a6bf3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22eba31e-2646-4158-a6d1-4edc8c5c8b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a01d8f-6cdb-4b38-806c-a253d6db286d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b9177c-40b0-41b0-a69f-3d479e2aafc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fe2a53-c21a-4970-9856-152d169e1692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8341865a-fc0f-4a3f-a8fb-813c3040901b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b52b7ab-8bcb-43a2-8b6b-68b1b89550c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93671ed7-bb0f-4f68-849b-5ef7f9d5f599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bc6d06-db69-48f3-a323-5024eefe5208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b766636-b0db-4e87-b215-0c444e10b827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63c0e95-0809-48d3-9015-0ce0ed8bbb4b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752ecbe7-66f7-41f4-8849-6cab062fd75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8892e49d-5e64-40e7-9636-8f8d6e58eaee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "750901f0-4180-44b0-bd97-04d4efdd3326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093a1e34-8164-47c5-aafd-7175d3984049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f162df-cad4-461f-8bad-f6fdfc153985",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8360144-6807-4172-ba02-323e770bfcb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6cb2fa-dfbc-4a68-81a4-2e6bb2f636d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046ccb95-2e16-4c9a-a59b-5eb006957591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0101b3-d893-4e35-93ac-dd2298fff6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d596c832-6f8c-4913-9415-8152c6525260",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b4d14c-f363-40bc-bf85-0eb331f35b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3f53f1-7491-4007-be0c-9b52fed6871b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d749e4-76fc-46bf-9a2e-ef94059e659b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8077e26-4c28-476e-af72-e643798595de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebaeab5a-4d6f-4aa0-bb79-4679df488c24",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8667c915-ef76-4161-b739-f43c71082117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9757cf8d-12fe-4415-b054-f4a46ba97c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f18cb82-eb8f-40bb-9db3-f1a65db9b6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de65d66d-e29c-4827-bbdd-3d9806fbd4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f1d505-07fb-4fdd-9731-26cffe211845",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342f8628-a6ea-41dd-b47e-9f582ecefa06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa919a4b-02e9-4d95-9cb1-ef11ca603368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5d4f6f-6540-4d5a-89c9-587f7489324b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c329d92-9754-4e1f-8be4-6ad01085db4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b73ce5-21f7-495d-9903-30a3e7c08783",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1231cf-eb52-461e-b02b-2b0450671bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0cf5d0-0c32-4d7f-84a7-e7be702b033e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530be07d-a99a-4373-bb70-900509e637af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034fcb14-a3f2-458e-b8a6-e4f9ec16a86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacb69d9-f76f-41ca-827d-66e0954950f3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616954a5-39fc-47c4-8056-c3d667bfb21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b993da34-5f33-4f48-b0a0-0dd5b82f1916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f60d4a0-40c5-49c3-8bdd-a224bb75929c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b03338-8b63-4141-964a-933d267fcce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f93cc6-9d7b-48fa-8415-c57648ae4685",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67803e6-ce62-482b-84eb-766e1c462614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2ab00a-bb67-416b-b777-538a369c7185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82822a4-df76-440a-ad87-dee81d3de625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18413b97-d3a3-485d-83e4-e5a8280e9ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb93d31-1ce7-452d-a47e-f9891914e24a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f02b299-aed7-4a5c-b3df-2dcd770b6067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2348bcad-8970-4423-bb8a-1f8c7af85633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c8c393-e0ed-4538-bb68-db49f32068f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cbb7aee-8743-4368-a890-458df8bd50e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666bd1a1-c2e5-4f22-8b9e-4d807e4d06fb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e4aa45-3771-4083-98a3-1a8cac47f7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3c6364-cd1d-495a-afa1-401e55ce8dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4577bd52-8f11-46f1-b5f7-f2b8b6b2224c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecae95e-7ca9-4fd0-8951-fac679413253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acacca9e-0c65-4a8a-a914-d3809ff643d9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583c536d-d515-49a7-99a5-beba0575ceef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa40be1-7e8c-4a94-9d99-cc9d6f687fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e89db1-bd95-4e60-996e-fe34623efdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d24928b-2af7-422e-abf8-37867200f589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486bccd4-6f40-46b5-a0a1-fbf2d18c8501",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b652507-4095-407f-a8f7-cf318ff292a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352414f1-ab83-4b80-b8c6-e515576b6de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215bf110-1da5-4e41-b822-0f5ec1806811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379996d1-9f0c-4140-867c-a258e08584aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4e2d2e-e809-4494-878e-a74b93b378b5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67e0b19-6395-4af7-b459-0a9cedcfd0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e309114-fe99-4165-bda7-0f8e9f12d77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5313ec7b-8b3d-43c7-b115-482d5052a1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5881a991-5c48-4f32-aec3-e2436295190c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d59c8f-d540-498a-a27a-a1c2cb962dcd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a0a286-944f-4822-adfb-ee45ef466556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9d8e8e-be09-4041-9483-d17dee7ec59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35da3c0a-a5ad-412b-ad20-93fb81834cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b72326-d8e5-44da-8584-f9482aa72c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5279f1d3-5231-48d4-89b4-e3df18bcdd57",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587ad32e-a9fa-4324-93a6-a2f4657d52b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a931f9cf-4b8c-4130-b5d6-e4052c0fd2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a49db4-6bc5-442b-985b-c6dfb141e969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9b9b9e-d598-4b19-a021-979baf62691f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70afeaad-1243-4c29-98b8-a70a94781c4f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef56ef7-4b7d-4112-b7d7-63092492e4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81815db-be2b-4806-868d-4ed2d844c45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07bffba-6968-44b8-9bd9-f19010e1a7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ee9075-f673-4bcb-8e27-490a5e22a8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f58cfe-9c72-48d2-a2f4-bb6869efd7ca",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421dd1ad-582e-422c-b32c-0d14ec666025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3292cb0e-cd90-478e-a41a-ee1086e6888f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f46b366-862e-4bd7-9ca4-c2117e146c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c09dc767-7f7a-4a6d-a153-f694309889e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e30dda-017d-4fa8-b73f-c4d6562d3968",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d630d630-c1e0-487c-ab24-85c092d64161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df8d708-a7a4-42e2-9991-f87c2c0be2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa43ba1e-6d2d-42cb-9d6a-52ea06f22199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cddba24-27df-489c-94d4-74471566f353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7741bd-1117-4216-b750-8c1bae660374",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e820037-8917-449d-a763-069e347594dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3461e37f-948a-4ed0-9c7a-7daa46cbcc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148f540e-1bdb-449e-b0ae-c8aaee00c537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04378992-8b46-4bb2-9e55-0c4c6e6db863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a173f2df-afc3-4e5b-8791-bb004f231dc5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ecbbb9-e58a-4e19-ba7c-2c7b864c776f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e1deb6a-e1f0-42d8-a312-5f93f847958c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6360d6dc-112c-458e-b168-1c197d8ca8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ba7479-3218-49db-8a63-f819fdb20072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a3e81c-3f36-4e56-8597-d082419d027a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402103f2-a931-4abd-95d0-b628d597bd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc42a44-d6a8-4f73-8d38-419d00125166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b486ee9d-6b3a-48f3-bd96-97b7f78c9a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cc096b-6a8b-4372-9b0a-1c0be6ef5410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e14707-78ef-4054-8992-ff86bb01b087",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a90227e-311e-47ca-aeb1-c6dd1f494b25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e061e443-8133-4801-a7c3-32fe2b46fd82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0d4095-4f6d-4d9f-8340-fe32e2b9db0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f82cddc-9d69-4bf5-b6fd-43413c1bf8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecf52b8-bfb0-4a91-b5cb-8239a59cce1c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ebaaf5-85bf-47d9-af9e-6598f595584d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e5c1751-0904-428a-9637-f98359a82690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66c651b-5c9e-49b5-8b73-96d339c30b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44e1511-b253-402e-93e1-a3e8ac71cb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b7d920-873e-48f8-88ed-657df427ce83",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6d7f78-daa7-40ed-b2e5-9bdf02c8ffb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ade4a7f6-c620-4184-9fec-949cf95f2f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec02fb71-64ee-460f-bc6a-1f60b512df40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4f5847-52d8-428d-8b4f-099281bf6c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bc3fe6-d580-4805-95c5-906bbc68e492",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef804da8-c3da-4b8d-bd3d-d6a84520f73c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea895c98-e07f-4479-8bff-fc326754b538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8665787-145a-4bac-9d29-1f89ff242b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3d92f0-db3b-4ea4-9ea7-9fa75f12a180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c52fdf-01df-4b10-992e-3fd043a068b1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856f7aaf-d8d4-4a52-9fc1-369252869f36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "528131e8-f449-4929-9faa-ee114682d0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1e93c5-c4a5-4bf2-b491-18574d588783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6935c04-b7cb-4345-b044-3be7d0e19066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a310e9-2955-43cd-afe0-5647906ba467",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54115d4-541c-4787-b9c6-704be81e1ca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e3be4bc-fd49-46de-a782-50ee06eefb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72107537-cf66-4c50-a6a7-ccc1bc1d2fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75a7765-0186-43fa-b4cf-ffba940cabbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb406258-85e0-4aa3-bf59-ccfc81d0b274",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597fd061-ed48-4fca-9842-4c84d19f60cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe479edc-372e-44d9-a222-aeb9c91544cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab87422-d0a3-44b9-a731-100abca5edc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502f3efb-425e-47c4-88c1-f783485ef271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a04b461-100c-403e-a4b6-793b9849415e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2b0296-9f62-46f7-8379-4bdfb6c61a32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "598a5448-30d1-47dc-9460-fc9992723429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3f7cec-47fa-4bb7-b88c-7eb80f8d26cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf25c073-3656-4a28-b601-628a0d4ac62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688b82f1-b102-4400-b61b-dcdebb24de60",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa5b634-1b70-4f79-9784-8885944d751c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "409bc471-87ef-49f4-b41c-96379aec92d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "989a13e0-656e-4f25-a193-f9a39326b78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b36ad7-6d50-4d73-aa67-fac24c568af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e10f42d-dc5d-43e3-ab2d-b0c03bcb7bfb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632639ef-25b4-4d9d-8242-115e8749cd5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1012ac24-4d4c-471c-b7e4-7f7cbe784da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2631a7-af3f-4018-9c71-b98509feeb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce376d27-3875-426a-9c27-6d2fad6a9a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985b8267-834c-45e5-bfca-128a68d3561a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777a24d8-a0d0-4bf6-a37e-7d399ba8a78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc12ec84-dff5-4f67-a73f-045816601b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c77fc7-d70a-4900-b2c6-9ab4d2422b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d060ab2e-a7d6-4a01-86ee-765bff03b1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1be556-040b-4b19-9978-9bf5f7b5c1da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab25539-7b71-4329-b49b-42699b3fc448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f2258e-bb49-4a41-8726-b56c3fef1f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f111a9b5-c19b-4094-b9db-777d374b4526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fa2dbc-3487-4c02-8329-370f3b488825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01755e08-c1eb-4ced-96f0-4ed2ad71f785",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68845e75-0b36-4b6a-9e2f-9db6457d651c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3dc27c0-7d41-4c8e-8d8c-eb90b7b28652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2dcf56-e458-418a-a44f-bec2c969a00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b31845-5ab5-474f-a808-3b8c10049ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87803ee7-5b4c-4836-80c0-021b5a7a5112",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4aa7265-13fc-4231-a162-18e043b6f202",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0955153f-e13a-4fe7-b94f-a6496929f196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcf963a-3c81-4290-b3ff-b4e7ec69ee7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c82040-b65d-41a6-a900-c4e0fc4bc5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c68bfb6-5a62-41d7-b5f5-05c9c9d6dd94",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b27ccfa-6e31-429e-992c-7c1b19ee6034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a21a8b-559a-483f-9503-d6c9ee96ba09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a909d9-004b-47ab-8f6b-c805730fa819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dcbbef-dfbc-42fd-afb3-715197b83015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf774735-50cc-45d6-be25-81fc37902058",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af772e6-3401-4989-bc87-4ab0fc96903e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d76fcef2-16f3-439d-bd05-e35f4a93dd1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f19f77-e0ff-40ee-8304-51809348890b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad548fc-6460-4e94-9d30-f37a512e0838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d5b359-7ca6-4f64-970b-40cfb6fb16b5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5a6a62-284a-4e6c-8ef5-85c062e89856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a83cb7a0-9949-4317-8450-7f34262bc684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4aa1608-ea45-4d95-a1e4-9fa10d4f40ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef594eed-0b8a-41c9-a1fc-e8c624c82863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fa53c1-02ab-4659-92f2-3f4d369e311f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357e7eaa-e99c-42e7-a3c3-ae8d12a424e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1fe2da-755d-4786-8375-64af686ef9c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "792a7f62-8629-4deb-83e8-47921e8c3bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e0cbb2-9305-4d81-91ed-2364bf9f6e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12235cf-3bc7-4f6a-8138-b21ad874490a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4682407f-a522-4553-b405-eb582c01ae76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9d8d3ae-346d-48dd-ac51-cd961acd9623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e2680e-b852-489d-86b3-404ba83b2ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c3622a-5e19-4096-9964-a43bbe3f7a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d833f5-41f4-4065-8294-b9e2028b3ca3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaf41e1-0460-4f1e-87a0-7664823c1d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a379f07c-e448-4df2-a003-3969f75decd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d83a38-4687-45e9-834e-3e74442e5842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734ae8fa-3dfd-4ae2-82ff-38459642e09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76271485-a6a4-4f54-a826-b0aefbc70ddd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9539b9cf-87ad-43cd-9de4-f76ea17994cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d66ac66e-0cc1-478e-9e91-f10afd1235e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b719cabb-5f12-4a8e-b6ee-f8c430a60e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b6a8ff-7cd1-49e1-b0f8-3464d9a45cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32329744-e681-4241-8a9d-d2973aef7c6c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaded04-98a9-433c-8ef7-c8cd13ed7d2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54da85ff-d766-4459-b483-fcae19249445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a513064f-dd81-4bf5-aa41-775c0fa2a08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe571a31-c9f6-4c34-a477-36cc591b5828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9802ab6f-e56a-42d0-9e8b-6aaf97d41b89",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439ddedc-21f7-434a-8a1e-e9ad06eae089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ddcbadc-2a3b-41f7-a45f-e368ffef215c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fce4f8-efc0-425a-b1bc-bb61792e2aad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ae5f28-c272-40c3-ad8e-e213d75dac2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3b2daa-509d-47f3-9c24-eabbd8ebb7b7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7f7399-9932-45be-9528-7d0eed0b84c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d10a935f-1d5e-4557-b341-a9db044e744b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c464141-5390-4364-aa4d-1608b7c8c8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c34c921-9a47-4e85-9a6c-84fe2b4e420d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8434a17a-06dd-483a-8aa2-7e5ed3661d4c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786ed2a7-36cd-4c23-83bb-9d661a53bde3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "654afbc6-09d3-43be-a26e-eab57ab573ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91307a03-73b8-4b3c-89f2-1d5c0655a021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03836656-ab39-4feb-ab39-3668263f9b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3b0f5e-7e90-437a-88a6-5877d5698b40",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e37a2a6-719c-413b-be7d-983710c5414d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3dbbdd-7c0f-4d06-b59e-813794b7952a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1695374-00b7-4a0a-b695-2a77d274bbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d836e00-2348-4a98-a7f9-6bfb4909e5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133c9ba5-0b52-4071-a710-d223b4f4a501",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fe79c2-8ac9-4407-a3b7-4fec92e9e9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0986e5-9afb-4b26-b6f9-4dfea170efc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e272d0b-460b-495f-8ee5-a90873044f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b969e1a2-24d3-4816-8cb4-3fd9fa1801a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8983a40d-b5a5-46b8-990c-78c2dee4d3d9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148e6888-39e3-4a83-ab57-b85a3b9ea6be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e0e3e0-8122-4875-8360-47f7a2b4f3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6b4a2e-0916-4243-8f2c-7162416f6e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3d84e3-034b-440d-b052-493fd46d4054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25229d2b-6cbe-401b-9225-935d7b019fb7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1659474f-9600-4fc5-837e-65d9fabc2e9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfcc58f-d49c-4129-89f9-f807a790c839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07516c8-858b-496d-9bee-11ee5c324026",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35dcafc-0d43-4abd-9aa7-c25866571681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd7cd6c-64f1-4d42-a5a0-7bc8558716e3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734bb371-f81e-4293-b8e2-278c7bbd47d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca8c6e84-78bb-4f45-90be-82387c539d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5a318a-f1a6-4182-88b1-59bdad85079f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e9994b-013f-4852-b724-6f0d87a6d4cc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c11247a-2af5-4e6c-be4e-355a64bd55c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0985de7-da96-4c6e-a689-470a3a3488a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb0e11b-93f4-4754-8586-8fdbdeb5d9f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30f85943-ef51-4b47-88f5-fb456f5aebce"
                    }
                  }
                ]
              },
              {
                "id": "48ac16f2-2394-451b-8c4f-4701c61681dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4be06db2-f3c2-47b1-838d-96dadfef6f56",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7146c8b3-7a46-4883-8dd4-9edf544bbfbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ee9d4885-ccbf-4f67-9173-6921b2c42eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ca79a1-31d8-4109-9579-bdfd8820f47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60bc8514-906f-4c27-b788-181c8173a510"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c66279c-2d8f-4222-9e8b-53c964579b1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92acd6ab-776a-48ba-b6b9-fd9c0d83476a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38446aa9-201c-4156-b888-21b3040c2d36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8268cdf-586a-408b-8f8b-ae6899d78ece"
                    }
                  }
                ]
              },
              {
                "id": "c5d3d834-d606-468f-af78-49d1a265809e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4873526b-afeb-4548-894d-af05bd62887a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce06a188-fc46-439b-98b1-8971e1644fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c251b8d7-ad32-48f0-8b04-28d697329ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2f209c-1c88-45b9-8337-80a4770f6331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8cbf82-6961-4f9c-956f-091a849dc756"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "32c8cb31-ecfe-46d9-9f54-adecd7101443",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a23de272-98de-460d-a1c9-438d20006a05",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f14db4a9-2021-4366-8175-b8affd6e30da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "531559f9-b0f7-4808-b726-8ee29b3915e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e6b96cc-5ae1-403a-bf32-24a1515984b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bae4fc3-c3bc-42eb-9418-9efb182c9cce"
                    }
                  }
                ]
              },
              {
                "id": "365155e8-8f84-4ce1-b3b5-084a68b3acd9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dde70ec5-0b80-45b6-9105-87d53f83423e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d7ef3b12-ffa5-4fd1-9659-bff3e0ec94c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed0a7d0b-016d-4dac-b8e3-d9f075225096",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c61a7d35-70bb-40a9-8770-b67d32e6c6f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83336847-b281-43be-ae20-2ae28f6c88c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c4f65b68-1d84-4d24-b7d9-ed3baefbaa0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76ed51ec-9ede-4276-a79e-6e1077d47109",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3c37729-cb16-40cc-a627-c46116bd2e38"
            }
          }
        ]
      },
      {
        "id": "c4ea169f-3199-49d4-a577-b7c8ea44dd40",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "811c8b11-c1b6-41b3-821b-1066de90ac08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbb8a363-bedd-438a-a2c7-8cd491c1c6cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ce289fc-8650-433e-9526-e60db2d56947",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3857cd-56ab-424f-ae0d-3c9917e9e379",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5e07e22-2107-4e6a-bc45-257428770d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0304b66c-eb6b-4f01-9b79-9d48d7dfff5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d42ee38-0a06-405d-873d-d55bc5fc7064"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f406d9f-e426-4743-b323-9aa99d35da56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8bfed31-8a59-4463-a112-9336398407eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1bfdf35-958f-4e98-8a21-6edd7d22ed83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "524ea121-625e-4017-89e1-98d58e3f9149"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7961278d-334a-4ff5-9ed0-c712050b0db4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8a1b6283-d087-49aa-988e-025be6d9e397"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a4388bf-d6ed-4978-8c91-85044aa49f45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf273a79-41fb-4ecb-ab83-b1c518952d24"
            }
          }
        ]
      },
      {
        "id": "1159b9b8-68f5-42a0-89cd-2dc5ca8a13a8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b3cd3c56-b357-4ec2-bae8-eb5e732f360e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3cb0348-6a31-4fa0-a02d-0b1bc8a1411f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b925040-66ab-44e8-a289-e78779dc6514",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6f673e-e0fd-48b5-b6f8-ada280c62f06",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ddf5da2-084d-4cfb-8ab0-ba6d89712616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62640021-3e62-4e01-9578-e267e99291b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab52c916-dcac-49c7-9b32-991adf6524a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "050d5407-70d7-4b9a-b40a-6cda59caac7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0888657-d8af-442f-a9db-0bb9c479ab29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb973135-2fb9-470d-a7cd-0f81357cbe62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a842e87-3ce2-4283-9225-d9297e5b8b87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28b2c1a8-5c8d-4243-8a37-4e0cef832445",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e4e04822-47e1-4cb7-afc0-d5eee0ec038d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "973ba129-c06a-4623-baa5-26c48d45a78c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e347e65d-6c0d-49b1-ad9d-82369059ac78"
            }
          }
        ]
      },
      {
        "id": "f7c03e40-756a-43d2-909b-cf8b567c10b5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "736774e6-b592-4ed7-87ba-284051402e1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3781f727-8724-4941-ad72-1148d0747182",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb0e0a9f-e40f-4feb-9699-12589c7ef3e3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86cf1cd-301a-4f24-b000-7a86d78efac8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20018718-dc75-4da6-8e87-c3d332cbd820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175f39ff-072f-4960-bedf-0094d99306ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fc68344-4824-4861-82e8-ceea949d3594"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43c24ff9-204b-4f6e-a51f-f5797836cc60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b68f81b4-a2c7-47bf-ad03-438c2d1510e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbb80db6-0261-4cb9-8800-c4b96fd9a8b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "497a6fc9-7d73-43a3-8673-c3703face64e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6dbb5c3-8676-43aa-8d68-9091158895f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8cc586d3-a921-4d80-bacc-fe166d73bfde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cb8b3d0-b5e8-49e8-b03e-7b564f1b26a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf4be06c-0a53-441a-98a9-31231144297d"
            }
          }
        ]
      },
      {
        "id": "5a98dcd0-5153-46a9-9dff-fc465c5a6382",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "519267e5-d5bc-4070-ad2b-0932d7c4ae6c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "903eab07-9f66-4a23-9883-9eb7454fc65e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3a8ccc1a-b517-40f2-a9df-92bd9b9567a2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c714f230-dbab-4e55-ac87-417ab9359cb7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f486e6b-ac78-40c4-b8fc-90037ae81e24",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 75.21825396825396,
      "responseMin": 7,
      "responseMax": 595,
      "responseSd": 78.59396852822016,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714264731861,
      "completed": 1714264759316
    },
    "executions": [
      {
        "id": "5d721c3e-dd50-45ac-b999-8abe44779438",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "265bbfd9-ee89-4719-93c2-95b921f2bc03",
          "httpRequestId": "71029682-de53-4642-b158-4add530c7852"
        },
        "item": {
          "id": "5d721c3e-dd50-45ac-b999-8abe44779438",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "daaa543c-4089-4116-ba31-728f8dcb1003",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "6edfaf02-cf7d-4bc8-a7a0-ed0c5fe6cae2",
        "cursor": {
          "ref": "c86a74de-5993-42db-9154-fd168adc658b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d652de20-28e7-490b-ae51-3f15d82235af"
        },
        "item": {
          "id": "6edfaf02-cf7d-4bc8-a7a0-ed0c5fe6cae2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "973c4461-bfdd-42a3-9c82-3d2fe13bac04",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "496721e5-e1ae-43ed-bf65-36cf4a45f853",
        "cursor": {
          "ref": "fa0e5b6f-3879-4566-95a9-5b7164e1e7cd",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1fdd96b0-8933-423a-b831-721b359e93f3"
        },
        "item": {
          "id": "496721e5-e1ae-43ed-bf65-36cf4a45f853",
          "name": "did_json"
        },
        "response": {
          "id": "4e770024-412a-45b2-8568-23b25256fa83",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6dd59a-a0bf-4bbe-babc-d78c4d0ca1fb",
        "cursor": {
          "ref": "824e686a-6832-4a0c-913f-6fc2288f015f",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6f66235f-0304-450a-9b69-17707320a482"
        },
        "item": {
          "id": "6c6dd59a-a0bf-4bbe-babc-d78c4d0ca1fb",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb2c722a-8230-484c-8ae4-5778d3710cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6dd59a-a0bf-4bbe-babc-d78c4d0ca1fb",
        "cursor": {
          "ref": "824e686a-6832-4a0c-913f-6fc2288f015f",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6f66235f-0304-450a-9b69-17707320a482"
        },
        "item": {
          "id": "6c6dd59a-a0bf-4bbe-babc-d78c4d0ca1fb",
          "name": "did:invalid"
        },
        "response": {
          "id": "eb2c722a-8230-484c-8ae4-5778d3710cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd8c515-3c32-462f-87ab-ce0971c9b52b",
        "cursor": {
          "ref": "6d3ab1a8-154b-4e3e-b7e5-16de19f1a077",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "03e70942-555f-48ec-9c5e-73888411d9b8"
        },
        "item": {
          "id": "3dd8c515-3c32-462f-87ab-ce0971c9b52b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "098cf632-7cb6-4624-a115-0f2c6aedbd93",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6969aa62-8160-4a53-ab27-e097e21dac3c",
        "cursor": {
          "ref": "04620152-cb3a-487c-85f5-2d6df26a6adc",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d49c6849-d963-43d3-ac9e-4029ba09de9e"
        },
        "item": {
          "id": "6969aa62-8160-4a53-ab27-e097e21dac3c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7b07030d-0fe8-44cc-99c9-b271483761b0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b19a51c-afaf-4ea8-a7b2-3e894bfdf73d",
        "cursor": {
          "ref": "8684a0a3-7e6a-4b7d-9133-167848d271f6",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b43bb99a-38d3-4c43-be0b-0b5781908fd9"
        },
        "item": {
          "id": "5b19a51c-afaf-4ea8-a7b2-3e894bfdf73d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "be987707-78df-4cd3-aba4-d067b43dd2f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc9d9f3-66ee-4bbe-98fd-71d4720c84ce",
        "cursor": {
          "ref": "1c3a1079-6398-4414-980f-15ff5ebdfe2a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3001c3d-43c6-47fb-affa-4e6e1abb4e16"
        },
        "item": {
          "id": "ddc9d9f3-66ee-4bbe-98fd-71d4720c84ce",
          "name": "identifiers"
        },
        "response": {
          "id": "1d721588-0faa-4733-b7df-fc1d0f7e3b9a",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ee1f94-b77a-4aa6-9060-7468ed6f171b",
        "cursor": {
          "ref": "7e5d6c71-9d1c-4673-8b8a-88a845ce0234",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6be7d733-672c-4693-b4a7-4f8abfd11ee6"
        },
        "item": {
          "id": "12ee1f94-b77a-4aa6-9060-7468ed6f171b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7a1f2db9-948b-476e-8649-2fa263223be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2357034b-5bf2-4a34-b280-407747f9f220",
        "cursor": {
          "ref": "4761fe20-fd71-438b-93e6-43f38ab25a19",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "474e34ad-63f9-42ae-aba0-157b7a4e4a10"
        },
        "item": {
          "id": "2357034b-5bf2-4a34-b280-407747f9f220",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4f819781-db2a-4b7d-919c-ddc0714687b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0656c6bc-3c21-4191-8f90-175ac2478fc3",
        "cursor": {
          "ref": "ffc49468-6a02-4356-8ca7-afa67b4627e0",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d8745b73-2e26-4af6-9df7-77c0463e13a2"
        },
        "item": {
          "id": "0656c6bc-3c21-4191-8f90-175ac2478fc3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1a572e01-adcc-4369-8388-ba28e1f2459e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a015c9-dffd-4fe5-9401-ed7c1545ed10",
        "cursor": {
          "ref": "0f3f7712-0bd6-4814-9ed8-f58f8471b4a4",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2aea22f5-7a4b-4ee2-b6b8-ff5f75441256"
        },
        "item": {
          "id": "62a015c9-dffd-4fe5-9401-ed7c1545ed10",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9c983648-33b6-41f7-b5d4-384de2c5e05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e8ad98-0dd2-4816-a427-d95580ebd698",
        "cursor": {
          "ref": "ef61aca2-6493-4d0d-9392-01e0251fb550",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e8d35520-dda9-49cb-b811-354411a131a0"
        },
        "item": {
          "id": "d6e8ad98-0dd2-4816-a427-d95580ebd698",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c4ee2683-4cf6-453d-bcea-be0339bd0e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a820d77-053b-4c30-b4e1-a6ad12f8bb8f",
        "cursor": {
          "ref": "1c0f822a-4611-4681-a94e-ab236665afeb",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4f5f16b4-939b-4694-8720-989db432f33a"
        },
        "item": {
          "id": "4a820d77-053b-4c30-b4e1-a6ad12f8bb8f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f315d5aa-35a6-4071-8a00-720d31a4dd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fca0779-9295-4ac8-b872-52d9c15a8004",
        "cursor": {
          "ref": "6005fb1b-34bb-4204-ab6d-c51dff413d42",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "60e69da2-be28-4afb-a713-a91d1b967565"
        },
        "item": {
          "id": "2fca0779-9295-4ac8-b872-52d9c15a8004",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0e34d1a2-0c53-4a68-b18b-125088bd7017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b8e6fe-08ac-4d3a-956d-b3f5c95b919e",
        "cursor": {
          "ref": "543f1e6d-bfd7-4e76-9e9e-757cc2956b54",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "efd6b574-3293-4e6e-9c88-3de3678175d5"
        },
        "item": {
          "id": "67b8e6fe-08ac-4d3a-956d-b3f5c95b919e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "68de509a-99b2-4add-8a94-09e6ac268537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbdf212-19d4-47fb-93ab-a6c35470e4f4",
        "cursor": {
          "ref": "bd6543da-63ce-47c1-b56b-a90a95c64481",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c1ab84c4-3185-4ab7-b255-7ac6d9b7f1cf"
        },
        "item": {
          "id": "8bbdf212-19d4-47fb-93ab-a6c35470e4f4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ae429668-4445-40f7-88cc-9c8fe3c0b9b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2c0706-b6f8-4cd0-94b5-c4f6253f1d58",
        "cursor": {
          "ref": "17e6a25c-729b-4d9b-bdfe-f9031ed6e271",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "95f25fd4-fc5d-4d1a-82b8-d7edabe6d909"
        },
        "item": {
          "id": "ae2c0706-b6f8-4cd0-94b5-c4f6253f1d58",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06bae97f-e3da-4ec4-9bb6-bd5acd57122d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d7cad1-e803-41ae-b987-d44a7fdfeb6d",
        "cursor": {
          "ref": "efc27acf-395b-491c-806f-18071a7209f9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2c2497bf-2719-4667-8a35-5b16e277b3bb"
        },
        "item": {
          "id": "d2d7cad1-e803-41ae-b987-d44a7fdfeb6d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a2b792e6-d33a-4f7b-8a51-97c179bb068d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e36d09-c43d-4467-b9b8-1d3b7b9e6406",
        "cursor": {
          "ref": "e38af98d-a598-475b-834f-a7153e6dabf7",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e673db58-0f8b-4c44-926f-be04e1aef3c9"
        },
        "item": {
          "id": "e8e36d09-c43d-4467-b9b8-1d3b7b9e6406",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4b8f777d-9e70-4609-be2b-fcee5d826f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895b3b6a-83d0-4106-ab35-82ce1b71fafd",
        "cursor": {
          "ref": "d4e45885-ff0e-42c6-a96b-5bbc8fce4cf6",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "feead89f-ba6d-495e-866e-64c62291223f"
        },
        "item": {
          "id": "895b3b6a-83d0-4106-ab35-82ce1b71fafd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "05fd8f74-59b5-409b-a20f-713e704b4877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579d9eab-3d8b-4253-b9c9-a0386e76a951",
        "cursor": {
          "ref": "372e243c-030c-471e-9930-fb1a0e2d1641",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b77d3ae2-22b6-4e4d-883f-c293546101cb"
        },
        "item": {
          "id": "579d9eab-3d8b-4253-b9c9-a0386e76a951",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2b52c016-0b26-497d-a15f-b1e2b25d01f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a601431a-e623-4232-8cb0-ecd49a19839b",
        "cursor": {
          "ref": "d04c2a94-d995-450f-b1e4-3338db0fb94e",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a728cdda-f487-49af-a421-4405d0cad8c0"
        },
        "item": {
          "id": "a601431a-e623-4232-8cb0-ecd49a19839b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5f7bd62e-e28b-4387-8531-fdadc1d767da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6557911e-7864-44ad-961f-475c59545b82",
        "cursor": {
          "ref": "ae7bd821-ef92-49cc-b4f2-b2e1413d64b7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c9b589f9-4994-401c-a7e8-c1c396c28542"
        },
        "item": {
          "id": "6557911e-7864-44ad-961f-475c59545b82",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3e0b3fa7-cc8b-458c-a9fb-a02c7df3f2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b278d14b-e19d-4c6c-8db8-67de65cbb39d",
        "cursor": {
          "ref": "ad0c4916-a69a-49bb-96bd-d2d0b9fac972",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a3b2edd-f8d2-4f0c-a451-6d0a627056b6"
        },
        "item": {
          "id": "b278d14b-e19d-4c6c-8db8-67de65cbb39d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d44fedd8-7c8d-4217-a39b-7f97482817a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a939e7-0e9b-41c3-9531-a301f3dc0b8b",
        "cursor": {
          "ref": "087b09a1-78cb-4b37-a9df-b7bc73c20105",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ac91205f-cff7-45e9-9903-76dbffeae4cf"
        },
        "item": {
          "id": "c8a939e7-0e9b-41c3-9531-a301f3dc0b8b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "edd3d898-c685-4114-b765-a1c3706e0d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87865c1-9213-4fc8-9cfd-dcc5a2866c47",
        "cursor": {
          "ref": "bdc40a91-5098-4e8d-b353-4fde46dcd55a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "88024958-a340-4a0d-8f54-025d1cb6b697"
        },
        "item": {
          "id": "d87865c1-9213-4fc8-9cfd-dcc5a2866c47",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2faa4205-98ce-4c39-b6d5-fcc7397c09be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e3138d-c9b4-469c-abb1-8b1303e01b4e",
        "cursor": {
          "ref": "9e307182-7aa4-42cc-abbb-d7997550a20f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dc1c673a-5b5c-40e7-9a19-879c7662add8"
        },
        "item": {
          "id": "e6e3138d-c9b4-469c-abb1-8b1303e01b4e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6e58fcf2-60d2-44a6-ba0f-27aeb730144c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba5a8fe-28b3-4086-8344-8149f49505d8",
        "cursor": {
          "ref": "6538dbaa-4e8a-4446-bc91-8f404d84583e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5329d905-586d-45ca-83f1-97464d198208"
        },
        "item": {
          "id": "1ba5a8fe-28b3-4086-8344-8149f49505d8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ba251f4e-9fc5-42ea-be1b-f23cdb0cb12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06464d5f-433d-4b1a-b666-7a834cb657d8",
        "cursor": {
          "ref": "67dc45ef-8e2b-4668-88c5-3854d08ce1d6",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1c3fb054-e98f-4580-a292-1f09010d5bee"
        },
        "item": {
          "id": "06464d5f-433d-4b1a-b666-7a834cb657d8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "18c53133-c3eb-4054-8b68-4987c55691ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697fc331-f88e-4ef7-a0f0-ed091f01e635",
        "cursor": {
          "ref": "a1920257-4fd8-42f9-a6d5-1932a825a23a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b9d397e6-a748-4b4a-9f90-8a14d6050c8e"
        },
        "item": {
          "id": "697fc331-f88e-4ef7-a0f0-ed091f01e635",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6455b0b6-adfd-457f-977d-0b1507f210f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decc939f-4063-4fc9-b9bc-8d29426f2f8c",
        "cursor": {
          "ref": "1ca6a69f-3916-49a3-9431-dca765a02bba",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1a98b41b-6c0e-48a4-9021-140930b18c95"
        },
        "item": {
          "id": "decc939f-4063-4fc9-b9bc-8d29426f2f8c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8686a363-835b-420d-bb1e-e7c333c6db60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b71d3aa-8ab4-49c1-be47-8a4ba184bf00",
        "cursor": {
          "ref": "5aed9d28-6291-4d5b-ac13-466d80bc0a25",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b4758ef9-f4eb-47f6-91cc-c30ee497cf81"
        },
        "item": {
          "id": "5b71d3aa-8ab4-49c1-be47-8a4ba184bf00",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "95369bbe-7e7b-40d8-a8cc-2b35098839fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdc344e-ab06-4960-aa70-8cdec4d59631",
        "cursor": {
          "ref": "7ab2ae39-deb8-4407-9f32-26fe2c6b69b8",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8330cca4-4c5a-44f2-8df2-d361016d326d"
        },
        "item": {
          "id": "ebdc344e-ab06-4960-aa70-8cdec4d59631",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b7e56f5f-5f69-4b5f-adbc-ed74bc7d3e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4df047-dd55-47bf-8cff-915d33ff57d9",
        "cursor": {
          "ref": "2bde5f21-83d5-43ec-9b23-455b0f01fbcb",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "18e27a4e-2f8f-4460-8866-e2466693b8d8"
        },
        "item": {
          "id": "fe4df047-dd55-47bf-8cff-915d33ff57d9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e46b16fa-47d1-465b-aa5a-1c613f00709d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267c3680-a165-48d1-a669-813422bb6ef5",
        "cursor": {
          "ref": "b6a3e50c-4eff-44af-b715-b3af71943cce",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b8c970a3-0d82-4f07-b4ac-e69b7333245f"
        },
        "item": {
          "id": "267c3680-a165-48d1-a669-813422bb6ef5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "16b779c5-e633-4fc2-b8f8-2d8cdfc712b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54156780-4007-4759-bf8a-48ad35eaf2d0",
        "cursor": {
          "ref": "658a071b-8a66-42a0-9dc1-70b53b7c96a7",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "286969a7-01b1-437d-989a-b8f1666daee6"
        },
        "item": {
          "id": "54156780-4007-4759-bf8a-48ad35eaf2d0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cbe64ae5-d580-47ba-93c6-73656b36e282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3dcb5c-a231-47bf-a273-f608bb84fb5c",
        "cursor": {
          "ref": "9b55218b-2b84-46e1-8e48-558a69a7ff67",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d963d533-406f-4774-b62b-a25a704b04e7"
        },
        "item": {
          "id": "ed3dcb5c-a231-47bf-a273-f608bb84fb5c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "892e0c32-d77e-4d9b-b716-82f1cee0f174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65b51f4-8f29-45ef-b388-ff9125ba0a34",
        "cursor": {
          "ref": "4ee83506-2cfa-449c-b8e1-cce00b3b75c6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5c3a29c7-e30d-4eb4-bc6c-3c309a4f368c"
        },
        "item": {
          "id": "a65b51f4-8f29-45ef-b388-ff9125ba0a34",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ab0be8b3-6831-414a-8aa8-0eb8017175cf",
          "status": "Created",
          "code": 201,
          "responseTime": 595,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a155792d-bb44-4949-97ce-f8f2a639d721",
        "cursor": {
          "ref": "e4792700-bc4a-4610-86f6-50ebebef1ff5",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "297146be-bc89-4dd4-92ad-2cd8c6540f87"
        },
        "item": {
          "id": "a155792d-bb44-4949-97ce-f8f2a639d721",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bdcc5e3b-9705-46ab-b67e-fc6658c8f9b2",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1ddf8962-6883-41bc-8e2e-7d14d6d40537",
        "cursor": {
          "ref": "c6b14081-30d5-4af4-b5d2-8d6bc099de38",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a5109999-10a1-4f23-b67e-c870e13787e5"
        },
        "item": {
          "id": "1ddf8962-6883-41bc-8e2e-7d14d6d40537",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "888bfa0d-f427-46f8-96da-3304b2cd013e",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "71568643-8af9-4b9e-bbe7-1c453ef63cb4",
        "cursor": {
          "ref": "c41a9873-ffb4-4181-985c-0e785011a2bb",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "26752c49-7582-48c7-8ccb-b019b571568b"
        },
        "item": {
          "id": "71568643-8af9-4b9e-bbe7-1c453ef63cb4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c1be6e52-c7ac-49a6-adbd-bd6dca0ce74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e65122-144d-4079-98ab-6f47119c1b3e",
        "cursor": {
          "ref": "f72f5a9e-8d34-4c84-a8c2-69192ccd3a1f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9e86d769-97fe-4800-aac6-438403e95db3"
        },
        "item": {
          "id": "90e65122-144d-4079-98ab-6f47119c1b3e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac087442-3dd7-4f39-b7ec-4b81f5f13279",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f639984a-16b7-4e3d-ae8e-9a072219c026",
        "cursor": {
          "ref": "6de5b1d6-c203-4b31-afe8-e47fb77b6f8d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9852af8e-6d16-4a40-a8dd-306eeeee2309"
        },
        "item": {
          "id": "f639984a-16b7-4e3d-ae8e-9a072219c026",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a5017758-2adc-4b10-a75c-454746d9cb4f",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1c6f11f9-97b3-4014-962e-8a5bf6330a81",
        "cursor": {
          "ref": "ac42f58c-2ef7-4ab0-a1bd-cc5127bdaca1",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b534b334-6293-4b30-ba78-1ab92573e2a9"
        },
        "item": {
          "id": "1c6f11f9-97b3-4014-962e-8a5bf6330a81",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fee0f9d3-ec50-45d2-ae02-0a281d7dbfab",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cd6b0041-7057-4000-8d83-5434882dd905",
        "cursor": {
          "ref": "ded046aa-e055-4ab9-b29b-8dde2921766c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "13a90e4d-ce41-4bd1-8fa3-47986933f4f9"
        },
        "item": {
          "id": "cd6b0041-7057-4000-8d83-5434882dd905",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4eb74b4f-d150-4b3e-9321-e95af77b4764",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3f2a8aec-5245-4d61-84c7-e9c8a791cc43",
        "cursor": {
          "ref": "a850a487-efe2-4a7b-b9c5-28bd69268f80",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "236898e3-a3e3-4cbf-a897-52d82cbb271d"
        },
        "item": {
          "id": "3f2a8aec-5245-4d61-84c7-e9c8a791cc43",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "54da4e13-6e08-4db0-9bf8-94168dea96ff",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b114c5b7-8959-47f5-a955-cbedf3138c96",
        "cursor": {
          "ref": "88092449-7b15-4f1f-abba-29ddecc4bc28",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "21155a59-8aac-43bd-8002-354ee87b4c2b"
        },
        "item": {
          "id": "b114c5b7-8959-47f5-a955-cbedf3138c96",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c2dba557-acee-4a49-9ab9-b42e358dc5df",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5a0a7fa3-8770-4ea2-bcec-d7ca6d849def",
        "cursor": {
          "ref": "f013a589-146a-4b12-ab88-7cdaa55537de",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5d98cc34-d651-436a-895a-6e9fc0ec4054"
        },
        "item": {
          "id": "5a0a7fa3-8770-4ea2-bcec-d7ca6d849def",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c003d03f-c2fe-4db1-ba1f-b6b9f5f72887",
          "status": "Created",
          "code": 201,
          "responseTime": 399,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "889ebb29-7f05-4b7e-8c3c-9d5fbfec3d43",
        "cursor": {
          "ref": "8d5a4560-3d2e-4d6a-8f75-bc58e5eb7def",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bfb76d5d-0ef3-4600-983d-1768415d325a"
        },
        "item": {
          "id": "889ebb29-7f05-4b7e-8c3c-9d5fbfec3d43",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c6ca2d37-894a-4e85-a18a-b467644a72b1",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8caba7ea-d1f5-4c90-816c-43cc50d3aee7",
        "cursor": {
          "ref": "bddbfbd5-4b2d-4940-b70e-c7edc9c7d391",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8be211a5-c36e-4250-91fc-0003a8429af0"
        },
        "item": {
          "id": "8caba7ea-d1f5-4c90-816c-43cc50d3aee7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4c4c85a3-b97e-4bdf-8969-f2cf36f34e47",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "480bf17d-d9a2-4707-8e65-ac86d7f62581",
        "cursor": {
          "ref": "0ad4bf26-544f-4fe6-9d4a-3a2bcf1fd587",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "22642830-339c-4e83-bed5-e6b6cebd5f8b"
        },
        "item": {
          "id": "480bf17d-d9a2-4707-8e65-ac86d7f62581",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eacdb329-5456-4cc3-a01c-c6ce722a83bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819cd8bf-03ff-4c27-b467-f66779f03cc8",
        "cursor": {
          "ref": "152f37d7-fdd9-41bf-9c15-5543a3430f3e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82714f3a-ff81-41f4-8ad4-9e7694dc927c"
        },
        "item": {
          "id": "819cd8bf-03ff-4c27-b467-f66779f03cc8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4f492e0d-251a-48c2-8fcf-dfe4a54d9dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fed340a-5be7-4331-b093-29ed95ac2a0e",
        "cursor": {
          "ref": "9747a575-5ea5-4240-ba41-5ff74897ae39",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4dabd107-b86a-4094-a678-0bad7b5d6c9b"
        },
        "item": {
          "id": "9fed340a-5be7-4331-b093-29ed95ac2a0e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0f639a1b-b12a-4f2a-afa7-887456db6687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b913f4e3-0dac-4e1a-a227-bf0633ffe626",
        "cursor": {
          "ref": "1dbe2f39-4cb7-4a5c-94c6-56456f278e36",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "80ac0630-2342-4f5c-bd27-4b67f6222895"
        },
        "item": {
          "id": "b913f4e3-0dac-4e1a-a227-bf0633ffe626",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6556a055-3ec0-44a0-941b-b3c64307d558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fe593c-1308-4af3-9b76-d3b9bdb79544",
        "cursor": {
          "ref": "b0ff5b67-fc99-4958-a84c-5355b7ca965c",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "76c4214f-9a73-4a51-a7c6-3b04ae1ff5af"
        },
        "item": {
          "id": "84fe593c-1308-4af3-9b76-d3b9bdb79544",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "862837f4-f52e-4437-ab8f-b0f4a7867ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3b87ff-805b-4576-acd2-de070393465f",
        "cursor": {
          "ref": "f5b80b2f-6c9f-49f4-ba4a-1db4b707384a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bb90c120-66f4-42d0-a849-ea59ebc237da"
        },
        "item": {
          "id": "be3b87ff-805b-4576-acd2-de070393465f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6bd65958-f6fd-4bbf-8ce6-803ba6d96c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3bea9e-b64b-4687-b73e-0648cafacc76",
        "cursor": {
          "ref": "906ebc49-748f-4250-8376-29aecfa00d54",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d2b24dff-4541-4593-8b0e-9c4266ac2118"
        },
        "item": {
          "id": "0c3bea9e-b64b-4687-b73e-0648cafacc76",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b1d3949c-a534-4f10-a298-ec4f243c3644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79e3d2e-6f37-45f2-8b9f-507a37810c00",
        "cursor": {
          "ref": "b227d6e1-aee3-429d-a138-428ddc95ec93",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "02a926c5-5935-4dd9-88f9-5c909d522bc9"
        },
        "item": {
          "id": "a79e3d2e-6f37-45f2-8b9f-507a37810c00",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6ecc385c-313c-4bc5-9a00-e2a8c1e42000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240e26a6-5b45-4b80-8c19-056ba01a0da1",
        "cursor": {
          "ref": "d6eb6d48-a216-4620-ac0e-38d2acd49ec3",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c5c48340-1e67-4527-a25c-4743807a72cb"
        },
        "item": {
          "id": "240e26a6-5b45-4b80-8c19-056ba01a0da1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "421e10f4-aa22-4ea2-b396-ca94f6f8d31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6779b1-e0c6-4e7a-bb9a-6add65475b47",
        "cursor": {
          "ref": "2fb1afe6-b580-4b25-be80-47c9b0193096",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "aca7e88b-cb9c-41d6-8981-fe199838a464"
        },
        "item": {
          "id": "3a6779b1-e0c6-4e7a-bb9a-6add65475b47",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "88ea3503-0f70-449f-b217-6a96a3193bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8aeb1c-ee20-467c-9aa6-9e41079412a0",
        "cursor": {
          "ref": "49042fb3-d796-469c-b718-6aa9afba8991",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d499626c-6335-404e-b47e-d527e2073d4e"
        },
        "item": {
          "id": "4c8aeb1c-ee20-467c-9aa6-9e41079412a0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ad5147f5-7819-481b-9fdf-b76988a2d268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1be7448-d5ba-4c9f-94e2-c6560ff3d74b",
        "cursor": {
          "ref": "9679cb73-c105-4486-9395-eb2908fc45c3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4e403b05-da14-4a65-92fe-4bf82007f4dd"
        },
        "item": {
          "id": "a1be7448-d5ba-4c9f-94e2-c6560ff3d74b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8f5c6c73-bfea-47f5-bb28-fc2744bc1402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cabdab2-634a-4bd8-a651-6165e9f9868c",
        "cursor": {
          "ref": "f673b982-1577-4d8c-9247-ff4f403f782a",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f19d43b2-0946-47a2-9578-20352d55289f"
        },
        "item": {
          "id": "5cabdab2-634a-4bd8-a651-6165e9f9868c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8d01c999-e21f-4ec0-8d6f-97b27b793a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879dee0a-ec98-49a2-b3d2-7f10f7dadcfb",
        "cursor": {
          "ref": "187f1403-31b4-49f5-8f54-9a35cf530902",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e373d90d-63b8-4d0b-b01b-bfec491cd7e1"
        },
        "item": {
          "id": "879dee0a-ec98-49a2-b3d2-7f10f7dadcfb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eaaf593b-649e-4040-b91c-1a8862fd941d",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bef6b712-6dc1-4b08-8acb-bb0cc6d32fd8",
        "cursor": {
          "ref": "232bf1c0-ac95-4963-a9c0-22559e9d8146",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3e962fae-d18f-4514-a8e6-be25bd9c5392"
        },
        "item": {
          "id": "bef6b712-6dc1-4b08-8acb-bb0cc6d32fd8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3cc83e42-52e3-49e1-bb74-c5e0886c0ccf",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5af70ac3-3f16-4427-b200-f378fa057e63",
        "cursor": {
          "ref": "805489fa-ea60-4e3f-b878-c42c462c00a1",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "38a2ac99-28d7-46d8-a2e8-6a230c6082fb"
        },
        "item": {
          "id": "5af70ac3-3f16-4427-b200-f378fa057e63",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a92cebe2-81b3-41d4-b89c-a8eeda97d379",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "69136a66-1757-4342-9750-96bfdc59cd01",
        "cursor": {
          "ref": "02712b98-6e07-4d7f-b770-22aeb9594d00",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "293e2987-b454-4e19-9f3e-4ce24c41c8ae"
        },
        "item": {
          "id": "69136a66-1757-4342-9750-96bfdc59cd01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "339fe49d-887d-4fe9-8233-aea095c76c4b",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5f06a546-276b-4aa3-a782-6cb183a5487e",
        "cursor": {
          "ref": "d5dadb79-91b4-4c40-a8fc-65046142f791",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f2e0b55c-46c2-433d-9188-50eb9f8ad727"
        },
        "item": {
          "id": "5f06a546-276b-4aa3-a782-6cb183a5487e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "63b83cd8-2003-4030-90b1-896fe9adfa9f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ab7dc555-1e3a-4690-b718-179f151d26d0",
        "cursor": {
          "ref": "7ab1c8ad-8b81-4040-a3df-6b2ab1f383b5",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c3610ea9-7ebb-494a-9f43-0241012a05ff"
        },
        "item": {
          "id": "ab7dc555-1e3a-4690-b718-179f151d26d0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "329e8a36-d0b5-48ec-a0b8-19a9fb06267b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808fcc26-549b-40f6-bed4-6822826fc2de",
        "cursor": {
          "ref": "fc642a9e-dd95-4162-963e-f423007c4c60",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2a88765b-9e57-4511-a483-07c365e8d2d6"
        },
        "item": {
          "id": "808fcc26-549b-40f6-bed4-6822826fc2de",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a063fa07-6ef1-447d-a9d4-747ea208372b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fc6a28-374e-45b2-ba25-d41dbf62676b",
        "cursor": {
          "ref": "095f15dc-37c6-4b38-b7af-36d43fe11dce",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dbe2a156-5f58-4682-8a93-5bf6370df740"
        },
        "item": {
          "id": "98fc6a28-374e-45b2-ba25-d41dbf62676b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "533ba8b5-1704-4f4a-9e86-b960178d2af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d00f35-7573-4bc6-9f39-0e8b3d9f0a4d",
        "cursor": {
          "ref": "38abe6ce-121a-460f-9cd4-49d54e1e5754",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bab9fb63-903a-45de-b29a-d95cdab3fe6f"
        },
        "item": {
          "id": "f6d00f35-7573-4bc6-9f39-0e8b3d9f0a4d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d1faf7d5-dc4e-4dc6-9ab7-d6d4947cd7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fd21a6-a37f-4215-8282-4fb05693057d",
        "cursor": {
          "ref": "db7acc51-fe77-4da9-81c1-983e1d0868f6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "653769fe-dee5-4e03-bf48-c74397a39b4b"
        },
        "item": {
          "id": "b8fd21a6-a37f-4215-8282-4fb05693057d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ad563328-144c-4b6a-8483-2c342ae51bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e769c61-8c63-462a-ac8f-00261a7b0760",
        "cursor": {
          "ref": "da6c5034-f425-409c-b108-27854240d8de",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e1477252-418d-418e-bea1-5b543b0c66fe"
        },
        "item": {
          "id": "3e769c61-8c63-462a-ac8f-00261a7b0760",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e5075f14-d6e9-447b-ae8c-a100649f9150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fc7d03-56d3-4462-b28b-d26b6d385510",
        "cursor": {
          "ref": "a91159f1-4c02-4fd5-9216-bbdad1fdd1c3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9ce20d01-a9cc-4e1a-9a60-443f1e101948"
        },
        "item": {
          "id": "a5fc7d03-56d3-4462-b28b-d26b6d385510",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2acc8c4d-0091-4e40-adb5-4ad828470639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6f1460-1449-4a68-9b82-9507b53df0a4",
        "cursor": {
          "ref": "4bc07149-4574-4656-aeca-684b01b2030e",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "efcaf5b7-4800-42e6-a347-a8b7d6573f7c"
        },
        "item": {
          "id": "9a6f1460-1449-4a68-9b82-9507b53df0a4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f5c15bb2-f2a5-411b-93cc-9b1930734c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419c232a-fdc9-48e8-a6a7-0364b23b3cd1",
        "cursor": {
          "ref": "d296c45d-18b4-46c4-9fa6-5c0d7034a140",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "261f13d5-cd25-4870-8fc9-4341ce75fcaa"
        },
        "item": {
          "id": "419c232a-fdc9-48e8-a6a7-0364b23b3cd1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9f7c58d7-a82a-4286-8646-986b257e26ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c122b04-3d99-4c0d-bdf0-bea7b456260a",
        "cursor": {
          "ref": "4493c39e-baad-4d6b-8173-2b8c0eb3e4a3",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d816325e-9f87-413f-a3ec-4f2e07368be5"
        },
        "item": {
          "id": "3c122b04-3d99-4c0d-bdf0-bea7b456260a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dc1fd7dd-ce8e-43bc-86c5-c5deec794e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa92a6bd-22d6-4627-9a54-0d7ae6607836",
        "cursor": {
          "ref": "5524b185-2216-44a2-9277-6d71dc073608",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "60cec1c6-3ff2-433f-9198-433c2a849428"
        },
        "item": {
          "id": "aa92a6bd-22d6-4627-9a54-0d7ae6607836",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "67e8e23e-efb2-4aa8-940e-cdd97bb633b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ae7cc2-402a-4fd2-acc8-c36a9049786c",
        "cursor": {
          "ref": "eef8fa8a-cbd2-4005-a673-da0b346df7b3",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f954348a-83a6-41d9-9769-108e50cfc01c"
        },
        "item": {
          "id": "39ae7cc2-402a-4fd2-acc8-c36a9049786c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5d8c32e1-bb43-4d6e-a8a8-b98385d48387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2076fc18-303b-46e9-940f-7e5f99bca066",
        "cursor": {
          "ref": "8a53ac73-a054-4a5e-8647-f2c70b7f6861",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2a9b69c5-caa4-4540-b05d-55fb441020e0"
        },
        "item": {
          "id": "2076fc18-303b-46e9-940f-7e5f99bca066",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b4c1c297-f292-4da7-8eec-810fb33d7023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562fa2ee-22fd-45c3-afd6-2c056253d08a",
        "cursor": {
          "ref": "23c56fa7-e8a5-469a-9761-c761b810d68d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5816f740-b498-47ed-b358-f66fe887b412"
        },
        "item": {
          "id": "562fa2ee-22fd-45c3-afd6-2c056253d08a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "277e78c1-63bb-4f1f-b6a7-82fa25e081a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11afee5-3ffc-4420-85d9-778580211756",
        "cursor": {
          "ref": "e6f439ad-5a08-49da-9404-56ad444b9a6b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "75634d5d-c441-4203-b646-e103b6817e91"
        },
        "item": {
          "id": "f11afee5-3ffc-4420-85d9-778580211756",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "89ef3645-6f3f-4527-97f8-1cecde805484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a16a99-42a8-4550-ad24-965eb3d6dcb8",
        "cursor": {
          "ref": "f40a1235-deb1-4682-925e-a3c49dfb68cd",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ae9bd4cf-9bb9-4925-be3d-c25dfd2af386"
        },
        "item": {
          "id": "d9a16a99-42a8-4550-ad24-965eb3d6dcb8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d310ed0e-ab2b-44c4-9a68-1a706731f086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cf3042-8f39-453e-8b2a-1f8755b42d9e",
        "cursor": {
          "ref": "2a269698-390c-4a1d-b801-b2778871f222",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a8e56eb7-935e-4ce2-bd5b-9d7bce100cbe"
        },
        "item": {
          "id": "33cf3042-8f39-453e-8b2a-1f8755b42d9e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "29604c29-1315-422b-877a-5b3c05a2683a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc74f7b-bc9c-4a59-823f-b3738b4ac923",
        "cursor": {
          "ref": "6d7260c2-5287-4d6c-b7ae-dfb20bc50514",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ce6fd6fa-fe7a-47e2-83cf-4e1c5138c6e9"
        },
        "item": {
          "id": "9bc74f7b-bc9c-4a59-823f-b3738b4ac923",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8bd46648-c083-48da-959e-a5a42990a2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b27fb0e-7883-4a06-82df-b5deb0a41b6a",
        "cursor": {
          "ref": "1de00369-a908-4a1b-8a14-6e1eef168f26",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "becaa5a1-12fd-4ef2-b82c-0c456e987173"
        },
        "item": {
          "id": "9b27fb0e-7883-4a06-82df-b5deb0a41b6a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "37f13af2-4769-47f8-96f5-3d5d245f1cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04eaf757-7cc0-4554-a344-f1183afea0c9",
        "cursor": {
          "ref": "3aeec88d-b968-4753-a43e-63388d125552",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6fabc6a6-2e9d-491d-bca1-9eae4762a98e"
        },
        "item": {
          "id": "04eaf757-7cc0-4554-a344-f1183afea0c9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e1c13036-7d3e-4b4f-b1e5-5f083b47f747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0df86f-5c3c-4d88-a3a1-5a0a1db9fea8",
        "cursor": {
          "ref": "eb85c21b-4017-4e6a-bbe2-6130e26f1ef4",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c0aed196-1a09-41bb-8ac3-144c008fab4c"
        },
        "item": {
          "id": "2b0df86f-5c3c-4d88-a3a1-5a0a1db9fea8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7a465af3-305e-457b-8792-28432b9f21f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da570a36-7895-45f8-9cbf-e0b2a00d4e7f",
        "cursor": {
          "ref": "3a5d4a01-661a-4fe7-bd76-4a2ffb0a6fb4",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "acb71149-7c8c-4db3-99ca-df2f252b10a2"
        },
        "item": {
          "id": "da570a36-7895-45f8-9cbf-e0b2a00d4e7f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7307e3ce-fe4f-41dd-8232-063c7f0fdee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586c1959-ea99-4fe5-b7f1-a573aaaf220e",
        "cursor": {
          "ref": "84d9ca9e-f346-4828-af7d-2ebbecafcd27",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f1307140-6c54-40d0-b2b6-ac3671efbcb7"
        },
        "item": {
          "id": "586c1959-ea99-4fe5-b7f1-a573aaaf220e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a4a3fd68-8de8-4fbf-ba44-a1596d5f2c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfed044-9257-41dd-a6e4-daee81403db5",
        "cursor": {
          "ref": "ccdfc61c-4469-466b-b1c2-2dfc5d75acd0",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c93edaaf-408e-4cdc-b52c-8a16ab99d5e1"
        },
        "item": {
          "id": "8bfed044-9257-41dd-a6e4-daee81403db5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b00170ca-32ab-4bb3-abf0-1fa70f34cb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee9f2db-a729-481a-a79d-3616fca63cb7",
        "cursor": {
          "ref": "85bbafd3-7514-4829-aa57-d5ccafd1fa45",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "28d3be59-f65a-40e4-8c66-172ab2e2391b"
        },
        "item": {
          "id": "8ee9f2db-a729-481a-a79d-3616fca63cb7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "37aecd54-3e89-4e55-9f96-32436f484cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a68b87d-793c-4166-83bb-af0794884e26",
        "cursor": {
          "ref": "f2852fd7-0c3e-460e-a5b6-2b414493f6b1",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8fdca7a9-b111-45be-86d7-49db46c6e02b"
        },
        "item": {
          "id": "2a68b87d-793c-4166-83bb-af0794884e26",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "75798a62-c236-47e9-bfcf-6a72a7ff34f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aba2e2c-3e83-4249-83f6-9bcf24127584",
        "cursor": {
          "ref": "835f49e5-e555-4bb0-8567-c2106c3a60d3",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cf699e49-4af0-467a-9bca-b71b523e952f"
        },
        "item": {
          "id": "7aba2e2c-3e83-4249-83f6-9bcf24127584",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c1fec2fd-b8e3-4939-8c6b-4d691be3bc4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7626f42-9851-48a9-9a46-f18ab6487a95",
        "cursor": {
          "ref": "1f1fb73a-4505-4327-a0c5-31699667deca",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "df500088-cd41-4808-aed8-25fe2a19ddd7"
        },
        "item": {
          "id": "b7626f42-9851-48a9-9a46-f18ab6487a95",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "879af65e-fb1c-44e8-ac4c-7f85c471e485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31d1e65-dca2-4bea-bf69-d2cfad30bdca",
        "cursor": {
          "ref": "8ca850b6-23c0-43b6-a59c-acd4643503db",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "460ab5a3-f60a-491e-9fde-55992bce2d32"
        },
        "item": {
          "id": "c31d1e65-dca2-4bea-bf69-d2cfad30bdca",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "841a5795-dbce-4a5b-a5ba-8f46894541c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8423d7aa-4f6f-480f-930f-f98cb603454a",
        "cursor": {
          "ref": "fe88fe30-cde4-4355-9729-c196918f90d7",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "55e55f15-5105-4d62-bef1-7979c40f6b6d"
        },
        "item": {
          "id": "8423d7aa-4f6f-480f-930f-f98cb603454a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "78a34b0d-1ba9-4373-aef1-526306af1943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642a514b-b83f-47f7-9df4-c21071046f0a",
        "cursor": {
          "ref": "86ca6142-e5cb-42a9-aa0b-bd9f453dc228",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eee00776-19de-4e66-8f59-76800d88a198"
        },
        "item": {
          "id": "642a514b-b83f-47f7-9df4-c21071046f0a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7c0b779f-d184-4ffd-9173-222702a52e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c87f7a1-7a9d-4963-959b-955c9eb896b2",
        "cursor": {
          "ref": "fff0e83e-823e-4d4c-8b91-d6b34266d613",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1dd57d1f-bcc1-474c-938e-3a45679e3d11"
        },
        "item": {
          "id": "8c87f7a1-7a9d-4963-959b-955c9eb896b2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cf145804-b0d6-4c70-a341-7655e9923a1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979036d3-2eb3-41f3-91ee-cf6899dc32e3",
        "cursor": {
          "ref": "351ab15c-1709-4ab9-ad76-8d8e1eb9fcb4",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "660d333e-e7ed-4bfb-bb95-7972af9e99cb"
        },
        "item": {
          "id": "979036d3-2eb3-41f3-91ee-cf6899dc32e3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0515c1a3-5a3b-4cb3-aa7f-b9974b7166c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9768f9ce-8130-46ac-9d43-027bb8a13b41",
        "cursor": {
          "ref": "1d7a8a03-9c2c-417a-9282-c974bc229211",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fcf7eae2-fdf9-48d6-9e89-f57a5616d432"
        },
        "item": {
          "id": "9768f9ce-8130-46ac-9d43-027bb8a13b41",
          "name": "credentials_issue"
        },
        "response": {
          "id": "952f8c42-018d-4b2a-b3a2-dd5ccebab3e7",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "662deec0-f366-4897-b887-a8959097b1e9",
        "cursor": {
          "ref": "eec40de4-3ce2-44a8-be7a-9bdd5ebe5aaf",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f247206f-6b5b-4e8e-99e3-d2952f6a7eca"
        },
        "item": {
          "id": "662deec0-f366-4897-b887-a8959097b1e9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "40faeea2-e239-4c23-904a-ff03e78c60ec",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ff8b38-4fe1-419b-8d50-accb48838771",
        "cursor": {
          "ref": "ed4c63a5-1e62-4c62-b997-ca4f81659d0a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "46fa82dc-8230-4cae-92e4-e58af2e5a083"
        },
        "item": {
          "id": "f6ff8b38-4fe1-419b-8d50-accb48838771",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3a7ea3d7-7867-4074-b1fa-d0f90e0c28f7",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f160bed1-e440-4f32-8af1-83c7bbe5058b",
        "cursor": {
          "ref": "71bf374d-f404-4f5b-8c11-d043713689ee",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1953a0b6-a868-45bc-9875-1c1cab65ed18"
        },
        "item": {
          "id": "f160bed1-e440-4f32-8af1-83c7bbe5058b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "306cfd46-900e-438a-b97e-6f0fdc2d5943",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "99857a09-947c-41c8-b78d-e98bb20ed284",
        "cursor": {
          "ref": "f88981bf-bf7c-4e98-9339-15e305b2113a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "af36541e-c5f6-4378-a8fb-637a77aeafc4"
        },
        "item": {
          "id": "99857a09-947c-41c8-b78d-e98bb20ed284",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "930466dc-ebee-4d80-8fcc-477328a142a1",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-28T00:39:06.845Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-28T00:39:06.845Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "445d1329-a189-4607-bf6c-a455923af93b",
        "cursor": {
          "ref": "fa3687e7-d8a9-4b99-b930-182e3f12c96e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0aa3f5ed-ffff-4b82-8ff3-3581d9a536cb"
        },
        "item": {
          "id": "445d1329-a189-4607-bf6c-a455923af93b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4991f64e-f0f3-4664-82c6-1d99cc50154b",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c7ede6-6e64-43da-8f31-79636fc439b1",
        "cursor": {
          "ref": "7fac9c06-0c8f-4ba0-958e-dfe79eccff9c",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "20558933-f3d2-46d3-b4a4-d6f9ab2fbeb9"
        },
        "item": {
          "id": "74c7ede6-6e64-43da-8f31-79636fc439b1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e709c20d-be1e-4b6c-bc6c-2fe73cbc7dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d0909e-4880-401a-b0fd-45796fbf65a7",
        "cursor": {
          "ref": "370b7cab-dc34-41ca-9dc5-7d05875edf36",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b94ea99f-d41c-42d0-a46b-8602710b913f"
        },
        "item": {
          "id": "c2d0909e-4880-401a-b0fd-45796fbf65a7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "856b7e0a-81a9-48e5-8c9a-387c2438c8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47b7613-5a13-47eb-9bf2-8b184659ad6d",
        "cursor": {
          "ref": "89c898f9-ee03-4a96-b295-57549b1ea69a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "709f8c8d-14d9-4846-b9f7-0425601fdb42"
        },
        "item": {
          "id": "f47b7613-5a13-47eb-9bf2-8b184659ad6d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8402fc48-d720-4220-968c-cbc6afe74316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0817c55-5c26-43d4-b5e0-67c22ae24561",
        "cursor": {
          "ref": "4ee37921-9e90-4bd5-b250-055b1e4e76eb",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "91783e14-df90-4e33-ae50-af1ac0a8e136"
        },
        "item": {
          "id": "e0817c55-5c26-43d4-b5e0-67c22ae24561",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e0bec88-780f-4519-940c-ac9f2f51ce09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cec2ea-d781-4731-af6e-ad3c461a5c03",
        "cursor": {
          "ref": "7d7d5c53-7f6c-4516-bb72-fbddc16121ed",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8fd0f06c-76bd-48e5-89cc-6193ece9aa3d"
        },
        "item": {
          "id": "a5cec2ea-d781-4731-af6e-ad3c461a5c03",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "969b300a-f1ae-47d4-b933-685d161469ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2424ef-27c8-467a-aa81-8c4a3bc01bfd",
        "cursor": {
          "ref": "65cf8d87-3246-4108-bf82-13feb63d9be2",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1a9f9200-e218-41f8-901d-78b8cedbd55c"
        },
        "item": {
          "id": "fe2424ef-27c8-467a-aa81-8c4a3bc01bfd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a35216ff-39c3-46ea-92a6-b8f44c2ab1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db104d97-36ad-40a3-b39b-47940703b346",
        "cursor": {
          "ref": "ac9be832-9ab7-4a11-8f34-7ac3e295c505",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7592561d-3d76-4e30-8678-99f6032344d7"
        },
        "item": {
          "id": "db104d97-36ad-40a3-b39b-47940703b346",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "585e983c-e290-4575-bb72-0c523c337f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61eeb1c-5002-476e-aee3-5f23d718e793",
        "cursor": {
          "ref": "9718200c-5591-4094-9520-12add9ef7f0d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "19a883ea-c4a4-4f70-9902-3d0e55e1ea6f"
        },
        "item": {
          "id": "f61eeb1c-5002-476e-aee3-5f23d718e793",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c1d5a4bf-2191-4366-9b12-8eeeda9ce085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551dea38-8b8c-4181-ad1e-260efe05609a",
        "cursor": {
          "ref": "12cb863a-9a81-48fa-8286-641986168799",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2214bc06-3fc9-4565-8bcd-b9c2e9003947"
        },
        "item": {
          "id": "551dea38-8b8c-4181-ad1e-260efe05609a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bfbdb2b6-9c4d-40a2-b4b4-d67e74edb927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b5262a-980e-4e47-b984-50b190586a39",
        "cursor": {
          "ref": "61aa883b-671e-4a6d-81d2-aa02941c4431",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "48b8f64d-a29e-4bb4-9276-054b0feeb4ff"
        },
        "item": {
          "id": "a4b5262a-980e-4e47-b984-50b190586a39",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "58c59d92-e6c9-43bc-a9f7-ab2fd771cbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20d359a-c1ee-4463-8753-722e150e8351",
        "cursor": {
          "ref": "167674ba-8d24-46da-9818-9d0993a75894",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ddc7e8bd-a2fb-4845-b5c6-90f49534c0a9"
        },
        "item": {
          "id": "b20d359a-c1ee-4463-8753-722e150e8351",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a53ddfb1-3c13-4637-96fb-899e1ddb2372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659a9d57-b12f-4c2e-b64b-686c51b22ad4",
        "cursor": {
          "ref": "1055af2d-dc52-4936-89c6-f54b353ba803",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6ca80ab3-a43f-45f5-9823-d67cb0145000"
        },
        "item": {
          "id": "659a9d57-b12f-4c2e-b64b-686c51b22ad4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0f232255-4f84-41df-9253-68a0ffba4453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dbc936-2c03-4364-b83a-4ac917cdbb76",
        "cursor": {
          "ref": "54163e88-5957-49f1-b9a9-a5000dafe830",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5f5858ab-88f5-4469-83d6-a16e4ae446dd"
        },
        "item": {
          "id": "e9dbc936-2c03-4364-b83a-4ac917cdbb76",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "57d1188b-2200-401f-b9ff-47ce14ae4a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9997703-d30c-4f57-80cd-a10d235409f3",
        "cursor": {
          "ref": "7e9abd30-40f9-425a-a90c-482b426158ce",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "75c7c134-8e86-41ef-83cc-09f22003193e"
        },
        "item": {
          "id": "c9997703-d30c-4f57-80cd-a10d235409f3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b10727c0-0b5e-4c70-ba6d-5d89997add18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5a1f17d1-bcc3-4b2a-820f-60ba9d77109e",
        "cursor": {
          "ref": "abbedaf7-65e6-489d-ac9f-3fbe3e92f075",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fbf6440c-836c-4efe-8d45-6b43ae17c316"
        },
        "item": {
          "id": "5a1f17d1-bcc3-4b2a-820f-60ba9d77109e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "31d43723-8a98-41e6-8700-bf2e24e2447c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edca824-0c97-47d0-82d1-f03eed7980b3",
        "cursor": {
          "ref": "76fab14a-a42b-405e-ad58-b089ff7ab74b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2722f470-6442-474d-a6c2-7273e3707dd3"
        },
        "item": {
          "id": "4edca824-0c97-47d0-82d1-f03eed7980b3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "efaf298f-964f-41ea-82f4-f263ea34f055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1621a81a-f626-4429-ab97-a2656cc878bb",
        "cursor": {
          "ref": "50986e40-dc27-4cc0-a247-0240419c6d7c",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "290fcec9-ecd1-4101-ac3e-debe360f7325"
        },
        "item": {
          "id": "1621a81a-f626-4429-ab97-a2656cc878bb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5d50b666-2e9a-4518-90f3-139c5668d57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6955c404-5da3-42cb-a951-45464db10567",
        "cursor": {
          "ref": "0583c46b-8a7b-4b9c-9b5e-a423623cdca3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "94d9903c-8f0e-41b0-a66f-9fcfe33830da"
        },
        "item": {
          "id": "6955c404-5da3-42cb-a951-45464db10567",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "46cbedab-1b79-4bc5-8ec7-6c9b0e7683b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb08a0c5-29d3-4024-9339-159faf25b39d",
        "cursor": {
          "ref": "4905be60-ffde-4791-9c4e-3555da6bd049",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "17e6eb40-b1be-4d6e-9696-909be735ba6c"
        },
        "item": {
          "id": "cb08a0c5-29d3-4024-9339-159faf25b39d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bc318b4a-5556-46f7-a27c-ae3d0c18fcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c605dffe-e48e-4cd5-8595-b559d8bdb0b7",
        "cursor": {
          "ref": "5fcc3201-8867-4a13-b694-6ddf1af9e02b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9ccc0a87-5ec0-4034-89c9-88b249ab6b53"
        },
        "item": {
          "id": "c605dffe-e48e-4cd5-8595-b559d8bdb0b7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "30498634-3a4d-44c7-8604-c1743475c383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64289c56-3186-4931-97d6-2c5cdfe17c8d",
        "cursor": {
          "ref": "b9b286bb-e58c-40ed-8bb9-b5f174f474b2",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "63683e21-661c-4c53-aa2d-1b3a07e49073"
        },
        "item": {
          "id": "64289c56-3186-4931-97d6-2c5cdfe17c8d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c595e7be-7f94-4b4f-bf48-09ff5acf36a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9509546-0d9d-4b47-80be-9154ee24f17a",
        "cursor": {
          "ref": "c082a684-9ed3-4e15-8567-6e2372a49375",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "94ba759b-d050-44e7-bfc5-ca05c4374667"
        },
        "item": {
          "id": "d9509546-0d9d-4b47-80be-9154ee24f17a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1eaa7cf1-964d-45d7-9d77-3dc2a437cda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e63191b-dfb8-4dfa-859d-55fbe4476a06",
        "cursor": {
          "ref": "b04f48c7-29c8-4fe1-932e-b6ee1b30e09f",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6b7f1646-38cb-4578-857a-510841afd6f5"
        },
        "item": {
          "id": "9e63191b-dfb8-4dfa-859d-55fbe4476a06",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e2e209a7-394a-4484-a6cc-2b41a2947af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00eb151-5a47-49c3-8e3f-55f10dcbe0db",
        "cursor": {
          "ref": "fc1569e9-0611-49b4-b143-d1ecfe68136c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7165f39b-0bb8-428f-b764-320b34a527cf"
        },
        "item": {
          "id": "d00eb151-5a47-49c3-8e3f-55f10dcbe0db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "64474265-2db9-4510-9a06-15270a162512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1419c23-c55b-43ad-b7ed-74239e7db038",
        "cursor": {
          "ref": "4ad86898-0113-4107-9b1c-ae9a75c843bf",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9040f9c1-fac8-4d6a-847d-2866a1e5cdec"
        },
        "item": {
          "id": "c1419c23-c55b-43ad-b7ed-74239e7db038",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "46ce5242-8269-49de-b543-dce6ed2b38dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3bb00c-eef2-4868-8e3f-abdf75b74ca2",
        "cursor": {
          "ref": "2b260e53-ee9b-4dc6-9b99-450278268934",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a46c867f-69a5-4316-a97e-967c54561ea1"
        },
        "item": {
          "id": "7d3bb00c-eef2-4868-8e3f-abdf75b74ca2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d142aab2-a8f8-4710-ac96-29db763ef52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fedf283-efb4-41d3-aa30-182c0f49f340",
        "cursor": {
          "ref": "931a68af-9ad6-403d-b976-078e7d2b5432",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c967bec9-b232-4096-96ea-525a1943d3c7"
        },
        "item": {
          "id": "6fedf283-efb4-41d3-aa30-182c0f49f340",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4725fad4-1877-48b6-accd-0c50cd4e9440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a04b859-b184-40f0-a308-564950747738",
        "cursor": {
          "ref": "5a9995b0-1333-4dbc-9166-a7712b716938",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "389e4940-cef0-4f60-845c-0ec0bc943076"
        },
        "item": {
          "id": "8a04b859-b184-40f0-a308-564950747738",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0e01dac9-4043-48ba-a779-12e0ecfe6a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31da1cb3-161a-4973-9f58-573ac0eba594",
        "cursor": {
          "ref": "162289fa-9611-43c5-a69a-4e6d17d0fc9c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a9fffc06-9065-4d3d-98f6-1718ea1e8c2e"
        },
        "item": {
          "id": "31da1cb3-161a-4973-9f58-573ac0eba594",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "36aed8b1-7faa-4749-a82e-08113dd563af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e5e0ce-6660-4ba4-9573-74d4bbb515f8",
        "cursor": {
          "ref": "6beceb7d-11e4-40b5-9e1b-20a27d1901e9",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b57272f8-0f3c-494c-8d5a-32c59557f6e7"
        },
        "item": {
          "id": "85e5e0ce-6660-4ba4-9573-74d4bbb515f8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2332f23c-ae26-45df-af95-9cf7817e4763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a6a9c0-3dea-4ee6-97c9-2df252cb17f6",
        "cursor": {
          "ref": "f7f9954c-eba5-429f-9b12-dd101ef1152b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b35a4de1-4e62-4d61-aad2-b9f544dcd52c"
        },
        "item": {
          "id": "68a6a9c0-3dea-4ee6-97c9-2df252cb17f6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7b686223-b1dd-4096-a605-5e4d1070d45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88466d25-0dac-4570-8817-32fe58505e26",
        "cursor": {
          "ref": "4e22fdad-d07c-44e9-95a6-1192d86220c7",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4395171b-0abc-4ee0-80f1-d531992d2f9c"
        },
        "item": {
          "id": "88466d25-0dac-4570-8817-32fe58505e26",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a46f3976-05f4-49b6-81f8-14d6b4ba34ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12893ca6-e2ad-444a-b1bf-a5b502363191",
        "cursor": {
          "ref": "89a2e634-eba9-4748-8894-d508ad75b97d",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6d6ea71d-9714-4685-a58e-588dc932adb3"
        },
        "item": {
          "id": "12893ca6-e2ad-444a-b1bf-a5b502363191",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "231a0b2a-235b-4def-ae62-37aa594a81b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aae5f48-5fe6-438d-a2df-1e9f9b3ea69c",
        "cursor": {
          "ref": "8143f659-1219-4fc9-983e-21fec565729d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "917dca23-dbcb-4190-a260-b48496e0f50a"
        },
        "item": {
          "id": "8aae5f48-5fe6-438d-a2df-1e9f9b3ea69c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a699c40f-1a2a-4b12-9563-f4414e00d95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e90c73a-85eb-4f88-b4d4-42bd2b49ccd3",
        "cursor": {
          "ref": "c8c7cbb7-1ba1-4087-91c6-ebde5552563f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4a6d1f32-09d9-4130-a3b5-4d0db20f2c73"
        },
        "item": {
          "id": "6e90c73a-85eb-4f88-b4d4-42bd2b49ccd3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3774700a-6aaa-4aab-9be8-10e2ae34c9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd100f1-37bf-485e-adc0-1d5536fc7497",
        "cursor": {
          "ref": "0038d914-9e87-4f4f-b2c5-fa360ec8c36e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c13ad46d-a6d8-4ad3-8dfc-22d9a0a2afeb"
        },
        "item": {
          "id": "6dd100f1-37bf-485e-adc0-1d5536fc7497",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6a453a05-d77d-4ad8-967c-a255a3fc9793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82018dd0-80e9-4c5e-830a-fd7076af853c",
        "cursor": {
          "ref": "db573ba6-f2bd-49bb-91cf-e8697abe45c0",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2f1f42b6-0461-41a7-95d2-8befe62d8250"
        },
        "item": {
          "id": "82018dd0-80e9-4c5e-830a-fd7076af853c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e31f44dd-90b6-404c-9c10-b1417a986d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849c006b-0dad-410b-b967-eff394b8ed97",
        "cursor": {
          "ref": "7214c81f-572d-43a2-8436-364d93b4e864",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "33876de2-2784-4956-8562-14602b9e8a7a"
        },
        "item": {
          "id": "849c006b-0dad-410b-b967-eff394b8ed97",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "84b26a83-e151-47d3-944d-6c6bf1669503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab638b9-9b4c-4542-9342-2c28be643e2f",
        "cursor": {
          "ref": "5b427909-09ba-4010-a12e-9d5300e1f484",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c281bc98-ca17-4c88-8fc0-10a197af66cc"
        },
        "item": {
          "id": "3ab638b9-9b4c-4542-9342-2c28be643e2f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "26f4b527-8d65-4281-a702-7c40808ba3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6691f3eb-f9cf-458b-a7aa-d3e0492347be",
        "cursor": {
          "ref": "b7c856f4-8542-4f3d-b134-b00af6ebb1e0",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9351280d-03a7-43a7-a0b4-fe343b0af3a6"
        },
        "item": {
          "id": "6691f3eb-f9cf-458b-a7aa-d3e0492347be",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b0d62c9a-337d-47a9-ae57-85e608124774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1942862f-b4c2-4193-a681-ad45fba8481e",
        "cursor": {
          "ref": "9a52a6aa-3ee4-48fb-8e4a-1c597eb75acd",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "172a581b-390f-4a1b-8807-a6283b9bdfec"
        },
        "item": {
          "id": "1942862f-b4c2-4193-a681-ad45fba8481e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ac46bfa2-0b02-4c27-b839-e43f84bac140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadba1b8-e433-4e8d-b1da-695b41104fee",
        "cursor": {
          "ref": "71e41e08-07bb-4de4-b7e8-21668cb783db",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8d461dee-709e-42ac-bb37-01bf4b6ccf12"
        },
        "item": {
          "id": "dadba1b8-e433-4e8d-b1da-695b41104fee",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ee6a8605-7f04-4d85-96e8-9043ead5c74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bd8fd6-d4c1-4b02-b740-e9cd7cba410f",
        "cursor": {
          "ref": "bfe4a7af-38ff-40bf-8626-a4312a3f5416",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e3330000-1d84-4027-b8d1-29650299d60e"
        },
        "item": {
          "id": "c3bd8fd6-d4c1-4b02-b740-e9cd7cba410f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "720eafe8-9ff6-4088-a8ff-b726294b511e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696cc1a1-f1d5-4857-9eea-0429a93dcdc6",
        "cursor": {
          "ref": "1afb424f-b8a0-4d3a-b8ba-415a0827f905",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "648ee125-a638-421c-8e77-5cac350207a7"
        },
        "item": {
          "id": "696cc1a1-f1d5-4857-9eea-0429a93dcdc6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cb702179-0013-41e5-83fc-030b5a51f1f5",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "25a4ec41-9d88-4e5a-bb65-8bdacce46465",
        "cursor": {
          "ref": "fd208ed1-15a4-40f4-8836-462e35108ff9",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5c336a8e-8c72-47db-a6ce-25b6c5c7f5ec"
        },
        "item": {
          "id": "25a4ec41-9d88-4e5a-bb65-8bdacce46465",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "15bd4914-5b0b-4dc8-8a33-6f3815cb694a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec8a10d-ec34-40de-bcee-53632459885a",
        "cursor": {
          "ref": "dd6d8a2d-cb4a-43d2-a766-ae610a410f9c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b7f7761e-1582-4a28-9258-0105cb2baedf"
        },
        "item": {
          "id": "2ec8a10d-ec34-40de-bcee-53632459885a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2b67baee-d47f-4455-aea8-dae59447380b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ff8fb6-e402-4dc3-90f7-92e2e357aa0b",
        "cursor": {
          "ref": "590d8457-eca7-4f01-8d0e-e8c1f82814dd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "efca53a0-56b2-4c3e-b086-5ca1269a806a"
        },
        "item": {
          "id": "a4ff8fb6-e402-4dc3-90f7-92e2e357aa0b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6ce43e62-09d7-4033-9015-62ea1e1d6253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21169b76-9311-4c36-b950-4545da04a095",
        "cursor": {
          "ref": "c7e93903-e875-4552-bcce-55acac96b29d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1fe83360-a6de-4081-9f3d-50f0c4b4eab0"
        },
        "item": {
          "id": "21169b76-9311-4c36-b950-4545da04a095",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a904f0f5-d9a9-42dc-9898-b4346f1460bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98631d6c-e6be-4418-961f-b659a4109f03",
        "cursor": {
          "ref": "53d6d502-d67a-4875-a8a5-4fd4615f5c91",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2d45019d-30bd-406f-a995-0d4e7c0db1d3"
        },
        "item": {
          "id": "98631d6c-e6be-4418-961f-b659a4109f03",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4012be4a-186a-44cf-b14d-15c604192184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8238c70c-12c1-4c05-ba26-117cf2e4119a",
        "cursor": {
          "ref": "dba73f9b-c7b0-4846-b08c-8107a2477219",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "41b58c55-8026-415d-9c2e-635beb9cda6c"
        },
        "item": {
          "id": "8238c70c-12c1-4c05-ba26-117cf2e4119a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "01037d93-fd9c-4e8f-a922-9f5de54d1fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550bc066-38d1-487e-af8a-d15623338d67",
        "cursor": {
          "ref": "6ec02806-32c8-4381-ba38-d535d3f73a7d",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3c5d9b74-3a3a-434a-9a57-4268fb9e155b"
        },
        "item": {
          "id": "550bc066-38d1-487e-af8a-d15623338d67",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "34e7163d-2608-4b60-965b-78700c567c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b120147-ced4-49fd-bcc3-38b073e70aad",
        "cursor": {
          "ref": "3819a327-28b0-439a-b3bb-45d44a99770b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6afb7d0d-5639-41b9-97b3-d4bc0ae94012"
        },
        "item": {
          "id": "9b120147-ced4-49fd-bcc3-38b073e70aad",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0765fc93-e141-4307-90a4-cf502a55b240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800fcd84-5b54-4ded-9a1f-070f6784cc73",
        "cursor": {
          "ref": "a8ce954c-d184-4bf2-804a-aaa889972d51",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3d8dd1cb-6309-4824-9daf-fafce26ad963"
        },
        "item": {
          "id": "800fcd84-5b54-4ded-9a1f-070f6784cc73",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c82abde3-93a4-4109-8fb6-afe3467891b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bec1f3b-3967-4b19-b9b1-1e697923202b",
        "cursor": {
          "ref": "32291242-1cf0-4d1d-9632-0f68c1ccc27a",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d2a81ebf-de80-4f7c-a7cc-89fc5852a6f7"
        },
        "item": {
          "id": "2bec1f3b-3967-4b19-b9b1-1e697923202b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "99c18c5c-b1a9-4b3a-8106-c9c99b141a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bd1a55-7854-4d96-b661-b36f1db70f1a",
        "cursor": {
          "ref": "144d3416-dfde-48db-b9a8-b24a8d1b0d35",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fd1e7950-6aaa-4378-9853-1a5f119bc583"
        },
        "item": {
          "id": "b9bd1a55-7854-4d96-b661-b36f1db70f1a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6adf5c94-6b23-47db-9148-ed1e56a3d3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79df295d-44b8-4816-a047-8a301f1cf344",
        "cursor": {
          "ref": "4135ea8c-1c14-44fd-ba06-4bdc562892ac",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "345a33b8-6de7-4bbc-a9f8-e3b6bf3da9e7"
        },
        "item": {
          "id": "79df295d-44b8-4816-a047-8a301f1cf344",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "715dae0e-cb21-4cb8-aaf5-5dba7c50b3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21948309-0d77-4fc7-9290-6282dd132f09",
        "cursor": {
          "ref": "1ad6e153-5d88-4974-bfbc-c74c46773cfa",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8ab1c2b4-f1e5-4a0a-90b8-4f3c947c88a2"
        },
        "item": {
          "id": "21948309-0d77-4fc7-9290-6282dd132f09",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c5bdd63f-7e8a-42b8-8830-e811e76e8993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84f9bf4-6167-4d2b-a435-1f1dd9c648b5",
        "cursor": {
          "ref": "130b5213-717d-4ee1-a532-e858ad8827a3",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7edd5a1d-9a83-4f56-b6ef-6300c3269f07"
        },
        "item": {
          "id": "b84f9bf4-6167-4d2b-a435-1f1dd9c648b5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4e687cc5-4b06-4d98-8458-f637d51f2924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2014945-c16e-4c4f-a07b-6cb42cef6cba",
        "cursor": {
          "ref": "9e539a9a-58bb-40ec-8fcc-7f7dfd45e06a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5070ea23-55c1-4efd-8220-ba5b4c42cc55"
        },
        "item": {
          "id": "b2014945-c16e-4c4f-a07b-6cb42cef6cba",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f6b18895-b3a9-4988-9cfc-0b9cb79b5e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd3242f-c0f0-4840-87a7-6c588248ec2d",
        "cursor": {
          "ref": "4d55add9-298e-480e-8312-086ff35e385f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3c52faa0-a65a-449e-831f-86955606a11b"
        },
        "item": {
          "id": "5fd3242f-c0f0-4840-87a7-6c588248ec2d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "392055cd-82cc-447e-8c67-3d266b2fecaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d33af8d-657d-464a-b11e-9c336059c165",
        "cursor": {
          "ref": "2f369c18-16eb-4aa2-899d-0d4291adfb7e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "234ff467-c5ae-4fd0-9e49-dabffa21da0e"
        },
        "item": {
          "id": "4d33af8d-657d-464a-b11e-9c336059c165",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "acaee346-b0e0-4d20-a762-836b46da19d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8551d347-6552-471c-a4ac-fcab7b98f34b",
        "cursor": {
          "ref": "b1ff2500-01e2-43a6-bf49-13aa6793b2b9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7dc1f54e-d698-4ed2-81ec-6c4c8d3e06b2"
        },
        "item": {
          "id": "8551d347-6552-471c-a4ac-fcab7b98f34b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "11ac56bf-1f2a-466f-89cf-aba76fd71d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042b38af-ce94-4455-860b-52d73058a362",
        "cursor": {
          "ref": "af01f723-5afb-42de-b870-92080c7ae134",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d67681b5-e08d-4d14-ac82-89f8fc2a6156"
        },
        "item": {
          "id": "042b38af-ce94-4455-860b-52d73058a362",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "df2181f9-dc3e-4378-a6da-1ba607e7b3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16e8de3-b7bd-4ed6-a1a0-f8b70541f33f",
        "cursor": {
          "ref": "5577a4e9-26fe-4870-949f-dd8e4cbcd41e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6bbcf0fc-5719-4f78-9dff-82fc98350469"
        },
        "item": {
          "id": "f16e8de3-b7bd-4ed6-a1a0-f8b70541f33f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "23452e1a-2573-485c-828c-56d6df012b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c3f4f2-a891-414a-9600-5768d89ddded",
        "cursor": {
          "ref": "6550a401-29af-48cd-854d-b3d063dd0e39",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "18b071c9-3f6a-4ddc-8481-6a4e6283cf23"
        },
        "item": {
          "id": "20c3f4f2-a891-414a-9600-5768d89ddded",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ec33db0c-edcc-4312-9c14-7478593f1528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29db8964-99f3-400a-958f-42ea0e60a3c2",
        "cursor": {
          "ref": "3f017a16-282e-419f-aefd-e1a9ad6f081c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0f90a867-95d7-4f2a-8649-872630062f2c"
        },
        "item": {
          "id": "29db8964-99f3-400a-958f-42ea0e60a3c2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e32a9536-f70a-4b43-b9f3-0d4cb2f0b75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cfa7af-e7c2-4acb-bd21-5e2299286a00",
        "cursor": {
          "ref": "8fa1c290-6982-42fd-bbb7-52f9d72c54b0",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2bebc42b-f5e2-4b41-b1c8-89525f828541"
        },
        "item": {
          "id": "77cfa7af-e7c2-4acb-bd21-5e2299286a00",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e395bd0d-6b56-4e35-b508-44bc1d8c64ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08269e04-fb3b-48bf-b10d-dfbbcf1bee6a",
        "cursor": {
          "ref": "29a42b34-272e-4c6d-b032-20ad045591f9",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "02b51eae-1ada-40df-ad75-244743c8545a"
        },
        "item": {
          "id": "08269e04-fb3b-48bf-b10d-dfbbcf1bee6a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2b5cd919-7c42-4f42-8d2b-4e7be649f3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35de717b-e9a2-4e6e-853b-96cff22696d8",
        "cursor": {
          "ref": "53f6cf5b-2734-4945-a4bc-c354e53bd7ae",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "450def6d-42ed-4df5-b72b-252a751008b1"
        },
        "item": {
          "id": "35de717b-e9a2-4e6e-853b-96cff22696d8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "28316f5a-a939-4fb3-b7b8-13335d61040f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256eba82-4d4a-4ff3-b98f-a656bd137025",
        "cursor": {
          "ref": "9c90e2c1-e5a3-42bb-895a-553f3acb395b",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d132f173-54dc-4b1f-b72a-0286e60983b1"
        },
        "item": {
          "id": "256eba82-4d4a-4ff3-b98f-a656bd137025",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "614d2f07-a802-46d2-9344-6c1619560a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853e4ee5-2eb0-4970-be83-534ab8a5cf87",
        "cursor": {
          "ref": "4f6a92a5-601c-4ff8-8a71-39ba15e34446",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "20b4c408-aade-4301-92e5-6a54d1fa0497"
        },
        "item": {
          "id": "853e4ee5-2eb0-4970-be83-534ab8a5cf87",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b5b40285-6827-49af-a266-7300abf15e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6619e987-4d72-4355-bde5-52673e4443e0",
        "cursor": {
          "ref": "b006712a-fe6f-4420-926a-93f09aa86d39",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "aa3b2975-6c49-4d9c-84dd-19ed6a03d79c"
        },
        "item": {
          "id": "6619e987-4d72-4355-bde5-52673e4443e0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a177af27-7216-4fe4-baa3-0ebe7e32a325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ab6a7c-8304-4bd6-aba2-f9298c7b756d",
        "cursor": {
          "ref": "4ee2dd30-a278-4e32-94eb-42225240497a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "44fcf3f0-fbef-4463-af4b-5b3decfc43b6"
        },
        "item": {
          "id": "f6ab6a7c-8304-4bd6-aba2-f9298c7b756d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1f3d4483-e9a3-4b84-b947-35225114448f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e49cf07-fc7e-4ff6-94b0-d0f50a30ff8c",
        "cursor": {
          "ref": "bdf38b0b-2912-4c85-b6da-7de9f71009f4",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7d155376-8a7e-4594-907a-9b5d2c33373e"
        },
        "item": {
          "id": "4e49cf07-fc7e-4ff6-94b0-d0f50a30ff8c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e5909221-dd90-4bd7-a1e2-028c1c9113fc",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c4a7e89d-e052-4793-a94f-274ced5500e9",
        "cursor": {
          "ref": "010c6104-ff0a-4be7-8179-fb6c717d34bc",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4abc31fe-3de8-42fd-8d90-238220cee7ec"
        },
        "item": {
          "id": "c4a7e89d-e052-4793-a94f-274ced5500e9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b155e52a-8c25-452d-87d1-69a1bb6974c4",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "2023a45f-b6e4-404f-bb37-91684caa256b",
        "cursor": {
          "ref": "63198dbf-9cd3-4981-82b9-b1e620322bd2",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "317141d4-78be-4ba3-b85b-74dbae95e6d3"
        },
        "item": {
          "id": "2023a45f-b6e4-404f-bb37-91684caa256b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "51cb41e1-d94d-480a-b93c-ccf5e6c11101",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a8492569-3a0e-4882-a72b-cef77f372b8d",
        "cursor": {
          "ref": "61d3ae46-24e4-4c65-b8a4-c63138e03125",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f977d386-d0d3-48ce-9713-1b6015912016"
        },
        "item": {
          "id": "a8492569-3a0e-4882-a72b-cef77f372b8d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7fb2accb-6d2a-4037-b2d2-8fc45f3124fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb2bf97-a990-48d6-b7b8-6f8a7570304f",
        "cursor": {
          "ref": "069ba9e8-2468-4692-aa67-6f150cd99edf",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "357411f2-7b9b-4863-8cd3-204868ae2e03"
        },
        "item": {
          "id": "bcb2bf97-a990-48d6-b7b8-6f8a7570304f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bbe563d7-a84f-46e0-9a3c-d5ee5418ffee",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "727d8dae-3d4c-410a-ae5a-cfd42b47c7db",
        "cursor": {
          "ref": "944c880b-3c3f-470c-8753-6cc82d3dc6b7",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f5920d52-f3d7-47cf-995e-b4ff4d4c8343"
        },
        "item": {
          "id": "727d8dae-3d4c-410a-ae5a-cfd42b47c7db",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dea432c8-f2c5-4739-a862-538686b0ea62",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "797ffdd3-f09d-4ef0-b756-592625196c8d",
        "cursor": {
          "ref": "f1c01d68-c5c1-4184-ad4f-c90b5ee896c9",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f618a65b-a6b4-4626-9517-8216a87aeaec"
        },
        "item": {
          "id": "797ffdd3-f09d-4ef0-b756-592625196c8d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "13896c8d-4ff8-4a7a-b499-5e7254e26b81",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "06a8bf31-a06f-47fe-b3aa-f96a5b4b43fd",
        "cursor": {
          "ref": "a6437e96-2fc5-4e45-98bc-983b47252f44",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5ad04342-39c4-4571-9ca7-d1661bd44d70"
        },
        "item": {
          "id": "06a8bf31-a06f-47fe-b3aa-f96a5b4b43fd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "85877c18-57a6-40b7-9043-b389878be6db",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "44b2e1cf-9502-4ff2-9869-3bf04cf34dad",
        "cursor": {
          "ref": "05d6cf95-be9d-4ee5-89f8-e7894fad664a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "58ede4d2-e13c-4dbc-8813-3f9d27950f69"
        },
        "item": {
          "id": "44b2e1cf-9502-4ff2-9869-3bf04cf34dad",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "edc2b1eb-91ee-43e5-b89b-6a282ef3a9b3",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3ac39ee0-e8ef-4352-8cbf-d08fe86a6bf3",
        "cursor": {
          "ref": "c1627746-eacf-4895-acb7-9006609a826b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "619f41cd-fdcd-49c9-8063-ddb3a206ccf5"
        },
        "item": {
          "id": "3ac39ee0-e8ef-4352-8cbf-d08fe86a6bf3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6fca5d53-e83e-4d29-ac8f-8f9a1959b441",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "8341865a-fc0f-4a3f-a8fb-813c3040901b",
        "cursor": {
          "ref": "4fd062c2-f823-45b7-9737-846f1e0f0d98",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "34d19c1b-1862-47f6-b7d2-6a5944fa190a"
        },
        "item": {
          "id": "8341865a-fc0f-4a3f-a8fb-813c3040901b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cb96ff43-ae5a-471b-8d24-7ae79b30c109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63c0e95-0809-48d3-9015-0ce0ed8bbb4b",
        "cursor": {
          "ref": "38eb3915-29d8-453e-9b1c-6f7f1a0d9d05",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3c73de64-9943-40e3-9ab4-f4471399fd3b"
        },
        "item": {
          "id": "f63c0e95-0809-48d3-9015-0ce0ed8bbb4b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f0e19c2d-bc7c-4941-abb9-3f98d7613a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f162df-cad4-461f-8bad-f6fdfc153985",
        "cursor": {
          "ref": "96867df2-ea95-4746-825c-ba7b4132f6b6",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "dcce2f1e-01f0-422f-b348-93e6846cab78"
        },
        "item": {
          "id": "99f162df-cad4-461f-8bad-f6fdfc153985",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d846480f-98b6-42c0-aa9b-6b9f8d7f1471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d596c832-6f8c-4913-9415-8152c6525260",
        "cursor": {
          "ref": "c2ab310a-2252-44e4-98e4-65008e9e65dc",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "983db652-0571-4582-9d98-5c1cb3b1df44"
        },
        "item": {
          "id": "d596c832-6f8c-4913-9415-8152c6525260",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2d594fab-2e62-4931-acf2-819c885fa4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaeab5a-4d6f-4aa0-bb79-4679df488c24",
        "cursor": {
          "ref": "a6654ccd-dd9b-49ae-89c3-1fd13c4947e3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3cfecd58-b6ac-4ae2-a8ed-4a79eb01f0e9"
        },
        "item": {
          "id": "ebaeab5a-4d6f-4aa0-bb79-4679df488c24",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "308ccb00-4ab9-4b43-a772-527216ebcae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f1d505-07fb-4fdd-9731-26cffe211845",
        "cursor": {
          "ref": "22eb981c-eb03-4841-9ef9-bfde533fd6b8",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f1b8c30f-3a9e-45b1-a64b-1aaa1f360e9b"
        },
        "item": {
          "id": "b0f1d505-07fb-4fdd-9731-26cffe211845",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a9016ba2-7d98-4539-861a-464496a43535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b73ce5-21f7-495d-9903-30a3e7c08783",
        "cursor": {
          "ref": "65080c75-05b2-4ddd-b26a-a4623baa4eb2",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "de202445-a49f-47d6-bd4c-5e5093dc3504"
        },
        "item": {
          "id": "85b73ce5-21f7-495d-9903-30a3e7c08783",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "201f80e9-b597-45af-b450-ceb550cb3e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacb69d9-f76f-41ca-827d-66e0954950f3",
        "cursor": {
          "ref": "2d2868f8-4e4f-41d4-9919-54f2c6b4ed6c",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0381c3d7-5eba-41e7-a13d-1cf4d9ddeee6"
        },
        "item": {
          "id": "dacb69d9-f76f-41ca-827d-66e0954950f3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "73518cac-df83-467b-8da0-490df4e73497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f93cc6-9d7b-48fa-8415-c57648ae4685",
        "cursor": {
          "ref": "bda17473-0b35-4956-9498-be602cd58b46",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "91f122ac-af80-414c-bc6f-8ac3a0833fc7"
        },
        "item": {
          "id": "09f93cc6-9d7b-48fa-8415-c57648ae4685",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "319e0a7a-8230-4f5c-860e-0d92dedd86f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb93d31-1ce7-452d-a47e-f9891914e24a",
        "cursor": {
          "ref": "4ba1fc8f-691f-4105-a047-23596cc5aedb",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e76d0e77-8f49-414a-8f20-2b1a62e5a6dc"
        },
        "item": {
          "id": "cdb93d31-1ce7-452d-a47e-f9891914e24a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ea18de54-3c6b-4f82-9dfe-61c8da49ab99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666bd1a1-c2e5-4f22-8b9e-4d807e4d06fb",
        "cursor": {
          "ref": "26f53fc3-41b7-455c-92ca-d522a78a4af9",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3900eb21-e792-497e-8eb4-f7340a2ce90d"
        },
        "item": {
          "id": "666bd1a1-c2e5-4f22-8b9e-4d807e4d06fb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e3db82a0-aeeb-4ab6-9996-125c805da44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acacca9e-0c65-4a8a-a914-d3809ff643d9",
        "cursor": {
          "ref": "3767c510-aae4-4e04-92c8-df4fe6003a97",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f40b67c8-4ea2-417a-8027-f485029b6c4d"
        },
        "item": {
          "id": "acacca9e-0c65-4a8a-a914-d3809ff643d9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f7a7778f-4804-40ff-a138-5af0aa49f17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486bccd4-6f40-46b5-a0a1-fbf2d18c8501",
        "cursor": {
          "ref": "c550662f-21fb-461a-b0a6-649aacefb6a7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3bc4637d-6bc9-48a6-87f1-798ff720098f"
        },
        "item": {
          "id": "486bccd4-6f40-46b5-a0a1-fbf2d18c8501",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3440bfaa-a435-444d-8c0e-d890466905ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4e2d2e-e809-4494-878e-a74b93b378b5",
        "cursor": {
          "ref": "a61c4dc6-f5ea-47de-8aad-27c065f68ec8",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c0615417-1e16-458c-8bbd-4a2d6e8a93fd"
        },
        "item": {
          "id": "0e4e2d2e-e809-4494-878e-a74b93b378b5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "17774c11-d588-4847-bda4-05fadc827173",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "68d59c8f-d540-498a-a27a-a1c2cb962dcd",
        "cursor": {
          "ref": "60dcbd77-e540-4ad9-b083-e67a4c511a18",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1f4610c3-c88e-49c6-ac57-d3407c879895"
        },
        "item": {
          "id": "68d59c8f-d540-498a-a27a-a1c2cb962dcd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "76405598-bce1-471f-bdf5-08eaf5e10032",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "5279f1d3-5231-48d4-89b4-e3df18bcdd57",
        "cursor": {
          "ref": "71ee7e79-0c3c-4c35-b9a8-029c682f5e0c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "629bb36a-fa03-4771-b78b-d52688be74ff"
        },
        "item": {
          "id": "5279f1d3-5231-48d4-89b4-e3df18bcdd57",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "82eec03f-9f2e-4b1e-866c-6a6a5167bc08",
          "status": "OK",
          "code": 200,
          "responseTime": 222,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "70afeaad-1243-4c29-98b8-a70a94781c4f",
        "cursor": {
          "ref": "eb73bd12-39de-4523-99d2-27a19b81ca59",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6bd86636-27ad-4f1d-a077-d2c1259c7660"
        },
        "item": {
          "id": "70afeaad-1243-4c29-98b8-a70a94781c4f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7db694d0-cc1d-48bf-92aa-9d823050a55c",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "62f58cfe-9c72-48d2-a2f4-bb6869efd7ca",
        "cursor": {
          "ref": "c704c5fd-bacb-453b-934d-492f23106e60",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "480959f6-43f7-4553-b031-aa111420bc91"
        },
        "item": {
          "id": "62f58cfe-9c72-48d2-a2f4-bb6869efd7ca",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4d29d011-0361-4c30-ab38-d4980fe09ec7",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e6e30dda-017d-4fa8-b73f-c4d6562d3968",
        "cursor": {
          "ref": "bdc939e3-8aa9-42a4-b4e5-83b57c8e25ca",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "90b2aaca-ebf2-43bb-915b-489a78c6c037"
        },
        "item": {
          "id": "e6e30dda-017d-4fa8-b73f-c4d6562d3968",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "30d915ed-46da-4038-b22d-d8bd679e8789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7741bd-1117-4216-b750-8c1bae660374",
        "cursor": {
          "ref": "bc8740a6-5f44-4dcf-8c25-918fc1c70c29",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "656aa571-5642-4c19-ac73-603409701a8d"
        },
        "item": {
          "id": "ae7741bd-1117-4216-b750-8c1bae660374",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2912821e-88e0-47da-acd0-aa33a585a82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a173f2df-afc3-4e5b-8791-bb004f231dc5",
        "cursor": {
          "ref": "e9ae4796-dece-479b-9156-b3341a3aca87",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "052a70b2-e993-4cdd-881b-45450c9604e1"
        },
        "item": {
          "id": "a173f2df-afc3-4e5b-8791-bb004f231dc5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "13bc7020-26b3-4e45-85d4-38b261e1591c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a3e81c-3f36-4e56-8597-d082419d027a",
        "cursor": {
          "ref": "ece6a7eb-e9cc-467c-b65f-9581f464f071",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a2e94430-b845-4afc-a991-b546bff9b7a4"
        },
        "item": {
          "id": "b7a3e81c-3f36-4e56-8597-d082419d027a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6fbe927e-7ead-4790-ba01-43babd1b11f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e14707-78ef-4054-8992-ff86bb01b087",
        "cursor": {
          "ref": "1b58f2bd-5c66-44dd-8874-b4cccf58f428",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a9729cbf-19f0-44e1-93ca-f983e8621b97"
        },
        "item": {
          "id": "81e14707-78ef-4054-8992-ff86bb01b087",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "06f0ea19-f3e9-4e82-a1f0-a49eed6c8a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecf52b8-bfb0-4a91-b5cb-8239a59cce1c",
        "cursor": {
          "ref": "235434a1-dcab-430e-a2bc-168823f64a1b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f1a3691f-1782-4465-9a9e-bdfaa314ea23"
        },
        "item": {
          "id": "7ecf52b8-bfb0-4a91-b5cb-8239a59cce1c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a9a16b3f-b762-4551-a5a0-c7e01a8f0ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b7d920-873e-48f8-88ed-657df427ce83",
        "cursor": {
          "ref": "e78a9986-2425-415c-996b-be5745603866",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "69a00f62-b87b-4ee5-bcca-ee1b824811a3"
        },
        "item": {
          "id": "d5b7d920-873e-48f8-88ed-657df427ce83",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "33622415-b07a-4631-9142-88ef366c8898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bc3fe6-d580-4805-95c5-906bbc68e492",
        "cursor": {
          "ref": "f5963cdd-0f21-4e99-8afa-ad1e8d5d4ea5",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0e0fb494-929f-4988-a836-e26f411f5f05"
        },
        "item": {
          "id": "57bc3fe6-d580-4805-95c5-906bbc68e492",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a1343d7c-8dde-443e-b8ac-ef485a5ffa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c52fdf-01df-4b10-992e-3fd043a068b1",
        "cursor": {
          "ref": "2677b1dc-6a34-453d-b0f1-21920eda096d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aad2e9b3-4f67-4862-9753-5c1a6f829266"
        },
        "item": {
          "id": "d1c52fdf-01df-4b10-992e-3fd043a068b1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8d425bec-2785-4b0c-8095-cfe747d6e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a310e9-2955-43cd-afe0-5647906ba467",
        "cursor": {
          "ref": "43e1629f-1326-41ab-ba19-e21800cfb7c1",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8b403b5c-010b-4716-a537-e0191b0393c1"
        },
        "item": {
          "id": "07a310e9-2955-43cd-afe0-5647906ba467",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "95b531cb-55b4-45e4-ac9b-c0ba8d8eb4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb406258-85e0-4aa3-bf59-ccfc81d0b274",
        "cursor": {
          "ref": "ce1efea8-9cbf-4ab1-946f-000a4dc1b77c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "969a68f0-a136-48c1-9b7d-d0e7142aae7a"
        },
        "item": {
          "id": "bb406258-85e0-4aa3-bf59-ccfc81d0b274",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "74221ad0-28bc-4005-9e65-1b5a96f64a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a04b461-100c-403e-a4b6-793b9849415e",
        "cursor": {
          "ref": "a309f753-ba52-45db-be25-f2d70e836f63",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "73887f5c-b300-4d45-8994-4116a534044f"
        },
        "item": {
          "id": "0a04b461-100c-403e-a4b6-793b9849415e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9b59ad60-f265-4c12-884f-12093037f448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688b82f1-b102-4400-b61b-dcdebb24de60",
        "cursor": {
          "ref": "09c98069-02c7-41ed-952f-89cb1752285a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1bcdf7c2-5a46-44ab-a71f-ee8f8e8de286"
        },
        "item": {
          "id": "688b82f1-b102-4400-b61b-dcdebb24de60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aa9470d4-f689-4119-bfec-bc5c52081983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e10f42d-dc5d-43e3-ab2d-b0c03bcb7bfb",
        "cursor": {
          "ref": "811a084b-2147-4f19-80af-c146c6e09e31",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "529d181a-1ec6-4260-9991-98f208b63ee7"
        },
        "item": {
          "id": "6e10f42d-dc5d-43e3-ab2d-b0c03bcb7bfb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "383b36b1-45a4-4d64-97a9-2589217874ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985b8267-834c-45e5-bfca-128a68d3561a",
        "cursor": {
          "ref": "c6eb8eb3-9a46-4ef1-bcf0-bfbb7dad7610",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "05e44dc1-1870-4c52-b1ae-3dbc2e43d6d8"
        },
        "item": {
          "id": "985b8267-834c-45e5-bfca-128a68d3561a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "422cef37-fe49-4b4d-847b-53f1f56d50e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1be556-040b-4b19-9978-9bf5f7b5c1da",
        "cursor": {
          "ref": "c8570538-7a01-4fb8-a03b-88c9fb5ec75c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "976904ce-a697-4e84-b6df-f91c30887806"
        },
        "item": {
          "id": "bd1be556-040b-4b19-9978-9bf5f7b5c1da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8b30744a-7304-4d0f-a4ad-1c034ccd482b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01755e08-c1eb-4ced-96f0-4ed2ad71f785",
        "cursor": {
          "ref": "ba328627-49d7-4011-b7e5-cbe149a0613c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "15baff61-5675-4021-9264-6c7a0aedbfef"
        },
        "item": {
          "id": "01755e08-c1eb-4ced-96f0-4ed2ad71f785",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "175d7df9-b4e6-44c5-b00b-c26566d7dc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87803ee7-5b4c-4836-80c0-021b5a7a5112",
        "cursor": {
          "ref": "40e3f84c-ac75-459c-b763-7a1693c283d1",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9d75f58e-21ad-412c-b40c-8a3d33fd5c57"
        },
        "item": {
          "id": "87803ee7-5b4c-4836-80c0-021b5a7a5112",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6f7afb34-4f30-4a41-8c8e-2cbac7448fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c68bfb6-5a62-41d7-b5f5-05c9c9d6dd94",
        "cursor": {
          "ref": "48f8affe-b007-4894-b421-bc53c8321c3f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "27b93b72-8fc6-4263-94e7-3de0ef9e15af"
        },
        "item": {
          "id": "0c68bfb6-5a62-41d7-b5f5-05c9c9d6dd94",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bc33311e-5064-47c3-a35a-bd84326e9cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf774735-50cc-45d6-be25-81fc37902058",
        "cursor": {
          "ref": "5334cfcc-62e8-430e-a1da-98579cdbce5a",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1dd79d49-2c60-41f3-929c-a59e43517fc1"
        },
        "item": {
          "id": "cf774735-50cc-45d6-be25-81fc37902058",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dd672e4c-010c-4b03-8ed5-110c3bb363ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d5b359-7ca6-4f64-970b-40cfb6fb16b5",
        "cursor": {
          "ref": "06c1f277-23bd-420b-8716-2e5cfeff08d6",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8f51839d-dc50-43aa-96a2-35c376a10447"
        },
        "item": {
          "id": "06d5b359-7ca6-4f64-970b-40cfb6fb16b5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3aa3f32e-4fdd-4e9d-b214-d9fb1c7f5ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fa53c1-02ab-4659-92f2-3f4d369e311f",
        "cursor": {
          "ref": "720f3b5f-ab7b-44f0-8f0e-5b3601792407",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d0a8c697-11c8-4cb6-adc8-108a59e17ea7"
        },
        "item": {
          "id": "80fa53c1-02ab-4659-92f2-3f4d369e311f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a916b715-9a85-4d58-abf9-dc59895d3d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12235cf-3bc7-4f6a-8138-b21ad874490a",
        "cursor": {
          "ref": "a69d3809-8222-4400-a95d-1d49ab629d1f",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4057075c-1ce1-4c0f-b271-6057b1940c26"
        },
        "item": {
          "id": "b12235cf-3bc7-4f6a-8138-b21ad874490a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "82ddc9c2-3264-4ab8-8e75-1673844ee505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d833f5-41f4-4065-8294-b9e2028b3ca3",
        "cursor": {
          "ref": "06a310a5-206c-4a74-8b00-3a2d9272db9b",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ccca74ca-5e30-4332-a7e0-787b1e8c20e6"
        },
        "item": {
          "id": "87d833f5-41f4-4065-8294-b9e2028b3ca3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "078bc728-2608-4aff-842e-0b5f69f86216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76271485-a6a4-4f54-a826-b0aefbc70ddd",
        "cursor": {
          "ref": "18f56dee-7a6e-4589-b50c-5c289967f639",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b47f2465-e15f-4cbf-93e9-79255232a044"
        },
        "item": {
          "id": "76271485-a6a4-4f54-a826-b0aefbc70ddd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bc09f78c-6bdf-4257-a5cc-a290c1897cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32329744-e681-4241-8a9d-d2973aef7c6c",
        "cursor": {
          "ref": "82f89a4d-2e56-47a6-8f03-c5960338d79f",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a3ffcb7b-f3e3-4681-a89b-26d76075ed2c"
        },
        "item": {
          "id": "32329744-e681-4241-8a9d-d2973aef7c6c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2ca5a643-ce10-44f7-9da9-6c82944551e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9802ab6f-e56a-42d0-9e8b-6aaf97d41b89",
        "cursor": {
          "ref": "428202f5-a3fa-49de-8bc3-c4a912ab9d82",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ca68111c-e28a-4cd1-8aed-bd4b4b3291fe"
        },
        "item": {
          "id": "9802ab6f-e56a-42d0-9e8b-6aaf97d41b89",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bfa4b3f5-0fef-48ea-bdfb-ec69eadde115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3b2daa-509d-47f3-9c24-eabbd8ebb7b7",
        "cursor": {
          "ref": "030bc3ca-08d5-4d39-acaa-1d702a93211f",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ad8d469e-9f58-421f-a73d-fbaa404c52b1"
        },
        "item": {
          "id": "be3b2daa-509d-47f3-9c24-eabbd8ebb7b7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f93d204b-949d-4d67-8c93-90ca0af2bf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8434a17a-06dd-483a-8aa2-7e5ed3661d4c",
        "cursor": {
          "ref": "4f8696a9-fb30-4366-8128-a7e29416e168",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cd9c1fdd-250a-476c-8b1f-c1d72be916c8"
        },
        "item": {
          "id": "8434a17a-06dd-483a-8aa2-7e5ed3661d4c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "37a9ebdc-73a0-4d72-9d54-f7748797e221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3b0f5e-7e90-437a-88a6-5877d5698b40",
        "cursor": {
          "ref": "b52003f4-3bb5-4117-8cb6-57d704276d68",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fa1b851c-f73a-4e4e-a378-dbb96509e6ce"
        },
        "item": {
          "id": "ee3b0f5e-7e90-437a-88a6-5877d5698b40",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6b99c83a-f3a5-4a2a-acb7-a51c418b2482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133c9ba5-0b52-4071-a710-d223b4f4a501",
        "cursor": {
          "ref": "bdaa5b46-c0eb-46b9-ab57-6baa2af5b1c7",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "27943613-3c75-4b09-b3ee-8be80d79bf1d"
        },
        "item": {
          "id": "133c9ba5-0b52-4071-a710-d223b4f4a501",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4e965021-fc34-41b9-86fb-df775765a026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8983a40d-b5a5-46b8-990c-78c2dee4d3d9",
        "cursor": {
          "ref": "481fad8e-7269-405b-9826-9dd9620a8996",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b43b3105-de78-4c64-bb01-4d6116f119bd"
        },
        "item": {
          "id": "8983a40d-b5a5-46b8-990c-78c2dee4d3d9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "040f0558-da70-4af3-9338-1ad37f45f8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25229d2b-6cbe-401b-9225-935d7b019fb7",
        "cursor": {
          "ref": "41e68d27-213e-49fb-a9d5-6e1c605ffd6d",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "41f74bf9-9f5c-4114-98c7-c808af58ef08"
        },
        "item": {
          "id": "25229d2b-6cbe-401b-9225-935d7b019fb7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "00b1b9b9-7c69-45d9-b2b1-60caf918999e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd7cd6c-64f1-4d42-a5a0-7bc8558716e3",
        "cursor": {
          "ref": "c0c9d5c2-5108-4428-a0fd-ce276c763e74",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4db56f36-e514-475f-bea3-a14cdc3f6832"
        },
        "item": {
          "id": "cbd7cd6c-64f1-4d42-a5a0-7bc8558716e3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f41dcb47-f6cb-44f7-8710-6769dd7e7582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be06db2-f3c2-47b1-838d-96dadfef6f56",
        "cursor": {
          "ref": "2592cd61-a5bc-4d80-976c-2d847ad3782a",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "aefa9335-83c8-4dc5-a63f-cc5d1cf6c6d7"
        },
        "item": {
          "id": "4be06db2-f3c2-47b1-838d-96dadfef6f56",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0bc655da-583b-45be-b114-ca32f1fa67b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4873526b-afeb-4548-894d-af05bd62887a",
        "cursor": {
          "ref": "d96d36c6-10f2-4a42-8afb-c4a4d8e44a2b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6a27b909-3d0c-448f-8d3f-f63a65b22f56"
        },
        "item": {
          "id": "4873526b-afeb-4548-894d-af05bd62887a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "578c89e6-8e56-4a93-8259-197eed5fee41",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a23de272-98de-460d-a1c9-438d20006a05",
        "cursor": {
          "ref": "350dc852-9758-4c39-94ad-1d8920ff442d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "87251484-4fe3-4bf7-a045-52dcfbea96f8"
        },
        "item": {
          "id": "a23de272-98de-460d-a1c9-438d20006a05",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d4cb6fd7-55b2-46cf-87ba-df9e05769ed4",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "365155e8-8f84-4ce1-b3b5-084a68b3acd9",
        "cursor": {
          "ref": "0c7fce33-4bf0-4f57-b37f-64b00e0f9d4f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0a97d0b5-18dd-4aaf-9b25-66c4f95dcc48"
        },
        "item": {
          "id": "365155e8-8f84-4ce1-b3b5-084a68b3acd9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a0ae28f5-faa7-4552-8874-e35d3f83fa95",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce289fc-8650-433e-9526-e60db2d56947",
        "cursor": {
          "ref": "b28f57b1-6704-4c1f-b322-3a8041df793c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e57d3ddc-d4f1-4e20-a3fe-3191a415c30a"
        },
        "item": {
          "id": "0ce289fc-8650-433e-9526-e60db2d56947",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "49bacb9c-e855-4e5e-8275-5f3f5c776bc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce289fc-8650-433e-9526-e60db2d56947",
        "cursor": {
          "ref": "b28f57b1-6704-4c1f-b322-3a8041df793c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e57d3ddc-d4f1-4e20-a3fe-3191a415c30a"
        },
        "item": {
          "id": "0ce289fc-8650-433e-9526-e60db2d56947",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "49bacb9c-e855-4e5e-8275-5f3f5c776bc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b925040-66ab-44e8-a289-e78779dc6514",
        "cursor": {
          "ref": "051eac32-01c2-413a-be57-24541372353b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "485690dc-993c-47cf-a1a4-97cc0f394467"
        },
        "item": {
          "id": "8b925040-66ab-44e8-a289-e78779dc6514",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "51a115db-0a2e-4278-85f7-0a0d87ec6192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0e0a9f-e40f-4feb-9699-12589c7ef3e3",
        "cursor": {
          "ref": "c6395c6d-86f2-45ef-b9ee-22f0dd45940a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e6abc392-fb0d-4298-8bcc-b17064023d89"
        },
        "item": {
          "id": "eb0e0a9f-e40f-4feb-9699-12589c7ef3e3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a6ac091a-0a9f-40e5-a568-5b8f8a9c229a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}