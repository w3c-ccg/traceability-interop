{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "560cfbc8-2906-47e2-bbfc-8707d7b12325",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1835078c-2ba9-4c45-8516-bc41ffff8f43",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01ec2917-8c74-479b-ae7a-11a830a2d722",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "716d2a79-339c-4ec2-b234-37036d75b012"
                }
              }
            ]
          },
          {
            "id": "907ee4d2-01dc-4771-8882-1158b869a2fe",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a045037-a510-44d3-a6e5-13deefae8de0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "50e6d7ea-95e4-4989-870d-f5efc1375b04"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "17fc727f-fc90-4cf3-8354-d93f7140b1d5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7d13c1f7-de5a-4acb-9470-f2c412f7be6e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1fe87cb3-a161-49dd-8774-553a38c20001",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d238b6e6-bf89-4a6b-812d-1ddc76b1584f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "672c4c84-a6b6-4de1-97d7-18da3e1cabc7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f5ac5f8-60a6-47b2-abea-bcd4b042026e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4dde8a9-16bf-453e-b58e-fed108ab0304"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4d665a7-cac0-4e4a-bd45-91975d4d7250",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d81412fb-ce98-442d-9a8c-64bf42eea977"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "893dda7c-9c79-41de-9f17-11edcbf1372f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "48945269-c709-48e8-a550-cf8edccbbe66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82110be3-8309-4b20-8d0e-33f2058893c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94deb11d-c633-4afd-98b7-231438bded46"
            }
          }
        ]
      },
      {
        "id": "30a1158b-8a7d-43cc-883b-cfaeac6716b7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c8015415-c4ab-4289-97ba-a7c972649d12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37e32deb-824b-48ff-897b-7961acad35dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5b43cfff-6414-41f0-a2e9-7ddaefb45231",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734241f1-fb01-4744-8501-3db1c49edea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78ee4744-110d-4e25-b9e0-c7567613a98a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b6a21c-be68-4398-bc5e-eeed390eedaa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3dc4ba-0562-4c17-9b70-ed645f0e19bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "264c67e0-2d4b-450a-89e5-6c0b9f084723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c6bdac-4101-49bf-acba-05347e6b8c49",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbed14b5-5a99-4918-a31e-cd067bb13dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "699c8ec7-273e-421c-ad30-740fcd3ce197"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3924984-7f70-405a-910e-b49fab278072",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "426af5ed-d2d0-4bf9-a7a4-b3d357b9be8e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d366c2-c3f7-42ce-a99f-e1a1d1023d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd947c20-6906-4da9-a08d-30695a870c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c6c374-2726-44f4-ad5c-ebdc92b4804e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b410a8-7507-4227-a061-a3b270ecbf19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e50a5d9-aa38-4b5a-b0c0-6c72295a026c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07ba25d1-0fba-43bd-bae8-0ca36b326fdb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f281a51-65bb-43d2-80d1-02f8e11163f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "060bba9e-6291-467d-affd-51ea157ab2f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd3f003b-9629-4ac4-802d-cd61761e6f05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e0b7a02c-98bc-4cc7-90dd-39909d3cae15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80c8ea25-7972-4938-9151-06646615d30b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39ad1be8-a40c-4478-be1a-cc575a025f99"
            }
          }
        ]
      },
      {
        "id": "c1cc3106-c460-4699-a8a5-157e12ca19be",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "31207af2-26ff-47c9-ae33-8e58e87f901e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e09bb4b0-4fbd-4bd5-a370-d413fc013ed1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "29982d88-1879-4386-b222-a5310fe02513",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21c074e-14c7-405b-8ad2-d9c08b8f1aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650844a9-8a1e-4df9-a2aa-d5dd6bbf2acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db99ffc-f3f6-4238-ad3c-b9d4a5aeabec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ad4024a-4b4a-4b2d-b5be-9b99e9755a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bb6073-9807-4f57-8891-7cc58aea7406",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0714701-e6d6-4a6a-a042-966eed79e209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80801584-09d3-4e70-903b-306b07a05801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b158b3-f183-48d7-8ddc-8d906a25742a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb42fa3c-f25c-4cf8-a913-c4bb099c24f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109ac116-0b70-45cc-950e-600a63f0ea73",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2059698c-1f43-4581-a4b2-b76e28bd4c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c55c7e-d57f-419f-920f-0fd55070b3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40244c4a-7ad4-44f5-a0f2-9b0172ecc87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d89b76ef-60f9-437b-bcfe-1ff8ffbba5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5e3a3f-6a57-44e9-b72f-6bddc7db9c0c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917a4f54-a797-4666-9f3e-fb7f183a28f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e00d209-2009-4412-8e18-22a600029427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d1656d-ae8e-4499-8a4e-719cfda63d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d11a211-cf51-4b89-be61-2c61bdb0fd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f43d81d-f793-457e-8237-147c8b497df5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0828472-aa84-41f8-abaa-d4e4edcd5ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d322a78-c060-414d-b6af-5d5f0b97abb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81542ca4-c393-4f62-bf7d-15cb1fd4e443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "799b706b-eb0e-49fe-8f1d-e217ebe1b125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c351438-3a8e-4e14-9b55-72862678c860",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201365b2-04de-48fc-89d6-06442bc80d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e580ee6a-fa38-42ac-960c-a6d025a02c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10c4cf7-4452-4e19-b04e-258c34479003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dac36629-d745-455e-bf58-90099b058e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a68b31-5ae9-4b7d-b34f-774e8fa0b8ea",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55be8fc3-cea6-483d-b1e3-603130375fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20715796-7d0c-4ef8-a38b-fad4282e8a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd2dea9-1fe0-4c6d-a7b2-e54a5bd9d6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81dc588b-dc3f-4e84-b098-8202f459f936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ec1e19-088f-4724-8a2f-7c3bf7923695",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c479e0-45e8-4dd8-89a4-40683b8056f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f078623d-c920-4867-8ced-439c5a155c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dca830-1cfb-41e5-9d01-acc8dd6bd294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16364fc1-7b5b-4d6c-9e9b-272c1741c1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99ca26b-ba3b-474a-bafa-2804838ebffa",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f7d3ff-e3a2-47da-9278-37bc7ee8b44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f592a46-36de-4300-8d0f-557ce0185273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d1757f-1eae-41bb-b3b3-e23063fdaa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbbd9205-bf87-4569-a84d-893294cb1cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819bc27a-0655-4082-8d39-0dbd7ace4d2d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fe98a4-5843-43d8-9c9a-e4a07b131138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bcaffd2-384f-4fad-9b94-7c7a8a1bfc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173917e6-495d-4ba2-ae00-64e7c652958e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7533e08-a5ba-4910-8a7e-aee4260aeb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6da3be-e008-4d31-aee3-a831884d24a3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb81bedc-bbe0-4246-82ca-c7363116e840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a12640-89a8-4029-b1d3-b6c0cdc900cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fc8aa8-a05d-42cf-b5a3-7bb75583dcd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d543da5-f145-40cc-9606-db299ebf7d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cdb7c3-9be8-46dc-a4d5-674a7a219b6f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403ae814-07cf-4c9b-b4f6-748548192567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a83195-ceeb-4e5c-9796-4bb0a5d0a05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bdaa78-aa16-4819-b84a-7ac3973d1397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1507c8fb-2610-4d4e-8a8c-d9e6764a568a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e870dd9-ca09-475b-b57f-b99d1a0fea2b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f169e2a-6049-463e-9a35-85eebab86c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf798fa-8ab6-4255-a42c-9c9c4fe1b0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e6b424-3ff2-4d00-b2f6-7eb7be1db2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "122aad98-d49c-4af7-9716-71f2a4532b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda05e9f-571e-4588-a797-2311a01a3086",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95238d74-298c-4110-ae0f-488df67435d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff39fa3-11a4-4b74-bd68-7e6ad92ff002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128c9ef9-06c9-475c-b705-8f318bcabc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89bd7c10-fe1f-4831-825b-be268ac042ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98a0a1b-dc7c-4ab2-89eb-00c9afe7a326",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d724f1f-0542-4ecf-b200-71b960c2f168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a9e03b-a3ad-439f-8052-69043480aed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b069671d-7432-474f-ae8b-9a8c1c234442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "418b56b2-206e-4ea0-9fdb-33b54bc0ffa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fc0981-41fd-442e-9b19-ec4b7c619aef",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebda44a6-39c0-4249-93ab-018919fcb4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d4b083-c18f-4984-b7bc-8004400fc306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eb247b-580e-43c4-8b03-b78b8ac289c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "609c4a5d-100d-44b5-b689-8eb5a5bc23fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d337c38a-78bc-4113-a113-18fb04fee68d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94432632-5aa3-43c2-9e45-f48719705d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf003f9-ab54-478f-918b-9499a1e36559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cec403-cf1d-4965-b2a0-f70363662063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a21bdbbf-79b6-4dc4-b574-a1287dde7d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa395be-6279-480a-aa72-581df07d12f9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f54f43b-2947-49aa-a228-44d2d3faee07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc246a85-7bf4-4fdb-bed5-e92996938a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d91bb06-04d9-48e4-bfd3-b9e8cc43f73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f73f37-6ef2-4e21-8073-3980db278f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad02f074-0370-462e-817f-9b33bff89695",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eb6a7f-b0d5-425c-9e4c-554a87fd5189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01917e83-1b57-443c-acd6-a7a3c45fabf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90da83f-46e6-4a45-a5a6-b9143a16531a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "debba7e1-02c4-41cf-9487-af2ef8a7ff1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3feb93ec-a2bd-4fb9-8fca-666d2d558be2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccafdf8f-827c-42fd-8b2e-4073682735b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8763402-35d1-442a-8ca9-d83fed9f47ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26f1434-4fe7-498d-a7d2-b2ae7db49fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa76f2c-dafd-4c49-8f99-b4c4479103fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f72c68-59c4-449b-9f1d-3a1c822c1fbe",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4e7d16-c661-47fb-b313-258d97ca29f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c47f550b-cdf9-4f4d-8342-17a981f5190d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44c8930-d7cd-4865-914b-aaed6c38793e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd7886a-48a9-4c97-b634-5f5a5a710892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15449e6d-2f0b-4f0f-8949-46e42bc23d43",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c74e5f-9191-40c2-8306-eceae7eb6778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd3b1d8-4496-4ece-a849-bd1ac26b8041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30534a3d-a166-42a1-b8b8-2bfca8422686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fca0a5e-b6ba-45a4-bd53-0d7b3e4da190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343cbc96-8be8-4cd3-8e8d-27c56c669353",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a3bdcb-5996-460e-b675-91166e0ec92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcbd79d-d028-4c33-b026-8210e44277e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d588d7-9cb9-4b6c-8fea-e3e92a85a227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b559d8-782b-4e4f-a4eb-d54943995eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d195f7-dbf7-4de7-80db-5850f6a8faaf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7286c1a-9b09-4b3b-8064-dc6fc17f8d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2661928-0f0a-4d35-8555-6d8d31800b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b552e02-eede-4f86-b54f-af4a3f3eea2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "032f7340-8d21-486e-b01e-150455d9a838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df609a9d-608c-4fb0-91a4-5c2e5d30b580",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42ef613-4357-4c99-bbd4-a144fc98a690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e8215c-c41c-4a02-98c8-818138ccb769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedde43a-b226-4145-ba23-56756a79ba5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e99e7539-4c93-43a3-894e-44a8a2f4380f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e7ac94-6d98-43b8-90e6-b1d6689a5068",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24cc6b2-bfbd-4d27-aa83-d4db5c2368e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4893b6be-d26a-42a6-9500-984d57da46e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b037dd9-17f2-44e1-b757-c15aaa93cc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c74b71a1-bc0a-47a4-8fd4-1b6d905b24d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b02a70-181c-4a54-9601-72cd84328b36",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcdd553-e2c2-452a-8a5a-719d74a7aac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef51f3fc-adf6-4073-85af-2e36494024a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5f53fb-2b7a-4320-9e9d-acdaa6f3e055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "863d95ce-3a42-4cdb-a7dd-5cbb569885c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f821022a-db9e-4e8f-831b-d647a0c22485",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9570a1de-afce-476d-bcb5-b77ac48cfe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a519711-8dc2-4e4d-8137-eb561d0f4f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b641ce6-6d8c-4870-b49e-4bc9f1313013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd57da3-c6c7-404e-ad0a-73191b907823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8da51d-3a11-439b-84b9-abf9ced3018a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce2ca8b-33ad-4e08-b3d2-73e77a0ec9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6762162-0da5-4700-b12f-bada9ed8e595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9c6b69-b274-40a6-ae03-ae0ee850110e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9362366b-c881-49ae-b4cc-52ae462399d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6b3875-6f26-4263-92ec-f95e682bbda1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c29a2f-5d0d-4635-9d8e-a8f923e343eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850d487d-d5ae-45c4-9401-05a8780f6c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7cb36d-961c-4f1d-8c8b-dc5a78a79a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "512f7b1f-e57d-4854-8a9f-aecd311c0f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a64d491-92a8-488f-8ca8-2f90ff2722ff",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486f8dbb-d1f4-43c1-9a93-696484acb276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcde7f3-d8f5-40ff-9c63-b2b8b69848a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6459518b-e322-49e0-bb50-7e72fd7f1b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d94e2f4b-bc1a-4ca8-80e6-4294f6782eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79abec91-f7da-4c28-8bfc-5d9c092c8a1a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5536a6-5996-4433-8b60-558b80812e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "542788f7-c69c-4ed4-9286-dadbbdd5ec98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6179263-84e8-48e6-b363-680bb611d119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a3a72f-861c-44a3-8f64-3faf688cca1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38038da-610b-440b-8dfc-2689f8a145bc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664fdb5f-8c06-4948-8ca6-891de9e4e031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3874922-c6ff-4122-ad51-fa615fa4af63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5a23c3-b540-47df-b75b-26db1da41896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60be4c71-7f3a-403b-b75e-fa87c8196cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e021c43-7656-4805-a709-b693541304b9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e38c449-a9a2-4852-8cbd-fbb39a9498a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf66b1f-b513-48ab-b4c4-08b4fa93f82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48cf1e27-29f2-4305-b5f9-11d1462c7f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a9c1af5-30f7-4196-8d15-19d1219d44dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f312a979-49b4-4653-9565-b62e67424c74",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86405f7-dedd-4905-81b8-19d8a4774c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaedb9a-be3c-4320-a1ea-2e94b6eef51a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d944e617-d002-4eeb-9c37-2e897646becd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "da0b1074-295a-4fa8-9993-7bc2eb6a3879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e5f507-5799-460c-90e6-30ce895f4362",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37438c80-ca78-4837-8b36-a161b891e44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "751d817e-91ae-4392-9e5d-a5a5e1dd404b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffe8d97-e42e-4975-a01b-0203a0f44c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e54dc5a-8b30-477d-bf77-ff2e04cd5f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b564c97a-b96a-41e0-9692-12799c732aef",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3646e68f-a48f-4093-ae8f-1401b9053779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe99be5f-9a99-492a-bc95-427c4cf4dff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22514c2-95ef-4868-92c4-2fc5c1c53701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a36bc5d0-321b-4147-bce8-84d8e28de79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a60b24-ab02-47c4-af8c-738c67d3b1fa",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e09fb3-267e-4c9b-be6f-8d544dc07357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec9d16c-c9a9-49af-bba5-7d3117e47bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6824ecae-675b-417b-80a7-e2e0738614a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15605459-89cb-45e5-8606-800a3b9dfb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb78491-6fcf-4a5e-85be-e84d78673b69",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a48127-b3a3-48f6-bdea-54a713646988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9f2d64-1ca0-4be6-82bc-671dbcaf8fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f99cb14-412f-4714-923c-17a955b80c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "731ecf94-52eb-4e5f-932d-cd077a1c3597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9676e46e-1504-4515-9972-1c9f02358d94",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37733041-0dea-4a54-939d-a2402bc03082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644ae56f-57ae-4d9d-9e55-b8ca7b96c26d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc9830b-f350-46e8-b98b-8d7a7493d0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9bd273-4e0f-4a63-8851-e0111cd58e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a57d79-f3d3-40d8-93c6-b9e7cce7745b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f971613-031e-4674-98aa-d3ecf7d20a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c46ca95-267a-4f11-8b00-ac811ca93c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8299f9-0ca2-4272-93d1-d4e95f1b84cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2a0067-beb2-4aa4-a0b2-f0d7fa71fe3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0cea97-35e2-46f4-840a-8803fe250188",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d1f4d2-f76c-47d6-972c-59344f417946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77307b29-2468-4e43-95a1-14d93b835891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470e2219-a906-4e1a-a12c-1c516802c384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4e1091-df3d-4b1d-b76a-d9061bf0d443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ba7184-9849-48be-946d-1f80b3c1d38c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c0e0eb-1823-4735-8ece-323181905ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2c9645-16c6-44bd-bbca-bcd4bfdd3466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8c50b9-0d1a-4c0a-9f63-fcc0675166e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb7f8cb-17a6-409f-9639-4feaeee32a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ba479b-a485-4f45-ae76-81b17528ad5e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2dfcb7-d655-4a54-a142-e5aa52dc6234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee77f1e-536a-4a78-9a25-fdd25581e999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca82e936-a3bb-465d-ae43-21741c943d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2f7d8a-1289-4bf6-a373-5f5046f0a028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c703e850-9323-4864-92e1-6c7ea7fd5c39",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540655d3-ecd5-40e0-95d9-c3342e031242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb5c76e-2298-4aae-85a0-45d7ed5c8e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5457f563-ddc0-4c79-97ad-c2d77244c475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54888b18-8b72-4fa7-9a81-ec7477b9f023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748f013c-32f2-4d07-9c07-e4e1c6a53afe",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c60df6-576e-47fa-b765-6a6db76e4632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46573c40-d674-4763-b157-d78b2be33913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285ff2fa-14cc-42b2-b7e9-f2945501bd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1283345d-ce90-48b4-bccf-81e9a7f4d6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0fa88b-e754-4461-9595-0e8eda47380b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36f7815-01c8-4813-95de-9c10f0499ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1683ffaa-fe8a-409e-b0c4-aa411c9f47aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0915024-5025-4a03-8ced-efcb99501041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd7f341-074b-4d5f-9c65-4c5a46a49c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c23123c-5ddf-4ec3-8b5a-2a8bf5a835d9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a705ebda-c6ca-4109-8811-44ff7e9f3919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0241ecb2-4d60-4c55-9d12-6fc40c0299c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3fbcc7-9cc0-4e8e-96ee-540e41858e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8cb28d-21b5-4336-afc1-4938c2cff095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8a3102-b622-4103-b487-aea0d59a115b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a08751f-3d96-44e0-98a9-5ac42d6d9793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e904fb0-2b03-4461-8f04-985facea4030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8d43c5-7117-43fe-a434-865ff6e4d767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a596931-4ed6-4709-b132-2095a6011ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6474e1ca-9c98-43dd-9b8c-374a2194ebd7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f7ee40-d304-425a-895b-ab14b3eeb63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7270ad4f-021e-4b49-86d2-44323bb8879c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833871c8-7498-4a48-9e7c-ef0b3a555902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1cac2881-267c-4025-b4eb-ff5d6fcfb4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2c3e03-4bff-44a7-bed7-12ed8fa8a22f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eacffc-d47e-4fe6-8d80-17649a02b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b920ddbe-bdc8-45cf-9b6b-70141370b77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1627f8ec-8ac9-419b-9d7e-a9942848f2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a166543d-97e8-4fc5-ae26-ee04c13efd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78abcad8-83b9-4820-b2d8-ff227b95adea",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c77fd1d-b61e-46b1-92b8-cc869686fff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d48ba1e-333c-4ac1-8926-fe2599b4db91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f946f117-a823-4e02-857d-efec8777e6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "88278ad3-d264-43d6-bf49-8fce3dea4ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aa7c91-a7e3-4f79-85a9-530ddcde9bce",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a00cd1-b6fb-4a46-a948-f84b8ee138cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3ea631-ca56-4b2b-8737-a83ef87665be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e6fdaf-3278-4350-82c6-a681a6af8d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4596ba3-7d26-4ecc-a763-b0e1503222cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c599383-5117-44ae-8ca9-8e92b4f91a5c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08804ae-4894-4685-8266-832137d53416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f6defc-879c-4396-8ecb-4c8caed19ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f078ab21-259f-4682-80e8-e9c41116a23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2190d349-8f49-49ba-8d26-417c8a238ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d8df3f-380f-411e-93c5-3971298692ab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d660e475-e6f5-4101-8d29-4365fde96a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f46636-3675-4b9c-818c-fc3592ca2337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1703b2-dd09-46fd-91f6-44ae7a2843d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8072a424-4897-4d56-bff2-05df6d2ff079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7524fef-63cf-4cd9-ae9f-ea5314774025",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ba6bee-4c3b-458e-8efa-84ff5d603a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb260e22-13a4-467e-8b45-02f058eeb1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb680a8-43fa-4e1c-9dc7-6e6997bedfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3f26b23f-734f-4c17-9640-c7521e6c8dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf64821-3360-4708-993f-da41e3ad4eb0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b43bad7-e87d-4ea0-a6a2-1da4a88e6d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c51324-a8fe-43d6-8bfb-eb0e7cffe12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb238b4-c1b2-402c-8127-539288a583bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5232e457-2c30-473c-a2fc-246f256df3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9154f63-d8bb-4a66-b572-5f422cc29776",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f29876b-43f2-413f-81f4-c19f4703dbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbb473f-e9b8-439d-bb4f-470f846005c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c819bf19-f18e-45b0-a7c6-5e2aab59afa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6424691-0918-4763-8100-730904d385aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c889525-6526-4e93-8305-2d512d972670",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48a71f0-7876-4abe-a43f-b95eba939909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b376508-b195-47f9-8aa6-123465e7e8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f380226f-e0f6-4cd0-8348-b3536073e16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a05ec3c-0246-4af4-b607-02bd496c64f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe52cdc-d3c0-4117-9059-54723f531baa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c4596e-32ed-4662-892c-0570b48b1fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8df427-caef-4d27-840f-67f3681d34b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afc5b0a-0eea-4722-962e-fe89d41a111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d760fc-151e-4ff2-8458-7bee46f3a568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062a5b56-d165-46c1-a6b7-b90c6d1f00a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4bdde3-7ef0-43c8-9f05-ca109b920f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b98bdc-19c7-48d1-a28b-1de2d8e287db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce1adaa-e425-4a0d-ac63-598006d9a2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b95538-0a46-47e9-b8d0-e28d5fccdbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7c959e-d6d7-498a-b5fe-75b60317ea88",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cf5456-2cae-4abf-9b0c-c27345af748a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a507f7d4-14ee-4bee-858e-f080311afed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2ef1eb-bfae-4e8e-9b78-f62cc305400a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5419de11-a993-47e2-941b-63ea9727dbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39b2652-a912-464e-b2d0-f4e58dedf125",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36619814-9a94-477b-b0dd-97b198f41af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d592c461-ca8f-4964-b95d-5e3c863c4d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26127808-389b-4d7b-a0ca-8e16b0d74149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9deb521-6583-427a-bd52-6be099024e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a6ac25-6bfe-419b-9505-1ee5d77061ba",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc650ed-66eb-46f1-b425-82b7503079e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b803ee7-bc3b-475d-a224-0492414928a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c798d0a1-af85-4ecd-9bd5-2fe6c711cf62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "288b0dd4-52df-47ae-ae4f-f27ec8fe0944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b631d9-d775-4c7e-abc2-2b6b5221040f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72427c14-0e95-4557-91b0-2fed3756aea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4055f3f3-69de-48df-a96b-c08189e0e585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c6a75e-9004-4676-8f01-5f3d16cf8cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af9ab5b1-a493-4fda-a375-f3be4b8ad513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43232f31-2048-4f05-9b84-59bd6688e0d7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe7a96b-cafe-4f77-a155-5369913cde2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e7c768-44d0-46b2-81ae-6e99b6166a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853e3b48-b031-40fa-9ba9-78aee027935f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ff4795-b889-4de8-ac48-30b991c71d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3091318a-7bbb-4b80-bc5b-d55e47c12573",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8482397f-7ae0-4ae9-8b1c-ba42217c53cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49c6d1a-01f4-4568-926f-285769702e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0491f07a-423a-4ad9-8e66-077bb910082f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c975a18-c379-4110-b282-5c127276caa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e56810-fb00-42f6-a8b1-8d5b963359b6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc3624e-dbb8-4bd9-8276-a4db7c7e1b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c875d2e5-1d1f-4553-bc02-633776f99388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93f56d8-e14c-4874-8f20-5a9625277f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdce5300-ed44-418f-af9f-23dc92e97ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2105e6f1-8a3b-42cf-8de9-1f4e574ec133",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cac282-9499-48da-bc28-d6d896f1ca61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b05a00-0827-4f8e-b6fc-5cc4a7f80825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9e6d42-fdd0-43f3-95f8-224ccfb36a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "016a12a9-63ca-4377-b1ce-1adf2c251d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378a515b-790e-437e-a115-48245d129c95",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c5e1a5-f19e-4273-bb4a-0836012653f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ff27e9-b1c6-4e09-85d7-d11c01f2606b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531cf01d-b9cb-441e-805e-875088223325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e035641f-3574-4d20-8658-82cf8b5f6a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78312cbb-8e50-441b-90a4-99f13e036842",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1913decb-a8c7-463b-8bf7-5b086c8d6891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9671cd41-3fcd-4358-a309-111ee83f4e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5e4b3f-3ffc-4b5d-85db-3b6944fc3657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57a08e38-5a4d-4967-854b-8295dd9a62c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33894325-0836-4fb1-8dad-916a1bb5518c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ce77d9-152a-42a3-bdd9-39d71b9881d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce0b8f1-ce62-42fc-bee3-319f9ef2448b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e8a2a6-f7f4-4fff-95b2-3031f78c23e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5191d1-6b2a-492d-b78a-d88dfd3a8c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6681653-a95c-4ae8-a0b9-ebb4f6a4372f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21085b1-339a-414b-8258-d2a2cec27be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668c70a1-0681-4307-99f8-58ba41aeb5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2a0ac8-6f7d-4732-b1ce-a6a8bbf439f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "892e55a7-d0cc-4bcc-a22a-153a45d4d080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceae4ad3-2dc7-4778-9991-e7e89d4ab14c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990d9897-08a1-4ad0-aa45-908ffd9e983b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b93646-9882-4d06-9c63-3050d0d333be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc21740b-4982-4e0f-a3c3-bea62bef5494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b167f01-9364-4389-a7f9-18b76accecae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204cc0c2-3dc2-4e90-839f-712b19794980",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dde18c9-8635-46d2-bf5e-6f7e48e12f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35a2169-3cb6-4f02-8f6a-50079c632f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9d2f79-01e4-4e4c-8b9c-62d4075f61a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "244fdc3f-392a-4da3-9f01-659defee94a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5719c2-41a6-402c-98ef-8354b3711e74",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05c39a1-75bd-4fea-8685-fe5311bf3092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab28987-c17c-47c7-bf73-60a15daacc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fcbafa-ffad-48df-a72c-9074d758624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29a207fb-04de-4b05-a3f2-a30c2d1413b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18a452a-5c95-46e8-a227-5f3594875717",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087315f0-babe-4124-a11a-d255d3ef5478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d23617a-7dd0-4644-a375-45fdf90b8f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c655b38f-c6b0-4496-a501-358266c8aab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4b82b5-4847-4a24-855f-482ebbc8d61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e0dcc6-db01-4dbc-892d-44c0694cb467",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7264890f-3397-4a8a-830b-463ffb4479b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb9eb41-9c84-4587-a6e2-60947de57142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9403f341-c965-4add-a47b-bc202b8c0432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6127132-706f-4743-a588-1fc88d58764b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d5aea2-0cb4-4652-8c2e-ed4475fd0438",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a11fbf-629a-453a-8f4e-6d4c257d5749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c930d2d4-a65a-47be-be14-c1f6fc6a5127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71729898-b229-499c-8ee5-6d48cb263ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd490c17-01c3-4f7a-97bb-dc4e3c560b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6783823-e75d-4310-80c3-cb4c0ec36acc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e208a3f0-edad-4956-9832-1b233b8e611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcfb23af-f623-44ec-9d51-6348f8f31b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85aa131-1189-48d7-a918-759e75cc4fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5982ae-70c0-491e-8110-09c08ed59262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd7c5d3-3946-4a41-b166-d70d6f9a69c1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437c59a5-7b4c-4dce-943b-727a3528da39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b424e2-8a10-478e-a761-cfc424a48ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e3f3dd-6a8c-42ab-bf6e-8d375f7242e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0e25aa-c672-4ebb-a3a5-9e0aab590aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cdac6d-81e1-4a4e-8c7b-25855752bfb1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08e94b1-fc40-4747-8301-aa96aad99e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cdb12b-bb95-40cb-b911-a3b51f9a80b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fa82c7-a3da-4d59-bb11-422f99668b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec46fdc3-490e-4a28-9708-af30d4f9cc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52931044-33a7-4f1b-a2c3-2a3e5d4e88b2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47599bca-b44e-498c-a816-8a719bb90b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76dea85-78f7-4fd4-be04-57c903f6f926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678a70c8-5e94-4482-b185-36deff4bae3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad8182d-354c-4026-9553-68f3bffa56a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36fdfa9-6e92-4a10-ab94-2fa154a4ec0f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0349e7f9-2d49-4e5f-a1da-b26d5f5bb815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f4d15c-ed25-434d-b00b-cb0ae971d95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090daad2-2219-4480-b06e-bab8d03d2473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f7a473-ce6c-4749-a13e-78f93e6e4fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966c22af-e280-4d2d-ad01-62f867888b32",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cefad1-a099-4c57-8914-d538be976de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658b7423-bfce-41eb-b341-a1a093ec35c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dda859c-4acb-41bd-9910-9a56b47bfacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbaeb3f-270b-423a-a2c8-be7704c1254f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29872c1f-da38-4543-95e0-5c428e0cf37d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e92494-1e19-45ba-ae55-6825583b068c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd83eb7-0a58-43e5-b7e7-a0e9bc2f0e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07403c7-b9fe-4cd7-932b-238d62256ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b78c67a3-f25c-4aed-8b94-dfef2367511d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c35d11-55c7-4410-817e-7ed6c96815ac",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a8dcc7-a10f-4e24-9830-96ce86c0953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99577c64-404e-4a8e-aba3-4fd594cc081d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0f4bee-004c-422b-8358-a45920df93e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "70f1f62d-ca39-4211-a406-a7e56d1f9f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6292f5f6-98fc-4d31-b7f5-6763ec777684",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65becf3-c760-4625-96a0-c2fb1739860d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760cacb8-fd46-48e6-a825-d92ff5b1a291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438c038b-bc6b-411b-9b93-c51c2e2f9b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d255187b-2ba8-4655-9a43-fe2409aba63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b767b6-4f95-4278-988f-53d18fa38b66",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61561b99-9724-4544-a28a-8b5221b64f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcbf57c-de14-46ad-986f-e31a85522e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca45513-c8a3-4f45-b5fb-a3529bbe1ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb27bf53-e613-443d-9119-c8a6f60b28fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354419b2-5141-422f-93a3-8e4b635712d6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee34be3-14d9-4878-a346-bd713b9366ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a057d1-631a-4cfc-83e2-e4cbc5203760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e714dc-87f4-42db-a22f-1e3bf44cd250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a44e4953-d44d-4245-ba48-4383de88ab64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04814166-02c4-4ecf-ac7d-43c5ea95d52d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8e220b-a342-4092-b566-5988a9eea961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09177b29-4210-4030-a552-0b33e4764bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae85c83-a82d-4bfd-8ab7-e6764c815b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2eeff27-e04d-4b3c-925f-733f30af14e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2588b5a8-f277-4c15-a901-3e49951ddbf8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46278fc-7bb3-4a72-a4f9-764471f1f5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70ac12d6-e921-4079-bdde-84b9859e11af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9e3144-4ac9-47c1-9811-598d3ec788de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f55e41a-aabc-466a-9610-25ae30007567"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a1d1b36-7767-4ad2-915a-c0b9128c27a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97027fd1-cbb6-40df-b573-f694c62a2f76",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245333e9-f8c6-4c06-969b-348db6991014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d6207c5-8613-45ea-91a7-9899da515ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8ecf94-178f-4b0a-84ca-fc86f05d0b54",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fa41f56-ed3a-4eff-bf1b-5b3a2694ac4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb6de5b8-6eb1-43b3-9343-6475b7946d57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9ac9fd5-e45f-4692-ab12-0567e23995d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27bdb2d0-d2b1-4111-99c3-3dec7d622cc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7de56d41-2914-4bc1-9e77-fc20ec80ee5d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6b8ee9f-6fd2-469a-9a72-2ba52cfcb9fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ee3cc4c-f9fd-43fa-b473-498f8ed0f564"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad7c9c1c-fb97-4b3b-a4c3-e90471d42b62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68452492-7126-4f2b-94c5-c3be4c437d3b"
                }
              }
            ]
          },
          {
            "id": "16678ef8-2f81-441d-b9fc-5b84f12347fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8cfb75d1-1387-4dee-a0f6-614f8f001fe5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e7a9b326-d78f-46a4-a6fa-c34b67906c24",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac9f851-3799-4466-a685-3ebdd4376ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "543fccca-4f65-46ff-83a8-a16b72a6c50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc05aff-88a0-4547-b3ae-1121bcd0450a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a83b771-a739-4ecd-8f00-a9abad442b74"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9510956-1754-4578-a492-24ec3b855587",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcea7d92-9cad-43e9-985b-22ea9aa1353e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8fdbca8-b337-45f4-8094-bd29810ffcd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b6eef6d-cebf-4f06-9b23-fecaa45cfb4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "102a68bb-d401-42ae-ab4e-b70d75827bf4"
                    }
                  }
                ]
              },
              {
                "id": "375b0df6-86bc-4361-872e-f6ac70062b69",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fc47618-3c8c-4315-b086-219001d3abd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2869f7ec-b3ca-4c6f-a38b-c25448128d30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9bee037-a036-4567-9ad3-0d3e0986b575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5db528d8-1c63-4e55-a16e-d4f1ff2bfe24"
                    }
                  }
                ]
              },
              {
                "id": "1d92c51f-58d3-4c34-8802-001e59a3b8dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95fc41b7-101d-4995-a4da-c96b086dea9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cf9f7d4-9afd-409a-9707-03e0dabe729c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d020cb41-9fd1-4244-9381-4e5f447ee97c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b3e697f9-70f4-4c41-bc98-62d5df2459ca"
                    }
                  }
                ]
              },
              {
                "id": "a1ed6fcd-b3ca-4cb9-b164-b0ad53d237a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38117a58-9029-48bd-b1b2-1a174ab149e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ba80c1d-441f-49b7-bf18-b34ba8bcd429"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19fe224a-5c68-412f-a601-67ff2e5ad55b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3fd4fbf2-3efb-4727-b810-5175d0f63c60"
                    }
                  }
                ]
              },
              {
                "id": "616efa7d-d80b-4a47-b23c-5d93c2b542fd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42b17501-f49a-4f4e-9e97-8ec56428d303",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2235426b-e669-4a41-92ea-7f51d25b19fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33a59a32-3d77-4cb5-9e3d-c7b4fbbfb868",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b96afcf6-dd42-4c35-a3be-27026fe95d5e"
                    }
                  }
                ]
              },
              {
                "id": "2b3850ec-48e9-4ed4-a4e6-4439b0ca1b84",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67a46ffb-f68e-4c43-9cb2-16d9b6188f16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e54976b-cabe-49ac-b392-60ff7c8423c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc29580f-9b4b-4518-bcf5-8987b8dbafbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "93858154-29a0-47e8-a8e1-f4a0298cdfe9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05d7f700-3330-49e2-b484-aa6735212a0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6653f181-6a03-4336-a738-11e8636bf4a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a0eecb1-1a1d-4685-b419-f16b7843d4cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8efb332-eae2-4372-b88f-bf450e6c2a6d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b6e712f-4638-4a0a-940a-8523b159d45b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8f24c385-4a98-436e-9cff-3311b1caa73e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c3e7f41-3720-48c9-a389-bd41eb117f89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "082784f5-b295-475c-80f3-1b1bfd7945ad"
            }
          }
        ]
      },
      {
        "id": "7bd5dbdb-c3b0-46a1-b3b5-a010299f29cb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c8832716-b5ce-4058-b3cb-a5cf5e646f14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bee2587c-4ea3-469f-a0a8-7ceec9df5842",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4a2ea367-7d3d-47e7-aa70-85566a62b116",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfb1ef9-6a14-412a-bf3a-128ccebeb2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970ae9d1-7aaf-44b6-a1a6-1fcac36d4ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12685003-325c-4b1c-aef1-ac04f4dc26b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "afc1f5c9-6fcb-4a0b-9aca-78458e1e047e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9898cf5-bc6f-48f1-95bd-debddca08289",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5f80fa-3901-4b2c-a471-d7dc23c7b1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343b6a52-b0cc-4632-be3d-fca74c14c7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ae6e5d-4f9f-4561-9d25-5351f9df524d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef01314-0e6f-48ae-94d7-ec7a26b04eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a334e724-a571-44ce-9213-6eb38ee01f66",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf5d4ce-6413-4710-97cf-1dbd0bc7766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7472cb-f6d9-4b9f-9d21-2ed60bc7a8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179cafd1-be12-45ad-8511-9f4b503bfd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03a08cf9-b3b1-4df6-b383-4736760099cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3325eb8a-64bc-463c-910e-0658d93588bd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27158c7-ede8-425a-9399-25e9cf2a09cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c532f259-5905-40f3-86be-0f49932f6183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41af675-1e05-43ed-8108-8d1446db728b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82e5e158-9be8-4c90-93de-64d4ea31e3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a701b16-4ef0-4f45-be70-f1003ded6563",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab18572-e845-462a-ad0c-947735ae28d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b76262c-fac3-4eec-bb95-efedf9323c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb61f4f-821c-4128-b1a7-b2b042e0b1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9812c2a-3eb3-4131-8daa-b23c80349f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2560cd-93b6-4761-aa16-6e5c712f91c6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa2b623-da2c-46f5-8062-12acca963449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a69063-b153-4614-9c0e-c2983729421f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741d9f6e-778d-45df-9ba4-b051d69b8a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea26e8b-0efd-4c6b-b093-9a061a530f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c017e5-3d04-4f1f-aeb1-81aaaae57366",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d47f345-e414-442b-94f5-3a4b719a2d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be7c9c1-6cdd-4d10-ac8b-c3b7c2a8c362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be92076a-d163-4428-9ed5-52c193420907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f7ea47-2cf8-42d1-be42-1d8cf9e15d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2b0d94-59c6-4c8f-969a-f52561fc87f4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf1114c-c885-4290-93ff-0a087e558145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2245cef1-15ff-44e9-b4a1-ef48814b4d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce1cf20-a7ed-4ae4-a497-e71cb60b0db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ef6faf-63c6-4c87-b77a-8cf3eb820483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b8589d-9d80-4f03-ac04-4525dbec2532",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c2a801-e301-4011-adfa-58d40767626a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e49e6b-75e8-4782-b973-da61b9ad29c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14d0e24-b312-4816-9110-7999adfcd121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b17d112b-de78-4a74-bfc3-4abea1eeaf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e081f6a-f0a5-41f1-887d-49d920b0d1e2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd68204-88d2-409b-af05-662c9a4243eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9cc311-5977-4d31-9d5f-355a8196834b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94ff559-6389-48b7-a3e3-bd4e884a03f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3143cae1-7a39-4e3f-a4ca-8c9d9f6f1948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad68615-2187-4c68-af3a-a8902a2d9cec",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9e5314-ea0b-4d2d-a40d-6a6a56ffd645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01cdd86-b541-40a2-be85-fb8572842c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fe8e11-dd93-4569-86d4-a1e843b823e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bea17b28-aee6-4820-80e6-e6c71edc9912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf88f28-ec45-432c-9d0e-13bda3e773b9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1533b046-1d60-4c7b-92f2-7c221bc2c9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e71f7c3-aad5-49c4-836f-a2f9b7b6ae1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6ba54a-d446-4b72-b130-cc7b866b3860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9281a812-c73b-4674-92fd-463b1fa6ed5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27eda57-b804-4c33-874d-432e45d55867",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad6838a-2b56-4617-831f-7351c38ae4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1561f1-30b2-4369-b1b8-2d30a87e141c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68df8c5-144b-40a7-a6a9-9e84187fcbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "712c42ba-b0ba-4c31-be08-2a89ac707419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d998dad8-1534-4fda-97c6-cd51bec3cf8b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08727db0-7d03-4c55-be70-b1090811b103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad26b74-68f4-4236-998f-bc2cbf1ea518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d1a8d7-616c-402a-95ee-1dd708adb665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e067d407-ffb7-437c-965b-264d8839f2ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee535086-c5a3-4f65-984a-cc058ed45e2e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9096e0-0f87-4507-8a2d-47f56f441046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a81b43-f5a4-4b24-ab10-cf4f3d3838af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8439a0-2afd-4fac-8f31-e03684fa4003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "224c09b6-5592-4964-8c4d-97d3278a09fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308b1148-2478-44b4-881a-316969408eec",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93197cf2-3ea2-4e68-a8f5-274f7206e905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6a37e9-e434-4b29-8037-6063b92183e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e594655c-1808-4422-9a2f-2ef2b767da34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "894693b0-a66b-4d42-a2e7-4300ed389c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca16920-63a8-474f-8fb5-c45f66bd8c7a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6779df54-3040-4bef-b3ad-f488351ad04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa931bd-6aa8-4f88-b61a-083596d09e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e48dc2-4696-42a9-8c3c-ed5f7921219b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e056b58-0d2b-4514-8732-679068220eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdc7e15-014b-411e-a839-722f0d8738b8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83959a1b-4c5b-471b-9bc6-f54496e9a0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9048df27-09a5-4660-b092-0cf82b4e5299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2739714-2018-403f-b393-9b14cdac1cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b45741b-6cab-4673-bff6-9298705953c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8527b02-45c4-488a-9278-81cabf1a4daf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850b2dfc-29f6-4d08-a21d-4f619e1c5e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79f979c-5443-41e2-ba5d-361c01995fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bca8ff-0b53-443f-a72a-212763eed201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95ef6d2e-9549-427d-bd32-35421c493c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffde750c-7570-40cc-b674-3a6f5ee1b391",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d7dad1-9ff2-4eec-9fb9-59764838816b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b12abb4-73ec-409a-aeb8-27d35666dec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26cb526-c0a8-4b1c-8800-4574179b51e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b341a2-edca-4c78-a520-941b663f2730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b1c51b-a240-49d8-ba13-6decfbfadc9e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2bbe1f-cb2a-437b-8a89-bdd4faf4c508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec4b717-0b54-4393-b059-b1dad37356c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d4d6bf-9f8b-4864-873c-3544bec4d66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b313967-25a9-43c3-894d-7fdfbb9e3f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfacce95-40eb-4599-b960-88c0569e323c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f0f0ed-1066-491b-aef5-9db600fd9a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac36373-c39c-4460-8b2d-69a8e8336e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df5f2c6-cb08-46d5-a794-af5f02d1967d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fedba7-df97-4e2c-838d-7590e0d42fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07151af6-858d-4729-b283-7bef65840257",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bb8e4d-a51f-4ae4-9883-d22494b798d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbbebdde-073d-4405-afa5-76f11bc8201d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0240b4a-5d49-4859-a806-70f3f1e0cb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c76b3fd7-5d6b-4d1e-8a68-cb89cb72b254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdbb42f-5d31-4dc3-8879-14d5e0b05635",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2f1d86-16bf-46b1-b9f8-54f64435e9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc5b358-b1d4-40ac-82ce-d2f70b73f79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0ed7aa-55e2-43ce-9079-0cead4351d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c23544a-6e6c-4e1d-89ff-cb10203811cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5f154a-abdf-42a4-9e64-248a9252f227",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6a714d-d538-4bb4-8982-a85324622e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6de9a0-bbb1-492d-bdd4-5edbf82274f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0e6cf6-7795-48b0-bd76-0844dfb931e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e97b0d0a-81d8-499e-acf2-a54b7a259f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf68e54-74d2-4e72-acef-e609b1cdb591",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a549ef-b91c-4fa6-955a-a32f39127a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cde069f-27cc-4e1e-af72-6e25ba1dd637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d46f6e3-fd1c-4c68-a392-92266550a639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b833b4-7d9e-4f8e-a57f-d08cbce3dff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6d6410-eb74-4013-a778-0f288cb8acc9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583ba39d-75d3-434f-9f30-e21cddc18193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c36adac-dcfc-4152-952a-114e6cbc916e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cb0b09-e0a5-47af-8825-d7248a14ee74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3a590d-2e17-4ecd-8307-466843cf5903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745743c8-dd60-47eb-8562-a6b8e617f4a0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93684bf-0994-4d7e-8c78-4c9839794159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa6c829-f05f-4c27-b921-c8cea1f3f9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131f2a2e-4720-4f8c-8cb5-a6175ddb60f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6c5702-a79a-4df4-ab09-70e46696fa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28b9d8a-d1d2-4c2a-8b6a-7554e6271575",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e9d714-e749-44dc-a95a-8df072fb93f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a94b20-3cec-43c5-ae82-3b7a248bb7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c0439e-ecd8-43c0-a613-e7b13b172812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfec741-9fd1-41d6-91eb-b423e0368106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50523506-ed83-465b-ad57-f2d6ccdb2c69",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd134ef-bcb4-42d5-add3-fe02bcf5eb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65d71a6-6bab-478c-a4fc-20493cf411b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cbcac2-f3fc-4331-93cb-4ac0396b3f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77df86f9-a9df-45e4-888f-af0fb42f4dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f00aa4-df9a-407f-bc3b-6fde458a2584",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e9ec52-9996-4041-aea5-5ffe575c3520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1069c805-8908-43c2-85d6-745f93585195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ec416e-fa27-465b-a64b-10464f8a4958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0b326f-3f4e-40ab-b2f0-afe760d87fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d06ae73-9ec4-496b-a363-16f0c3751854",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79b4ffe-3b60-40f3-b403-89f56a9ddc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136a2882-59d7-47c7-a3c0-cec90111086d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e0d392-88c8-4187-8819-ec26fe56649e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84393a4-a2c8-4059-972e-a1353acc87cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307d9713-9c3f-484d-ba6e-da1840b17d64",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c5c957-4fff-4e72-aef6-40b61b44deb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eeb3b03-6490-41c5-a03e-4f80aa51d2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad34fa8-2c90-4f03-9ed8-ea8efe17064a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d31a5d3d-91c8-4068-9ea5-cabfb010aa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba83b52-4006-447d-bbf6-efc794a8627f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fd8518-6b55-494b-a15f-aa209ae8ad76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d97a4c-fcb7-450e-a8eb-288d04fd52ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038fc87b-a0f5-4f46-89b5-985b79ee41e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07181358-c084-4647-8a95-cd0db5d2b7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92d980a-8b54-4bd8-ab6e-f7a995f8e026",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6a1fde-6918-4471-bf91-8469f7976d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8b8b99-81a8-42e5-8000-09979b283cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff688870-8d89-4d64-b2b8-6656df78fd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff03b47-ed32-41bc-a6de-596c05791fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25385a72-0eea-42b0-b665-57a96389aaea",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed1506-7dbe-4ef2-a49f-95b6d7e60ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0570597-380d-41c1-843f-eba994103e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97469b45-9a2e-4389-8fa9-e0859716ffbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8279f09-16f2-4153-b13e-f0c2b88200d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8424f34b-fb4d-49e2-ac68-4769ae61c000",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528b7aa2-e4f0-4348-8fdc-1c1aee9a6e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4348272d-bfa9-4396-ac58-fd69a5a6133f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f36321f-a0a3-4ca6-93af-dbfef55ac4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0187a105-e48f-454c-bed3-d5a994d3dd54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "09286616-7a34-47e2-a3fe-f5b95b5b911c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d64fff2-e7bd-458a-848d-d3858811fe27",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc012d3-a101-4c9e-8f14-1149ff9e45d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a40cf1e0-028f-4b94-8b24-f8d8fe6b6d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f20ff00-77d4-4217-a542-aa7f01ee7515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d50f5bbb-f68f-43fa-9101-480aeaf5e83a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ee1a9ed-59c9-4493-9d2e-4712c2dc530b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "710cf33a-400b-4390-a12e-1cda3fe49370"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1149265f-e737-4f3b-946f-20f9dcae0422",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a791d54a-8807-446e-86c6-a9a6fa520a6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dda1f787-f903-471a-a7c5-5967e3ebdc88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc522c84-491f-4c30-a097-6bc76348799f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62119282-0194-4820-96cb-44c4a8e5d2c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e1d43b1-2232-48cc-9dc7-024e219803d8"
            }
          }
        ]
      },
      {
        "id": "723cad97-76d8-4e6c-8b18-7c986d974f51",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ace1eebe-3984-408b-9f56-3212a82fed7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce131fbd-a50b-4fa2-b6bb-a6021df735c1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "01954e49-0c46-4153-9ebb-2a8b6adbf30e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1421d78-e4bf-4cbd-885f-4c1c3cd2dd73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9d31ae-8fc9-4496-a6b5-e1646d97cc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc261fd-4427-4acc-be37-33aea8290735",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9379a08c-74ad-4a6e-bfb1-83e2f601be15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e3696d-8df6-4ff1-9c1c-0857de0db0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db602c2-f336-47b2-883a-8b4e13b338a6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e844ab1a-e413-477d-a8c8-6dd8faf490ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa977f9-945d-4d85-aed5-02d3bd9f6c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409b5816-0ff1-401e-878b-2efe74e71310",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dad410b-0a33-4e2c-9510-bfaae353db2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60485db-46a1-4f23-a59b-051e317c1cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bce76e8-096e-4155-a795-be7f40709b90",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81224ed6-62af-4d25-ace4-664bddfcfed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0152288a-3a33-4e72-a1af-b78e06ea8ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5296784f-69b3-4a49-b6ce-fc207f2c178f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31106aa8-42f8-4333-abcd-5ed45f60c8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837975d9-3e62-400e-8aa2-1486245161d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96967dfa-2a30-4600-a87c-93742f0af6ec",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5180902c-f627-4b91-bcee-9b370f2ff958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d968c7-1851-4fdb-a540-5861cf9489d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b823e2-826d-43e9-8076-129af2f6ad57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98267989-3ff2-4174-9f5a-1d6b73a33847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7195fb-c723-489e-905b-e531e88bb722",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804a8b07-28c8-4ff8-bbec-7543f9ee3ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbc0a0d7-2d2d-4d26-b5c4-0222296a92b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb181fd-16fd-4ea2-9a33-2b024e793610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1165b1-49d1-4506-b463-6d16a8af1f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a5de51-3a4a-4f32-a39a-0f1e188f749c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e008288-8769-4137-817e-c297b728e351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23201d99-63ae-4e24-b4b8-fb6d5c58ce55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ee5b81-6b95-46a7-b4d3-85366eaca3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069d13c8-8a29-40c2-9403-debd8026ee13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137f4a0d-ca85-4bb3-90df-40c9f05e9cc8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22f2ca8-3989-4062-bc4c-df3fc61e5bc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8181e1c-d1a9-4cb7-a6e5-8bf12be08622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3bfc4b-9cba-4a52-845e-9d7d11ef5ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063f179d-6f46-4603-8d86-5adc7ff37e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd091e28-3266-45a4-9d7b-7517373e980a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb02038-5993-4db3-b77a-1f27ec43042e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f7512d-02a3-434f-99db-63c70ef77fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c79cee2-663e-4e80-b63c-6d28d115e34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54c74aa-ac0a-4528-9534-aa07592bd48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b227c54-f046-45d4-8d24-049ace8c0b2e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a19eebf-7265-4869-8ca7-572e79185c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd26722c-4732-43c5-a08e-0ac8bdd8e127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31911d1-74ae-490d-841a-5a343a94bfd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c28ae5c-8efe-4d69-9210-b1c50912d71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e35d2fa-e9f8-4518-9c62-b2031062def8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34c558f-72df-4fec-9a63-94d5ac1b95e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69d2d144-e7e4-472d-85ea-3be2be9d6c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8647207a-a8a4-4f81-aa29-aa8c45954747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83ae7b5-8b46-4ca1-aa24-e373b6e66d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e853b2db-3894-4f1e-9f68-ec4d56abb41d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070fbde5-485f-43ac-b715-e792159bed8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d10120f6-45f2-45f6-bb8c-d24c1dc2950e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab3b6ee-a9b1-4402-9e73-6092de3ac5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab1ec12-3423-45c3-b91a-4fe16fb6a4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e5fd2a-9c14-49f2-ad78-88be9d48f104",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b64bdb4-ca4b-43a3-b8ae-4686d2786bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eebd640-ef71-4ad8-b71e-863b7be10332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49a6a98-5e6b-4457-87ce-e6e097a2b2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5762fe0e-fa15-41f4-b367-3a7be1e48a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5cfd17-ec75-41ba-8836-83895ac4e3c6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a016da5f-1473-4e41-897c-a4b1a9dccd61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6cd4c13-2a5b-4fdd-9d64-59c0872545a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaa4415-dcce-418d-8642-b22ddad7a624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80d914b-0aae-42cd-9a7e-edf05d182a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8902e3-6721-43f7-ad82-9b5ac969a570",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3984486c-3b6d-4031-beb0-44372e8a482d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4a1f97-e0df-4dd8-98d1-015b4aa4f844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2adeb3-17d0-46dc-8e9e-183c514b4736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06af4c9e-71b2-430b-95fe-52e4bb41e13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32882692-c140-4b7c-a36c-1611bf08c709",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7016a541-0d0b-4f1d-a676-234f813f34fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5eb2a9e-67f6-4ce4-bee4-159af67d9cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542e97fb-09b9-48bf-a633-8d3ae02efb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af221e6-7e33-4b88-988e-bf4f0986500c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23601ab-44b0-41f5-9669-1505f37e7039",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76caa26-920b-4626-8977-2d80bc17db0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a54e7d-755b-4d06-8fa9-56297418913f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6139eeb4-9db2-4726-8e6f-16fd082beacf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727663ef-83e7-4120-98b5-99a912a60f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba013ea0-a89d-4dc3-825d-3fe6915fee00",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de303ed3-9592-4f4a-9a2f-421f1f2afc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32219fad-3554-4a47-92f8-e8e599807e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958e6566-a205-44e4-a2a8-07d058b30e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8b6abb-ef56-4cf5-bb2d-1824cf3ed6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8181f66f-dd23-49ec-b1e3-0696635e66cc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b47c14-dd8a-4474-8b51-583e13564a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7aa48c8-bbab-4896-9891-eb55af9a9f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f74fd8-6fe6-4bee-a909-15e39def7018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8527cb66-7c16-42ab-be7f-e158b5d835f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917eb17c-57ca-4916-b526-cb2b68743b51",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1abdc02-a32c-4e63-b500-2ae8ea722715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51911db4-74e1-49a0-bc68-7585d84cd7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec96aff5-03a3-48e1-a0e4-886f96437d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f588a964-c606-4e4d-a709-462b7f255c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7187c5d-7237-4b66-9e3c-d85d3156a45e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5711f7-706a-47d6-9cd0-bd96d2d3a1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9e2411-48c7-4bf3-8862-828f2740011c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c48dbe-e9a3-42dd-8457-caaf0635a492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc150e4-c746-4c80-ba36-9e4e321f4375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904462f6-b17d-4e16-a6ef-c034a9193274",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f432082e-1d36-4900-bdfd-c89d42ef4bcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068a474c-cd6d-42a0-bfcd-baa00fb72713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c311256d-2fd6-417c-88a5-d8e93951452c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b35756d-5f6a-4237-8ed0-8125274f564b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c63f35b-eda4-4a0d-b1e3-b1a6f5fc89ec",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14b8476-80dd-4ab2-b5dc-a1f1a33222df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43473fc0-1de2-4722-a1db-2e030c8fb18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70eb28fa-6ff2-4b3b-ac73-463f09d6e4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a589718-3f49-40d9-b524-73502e91746b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c56e78-86c1-46a1-ad85-2c18052509bb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7adf60b-1ae8-4a5a-bc33-355719d1b1a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c059c63-4414-419b-a2af-7fcc1bc44b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f5e04e-e44b-4d73-9d6f-a5ab9cd87a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03ed0ec-6cee-4d23-a9a0-fd1cc7935fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18373087-61f3-4d8b-a3e0-08d20c9daf9d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816288dc-a3fd-47e8-86bd-a3cb3c73a929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d86d6d1-5070-4a05-a763-4e5c567a3f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff3b61a-1a06-432d-a12f-9d47e81247ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69161c6b-04d0-42bf-a3b7-ccb0701bc1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1c3b74-e90a-4a1c-b626-ead1e0871a97",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eab1904-bcd1-4d4a-a73d-a64db42dd228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ff04bf-ca87-4e62-a551-ec724f7128da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c028ca55-f83c-40e9-99ad-7c503108d75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6a84bf-71da-4683-9ea9-a8aa745fc649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02b4d42-494b-4271-bf91-534c103e2907",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcc1a43-17ed-464d-b424-19d063ba254b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aedb6830-f3ac-4061-a718-94ff263fbe78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e3ec06-e47a-461f-80c8-eb9a4fed94bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9790c4-b13c-4577-af5f-0ca49e8471df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f9f0df-5bf0-4305-8332-96e07ee939fa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaddce6-71bc-4aa1-b739-c3f295b01443",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21986bfa-c290-49f3-8926-486c151f7dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39426583-2283-46f7-bf25-9b4687a72dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c689d0-1486-4af9-8345-273930b4da20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90f5a68-e000-4ba9-bd51-df2987164483",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e1c1dd-e7e1-4f13-8c46-33d513cb1ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2eec303-497c-494e-9037-d9c14539546b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b585e23e-1f1f-4292-8e3f-c40e7dacba3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96edd8b8-dedf-402f-a698-13b5dcf70939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b469de19-847d-473a-939a-6603617a9013",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4c10b8-9b36-43ef-a4e6-1e3373ac8533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ead64fb-80f2-4062-893c-d2fc8e30a236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c651b9-be4f-4e77-8ba4-4f7cc3facff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f858d6b-ab7d-4e06-887e-66b286c88691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c552efd1-9468-4d9b-acc1-8406007e752b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10688cb4-e317-45db-a5a7-11fa57902a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9358f2a3-b2d1-48a5-b1cb-d7d1e792c892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff4e34c-fdc4-4bc8-acd8-c4d65a913889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d1b8e3-435e-4ef0-84bc-3b6c7bbc5f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404fd6b8-e9c2-4fdc-8e36-99b4400ccfa6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d680720-5059-448e-9c71-2228f0633a8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04165fc-b262-4d4c-8280-4207ac44aea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d18432-ddb4-49bd-aba5-2ec36f155b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7fce10-76ac-476d-9de3-ad3b79b60a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c3ab68-6005-448c-8602-b189a4142010",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fcc453-bba9-4669-a2a1-84aaf5afb630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9cb5b7-cf29-4902-9739-19e08244385f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5023275e-2ff3-47a5-9f2e-46c1623d2aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13173bbe-846e-4d44-984a-556f8a32af42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d97660-3d51-45fa-9838-d3f4728e59a3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a6d1ed-aa45-46bb-b29e-c5cf6386a729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b3b34e-2b5c-43c8-a0cb-a4807760de74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33096c16-fc2f-4710-9a0a-d3221ecfe4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196ae921-9a7b-422e-b057-356a5473abbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d46cc80-a978-454b-9360-4c5f2858500e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668cfe9f-bd40-49e1-8997-882da1ada2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e95964-5f75-41d7-b054-379068e50817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257f1145-9551-470f-883f-628a7e0cd3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7999ab0-54c1-4862-ad77-07713a0b0dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb007057-d16e-49a3-869b-068d90f03096",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f298ca4d-1669-46ac-a7fd-741e696684a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05665810-3c26-4557-a065-48b9b36cbaeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0c0e59-8ea4-491f-8238-1e2dfdf32542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406df70c-f5f4-4182-8172-2b57513190ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adc2cf5-424a-4654-9b90-a71a47796009",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f08337a-350a-409f-bd49-6dfe82a446c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3ba1b8-2216-4f7f-81e7-6b8af361a5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd20886-1a46-4d22-be4d-9e1dd4314daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcb0f6f-8f16-49bd-9b53-95585016ff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2ceab7-0e06-4baa-b023-62a60581413b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0db6a3-1311-4591-a5b7-f8d0ae0c57c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a02193-67ae-4d6d-ac72-aab82173196c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40863976-12d3-456a-8eed-fb30ae70a05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99def4c7-0e43-4d5b-b46b-f0c255e19fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c15de5e-f252-4af1-bf04-9ea408040ecb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9cf2ee-208e-4bf2-8eb2-eaa5776b0f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e3e4c3-a896-42e8-b843-6b6395e3828a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f61b66f-7919-49e2-a7b6-5d1afee25565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7878770e-a6aa-4e03-a9e8-8132d6aba10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25761b7-da4d-4d2a-9317-95699c47fc1a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17210877-cbff-4ba6-b7c3-8fb9648d22e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ce324c-8427-46df-9170-b97d08b89d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8209a24e-321d-4ebb-84f8-dc915257e5f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04046aa-d942-4d09-8da8-ff9332c201cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a34b464-96d7-474e-9921-c39917b06499",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7b7664-77e0-4610-853d-17b4ea45f694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0f5717-34c2-4191-b59d-99876e0ad488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077127ba-bfa9-4b2a-b0a8-c54862ae03f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18656b5-fb69-4b8f-84d1-b5109d6e9997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5715c4-6b38-407c-ad7b-b22725d755ea",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0181fe31-3db8-4407-98f9-b24f59927fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300044d0-b2f6-4b7e-99e4-45178f26e3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f583da8-56e8-4669-af5e-f250eb6d3247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5951f8e-b597-4f0d-b05d-bcc6669c12fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c05ed00-cbd9-4932-af58-67c667be3214",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3951489e-21d5-4b97-94ec-c520aee30a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e1aa47-841a-4504-90df-575df10baee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf08d5b-08d3-49e8-a6a1-d1d2163a9828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a84615-d06e-4e65-a07b-6f161d9b06d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cdc337-aea5-4ddc-9713-60101faa2e07",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8eab91c-3815-453f-81f5-8daf449c976d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a19495-e8f8-4e7b-9df1-d4980a796440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561f4a84-871b-4a62-9f52-6f64ddbbfc7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e113e89-b329-4944-96af-8c83a2166a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa17280-192f-451e-a66c-3a0918b13229",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3650a786-4891-4945-8e2e-f4a8e2616f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b4dd57-cef1-42eb-be63-24552351f4e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39bfb78-841f-4e01-90af-70c4fd1a0296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a7c2f5-426d-4e63-ae5a-f5311bf7761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f766c6fa-cc06-4e78-93e8-7ab2c0cd0e5d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc5fde9-3950-45a6-96e8-59d6e5eb6c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e3c717-cae0-477d-97db-7982c6bfd838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5b0312-f743-4b67-a880-cd2d6098853b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425e5617-e040-44cd-b74f-5a3a3e3a8a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaa5676-b522-4df7-a7d3-c12868004a70",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39cb0a4-f658-4bf9-9b45-b17f3f5bddf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1817e16-3fa7-419e-b37a-dc48311db442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2402dc69-c8f9-48cb-8146-4d6dc42af779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b63052-9db7-4f4d-894a-a8d46da4d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c2b3a1-133a-46bc-9e6c-0f3d5bdfb46c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0111d7b-3b03-4bc1-8d9d-6f8c1300268a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e764b99a-6c5f-4b62-98d5-d88c050dee27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c8c984-379e-43d8-8e44-724c5ed46f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6ae61c-7d7a-4843-9e14-3916ccdd444b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d3fb71-744e-4f2d-83a6-2427686175f6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc87040-187b-456c-a4c7-5b4aee139bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c01a22a-3cdb-463c-a964-c0c05bff424e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4523c924-b501-47c5-83b0-aa56a461a3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba76d8c-490d-4ea6-b2a8-eab01379c0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acca0c3-5382-4efb-b2cc-e7888a6e806d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ec9bb7-b70b-49ad-9076-f183bc00f43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5190eb-dd43-428c-9f1a-63a397f1bf48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11fda44-b451-4c9f-8a48-2503304042e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282138fa-954a-417a-a445-6701233f6d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21778084-00bd-43e1-bd73-726c8768b6cc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9490d5-199c-43cd-94d1-fd0605097643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5aae14a-866a-4570-928b-9dcbd128885d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b0e509-0b33-42f2-bee9-852726299b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d61d57-fb3d-4fc3-89d7-86ce2fb0b239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57bf742-4370-46fa-8875-8f882f64b1ba",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298f7c13-e04b-453a-a72c-ca89d5bf5323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ca6fc7-0c7f-48c2-a00d-54ea307e2ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0383f3e1-2ad6-4c72-9259-2b8b87eba45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f535737-8d51-48be-b6f9-3c49bf93d117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e20cdd6-afe2-44c3-b430-84b198365b64",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e68233-4772-4fb2-a759-05a938f6958b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a01b60a-198c-4d66-aa01-3a807ae53794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d969834-95dd-448c-a953-3e96fc181c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de57a692-75a0-487c-953c-2373553ce22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dbf117-6ae5-4e61-bb86-5b1bedbcdbbd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909cb415-601a-4609-8b36-ad8463953b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a9f0f0-de0c-444c-b175-3f4d88f03a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a9b664-2919-4736-ab34-ea082cc7e57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab0ecb8-f135-450e-b629-8aee9755e5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fe475a-ce6c-4336-8bfb-bdc79e532ca9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b08f0d-0b23-4b7e-9fc2-eff651ae4b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b6875c-f9d4-4c11-8720-4e348a7096b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e947b3-7c8f-48eb-9e6e-a6a890dd9539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7feb7fc5-bf49-41c6-b1c6-e918bb0dbd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4efe5df-0ac7-4abc-b092-61846cda28a5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d44300-889d-4ad4-b267-64e023a4ed8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b7fd06-b941-4896-82eb-2a0a2f498d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c8de59-d4ca-4ccd-9422-0d1834e537ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7062693-3bb4-4520-959e-f37b297d0a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf01eb82-b381-4ff1-bfe6-cc78c67260bf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7e44db-8eaf-474b-ad69-8a5b3bc261d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de01fd0a-6e71-46d8-8e85-df986af256e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df037085-8d4f-4bc8-b854-9f7351886fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdab36c-34b5-432a-a6d2-845eb5c80e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b59192-38f8-43de-8672-1f592f4aebea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf9f595-d616-4af6-b787-5a13b995d485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b9637c-5861-436b-a5f2-e351f66191ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6178a5a-03d5-4d92-801a-52af8002f414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c20ce9e-c183-4dbe-9340-eb30f5c26aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776d0a38-8e90-4926-b9a0-f7f834f133d3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd92ecd-f7bc-4876-b9d9-0232e0486554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b86bac7-c2e0-459b-870f-76d34163eb0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388b37f4-583e-4bbd-b6ce-dd29da0938f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3550df67-31c9-48bb-ae17-4fb82f7fa24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1886604-11b1-4f0f-ba92-411234902d74",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05ffe9a-ba18-4981-8da6-44245ce45290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478a74d6-eb3e-4b8e-b800-8a3ca313661e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef09304-ad5c-4191-b973-1f348a2d08dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cff5d28-98ab-4331-a787-0380645287ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd710d6-4989-47b0-8b5f-36a6c71a61f1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b91ea86-db7d-4445-8aae-d29bbaaeb4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2d29c0-f82e-4acf-9071-98eb0362f72a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60d3872-19ec-46f2-943a-38ef04360312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56885fc-feb8-418f-9413-7886c41c8918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f58f5-af12-47e9-8d8d-8e6c791e65fa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bcc81e3-4334-450b-8825-1dde2d138c38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40976034-8103-4e38-b822-ebb127f08f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0eba78-4bfd-4d22-9cf8-d3efd0098e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8b4c99-154c-4426-be60-fffca3163f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a166dfb-ab93-461b-9c23-51ea88e2121a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec009762-174c-4d81-a11f-b6b0e347472b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f82eed-51fd-4345-81d9-32bd08cde8ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e99401-0859-4523-9d85-90f62a639e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c077dfbf-153b-44e5-9b68-dfffb3bd621b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7af59f-82dc-48ac-9e60-1ac156bedb61",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d967cc79-1ade-497f-93cd-526a20a74be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f550abac-bd4a-4a85-94bd-3dd511373102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168be2b6-0ac2-48b7-8c0e-ca14adcab6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebeb3c25-5093-451d-9c92-9d161f3ec036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdb9f1e-29d0-421e-8baa-294af8000673",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7194c6bd-a3bd-404b-b4ba-73a19afbf26f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87547698-7c67-4443-87a4-bf9c10536fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab9a9e7-370a-4307-80b6-50a337b80410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339a0aa7-f7fb-4d15-bb55-3b833e4afc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687e35d5-5001-446a-859f-41ed6b67a34e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af84601-9bb9-4341-a694-2c53137c99f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5768d1a9-a900-4c1e-be22-cb6296ae76fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2391f28-562c-4d7d-9911-ad5769c078eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724b0c75-d6f8-4443-a96d-07c101f958fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7537d3a2-fb56-4f16-8126-d2928cbad427",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ad80cd-3953-400a-a4bf-60967529c4d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd9616d-c826-48ed-a050-7b97923b22a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50103083-502f-4196-b3ee-35ff907f3445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7d92a6-0ba4-488e-a48a-728bf0a3d8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c34471f-e843-41a6-bbeb-17440005fdb2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac2d754-991b-4f7d-88aa-c693004284a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67cf32c5-7b79-4287-9e94-e53e0d665738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "340d75bd-5547-412e-9e17-27b54d77e8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ca126d-13e2-4d4e-a820-85b55f33b617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525a750f-a675-4633-b814-c64f29bb8c69",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858298f7-e2e3-448c-af4f-35b9a2fad128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1fd8322-e1e1-4f99-b8c1-6e96ecfac92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60465944-6a6e-4a17-a5fa-f6be548caf06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63764ac3-0c0c-449b-b228-bc01a4f2280c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd052d8a-068e-4d05-897a-e2493ff17ccc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4cd7e69-e70a-4104-b456-53f6b837bc59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1324114-35a8-41ec-b0d7-17d1cd4bf5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbfb5dc-153f-4d56-bc3c-96e9d9fe5c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ab03a3-37a8-42b6-97fa-b87e1cd03da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7944efd2-841a-4aab-9d2a-844f4a60ffff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8925d1-6a67-4065-83f6-6ba9ebb90380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b0bb57-de71-4749-aa5e-27e6e0e26858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09daf35-e076-4028-8817-62a02e9331f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35bac7b0-0a71-400a-baf8-20704108635a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72366f79-7545-4ac2-8272-2abec3568836",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418c5320-d153-4b12-90c2-13ac3638cfb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abcda38f-c912-4e31-9ad3-961a7756375d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8bbe05-ec20-43ef-b3ba-eae699e33f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5f45ea-09d2-44c1-9a2f-62873019a8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e36fd08-6a3e-4f55-8e9f-fa9ba0e2a6d5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e7db6b-38e1-4984-8679-c07c9b2e239e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb9aa76-e7c4-405d-8694-c1eb3d55d1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58459f81-541f-48e8-b9c7-718124035d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ba70ac-c6e9-46e2-98a0-10f9594b5079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2568500-124b-48bd-b962-6bb493a33343",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289ef1c7-09c4-4850-ac14-5169ca7d63be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7e1cc05-00ec-4b5c-9e69-50faa0fca306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a367964-ee8d-4584-8967-f11e5d55270d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7875867b-2d96-4137-a6da-551f40c5f4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5b50fa-3837-4411-9b92-d696accecf3c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b223d8-9f47-412f-bb32-2c7f375aed6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bd0a48c-1a53-4e6e-87bf-3f012822d8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19760d30-6e48-4e72-989f-381139357d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0789d129-2082-44bf-9eed-2102f76419a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9ba203-98c1-4427-879a-46ebfc53a67f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae9d96d-0f31-4786-a11a-630e5346e086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a4f3a6-c6d0-4e8b-a04d-7b4a949b59f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca3f19e-ffef-44d4-a2f9-214b079b4ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bac73b8-8976-445a-a7e4-85f648393fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cb716a-58c9-463b-8e97-8d6ee93ae1b4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4481ebc-c6a3-4214-af78-ba72e14f8fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f53c38f3-5c55-4101-901c-0f2e20bacfff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9716103f-50b9-440d-811e-a3f6ebf59a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2af363-5be4-4b09-bf0d-85e4c94dd682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cd3f0a-052e-47f5-85e6-9c97c0b16025",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd79e5c4-686c-4b00-abf7-48ea3273f0ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7494a797-e679-4a4a-97e0-964c961c1338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c52cb80-e84f-4dc2-9840-69a12a16f410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb018af0-5b70-49c5-91f1-b656deb59b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef12487e-40b9-4b5d-955b-b538ff48ec57",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c1ddb2-0826-4d63-b1f1-781d20437354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b1c7f1-b03f-46e6-bcb5-af65be3be764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d693cc7-fd83-4ad7-a2f3-b2cb724e6a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d762b6d9-95a0-4562-aad8-6fcc3f7b2caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6904be60-240a-4957-ab6c-53941d3ff2f4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7819d08-ced1-4d9a-80f9-bca878472f13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "304ab395-8952-4b41-9b3e-11eab19482f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b8cdfa-bc73-4c46-a60b-bfcb32093907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745528b5-fcf2-4d88-a563-888d184cee84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed58980-60bf-476e-ac1a-443ba4af40d5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b77f474-4f83-4011-8e0a-edee30e2f33c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "729596c2-9eed-4e20-bb6b-434d273ed9d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75670adf-3690-4f11-a569-9d81641c1711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae53c330-d6e9-4fe7-8b14-371b7c8a597c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bed542f-705d-41ca-bf51-1d4159474d9f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd897d58-5349-42a3-8f01-4380c42baa78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa210a33-284b-4a46-9ca0-1311ddcd5b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4a0f5e-931e-42d0-bc6a-e3af9620fcee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e337063-0e5c-4194-9a3b-0eceaf223d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd2f1da-fa5c-400a-bf31-134a2de61aa7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70426dd-c123-4469-8389-66c0e0de3190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80535e3e-cc01-4420-8130-b4b3007b3f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd9b21c-d85a-4eae-8a9f-61d79ce1a7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8d1068-f248-49b0-a347-3f1328596380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a7aeed-be0f-487b-9fe5-8f33df5f8019",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32b3293-8599-44da-91f1-f56d62728590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78123eee-8282-4a9a-80b3-08a521e0a55d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df32f326-62a8-45ce-99be-6bfb4027f8ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cdf906-5a7b-47f5-bc85-77d03e6cb513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5108a6b4-2fcf-462c-b154-a49b0c952680",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7916eb63-1a99-44d8-9c4b-29fb1af0a12f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d807808-a8e5-4dc4-9776-771e68577f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c606b350-d10b-4251-a938-141c0f5863c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc63381c-2866-4047-a43a-e5409c74b3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455a6aa6-8ecb-4082-8000-206e98596f60",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1423758-4ac1-4dd4-995d-6e4844946c47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1c598a-daf7-41b2-a699-35f7e26657e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a4de52-8712-4d67-8e19-b05ee39d83f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1daf31e5-3d34-40dc-8a6c-3d5988dbd735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ef75d7-aaeb-4e1e-9436-2cdeee6ca6ab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af08d3bf-188d-4145-9461-c085296547d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ca457e-4931-4fc2-b91d-59e85ab3c3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59a4d4b-83a2-4b5a-b22f-6aee2aa0e272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6aa5a0-ceeb-4049-9ba2-13418c0ddfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6877c3-4287-4c99-bf64-760cccf5d1cd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc1ea48-8542-4ef5-b0a0-4d2680da3c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae4d44f0-83ba-439b-9602-2765cde5871e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c2fb5f-2204-4235-89ec-7740a18f48eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21aa47ef-c665-4064-a422-50eaa050f78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf86b18-fa93-4db1-8d7d-bd9158fcac6e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763ea672-b871-4dcd-893c-ce9f23f2c442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b20da6-570f-499d-9739-c4904297fb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3aa8b6e-1bc9-4a2b-b1f6-ce2a31d55be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e5c600-9b68-49ac-a87f-e5097447544e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fc377b-f8df-4439-8004-c82bbf6dbeca",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaf0a57-99e6-4380-8c21-69b2c40e983b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3c845de-1f33-41c4-b65e-86b544dfc5cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c59628-4add-4359-b681-7f31e3bb6bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae14d05-d663-43fb-b5ca-7837d342255a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736b7b16-fe5e-4ea6-b5c2-df7b886401c5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02f6a4f-776a-4e25-a263-c73c6381064f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c377bdc6-9b10-4299-b29c-58825edf6c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "897b1353-5ea9-44ec-8047-b0dbf2e563b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d89cf0-4a56-4bd3-b206-bf37118f2ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2a9bdb-f8bc-41e6-adb0-7c11bbcc4e9d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cde284-ff2c-4642-9673-e1f5b1414385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7926e1e7-9eb8-4b97-9df0-2c0114e4a962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960fe8da-6b1c-4a71-a708-ef094e0d95a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d5756b-d2c8-4073-9390-27e2a9e60d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab0a05b-85ec-4cee-833f-c4b75d6a87d2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76de09c-2d36-4805-a935-7eaaec8f44ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbac0195-7f47-47b2-b4f5-7584789c727c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dfdd5f-76e1-4769-afc4-9aa2afff367b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e98a34f-3060-4e18-bf80-6c99e11feab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3bcc19-9349-40c4-9458-fdedfad48c63",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e0ef51-019c-4abf-a890-338d377bbafe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79909593-1c39-4055-8647-5637894c641a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfff6fcd-fa5f-4139-88db-9bf775a8d637",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8d79b7-127a-4954-a783-c9aacde5ebf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d347483-3317-4cc8-8cc5-b174619d4391",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b197cd-a4a4-4f9d-9b9b-f7ee5bdfca76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0968e9d5-0323-4b48-b7f1-879b8c69e25f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86766dff-e86a-494d-a0cd-d54e73b7e4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372de919-ba4f-48f9-bbc0-7bad73150448"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca842207-eade-4455-8c35-dc560f4ae75b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e71ff449-fe66-4cb0-867e-995d77933f6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf9893cc-83a2-42f3-b794-ea49d33fccfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cc01006-990d-4c78-813f-0d9c71d18537"
                    }
                  }
                ]
              },
              {
                "id": "83db2101-5702-41fe-9941-6b627b1d2e2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1dedbd9-b8b1-490b-afd7-42a09e39a613",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665d6828-ab9b-47fe-ab9c-13d05c7e07aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b2c69872-5427-450e-8ca7-b0be67a81cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80552e79-073f-4ae1-a334-a3c9b49185ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9180a7a-db5a-4c9a-86c0-ab34c9bc5533"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fd4865c-6d97-4fcc-8a87-cda2f1874228",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e75862bc-e16e-4ac6-81f6-09bccbdbf3c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56674b39-acb7-4ced-816f-aeb6a8912c19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3807bd7b-ee69-4200-a207-0c34cf64ff3a"
                    }
                  }
                ]
              },
              {
                "id": "9afcdbf7-99a4-4bbd-b8cb-4d96f92b6ee9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "abce7790-832a-4a07-b902-abe7fd9849fb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db604a32-a7fa-4e2b-9552-14e95e76758b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1baf298b-6c03-4c7c-a3f8-fd76dcf0a79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d1348e-28c3-4302-87b6-0a4e2b750737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea136753-3885-4555-bf79-9f6164b36c34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "233f7c55-4f04-47ba-b750-efdd2eacd43a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "08e55144-19f4-4294-8984-1042071f0922",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4c3e5bf-2f9b-4f57-9772-3d29fcec112c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bc08941e-12b2-433f-8960-41f8b0bc91ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4131b84f-fa31-486c-83a6-925eb3d3dc74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d7cb340-8914-4c56-93db-293747d141ba"
                    }
                  }
                ]
              },
              {
                "id": "800373dc-ec5f-44dc-a28f-78717f227417",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3280687-1b6f-4643-9b8f-f6d4daaf7c45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c5dae919-2366-4f94-8e26-6d481837c974"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fd84a5f-952b-4c70-b8e3-92e92abd98da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f24a261-9a66-4ebb-b194-991bb22416c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21a5d86f-c261-4ac3-a26d-1a3016eadd95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fd4f8cd0-5ba0-4b90-a678-056606f39e4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90b1b57c-8a8a-48fd-853c-b4a35a926f77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19b2fd54-c61f-48e5-b797-9b9f06fa8816"
            }
          }
        ]
      },
      {
        "id": "bb3d0565-4652-4c03-abc6-5a6b69800a59",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "eadf8cb3-71a2-48a9-be75-3d1ec72076a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9e5fb74-d384-4fb9-93e9-a82bd5fae029",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e69a5be-011f-476d-8193-f2af316a9683",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc9dac7-596c-4ebe-8f11-f4e8c0c6bf0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "15fd400d-163c-45e8-971c-82bb603b43f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9ff2d4-5975-45ff-9cb1-d3e39cc02172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68ae844c-0632-413d-ad50-541c890e832e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aabf464b-2079-4867-987f-78dd2b3a7a6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaa1e920-4608-4775-8fef-b2b4af31cdea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38c67891-6a83-4e97-9746-fa4a7f597b1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "602edbbe-b8cc-4432-a940-6ccf0590df6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85e96c49-7136-4303-9258-31fa09a515ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8d17dcb1-95da-4373-8b47-8bb841f2927f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f14a9e38-b9e4-45f8-88e6-63daeedcf312",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b773754-095d-4e30-805b-bbe7cf502eb9"
            }
          }
        ]
      },
      {
        "id": "beabcf5f-c603-497a-896d-72fabcdd6f82",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "29a5d979-5d5b-476f-a328-84d05a513e8e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b8285cd-4711-414d-9308-13a23d17d283",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ddc1563-8469-42c9-996b-1924f4e91b11",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336c69f9-5393-451a-babe-18354d18426b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4966e8c4-1ed0-4d60-8199-287cf62a1559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2e301c-a89e-405a-9c07-8d4d8be2dc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79c5e5ac-b356-45b1-90cd-15ef5e4c994e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86d6b6c1-76b9-4d34-839c-2a3ac6e16543",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "449fcd32-6b11-42e0-9b44-376a7e9d9eb9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bb4baf0-5b4b-4b50-96ef-2baea10d75b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a9d89a4-05f5-47e0-a2a2-678cc04ded10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe802571-a6ba-4919-a652-ed0685b66ea6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a50358e2-156b-4da0-a20c-14ec4b3e909f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01259045-28d1-4b09-9eb1-004fecdd87b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d8e526d-c784-479f-a5a8-713cfec2ce96"
            }
          }
        ]
      },
      {
        "id": "554f48c0-5be9-41d5-ba84-fe65a5a935f7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "839749a5-df0f-45cb-9cd1-6a2a26b21df5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6cd6c803-116c-492c-bc80-30079695e45d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1887b0ca-6dd7-4e29-bf5e-65cfea1469e8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f24b67-a9b0-43b9-b1e7-c5c1a706cb3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0199e16f-16e9-4e05-b4c1-4a9df2629fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59691a5f-69d0-46ae-82c3-3bdd46dbad62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a31c1003-1c88-48f6-92bb-c7e935841ce9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0fc7c98-ffef-4492-be2a-7c9c48c5c239",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cedc5ef-142d-4407-ab0b-3868d0ef50c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a0c5ccb-799a-4f4e-902d-6bde1aa541d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0862435-973a-4a66-b067-7d474108a741"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "148b3606-b47c-45db-b1e6-50f660dbeedc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6182287f-9326-4a94-9f12-77a65261b6f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0201cc2c-8c55-42c9-b1f5-bd5b3dce2dd1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81cf64a0-6bfe-4d47-b73a-4ae013f88753"
            }
          }
        ]
      },
      {
        "id": "56138034-c304-4e52-a559-cb2c8e3ac950",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5e7ab83-52e2-4daf-a382-ccf176aa9a65",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9be0e42-08f5-46bc-a422-51d957d3112e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f2f61c1f-3f2c-40b7-8be5-ad3da721c092",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d47ede7-115b-45c2-996d-7ea4cb2c8b31",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1262178-c6d6-4078-a571-ac14b0fc931c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.49206349206349,
      "responseMin": 16,
      "responseMax": 816,
      "responseSd": 86.24082615410171,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718671130426,
      "completed": 1718671154201
    },
    "executions": [
      {
        "id": "1835078c-2ba9-4c45-8516-bc41ffff8f43",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cc3672ed-b825-4cdd-b44b-0e88f0e6d509",
          "httpRequestId": "bb477cfb-ea55-4f03-99e9-e814d1b18c55"
        },
        "item": {
          "id": "1835078c-2ba9-4c45-8516-bc41ffff8f43",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cfb92d39-0ea5-40f3-ae34-93ee53e020ba",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "907ee4d2-01dc-4771-8882-1158b869a2fe",
        "cursor": {
          "ref": "4261068b-662d-4696-add7-942c169fbb1e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8852811c-d3ab-4602-ac41-ef1d566d83aa"
        },
        "item": {
          "id": "907ee4d2-01dc-4771-8882-1158b869a2fe",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fe8b4598-5cce-458d-8f6c-d83b0701df2b",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "1fe87cb3-a161-49dd-8774-553a38c20001",
        "cursor": {
          "ref": "b7830f66-a427-4ce2-b16a-36525cf06448",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cd088970-24c7-4eb4-b1b8-6e3b08a59632"
        },
        "item": {
          "id": "1fe87cb3-a161-49dd-8774-553a38c20001",
          "name": "did_json"
        },
        "response": {
          "id": "e69c8110-3090-4c41-b9bd-c02b9dbdf695",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b43cfff-6414-41f0-a2e9-7ddaefb45231",
        "cursor": {
          "ref": "071345e7-093b-4a91-850a-0c969e45a97a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d7ab9053-b87b-4a80-982e-352d0b02202d"
        },
        "item": {
          "id": "5b43cfff-6414-41f0-a2e9-7ddaefb45231",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2f93d24-aee2-4b1f-844b-7afc6e2b6d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b43cfff-6414-41f0-a2e9-7ddaefb45231",
        "cursor": {
          "ref": "071345e7-093b-4a91-850a-0c969e45a97a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d7ab9053-b87b-4a80-982e-352d0b02202d"
        },
        "item": {
          "id": "5b43cfff-6414-41f0-a2e9-7ddaefb45231",
          "name": "did:invalid"
        },
        "response": {
          "id": "b2f93d24-aee2-4b1f-844b-7afc6e2b6d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b6a21c-be68-4398-bc5e-eeed390eedaa",
        "cursor": {
          "ref": "bc3a2297-3a44-4c2f-ab5e-171cb19d6843",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b591d3ed-e244-4f05-8276-3cb86c41d516"
        },
        "item": {
          "id": "83b6a21c-be68-4398-bc5e-eeed390eedaa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "74356407-c989-4569-adf5-f08e7c29d794",
          "status": "Not Found",
          "code": 404,
          "responseTime": 313,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c6bdac-4101-49bf-acba-05347e6b8c49",
        "cursor": {
          "ref": "462bd92f-30a1-45ae-9422-6e93a395501e",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9f55e5ca-36ff-431f-9350-e3952f7edc4a"
        },
        "item": {
          "id": "29c6bdac-4101-49bf-acba-05347e6b8c49",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "94cc9c7d-2371-430a-8c70-253f12973b44",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426af5ed-d2d0-4bf9-a7a4-b3d357b9be8e",
        "cursor": {
          "ref": "13d5064a-d7e0-4a66-b7af-86608e128d89",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "602e54eb-9c06-4766-869b-2a78b133ee97"
        },
        "item": {
          "id": "426af5ed-d2d0-4bf9-a7a4-b3d357b9be8e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8b388265-fdd4-442b-8187-dc0da2e2ee90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ba25d1-0fba-43bd-bae8-0ca36b326fdb",
        "cursor": {
          "ref": "e29d9936-c4b3-48d5-b817-69c987d491fb",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "79af7133-6c53-4997-9496-8f2c95666bf1"
        },
        "item": {
          "id": "07ba25d1-0fba-43bd-bae8-0ca36b326fdb",
          "name": "identifiers"
        },
        "response": {
          "id": "d54b642f-0334-4c4f-8e68-6aa89f2f467c",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29982d88-1879-4386-b222-a5310fe02513",
        "cursor": {
          "ref": "6d2dd36a-bd16-4c7a-bbc2-17b7ec7a5129",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e7d396b2-72eb-4fdd-b6a3-8fb9846ae609"
        },
        "item": {
          "id": "29982d88-1879-4386-b222-a5310fe02513",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "def21d74-6608-48eb-8c87-561aadff93eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bb6073-9807-4f57-8891-7cc58aea7406",
        "cursor": {
          "ref": "20dc2688-0bec-4eda-8d0c-80425cb1ede2",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "eb4e731e-366c-48fe-a33a-25e688cade7c"
        },
        "item": {
          "id": "12bb6073-9807-4f57-8891-7cc58aea7406",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f7679bbe-1c97-49ed-aa93-7f391badcab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109ac116-0b70-45cc-950e-600a63f0ea73",
        "cursor": {
          "ref": "c57508c6-f71a-45a7-865b-28495c6c7eef",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6dbdf393-a67a-4d57-bc63-9e46883b2b88"
        },
        "item": {
          "id": "109ac116-0b70-45cc-950e-600a63f0ea73",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "59622aed-a793-4f13-9ebb-18a95965a714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5e3a3f-6a57-44e9-b72f-6bddc7db9c0c",
        "cursor": {
          "ref": "759ac32a-19c0-4230-b9d5-65feba7bde37",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c9b80aee-2e73-47c3-806b-2ab10ac85d62"
        },
        "item": {
          "id": "5b5e3a3f-6a57-44e9-b72f-6bddc7db9c0c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "05f77e33-2ea6-4508-a9bc-efe83d09d81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f43d81d-f793-457e-8237-147c8b497df5",
        "cursor": {
          "ref": "15ffcf63-73d6-4279-9a2b-b5f8b7f94195",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b8ec3662-0d9e-44f8-8e62-f84ed49ddf1a"
        },
        "item": {
          "id": "6f43d81d-f793-457e-8237-147c8b497df5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b9857b4d-c029-49d9-8669-3e374b37e983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c351438-3a8e-4e14-9b55-72862678c860",
        "cursor": {
          "ref": "43d3508f-8024-43e5-880a-fc03b53a67cf",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a45c93d2-d2f9-4eb8-b129-674a0ab8f549"
        },
        "item": {
          "id": "4c351438-3a8e-4e14-9b55-72862678c860",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0fe4125e-887f-484e-9230-117e9e12431b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a68b31-5ae9-4b7d-b34f-774e8fa0b8ea",
        "cursor": {
          "ref": "3b5e34fe-c6ef-4ab4-9757-ddf219e27ca5",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fdf3d78f-345b-4a67-b0d9-17d84ee6a50f"
        },
        "item": {
          "id": "b5a68b31-5ae9-4b7d-b34f-774e8fa0b8ea",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7c20dbf0-5183-4966-9b8e-a20fd181921c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ec1e19-088f-4724-8a2f-7c3bf7923695",
        "cursor": {
          "ref": "a1a997bf-6100-4c1b-adcf-b509bd4e4278",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5e8410bf-31ba-47db-bbd9-08a2a3297f91"
        },
        "item": {
          "id": "f4ec1e19-088f-4724-8a2f-7c3bf7923695",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4cc5c029-c471-4507-bbed-83e4284cc20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99ca26b-ba3b-474a-bafa-2804838ebffa",
        "cursor": {
          "ref": "221ac0c5-4ae7-4358-bbd4-4f28a185b0c7",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "797e6145-ff15-4bb5-a6d1-25d72803bf17"
        },
        "item": {
          "id": "e99ca26b-ba3b-474a-bafa-2804838ebffa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c1241e7a-37f0-42eb-8c5a-482611588d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819bc27a-0655-4082-8d39-0dbd7ace4d2d",
        "cursor": {
          "ref": "c5c9831d-eff4-491a-8ca1-81daa8c84e34",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4eaf3346-d401-46e0-a306-bb3886fde6de"
        },
        "item": {
          "id": "819bc27a-0655-4082-8d39-0dbd7ace4d2d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4d2ee2b9-1c47-443e-8f1c-72286e0aeff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6da3be-e008-4d31-aee3-a831884d24a3",
        "cursor": {
          "ref": "896ad4f7-778b-46cb-885a-44e273432d86",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0897dbe6-5113-4b58-b995-2fd8f122ce73"
        },
        "item": {
          "id": "1f6da3be-e008-4d31-aee3-a831884d24a3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "be6f3dc2-8f44-4f60-b098-d7f5113b9d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cdb7c3-9be8-46dc-a4d5-674a7a219b6f",
        "cursor": {
          "ref": "4a48fefd-1b6d-4c31-9db6-659eae253ec4",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b26e5be6-d183-4aad-be39-c7e76a896be0"
        },
        "item": {
          "id": "58cdb7c3-9be8-46dc-a4d5-674a7a219b6f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "eec68040-168c-4179-8d2c-3b1e778a2509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e870dd9-ca09-475b-b57f-b99d1a0fea2b",
        "cursor": {
          "ref": "cb33ebd7-8722-48d5-8e8d-b71121d0be42",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2e59035f-974f-4eb9-8d3e-82f749a4199f"
        },
        "item": {
          "id": "7e870dd9-ca09-475b-b57f-b99d1a0fea2b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c07ffb23-44a8-447c-82bb-535bd40c554d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda05e9f-571e-4588-a797-2311a01a3086",
        "cursor": {
          "ref": "09161358-fdf9-4579-9283-12e8d636df0b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "109b9ed1-5e2f-40b8-92d0-628a4e9c3ac0"
        },
        "item": {
          "id": "dda05e9f-571e-4588-a797-2311a01a3086",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "572e767d-21ed-42d0-8840-34d9e0c89192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98a0a1b-dc7c-4ab2-89eb-00c9afe7a326",
        "cursor": {
          "ref": "c3f64840-1995-4005-948f-65a4d09cef6b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "87e05ff2-1764-4095-bae2-413b150b2d87"
        },
        "item": {
          "id": "c98a0a1b-dc7c-4ab2-89eb-00c9afe7a326",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d7cc222b-acf6-42c9-a7b4-24c1e9cda362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fc0981-41fd-442e-9b19-ec4b7c619aef",
        "cursor": {
          "ref": "9adfcb4d-c690-4c1d-8a2f-ff46c054b10a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "59097add-ccca-4ebb-b3b1-3043c6e54850"
        },
        "item": {
          "id": "95fc0981-41fd-442e-9b19-ec4b7c619aef",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3afdcd33-bf99-4a75-bbc3-189342143d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d337c38a-78bc-4113-a113-18fb04fee68d",
        "cursor": {
          "ref": "c30fba2e-b65d-4187-bd37-df365de37c94",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "309e0815-a6da-48bc-aa7f-d306c4a361bc"
        },
        "item": {
          "id": "d337c38a-78bc-4113-a113-18fb04fee68d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "af97b034-21b5-4ef0-ad16-6c6fa14388eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa395be-6279-480a-aa72-581df07d12f9",
        "cursor": {
          "ref": "765ea1b1-e3b7-47ef-909a-cb44f7bdb42b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a5282715-7f94-41e4-bb84-c844a88f0d35"
        },
        "item": {
          "id": "0fa395be-6279-480a-aa72-581df07d12f9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "081526ba-3675-4e35-9b5e-9670cd89d653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad02f074-0370-462e-817f-9b33bff89695",
        "cursor": {
          "ref": "c712dc89-b6d2-4c28-bab9-1137cfe6b34e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1cb3eceb-c0a3-4a2c-9bd5-3e720c33e433"
        },
        "item": {
          "id": "ad02f074-0370-462e-817f-9b33bff89695",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5c605086-c8b7-4f78-abcc-e2b9a6b2ce65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3feb93ec-a2bd-4fb9-8fca-666d2d558be2",
        "cursor": {
          "ref": "8d4508de-9a8b-4994-9cda-571007dd4f5f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5c66b501-5880-4e34-92ca-ca33bff2047c"
        },
        "item": {
          "id": "3feb93ec-a2bd-4fb9-8fca-666d2d558be2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d0cffa20-cebc-4bec-a34c-b340e6490b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f72c68-59c4-449b-9f1d-3a1c822c1fbe",
        "cursor": {
          "ref": "27dec26d-7d6b-42c6-a080-0c4a8b413f6d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ffb6ea9f-5361-4908-8213-d6e81fa2ac48"
        },
        "item": {
          "id": "51f72c68-59c4-449b-9f1d-3a1c822c1fbe",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9c54d450-f178-49b7-b1a1-01db961d4c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15449e6d-2f0b-4f0f-8949-46e42bc23d43",
        "cursor": {
          "ref": "eeb86ad5-c2fc-4d2b-bf4c-1bf315c130ac",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6764290b-d593-41f1-a354-06bc2f0a1d2d"
        },
        "item": {
          "id": "15449e6d-2f0b-4f0f-8949-46e42bc23d43",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d2028fe1-84e4-40d5-9a1c-b9153af41a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343cbc96-8be8-4cd3-8e8d-27c56c669353",
        "cursor": {
          "ref": "27e7639a-87be-4e01-9c20-011c941c1dea",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "25278a2a-574a-4e01-9632-d006a8a85357"
        },
        "item": {
          "id": "343cbc96-8be8-4cd3-8e8d-27c56c669353",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0400cb1e-cb3b-4156-94d0-b87b1d2e050c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d195f7-dbf7-4de7-80db-5850f6a8faaf",
        "cursor": {
          "ref": "744aec77-7d72-46ed-a5d4-e02199379d66",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "42c56ac1-8253-4805-a252-cb340a2ca8e3"
        },
        "item": {
          "id": "f1d195f7-dbf7-4de7-80db-5850f6a8faaf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "30f22dbd-e0f2-4b82-a57d-58634b15a212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df609a9d-608c-4fb0-91a4-5c2e5d30b580",
        "cursor": {
          "ref": "57df8d04-b1b9-47d2-9aa4-72813cb0a03c",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4eba0df5-7d9c-41ba-9718-99802fceb15f"
        },
        "item": {
          "id": "df609a9d-608c-4fb0-91a4-5c2e5d30b580",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e69810dc-20bf-43f7-aa9e-0b0b14f7104f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e7ac94-6d98-43b8-90e6-b1d6689a5068",
        "cursor": {
          "ref": "44cff762-bfa7-492a-a6a5-cde4dfbc6b6e",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8c247ba3-0681-495f-8956-7f8f2d34aea0"
        },
        "item": {
          "id": "65e7ac94-6d98-43b8-90e6-b1d6689a5068",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "15f39bec-995d-48e2-afb9-0264febd9e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b02a70-181c-4a54-9601-72cd84328b36",
        "cursor": {
          "ref": "89fcad8d-0504-4547-8f08-5ffeceba13f8",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cfa664ad-11b9-4c96-824e-243ff41293a4"
        },
        "item": {
          "id": "d1b02a70-181c-4a54-9601-72cd84328b36",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5c3297e6-4187-47a3-9e5a-84969d087dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f821022a-db9e-4e8f-831b-d647a0c22485",
        "cursor": {
          "ref": "617739e8-8fff-4b23-a6e3-53967301d9d0",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f5658675-d74d-4eff-b7d1-6b5888766e2f"
        },
        "item": {
          "id": "f821022a-db9e-4e8f-831b-d647a0c22485",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b75c172a-af45-483f-889c-74fea800738d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8da51d-3a11-439b-84b9-abf9ced3018a",
        "cursor": {
          "ref": "a384933d-8fad-4d1c-b73a-676ace1f2200",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dfee46e3-c0ab-4bda-8e11-ae92e6e0350a"
        },
        "item": {
          "id": "8c8da51d-3a11-439b-84b9-abf9ced3018a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "536dfcfd-e834-4e40-b003-b58c42c9b1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6b3875-6f26-4263-92ec-f95e682bbda1",
        "cursor": {
          "ref": "5dc689e2-0fba-44e0-a478-3699afa16b03",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8c6d6dce-4b0b-404a-8151-220f0cd30ffd"
        },
        "item": {
          "id": "2a6b3875-6f26-4263-92ec-f95e682bbda1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f2aca846-5d00-42ae-987c-07ff1816b3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a64d491-92a8-488f-8ca8-2f90ff2722ff",
        "cursor": {
          "ref": "66c1095c-3182-4608-9119-ac07f47544b7",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3dd72267-844b-43b2-ad91-f84f96bf8179"
        },
        "item": {
          "id": "8a64d491-92a8-488f-8ca8-2f90ff2722ff",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "068fa20c-8d6c-4f11-9e80-3bfea956e282",
          "status": "Created",
          "code": 201,
          "responseTime": 816,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "79abec91-f7da-4c28-8bfc-5d9c092c8a1a",
        "cursor": {
          "ref": "4e4cac71-9d18-41fa-b041-1d843e507b3b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7ae05133-d784-43db-b9cc-4e7c4bb320c2"
        },
        "item": {
          "id": "79abec91-f7da-4c28-8bfc-5d9c092c8a1a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d60f14ad-25ef-452f-bd34-9ed29e8e517b",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f38038da-610b-440b-8dfc-2689f8a145bc",
        "cursor": {
          "ref": "9222328f-c392-400a-abcf-04aacdc05c7e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e595850e-719a-42da-956e-d363386026d8"
        },
        "item": {
          "id": "f38038da-610b-440b-8dfc-2689f8a145bc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4491ae8b-b058-4adc-8bbf-205b500560ef",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7e021c43-7656-4805-a709-b693541304b9",
        "cursor": {
          "ref": "30527c74-b973-4a7a-a794-3b1dd162973d",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ba0b921a-f4cd-4297-8400-f5c944b234ea"
        },
        "item": {
          "id": "7e021c43-7656-4805-a709-b693541304b9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cef999e9-bc31-493a-bc1e-5139e518bc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f312a979-49b4-4653-9565-b62e67424c74",
        "cursor": {
          "ref": "b9ce97cb-0d3a-49be-bf20-c01cbe77b1d4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4bb5ad05-a94b-4a28-9f22-c4cd06ad6de6"
        },
        "item": {
          "id": "f312a979-49b4-4653-9565-b62e67424c74",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "24d5f6e8-37c7-4ccb-b3ff-ea98b3c73f31",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f6e5f507-5799-460c-90e6-30ce895f4362",
        "cursor": {
          "ref": "fdc12b48-875e-4736-b2b9-1751fc99c565",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c6efcab0-1a9c-4ea4-84db-c409d0cdb00a"
        },
        "item": {
          "id": "f6e5f507-5799-460c-90e6-30ce895f4362",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "83711948-5ee7-4716-a28e-dbe95279f0d3",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b564c97a-b96a-41e0-9692-12799c732aef",
        "cursor": {
          "ref": "7fc1c372-4ac5-4f03-b0d4-a95d53a34ef9",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "819407df-bdfb-442d-9ddd-805ac06609d9"
        },
        "item": {
          "id": "b564c97a-b96a-41e0-9692-12799c732aef",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bd6c8be7-059e-43f4-846d-e813ea96b3cd",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f2a60b24-ab02-47c4-af8c-738c67d3b1fa",
        "cursor": {
          "ref": "f68328d1-0186-4f83-afba-95b841c472e9",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "18c0ae0e-d31f-45e1-b10e-a1cde3443950"
        },
        "item": {
          "id": "f2a60b24-ab02-47c4-af8c-738c67d3b1fa",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2ff5d479-c823-43c8-a118-f875c5806e97",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fbb78491-6fcf-4a5e-85be-e84d78673b69",
        "cursor": {
          "ref": "312471d4-673c-496c-9ebd-9f7e14f4f088",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0eaf9f75-fadd-4ed8-be1c-a5d5b386356c"
        },
        "item": {
          "id": "fbb78491-6fcf-4a5e-85be-e84d78673b69",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fa39274c-ad81-4458-bd50-c003e7462b49",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9676e46e-1504-4515-9972-1c9f02358d94",
        "cursor": {
          "ref": "39ef61e8-60f0-4cbc-8d44-b43017f614ba",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b2638f23-9622-4c7e-9621-c003c589310a"
        },
        "item": {
          "id": "9676e46e-1504-4515-9972-1c9f02358d94",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f9665341-e8f0-4c53-bfba-7df73c4c99a2",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "34a57d79-f3d3-40d8-93c6-b9e7cce7745b",
        "cursor": {
          "ref": "d196769b-c86b-474b-b519-c3630f8b7306",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "65046727-c27c-48b8-bb12-34a4efecf2d4"
        },
        "item": {
          "id": "34a57d79-f3d3-40d8-93c6-b9e7cce7745b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "87bcaec0-4e45-4ec8-83c2-0903da8d445c",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "af0cea97-35e2-46f4-840a-8803fe250188",
        "cursor": {
          "ref": "230c6e8d-f77f-4734-894e-71680f77553a",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0e16e0ad-6131-4e46-a87f-22ed1dc7cca3"
        },
        "item": {
          "id": "af0cea97-35e2-46f4-840a-8803fe250188",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8492b645-6915-43a8-b0ed-3cebd72bdb5a",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "41ba7184-9849-48be-946d-1f80b3c1d38c",
        "cursor": {
          "ref": "58231d18-51a4-431b-b296-1fd89dae0be3",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b801b455-50d4-4980-b5e2-7c6645b084f7"
        },
        "item": {
          "id": "41ba7184-9849-48be-946d-1f80b3c1d38c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a62f4a0b-7413-4495-bdb5-cb53875d7fbc",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "81ba479b-a485-4f45-ae76-81b17528ad5e",
        "cursor": {
          "ref": "2e807a95-7c7d-4ac6-8ce5-fe2bcff13f13",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "42054b24-144c-48b4-a931-6a70c0e9dee3"
        },
        "item": {
          "id": "81ba479b-a485-4f45-ae76-81b17528ad5e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d088296c-0437-4209-a09b-97ffece039e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c703e850-9323-4864-92e1-6c7ea7fd5c39",
        "cursor": {
          "ref": "ec632c06-60a2-454a-88d7-bb7b49275f7f",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6f58fbc4-e147-400b-86c8-67784f1c3020"
        },
        "item": {
          "id": "c703e850-9323-4864-92e1-6c7ea7fd5c39",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a9add5da-0f3a-49d7-a83b-9fc41b1eac97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748f013c-32f2-4d07-9c07-e4e1c6a53afe",
        "cursor": {
          "ref": "5f6c6877-f43e-41bd-9916-b4a9e15a9707",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e2ac373e-3053-47db-aa43-930b567ab109"
        },
        "item": {
          "id": "748f013c-32f2-4d07-9c07-e4e1c6a53afe",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7cb115ae-c06f-4267-98f9-f1afef546f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0fa88b-e754-4461-9595-0e8eda47380b",
        "cursor": {
          "ref": "af86b8dd-a68b-4032-bdd4-25cc00998e68",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bb223546-1dc6-4976-813c-a0aff354f4cd"
        },
        "item": {
          "id": "3d0fa88b-e754-4461-9595-0e8eda47380b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a16d9b3-13ab-4117-a1ce-f36578cc01ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c23123c-5ddf-4ec3-8b5a-2a8bf5a835d9",
        "cursor": {
          "ref": "202d8d7c-c1e4-4907-99fb-21fdd1878676",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2b0cd9e9-1058-49c9-ac17-43437257cf5f"
        },
        "item": {
          "id": "3c23123c-5ddf-4ec3-8b5a-2a8bf5a835d9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3e3f0737-853f-4ddb-9985-c57f13f6b39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8a3102-b622-4103-b487-aea0d59a115b",
        "cursor": {
          "ref": "2d294423-fb44-4dfb-adbb-b19d12722681",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c2d6c2f8-c73d-49ef-8912-fec48f06d048"
        },
        "item": {
          "id": "ec8a3102-b622-4103-b487-aea0d59a115b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b185c2b2-e7e7-40b3-bbe5-0474d1238bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6474e1ca-9c98-43dd-9b8c-374a2194ebd7",
        "cursor": {
          "ref": "729be5c8-9aa2-44bf-bcba-9e5206ee9110",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0b53aa1c-a2c8-4ca2-b1f5-80d795331801"
        },
        "item": {
          "id": "6474e1ca-9c98-43dd-9b8c-374a2194ebd7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2c1b6b6b-b9b3-4e35-acc2-3491b9642a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2c3e03-4bff-44a7-bed7-12ed8fa8a22f",
        "cursor": {
          "ref": "dff5c551-0ec5-4791-bf0e-acabbb3c2f9e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5b7c6486-33c9-452f-98c9-44205c25f852"
        },
        "item": {
          "id": "6a2c3e03-4bff-44a7-bed7-12ed8fa8a22f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d9e6d845-e13c-4e39-bbd8-0bd5923ba0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78abcad8-83b9-4820-b2d8-ff227b95adea",
        "cursor": {
          "ref": "7bdc1505-3440-4eb1-9a4a-493e141d0833",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "52008cf0-9902-4bb1-9a46-3435ae585ed3"
        },
        "item": {
          "id": "78abcad8-83b9-4820-b2d8-ff227b95adea",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "500baeae-acef-4db3-9886-c1feef8c4027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24aa7c91-a7e3-4f79-85a9-530ddcde9bce",
        "cursor": {
          "ref": "58823e22-a0fa-4f4d-8f5c-4ed195e79d42",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "33abd860-a590-44a1-99a8-8f0809633f8d"
        },
        "item": {
          "id": "24aa7c91-a7e3-4f79-85a9-530ddcde9bce",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f32f14e3-bac5-4ade-9921-7ec1206a2a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c599383-5117-44ae-8ca9-8e92b4f91a5c",
        "cursor": {
          "ref": "7212ef10-e5f5-4c33-9d05-2eaf2c2f9f0e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d87fff00-8878-4c70-baaa-466ee3ffee7c"
        },
        "item": {
          "id": "2c599383-5117-44ae-8ca9-8e92b4f91a5c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fadf2b74-68ab-4b60-b43a-04e7e5831f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d8df3f-380f-411e-93c5-3971298692ab",
        "cursor": {
          "ref": "e9aa7ae8-b0b7-4dfd-8460-c852566fb1fc",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7b555390-0849-4e35-9ac8-3b418d09ef13"
        },
        "item": {
          "id": "b3d8df3f-380f-411e-93c5-3971298692ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5424444e-20b5-4cdb-af03-02557950f77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7524fef-63cf-4cd9-ae9f-ea5314774025",
        "cursor": {
          "ref": "be5421a2-0cc6-4791-bf71-214b5c67e67c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "83cb57ef-e4e4-480f-bf3b-d00ad2876a53"
        },
        "item": {
          "id": "b7524fef-63cf-4cd9-ae9f-ea5314774025",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "13002457-df3b-4494-8b2c-7fcf6877455d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf64821-3360-4708-993f-da41e3ad4eb0",
        "cursor": {
          "ref": "56af390b-eaa7-4203-a49d-1eced5ce65dc",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d4eefd03-1416-40ff-b2d7-6d00a35ba9b1"
        },
        "item": {
          "id": "5bf64821-3360-4708-993f-da41e3ad4eb0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cf1938c2-7a93-47a9-9e22-e439056eb7e8",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a9154f63-d8bb-4a66-b572-5f422cc29776",
        "cursor": {
          "ref": "36a48712-a673-4669-aecf-13e1d7fa4322",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "52a0bb2a-5502-47dc-9a0b-4cdaa6239845"
        },
        "item": {
          "id": "a9154f63-d8bb-4a66-b572-5f422cc29776",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7e94e9e7-0856-430f-b78e-3c15e2f2ee8d",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7c889525-6526-4e93-8305-2d512d972670",
        "cursor": {
          "ref": "861c5fd9-8627-4eda-8795-3a0966261b18",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8cab8def-bf78-4ba0-84ca-3b2b97279296"
        },
        "item": {
          "id": "7c889525-6526-4e93-8305-2d512d972670",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aa5777c0-342f-4c1c-a887-35f3e06589f6",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3fe52cdc-d3c0-4117-9059-54723f531baa",
        "cursor": {
          "ref": "e48fceda-fceb-4e23-b27b-eb8cfebeb8bc",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fb1a088b-e8a3-4c64-9413-a49db71eee3b"
        },
        "item": {
          "id": "3fe52cdc-d3c0-4117-9059-54723f531baa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "78e45efc-16ea-491a-aaa4-969315689003",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "062a5b56-d165-46c1-a6b7-b90c6d1f00a1",
        "cursor": {
          "ref": "d8100406-0f7b-4838-b07e-8ecfa450e8f7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cd43cba0-f733-4cd6-86d1-54b3824ef5a3"
        },
        "item": {
          "id": "062a5b56-d165-46c1-a6b7-b90c6d1f00a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "14729a61-6731-4c6f-b541-ffb2b4e1c320",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4d7c959e-d6d7-498a-b5fe-75b60317ea88",
        "cursor": {
          "ref": "35eff367-f845-49aa-8477-d4ecfe33fcee",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7abe66ed-54d4-4e1d-8ace-68961a8cdad1"
        },
        "item": {
          "id": "4d7c959e-d6d7-498a-b5fe-75b60317ea88",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "34446272-924b-4cc1-8a56-899f2fc6a7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39b2652-a912-464e-b2d0-f4e58dedf125",
        "cursor": {
          "ref": "9e7a5fa2-4d6a-4ef0-b5e8-c09674609c5e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c5b484f-81a6-4c5b-a433-f7db6f237ac9"
        },
        "item": {
          "id": "e39b2652-a912-464e-b2d0-f4e58dedf125",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "150b6083-e5ce-42a3-aa64-56a2c3186975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a6ac25-6bfe-419b-9505-1ee5d77061ba",
        "cursor": {
          "ref": "c8740598-8f93-4fae-b66c-1177e7533c9f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "04fd51f9-e17a-444a-b692-2f5dece9701f"
        },
        "item": {
          "id": "42a6ac25-6bfe-419b-9505-1ee5d77061ba",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a215b435-ced9-4f5b-928f-764c07916b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b631d9-d775-4c7e-abc2-2b6b5221040f",
        "cursor": {
          "ref": "442d0ad6-ec1f-490c-9b9f-ecd739734a06",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8e920182-ce70-4826-b0ec-edea9fc1305b"
        },
        "item": {
          "id": "e5b631d9-d775-4c7e-abc2-2b6b5221040f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e1f79acc-92b0-4182-a1d4-3bf2eabaa42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43232f31-2048-4f05-9b84-59bd6688e0d7",
        "cursor": {
          "ref": "e331311d-c805-46e8-9033-dba75cdc5b10",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "db1c1821-df03-4c85-a7fb-bd65f54d6a06"
        },
        "item": {
          "id": "43232f31-2048-4f05-9b84-59bd6688e0d7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1b9601a4-c12d-40a6-b230-88f08410507d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3091318a-7bbb-4b80-bc5b-d55e47c12573",
        "cursor": {
          "ref": "c87827cf-40ae-456d-8372-9412e21cdaee",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "78a1e395-b579-41fd-9b82-db6c4ad62beb"
        },
        "item": {
          "id": "3091318a-7bbb-4b80-bc5b-d55e47c12573",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "145d5fdc-0e13-4269-ada6-448f97bb3e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e56810-fb00-42f6-a8b1-8d5b963359b6",
        "cursor": {
          "ref": "c305c223-0982-4a61-b324-7307c081eeda",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fcab2e5a-f6d3-4164-87c5-cbc833bbb999"
        },
        "item": {
          "id": "24e56810-fb00-42f6-a8b1-8d5b963359b6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "531ba441-3785-4c23-8500-39f1b850391b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2105e6f1-8a3b-42cf-8de9-1f4e574ec133",
        "cursor": {
          "ref": "1961d37f-0e83-4961-b473-76b7cd194906",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fc95ad50-c879-4194-87f9-8a73a86e49fe"
        },
        "item": {
          "id": "2105e6f1-8a3b-42cf-8de9-1f4e574ec133",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7f39f0ef-7e0d-4bf2-93d2-967fde5a550a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378a515b-790e-437e-a115-48245d129c95",
        "cursor": {
          "ref": "5ad8c507-5cef-4e1b-9aa4-07948c6852ae",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "46cf91b4-3e3e-4d29-a067-1a8d2319054e"
        },
        "item": {
          "id": "378a515b-790e-437e-a115-48245d129c95",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "00a2d509-6bec-4064-87c9-5e2d55a88bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78312cbb-8e50-441b-90a4-99f13e036842",
        "cursor": {
          "ref": "436f3f3f-0152-4adb-8e9d-eec207e90c4e",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "51a146e7-efa1-478d-b52e-753ee1f9d401"
        },
        "item": {
          "id": "78312cbb-8e50-441b-90a4-99f13e036842",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ada347ce-9e40-440a-88f3-9030a498a35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33894325-0836-4fb1-8dad-916a1bb5518c",
        "cursor": {
          "ref": "5c41b986-d300-4783-b7ae-a2fd8d38b67e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8bf67460-8172-44f0-91ba-2a8f4bf0d13c"
        },
        "item": {
          "id": "33894325-0836-4fb1-8dad-916a1bb5518c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "eb661c85-1b56-422f-95ef-2a616e438bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6681653-a95c-4ae8-a0b9-ebb4f6a4372f",
        "cursor": {
          "ref": "4bf50a9b-90ce-46a8-a7a4-31221d93b25d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "75b48c44-41df-466c-a3b5-528caa8044d6"
        },
        "item": {
          "id": "f6681653-a95c-4ae8-a0b9-ebb4f6a4372f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "004f01f5-2e4d-4db8-af06-bdd6e262b994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceae4ad3-2dc7-4778-9991-e7e89d4ab14c",
        "cursor": {
          "ref": "a7ab783a-686c-47ee-b646-b99ac73d6bcf",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d6b7cd16-5322-40aa-a98f-dcfc09c2c4a0"
        },
        "item": {
          "id": "ceae4ad3-2dc7-4778-9991-e7e89d4ab14c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7d96ccef-af32-478d-8b25-7405e9a29b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204cc0c2-3dc2-4e90-839f-712b19794980",
        "cursor": {
          "ref": "cbc2d706-3313-4c1d-9a27-45304b758cbb",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4651e12f-2a5b-429b-959d-0524f5413fbd"
        },
        "item": {
          "id": "204cc0c2-3dc2-4e90-839f-712b19794980",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dad6508f-163e-4da0-9a6a-86bb7dce034d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5719c2-41a6-402c-98ef-8354b3711e74",
        "cursor": {
          "ref": "16e9d1f1-bad5-456e-afe6-5938a8063383",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2458220a-ecea-4583-b295-f391421d9118"
        },
        "item": {
          "id": "2b5719c2-41a6-402c-98ef-8354b3711e74",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b68cb499-d9f1-4b60-8db4-c8fb00f3ccd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18a452a-5c95-46e8-a227-5f3594875717",
        "cursor": {
          "ref": "396eef63-219b-4d4b-a825-07ac0d459c30",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a7f7d2d9-b4fc-47b2-a440-5c067cadc8f4"
        },
        "item": {
          "id": "c18a452a-5c95-46e8-a227-5f3594875717",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fbd8537a-ac2c-4f49-8068-9d26ae98fc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e0dcc6-db01-4dbc-892d-44c0694cb467",
        "cursor": {
          "ref": "67c04a97-9992-435e-acfb-4ea9e3657fc0",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8c1873c8-24b8-4b2f-aa16-c5e5387c4ea8"
        },
        "item": {
          "id": "21e0dcc6-db01-4dbc-892d-44c0694cb467",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c93ca059-978e-4dd0-846f-ab7bd45aecc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d5aea2-0cb4-4652-8c2e-ed4475fd0438",
        "cursor": {
          "ref": "4b91b5a4-c977-4024-928d-cbb9514ec654",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "15ad35d7-6d64-4c62-ac15-75aabd853332"
        },
        "item": {
          "id": "82d5aea2-0cb4-4652-8c2e-ed4475fd0438",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3e743e99-f7b1-4de6-967a-9f36b74fc632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6783823-e75d-4310-80c3-cb4c0ec36acc",
        "cursor": {
          "ref": "5f10ffdf-4a16-4d8d-9a11-89d97af0b7f9",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c25fac79-4b35-4b90-88a7-c95fd9fbc85e"
        },
        "item": {
          "id": "b6783823-e75d-4310-80c3-cb4c0ec36acc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cc3a31c5-4643-4b89-9f4d-f7bc76d1d363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd7c5d3-3946-4a41-b166-d70d6f9a69c1",
        "cursor": {
          "ref": "4989ba53-5d9e-4c6d-80ec-4c45dc327e57",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "63ec00a1-39f7-48e6-9fe1-24a3e4036aa4"
        },
        "item": {
          "id": "2dd7c5d3-3946-4a41-b166-d70d6f9a69c1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "01ee229f-3522-459d-8789-37ca730b8bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cdac6d-81e1-4a4e-8c7b-25855752bfb1",
        "cursor": {
          "ref": "ee7af217-c525-4ad6-8fda-d8661111fd3a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9b2cde39-ddb8-4867-999c-40eb32a5fdf8"
        },
        "item": {
          "id": "a3cdac6d-81e1-4a4e-8c7b-25855752bfb1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "342f9381-c064-49b7-8c4c-cd47e8e310e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52931044-33a7-4f1b-a2c3-2a3e5d4e88b2",
        "cursor": {
          "ref": "994f959f-d514-46e7-ae5b-6362a2a9184d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "497027d2-90dd-4507-adc8-41bf592c9c87"
        },
        "item": {
          "id": "52931044-33a7-4f1b-a2c3-2a3e5d4e88b2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7940200b-de99-44c4-a7b7-84c71d713fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36fdfa9-6e92-4a10-ab94-2fa154a4ec0f",
        "cursor": {
          "ref": "3ad81ef9-0c3f-4571-8d35-c8627a055036",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "26af933e-5afc-4919-b25a-8c903e266628"
        },
        "item": {
          "id": "f36fdfa9-6e92-4a10-ab94-2fa154a4ec0f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2bdf2ad4-4ff5-4350-a587-828ada0d58b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966c22af-e280-4d2d-ad01-62f867888b32",
        "cursor": {
          "ref": "7beabc9a-a297-4015-b0d4-e1bca8d2f553",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "18e4a066-8bf4-4bec-af53-34e06c62c576"
        },
        "item": {
          "id": "966c22af-e280-4d2d-ad01-62f867888b32",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7d12f3d0-811b-4e25-a209-68109e0e3b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29872c1f-da38-4543-95e0-5c428e0cf37d",
        "cursor": {
          "ref": "7b2bcd30-1701-49a0-8e67-8866646df44f",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "42507335-4a59-4aa1-a110-0b7d45fa0443"
        },
        "item": {
          "id": "29872c1f-da38-4543-95e0-5c428e0cf37d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e484973d-8673-4f10-86ab-25f4823a806d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c35d11-55c7-4410-817e-7ed6c96815ac",
        "cursor": {
          "ref": "e62d47f5-6826-4129-ada1-f45bee28a11a",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0270e1a6-ef3e-418d-a93f-0794387f1d0e"
        },
        "item": {
          "id": "d5c35d11-55c7-4410-817e-7ed6c96815ac",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0eed6672-3201-44d4-9871-8e39a86eff8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6292f5f6-98fc-4d31-b7f5-6763ec777684",
        "cursor": {
          "ref": "c3ab7420-4cc5-4228-9e89-35d873a5a075",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fc40bb06-9704-4cb3-8467-5fa8dc64684f"
        },
        "item": {
          "id": "6292f5f6-98fc-4d31-b7f5-6763ec777684",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "884b37ff-cf37-4570-a698-e12240cf84f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b767b6-4f95-4278-988f-53d18fa38b66",
        "cursor": {
          "ref": "daccfb00-afe0-4d6c-800d-85de2bf461f5",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8163244f-df2f-4432-ad7a-8939f566c074"
        },
        "item": {
          "id": "d8b767b6-4f95-4278-988f-53d18fa38b66",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c30125c3-d6ec-4b44-bd22-73f0a2635834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354419b2-5141-422f-93a3-8e4b635712d6",
        "cursor": {
          "ref": "0c7525c3-1689-41f8-8ec7-d8edc83485d6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "afdee99f-3802-4a84-861e-a67dfd434da5"
        },
        "item": {
          "id": "354419b2-5141-422f-93a3-8e4b635712d6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0668b650-dc19-453a-bc9f-e4c1872d634c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04814166-02c4-4ecf-ac7d-43c5ea95d52d",
        "cursor": {
          "ref": "5d1dc1cd-fa84-424e-8bb5-aa76e7a0f704",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cf23732a-ab8c-4f6e-9e1d-cce489043a01"
        },
        "item": {
          "id": "04814166-02c4-4ecf-ac7d-43c5ea95d52d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c57fdb38-7667-425e-ba94-04dc0841b8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2588b5a8-f277-4c15-a901-3e49951ddbf8",
        "cursor": {
          "ref": "7fd57c76-2c39-437f-95c7-6c3a31056004",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "993b3118-c2bb-4450-9e83-4baef7243506"
        },
        "item": {
          "id": "2588b5a8-f277-4c15-a901-3e49951ddbf8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4ba2fd65-e347-4066-b4f2-ec478b41aa03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97027fd1-cbb6-40df-b573-f694c62a2f76",
        "cursor": {
          "ref": "e11f5e62-b6d1-4915-aa47-b0b041f9572d",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1e03a3ff-8afb-4b95-9de9-001dbeca84fe"
        },
        "item": {
          "id": "97027fd1-cbb6-40df-b573-f694c62a2f76",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2d94d565-f6f0-44e5-989b-eb89a452a483",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a9b326-d78f-46a4-a6fa-c34b67906c24",
        "cursor": {
          "ref": "eaec517e-30d5-42d1-b1e8-7dd954fa0df9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "931a4030-6a5e-4d8a-81c2-606620338529"
        },
        "item": {
          "id": "e7a9b326-d78f-46a4-a6fa-c34b67906c24",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d431ba89-88d6-4ae3-9cb9-88074480c01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e9510956-1754-4578-a492-24ec3b855587",
        "cursor": {
          "ref": "d064ac81-5169-47dc-a0cf-a9877c8b3768",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8bd61cf5-4eef-4a96-81da-f3443c17ffa0"
        },
        "item": {
          "id": "e9510956-1754-4578-a492-24ec3b855587",
          "name": "credentials_issue"
        },
        "response": {
          "id": "be6df457-dd7d-46de-9244-2e7f7830ffd1",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "375b0df6-86bc-4361-872e-f6ac70062b69",
        "cursor": {
          "ref": "d4e9e00c-e892-4d30-b9b1-63376bb6ffe4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d0924270-60f2-4622-a6b9-3ea195e35a3a"
        },
        "item": {
          "id": "375b0df6-86bc-4361-872e-f6ac70062b69",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f7549c19-87b8-4125-8990-4e9369f0e1fb",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d92c51f-58d3-4c34-8802-001e59a3b8dd",
        "cursor": {
          "ref": "b488beb9-8e2d-4085-972d-814ef51e0958",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "66a862f1-4c10-4c84-8ac4-e08437e50159"
        },
        "item": {
          "id": "1d92c51f-58d3-4c34-8802-001e59a3b8dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4a8a3924-ec4c-4e99-9bb5-2523256877df",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ed6fcd-b3ca-4cb9-b164-b0ad53d237a2",
        "cursor": {
          "ref": "75101ff9-19e2-425b-b2e3-7f3394186097",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9ba4f37d-722b-4c20-a1fa-8a7fd0c49734"
        },
        "item": {
          "id": "a1ed6fcd-b3ca-4cb9-b164-b0ad53d237a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "adb20f52-4946-4e77-90db-f37b53bd2517",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "616efa7d-d80b-4a47-b23c-5d93c2b542fd",
        "cursor": {
          "ref": "fc161dc4-c389-47e2-b0bd-de303f0e6106",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e9e624a4-74f6-45c4-8436-36fdcd09802d"
        },
        "item": {
          "id": "616efa7d-d80b-4a47-b23c-5d93c2b542fd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5ee63e41-890b-4046-b5d9-4129b54b2f5c",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-18T00:39:04.071Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-18T00:39:04.071Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2b3850ec-48e9-4ed4-a4e6-4439b0ca1b84",
        "cursor": {
          "ref": "5d239f6e-20e0-46b1-ba4e-92a79c0509f9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2cbe2032-193d-47ee-9624-ecca4af17d67"
        },
        "item": {
          "id": "2b3850ec-48e9-4ed4-a4e6-4439b0ca1b84",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b37354ea-4368-480b-8869-e205d648a80a",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2ea367-7d3d-47e7-aa70-85566a62b116",
        "cursor": {
          "ref": "496c15d2-20bb-4eb5-827b-94db9d3fc696",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7f21aa94-a152-4d26-8a36-9ddb479c6982"
        },
        "item": {
          "id": "4a2ea367-7d3d-47e7-aa70-85566a62b116",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d9ec29ee-5b2b-4928-8fd8-d95791e7c63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9898cf5-bc6f-48f1-95bd-debddca08289",
        "cursor": {
          "ref": "86c6cf5b-b3eb-41f2-9ca3-b0a00f79de7a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "908ce540-b06e-4214-af4a-dd09acae3fa9"
        },
        "item": {
          "id": "b9898cf5-bc6f-48f1-95bd-debddca08289",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8fb0909e-fad2-46b9-b2e6-7abcc3175547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a334e724-a571-44ce-9213-6eb38ee01f66",
        "cursor": {
          "ref": "320cccb3-659a-42ce-b7cd-7559c0564fdc",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "50d156e8-ca25-445d-8e2e-abaf72533882"
        },
        "item": {
          "id": "a334e724-a571-44ce-9213-6eb38ee01f66",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0f94a4cd-8082-4695-8f06-93fd882a2f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3325eb8a-64bc-463c-910e-0658d93588bd",
        "cursor": {
          "ref": "42bf23c8-505b-444d-80c4-ee1f01772514",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "85a06191-8ce7-4d66-b3db-62fc47976a32"
        },
        "item": {
          "id": "3325eb8a-64bc-463c-910e-0658d93588bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d0309262-7d88-46cb-8393-81eea84ca0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a701b16-4ef0-4f45-be70-f1003ded6563",
        "cursor": {
          "ref": "ba45ac3e-5c4e-4ef5-8ab6-2bef9f499a1a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7bf376f2-7052-4838-aa64-d3d5f2fe34a1"
        },
        "item": {
          "id": "8a701b16-4ef0-4f45-be70-f1003ded6563",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ef892694-6581-4d26-ad81-75f80261f221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2560cd-93b6-4761-aa16-6e5c712f91c6",
        "cursor": {
          "ref": "1695069f-b54e-4d7b-b631-2018be16106a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fdc4aaf9-470f-4cd4-9dd7-35e4296142eb"
        },
        "item": {
          "id": "6f2560cd-93b6-4761-aa16-6e5c712f91c6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a9af8a11-af8b-42ad-997c-a1ed3e3a81f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c017e5-3d04-4f1f-aeb1-81aaaae57366",
        "cursor": {
          "ref": "e3e0e86f-15c5-4f56-9560-1319be8b7d26",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bd96aa9d-a867-4efe-a50f-6e70c8f6dcdf"
        },
        "item": {
          "id": "02c017e5-3d04-4f1f-aeb1-81aaaae57366",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "407131bc-7ef0-4e4a-98dc-74c67d396fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2b0d94-59c6-4c8f-969a-f52561fc87f4",
        "cursor": {
          "ref": "e7a3848c-f591-4c7c-841e-bd3dee12a6bc",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "317a7c6d-8dc0-465d-bcb2-57c134c6b511"
        },
        "item": {
          "id": "2f2b0d94-59c6-4c8f-969a-f52561fc87f4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "36b0d185-b426-4eee-8f16-48276b563a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b8589d-9d80-4f03-ac04-4525dbec2532",
        "cursor": {
          "ref": "924c9dad-c324-4d85-93ef-7407a2ceff07",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3360fa97-96b8-4877-8157-ef829a921ab3"
        },
        "item": {
          "id": "a6b8589d-9d80-4f03-ac04-4525dbec2532",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bc229337-3539-4b8c-84a3-9fcedc2e11f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e081f6a-f0a5-41f1-887d-49d920b0d1e2",
        "cursor": {
          "ref": "0c240d6f-6950-438c-b523-8c5232dc5d6a",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7dc31c5a-7b90-43d5-ac9b-490bde996f53"
        },
        "item": {
          "id": "7e081f6a-f0a5-41f1-887d-49d920b0d1e2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "850fb8e8-5a4a-496b-98ef-75edef45ed67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad68615-2187-4c68-af3a-a8902a2d9cec",
        "cursor": {
          "ref": "20eb50fa-e673-43e8-8307-a6159337ed71",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "93fa3c05-dc0d-4125-afc9-246a23f87720"
        },
        "item": {
          "id": "2ad68615-2187-4c68-af3a-a8902a2d9cec",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "62107eb6-52a0-4626-95d0-fc9a951a3021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf88f28-ec45-432c-9d0e-13bda3e773b9",
        "cursor": {
          "ref": "74a2c212-fa14-4e83-bc64-245eaf12c46a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "82ca7e05-3fb5-475c-ad2a-b228b5803d6f"
        },
        "item": {
          "id": "bcf88f28-ec45-432c-9d0e-13bda3e773b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2d537e6b-545b-4815-b82c-26db1284ff9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27eda57-b804-4c33-874d-432e45d55867",
        "cursor": {
          "ref": "d73f0ccb-6d19-418f-9d5a-d97333b834f5",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "006ba786-48db-4f5e-b58f-5b38bc558346"
        },
        "item": {
          "id": "a27eda57-b804-4c33-874d-432e45d55867",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "40e1304f-5bf8-4632-afe0-023181fcb3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d998dad8-1534-4fda-97c6-cd51bec3cf8b",
        "cursor": {
          "ref": "53fc19a9-bb5f-4f98-a4f1-42710c76e00b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a23dfd40-da23-4e27-84e9-2b26f8e465ee"
        },
        "item": {
          "id": "d998dad8-1534-4fda-97c6-cd51bec3cf8b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "009a690c-84c7-4455-bfe9-607feae68bfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ee535086-c5a3-4f65-984a-cc058ed45e2e",
        "cursor": {
          "ref": "91f15eb4-1465-432e-b8a8-91225910b87d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "144e8e78-e7b7-45e8-92ae-998435d0195c"
        },
        "item": {
          "id": "ee535086-c5a3-4f65-984a-cc058ed45e2e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2c2f711a-024b-4002-a867-119305768d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308b1148-2478-44b4-881a-316969408eec",
        "cursor": {
          "ref": "c99e7243-cc7b-415e-b6cb-bc089487a282",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "77c8eed6-bd08-421b-883e-bff746f5963d"
        },
        "item": {
          "id": "308b1148-2478-44b4-881a-316969408eec",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cafd4334-fb90-4afc-9667-dd194ff5bdc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca16920-63a8-474f-8fb5-c45f66bd8c7a",
        "cursor": {
          "ref": "65e65a2a-b518-49bb-b2fa-46dd9fa1e9ea",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "15968127-57b1-4a71-8487-f2cdb1d85d77"
        },
        "item": {
          "id": "aca16920-63a8-474f-8fb5-c45f66bd8c7a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ca8d8c04-adb6-4572-8369-4e63b267594f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdc7e15-014b-411e-a839-722f0d8738b8",
        "cursor": {
          "ref": "c2a61022-ec78-45af-9d54-6c4319431d97",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b5606728-999a-42fa-bd26-cb50152a3eca"
        },
        "item": {
          "id": "6cdc7e15-014b-411e-a839-722f0d8738b8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0ac88222-2dfc-47c7-abad-ca31ee9b32e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8527b02-45c4-488a-9278-81cabf1a4daf",
        "cursor": {
          "ref": "748e29fb-c149-4ed9-82ca-bc1131e1ab9a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d530b10e-fdd6-4dcf-914a-5d9bdbb9203b"
        },
        "item": {
          "id": "e8527b02-45c4-488a-9278-81cabf1a4daf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bf47e109-7fb9-445b-99ce-37aa39e76d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffde750c-7570-40cc-b674-3a6f5ee1b391",
        "cursor": {
          "ref": "8b314646-e197-4627-856c-85e3d0c40b30",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "585ad1f6-1fc6-41c9-973a-524cde50204d"
        },
        "item": {
          "id": "ffde750c-7570-40cc-b674-3a6f5ee1b391",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8ec2b2a6-1881-430f-9035-509e61eeab80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b1c51b-a240-49d8-ba13-6decfbfadc9e",
        "cursor": {
          "ref": "b52d761d-d2da-4630-bd2c-64047647088c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "624afc34-84e2-4667-b4bb-ae76789fd63a"
        },
        "item": {
          "id": "d5b1c51b-a240-49d8-ba13-6decfbfadc9e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "140eddcc-53cb-49fc-a91d-df8de3a0ba89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfacce95-40eb-4599-b960-88c0569e323c",
        "cursor": {
          "ref": "e446995f-8af3-4502-9f7e-64c84dd9d2a7",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a0da1b74-e7b1-495b-8b13-46a7d5551f4b"
        },
        "item": {
          "id": "dfacce95-40eb-4599-b960-88c0569e323c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "43e9cd48-f6cd-4acb-bc25-9aa978c0ea74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07151af6-858d-4729-b283-7bef65840257",
        "cursor": {
          "ref": "e65d9dd4-f9f3-4c49-82c0-6578b2ad1c14",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "20b17e45-828e-4a9f-a84d-1e22511b2ffc"
        },
        "item": {
          "id": "07151af6-858d-4729-b283-7bef65840257",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "167f33a3-430b-4776-94eb-3d4e5d918d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdbb42f-5d31-4dc3-8879-14d5e0b05635",
        "cursor": {
          "ref": "02170850-ceb4-4acf-ac26-3fc01ff9758f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cdf8fcbb-c257-4aa0-bcbb-b68928021799"
        },
        "item": {
          "id": "acdbb42f-5d31-4dc3-8879-14d5e0b05635",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "774b297b-c42d-4946-ac40-5052651eacaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5f154a-abdf-42a4-9e64-248a9252f227",
        "cursor": {
          "ref": "ad27ee07-cb71-4c11-b09f-ede158e85bac",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "011731fd-051d-4a7c-9d43-9c95548612fd"
        },
        "item": {
          "id": "ff5f154a-abdf-42a4-9e64-248a9252f227",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8e7a88b8-e5ee-4dda-8170-6db41d4c7871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf68e54-74d2-4e72-acef-e609b1cdb591",
        "cursor": {
          "ref": "f16bbd89-2146-4d8c-bada-b60aa2b2aa53",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a662b513-3c98-44fe-a31c-c01c8a7ea706"
        },
        "item": {
          "id": "ddf68e54-74d2-4e72-acef-e609b1cdb591",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bf9ab5ec-05ce-4892-bbc0-d4b76fd893cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6d6410-eb74-4013-a778-0f288cb8acc9",
        "cursor": {
          "ref": "ad8727a3-aa08-4ec6-9b98-ad2f86c84495",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e42e4613-b216-471d-9586-d27e8226605a"
        },
        "item": {
          "id": "3e6d6410-eb74-4013-a778-0f288cb8acc9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "50c139d0-392f-4301-a725-9a1c8a945c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745743c8-dd60-47eb-8562-a6b8e617f4a0",
        "cursor": {
          "ref": "867fa4e6-5900-4cd6-b4c8-c688369aba04",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f9725f46-dc70-4f36-bf6c-f50104b1d03f"
        },
        "item": {
          "id": "745743c8-dd60-47eb-8562-a6b8e617f4a0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fa936ab6-b467-4fab-981c-372b4d127691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28b9d8a-d1d2-4c2a-8b6a-7554e6271575",
        "cursor": {
          "ref": "5d4e3250-f7e5-43ea-8c2d-c6eae1edb72a",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "979fd09a-927c-4e7f-b10a-e416cf192015"
        },
        "item": {
          "id": "e28b9d8a-d1d2-4c2a-8b6a-7554e6271575",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "188915a7-2424-43da-b27b-beb615a2ff53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50523506-ed83-465b-ad57-f2d6ccdb2c69",
        "cursor": {
          "ref": "8013cb53-9748-47ad-b8bc-17268c37fc7a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "054c376a-0612-498e-aaaa-5aaf520c1f63"
        },
        "item": {
          "id": "50523506-ed83-465b-ad57-f2d6ccdb2c69",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dfd1af92-77a5-4962-a09a-ce6f4d4638c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f00aa4-df9a-407f-bc3b-6fde458a2584",
        "cursor": {
          "ref": "362e4b09-768e-4fd3-909c-08ab432d1e0f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "be2e36cd-7ce3-41d6-8598-153efbd385c7"
        },
        "item": {
          "id": "63f00aa4-df9a-407f-bc3b-6fde458a2584",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a5078d80-e234-4af4-85d7-bbbb4a86971d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d06ae73-9ec4-496b-a363-16f0c3751854",
        "cursor": {
          "ref": "071f7fc7-445e-4142-a494-0640d243a1c3",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "eccd3d2f-947c-4449-8d64-7c78336dcf37"
        },
        "item": {
          "id": "4d06ae73-9ec4-496b-a363-16f0c3751854",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8937114b-6208-486e-bc56-c63f40618ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307d9713-9c3f-484d-ba6e-da1840b17d64",
        "cursor": {
          "ref": "2660ac12-5887-4aae-83bc-1b1b8472126a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0199760e-e59c-451e-aa00-0e5a8eadd452"
        },
        "item": {
          "id": "307d9713-9c3f-484d-ba6e-da1840b17d64",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bc3e92b4-28c8-4bf7-a55c-3b04cffa32e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba83b52-4006-447d-bbf6-efc794a8627f",
        "cursor": {
          "ref": "4e6e1b13-2b40-4847-8e93-88a2e9f688e5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "38db3c32-8a1d-4deb-9c33-9f46a32e614f"
        },
        "item": {
          "id": "eba83b52-4006-447d-bbf6-efc794a8627f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2c7344fa-9d2f-4348-86d3-fca01eb4edb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92d980a-8b54-4bd8-ab6e-f7a995f8e026",
        "cursor": {
          "ref": "d4e3fa27-11eb-4c35-90be-3a7ed3d11e30",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ce6afaf6-04e3-4ddb-832f-53746f5adff2"
        },
        "item": {
          "id": "c92d980a-8b54-4bd8-ab6e-f7a995f8e026",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a09cc43e-c14c-40a1-b989-e03ec91890ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25385a72-0eea-42b0-b665-57a96389aaea",
        "cursor": {
          "ref": "76819117-3b7c-4e8d-9b86-79bfc69426a5",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e75023d0-de0b-4965-86f7-268839c6cf02"
        },
        "item": {
          "id": "25385a72-0eea-42b0-b665-57a96389aaea",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "25685f51-e30c-4daf-9778-ba73ef481318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8424f34b-fb4d-49e2-ac68-4769ae61c000",
        "cursor": {
          "ref": "28bc2c4e-64a4-43b2-8c49-7105c555c177",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7024de00-e53d-4a17-abe7-6d798ec1bf75"
        },
        "item": {
          "id": "8424f34b-fb4d-49e2-ac68-4769ae61c000",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f4c45fb0-56eb-4d4c-a4f2-91769e640fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d64fff2-e7bd-458a-848d-d3858811fe27",
        "cursor": {
          "ref": "7a8f24ee-ac8e-4b82-bd12-6e7a2d94c46c",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "581ee547-490d-480c-871a-9fef60cccb5e"
        },
        "item": {
          "id": "7d64fff2-e7bd-458a-848d-d3858811fe27",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1453f98c-d56d-4fe6-8ecf-1824625bcb03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01954e49-0c46-4153-9ebb-2a8b6adbf30e",
        "cursor": {
          "ref": "6f360fb2-e37c-4f0d-b119-34856204a467",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c883fb6c-17e2-404f-afdb-e8a1ba8171c4"
        },
        "item": {
          "id": "01954e49-0c46-4153-9ebb-2a8b6adbf30e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "01c80763-bbf1-44ae-9a05-ecee5f62faa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc261fd-4427-4acc-be37-33aea8290735",
        "cursor": {
          "ref": "8c5e04bb-c5d2-4130-8534-a9e488d24428",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2d9247c4-1b71-4d2a-8923-1059cab8127b"
        },
        "item": {
          "id": "5cc261fd-4427-4acc-be37-33aea8290735",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "acce5551-e2e8-4587-847d-72e559d11d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db602c2-f336-47b2-883a-8b4e13b338a6",
        "cursor": {
          "ref": "761ec373-7b05-499b-b14d-ac78be53e2d4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "89b0f283-6cc6-4499-81a3-c32a65adfdb6"
        },
        "item": {
          "id": "4db602c2-f336-47b2-883a-8b4e13b338a6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "acbf0967-6b77-4986-be02-756ac031feb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409b5816-0ff1-401e-878b-2efe74e71310",
        "cursor": {
          "ref": "5b1a4033-1a5f-4ec5-9bbc-b9b4297a582a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "be8e106e-fbc6-4b8a-b373-e6def0014950"
        },
        "item": {
          "id": "409b5816-0ff1-401e-878b-2efe74e71310",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "180c6b0a-bb23-4444-97a1-597fc3880cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bce76e8-096e-4155-a795-be7f40709b90",
        "cursor": {
          "ref": "0d9b5ff4-3b26-46e7-aebf-ba3ee23902e7",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "107625c0-0c4c-4006-80f1-7e31bff987b9"
        },
        "item": {
          "id": "3bce76e8-096e-4155-a795-be7f40709b90",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a52121e7-7576-4362-9ddc-c72be91cfe6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5296784f-69b3-4a49-b6ce-fc207f2c178f",
        "cursor": {
          "ref": "285ba1b1-938e-49fa-ada3-633d709b68f0",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fd56556d-9082-4ddb-8b9c-20f438bfeb83"
        },
        "item": {
          "id": "5296784f-69b3-4a49-b6ce-fc207f2c178f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0807b34f-6932-43ae-9ff2-e170c857ce5c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "96967dfa-2a30-4600-a87c-93742f0af6ec",
        "cursor": {
          "ref": "130a7a19-32d3-4ed1-a54c-f1d52a5aac3e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3ba2f0c6-21ee-4a83-8d60-8198729d62eb"
        },
        "item": {
          "id": "96967dfa-2a30-4600-a87c-93742f0af6ec",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "86f3b879-1888-472e-b3ef-5b44a4bbbf16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7195fb-c723-489e-905b-e531e88bb722",
        "cursor": {
          "ref": "2bfa3c18-34d2-4d2d-a3e1-3d7b77d0be72",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b1b58b1c-b067-45b7-8eb4-5eda5c18bf1a"
        },
        "item": {
          "id": "0c7195fb-c723-489e-905b-e531e88bb722",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2661eceb-f05a-4e00-ad92-b496f710d6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a5de51-3a4a-4f32-a39a-0f1e188f749c",
        "cursor": {
          "ref": "e933a1d9-b6e8-454b-bbfe-c8db233a4dac",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a7eb0cbb-f7b8-4e10-a4f8-f0f674487c13"
        },
        "item": {
          "id": "41a5de51-3a4a-4f32-a39a-0f1e188f749c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c4b6973d-0292-406c-b95c-a9e9489d6870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137f4a0d-ca85-4bb3-90df-40c9f05e9cc8",
        "cursor": {
          "ref": "05b4b388-18ed-426c-abc7-22979cbe5d03",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3b98f594-301d-4963-867e-f732ab2bf6ab"
        },
        "item": {
          "id": "137f4a0d-ca85-4bb3-90df-40c9f05e9cc8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8e653f3b-fa83-49c6-9994-15748d3de663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd091e28-3266-45a4-9d7b-7517373e980a",
        "cursor": {
          "ref": "f53cc34f-6728-463c-aefe-278856ee77f3",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "821cdacc-2809-4852-9b5d-4b0b32282766"
        },
        "item": {
          "id": "fd091e28-3266-45a4-9d7b-7517373e980a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bac82779-598a-4461-8b7a-4e49d32751ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b227c54-f046-45d4-8d24-049ace8c0b2e",
        "cursor": {
          "ref": "613d8455-0905-49da-b687-014e0ee1bb01",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "277b2de3-4e0d-4fb6-a5d4-8f1c815ee2c1"
        },
        "item": {
          "id": "4b227c54-f046-45d4-8d24-049ace8c0b2e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "51ab9878-d28a-4171-a96d-53884fd89fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e35d2fa-e9f8-4518-9c62-b2031062def8",
        "cursor": {
          "ref": "60800744-1b5e-4111-8c19-1bd2b4ae221e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "31d2a7e5-94fa-441d-b4a0-f901e90fc10c"
        },
        "item": {
          "id": "7e35d2fa-e9f8-4518-9c62-b2031062def8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "45f0d7a6-1afd-4fe5-ac29-1ec06f499dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e853b2db-3894-4f1e-9f68-ec4d56abb41d",
        "cursor": {
          "ref": "a7d9b866-66ff-4a28-8bb0-763d03f98f4a",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0472b143-93f7-4659-b014-85a4229f2744"
        },
        "item": {
          "id": "e853b2db-3894-4f1e-9f68-ec4d56abb41d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bd722f09-30a7-41f6-8c98-301c88d71339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e5fd2a-9c14-49f2-ad78-88be9d48f104",
        "cursor": {
          "ref": "ac477c16-70bd-4d54-bdc0-fc654923bb35",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b05613dd-ce68-4ad2-aeb2-07ac50a18634"
        },
        "item": {
          "id": "f6e5fd2a-9c14-49f2-ad78-88be9d48f104",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "30620983-e544-4dd1-8919-88d8e4a55811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5cfd17-ec75-41ba-8836-83895ac4e3c6",
        "cursor": {
          "ref": "e378c125-d5ee-4836-8de1-b2b5b6584936",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bfd198fe-1f1a-4efc-9962-c58d176b328e"
        },
        "item": {
          "id": "9a5cfd17-ec75-41ba-8836-83895ac4e3c6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a4d115e5-5d36-4304-abfb-db7c55f680bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8902e3-6721-43f7-ad82-9b5ac969a570",
        "cursor": {
          "ref": "746973a1-eee7-4a91-a7c2-6bc1fa5a4c06",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e61f2950-4ccf-4489-b9b4-f17b703960e0"
        },
        "item": {
          "id": "dc8902e3-6721-43f7-ad82-9b5ac969a570",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cde2bf64-36e7-4bee-91f3-e537679d2f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32882692-c140-4b7c-a36c-1611bf08c709",
        "cursor": {
          "ref": "1b10a3c6-ac0a-45f7-9853-9b7fb06675e3",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "94b99ed8-9391-4fa4-bf31-5c685593edd9"
        },
        "item": {
          "id": "32882692-c140-4b7c-a36c-1611bf08c709",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9b4ec960-2289-4fef-9049-98d8eba3402a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23601ab-44b0-41f5-9669-1505f37e7039",
        "cursor": {
          "ref": "901eaf32-588a-4230-8a62-83dfcd966c20",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5412cf6d-a9ca-4419-9bc6-857658a8dedb"
        },
        "item": {
          "id": "a23601ab-44b0-41f5-9669-1505f37e7039",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f00dccdf-bec8-49f5-9a5e-25690e663e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba013ea0-a89d-4dc3-825d-3fe6915fee00",
        "cursor": {
          "ref": "69cbdd7f-e95c-47db-afc3-185f4c2be48b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2a3434b7-fe86-4f07-864c-26f5a8968adb"
        },
        "item": {
          "id": "ba013ea0-a89d-4dc3-825d-3fe6915fee00",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6f6277fa-85d5-487e-9fbc-3fe3ba3857af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8181f66f-dd23-49ec-b1e3-0696635e66cc",
        "cursor": {
          "ref": "a2c3cca9-abc1-48dd-a921-9bc2883c1a0b",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b3c10dd6-f251-469b-b09e-4626048feeba"
        },
        "item": {
          "id": "8181f66f-dd23-49ec-b1e3-0696635e66cc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "57c6f48b-9e95-4494-ab0b-083f1d75574b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917eb17c-57ca-4916-b526-cb2b68743b51",
        "cursor": {
          "ref": "b2d55a05-38a1-429b-8744-90e374081d80",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d1003c22-6215-4118-bccc-fd497ae54165"
        },
        "item": {
          "id": "917eb17c-57ca-4916-b526-cb2b68743b51",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "01944bbc-6daa-493f-abff-45390296eed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7187c5d-7237-4b66-9e3c-d85d3156a45e",
        "cursor": {
          "ref": "8db5c3b1-044d-4188-baad-47ef63d1577d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f2e3005d-a9d6-432a-92d8-4658ad02e5a9"
        },
        "item": {
          "id": "b7187c5d-7237-4b66-9e3c-d85d3156a45e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "29955a0f-fc67-4a35-a3b0-fff4e44eb743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904462f6-b17d-4e16-a6ef-c034a9193274",
        "cursor": {
          "ref": "33a8245f-5e47-4c39-b213-86ca8466eb2b",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "17b00b2c-864f-4e58-b76e-db78a7e112fa"
        },
        "item": {
          "id": "904462f6-b17d-4e16-a6ef-c034a9193274",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "927be654-f520-424a-b76a-79f0186cf255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c63f35b-eda4-4a0d-b1e3-b1a6f5fc89ec",
        "cursor": {
          "ref": "4762b44f-8118-410f-8670-3f393b76137f",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b45046ed-8a4c-448b-b16c-691e1a4affbb"
        },
        "item": {
          "id": "2c63f35b-eda4-4a0d-b1e3-b1a6f5fc89ec",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "95bf70ba-4a98-440d-b146-8b74effe7243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c56e78-86c1-46a1-ad85-2c18052509bb",
        "cursor": {
          "ref": "4d73a0c5-4a7b-416c-aa01-89595f544a9e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6a55f617-04cb-4cf4-8dc3-d977dca97140"
        },
        "item": {
          "id": "11c56e78-86c1-46a1-ad85-2c18052509bb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b103d614-7962-4867-ad70-261088af8279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18373087-61f3-4d8b-a3e0-08d20c9daf9d",
        "cursor": {
          "ref": "4917a8c6-d40d-4165-a21b-dd66d9b4bcf8",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0d68e98b-0268-4416-948b-1abad300ab78"
        },
        "item": {
          "id": "18373087-61f3-4d8b-a3e0-08d20c9daf9d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "997fdb30-358c-4ff8-b730-3f8209941945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1c3b74-e90a-4a1c-b626-ead1e0871a97",
        "cursor": {
          "ref": "17556030-4bcd-47c7-abf6-5b23cdf85ee2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e64584a2-ed64-4ca0-88e4-9beb26276655"
        },
        "item": {
          "id": "7e1c3b74-e90a-4a1c-b626-ead1e0871a97",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "85117198-057a-4ca3-a9ef-77188b52deae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02b4d42-494b-4271-bf91-534c103e2907",
        "cursor": {
          "ref": "f52bd45b-c77b-4973-9a81-996af72572e7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a86d770b-e639-4871-92c1-967102bb89be"
        },
        "item": {
          "id": "e02b4d42-494b-4271-bf91-534c103e2907",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7ddaae93-39bf-4435-b8ad-af4dfe2ad5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f9f0df-5bf0-4305-8332-96e07ee939fa",
        "cursor": {
          "ref": "12678c62-3f68-46f2-a69c-091da3c7b37c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2863d56c-49b2-4612-86d1-6215dfc3217c"
        },
        "item": {
          "id": "39f9f0df-5bf0-4305-8332-96e07ee939fa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "15dc953c-705c-4f7a-84a2-8c4ede561272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90f5a68-e000-4ba9-bd51-df2987164483",
        "cursor": {
          "ref": "a8106ea3-8946-438b-84b3-363ca0c8c489",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3e6de0a0-5f68-4206-80ef-56ac7d9a7700"
        },
        "item": {
          "id": "c90f5a68-e000-4ba9-bd51-df2987164483",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "40b83ecd-cc0d-4cf3-a0eb-c2e5d5a55fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b469de19-847d-473a-939a-6603617a9013",
        "cursor": {
          "ref": "c5bdb4b4-a816-4ba2-8bfa-4ec7d2c4c3bf",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a3c2f000-4ef1-4788-92c8-af99ccd6af83"
        },
        "item": {
          "id": "b469de19-847d-473a-939a-6603617a9013",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f1d6505a-7659-457f-812f-f822f0ffe4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c552efd1-9468-4d9b-acc1-8406007e752b",
        "cursor": {
          "ref": "35739c9a-0f7d-4202-9248-de9a6ac927c5",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "682e9e7d-30a6-4422-818d-ac8e6c197a1b"
        },
        "item": {
          "id": "c552efd1-9468-4d9b-acc1-8406007e752b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5c2096bb-fc2a-4e1c-9019-0e5bbf349b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404fd6b8-e9c2-4fdc-8e36-99b4400ccfa6",
        "cursor": {
          "ref": "85e92303-0286-4d8d-8bcc-0129c61ffb02",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "282b35c2-2be1-42d9-a061-8d0d4b082ad9"
        },
        "item": {
          "id": "404fd6b8-e9c2-4fdc-8e36-99b4400ccfa6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4820de82-9e74-4ba9-a283-842602ae5eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c3ab68-6005-448c-8602-b189a4142010",
        "cursor": {
          "ref": "11e2ecdd-bcce-4701-90b6-d39c56d505f5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d3aa530f-d3f5-4a3b-9304-b2bc27ac8390"
        },
        "item": {
          "id": "07c3ab68-6005-448c-8602-b189a4142010",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ed784bed-d5f2-4ee9-b6ee-dc85d741f0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d97660-3d51-45fa-9838-d3f4728e59a3",
        "cursor": {
          "ref": "9156b8a0-0d55-461b-9026-5a84da365958",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "27666b0b-16c1-4340-8e4f-9cf3391933ed"
        },
        "item": {
          "id": "c7d97660-3d51-45fa-9838-d3f4728e59a3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "44372715-e019-4fa4-9c12-cb2eda4f1ba7",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "8d46cc80-a978-454b-9360-4c5f2858500e",
        "cursor": {
          "ref": "c2d57a94-8bd1-4612-9fce-2d74db808cb8",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "85012b52-5337-41e8-b544-e0733f751ce7"
        },
        "item": {
          "id": "8d46cc80-a978-454b-9360-4c5f2858500e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2250ac3d-4027-44a1-bac9-477039cc0149",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bb007057-d16e-49a3-869b-068d90f03096",
        "cursor": {
          "ref": "794f6214-dd2f-4881-b6e6-80529521f837",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0ea54b96-93f4-4bad-ac14-00ab2674fe2c"
        },
        "item": {
          "id": "bb007057-d16e-49a3-869b-068d90f03096",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "058a9fb5-daea-4ffe-952f-fb1853bff6e1",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9adc2cf5-424a-4654-9b90-a71a47796009",
        "cursor": {
          "ref": "f41857fe-288b-432a-b84f-8b52eaa85097",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "41d38a1c-0fb9-470a-a76d-bd16ba75ad8b"
        },
        "item": {
          "id": "9adc2cf5-424a-4654-9b90-a71a47796009",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "60f50dd0-5c78-4b60-b533-cc94a6fbbbc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2ceab7-0e06-4baa-b023-62a60581413b",
        "cursor": {
          "ref": "610703a9-4aa1-475b-bb93-4f4f74767430",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7de09818-a319-40e8-81e6-a51ff8768fc2"
        },
        "item": {
          "id": "4f2ceab7-0e06-4baa-b023-62a60581413b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ba21be27-f030-4fe3-b998-2c202add9244",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4c15de5e-f252-4af1-bf04-9ea408040ecb",
        "cursor": {
          "ref": "fd153b4f-9152-4429-adb5-81472c191451",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a3d1e226-4792-4cd2-9091-1a9767937fae"
        },
        "item": {
          "id": "4c15de5e-f252-4af1-bf04-9ea408040ecb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "425e2688-9bd7-4f68-8384-f68508db1a5a",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c25761b7-da4d-4d2a-9317-95699c47fc1a",
        "cursor": {
          "ref": "ea391701-1191-423c-8a92-e1d85b513705",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7437601b-1b83-45b9-b0e0-e3a2c10bc3da"
        },
        "item": {
          "id": "c25761b7-da4d-4d2a-9317-95699c47fc1a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "45e69f99-b3db-40ab-b297-92abc44a64da",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "4a34b464-96d7-474e-9921-c39917b06499",
        "cursor": {
          "ref": "a89dcbf6-7009-4cb6-9c37-d0eaea2e7c76",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c55e565b-d6f6-44fb-8739-89adddfe9b9d"
        },
        "item": {
          "id": "4a34b464-96d7-474e-9921-c39917b06499",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8cdafc96-ae8b-456e-ba8e-3b8709ab940c",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5b5715c4-6b38-407c-ad7b-b22725d755ea",
        "cursor": {
          "ref": "243706d2-ef44-4ded-8805-625d9fcae536",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "869657ad-1fbf-436c-81a6-98f314809182"
        },
        "item": {
          "id": "5b5715c4-6b38-407c-ad7b-b22725d755ea",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3e8d586a-893e-4cea-ac6a-74f72b033634",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4c05ed00-cbd9-4932-af58-67c667be3214",
        "cursor": {
          "ref": "6d9c3a4b-b52e-4aa2-9625-821be9b4e998",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "278fe093-4678-4a85-97fb-d7793c654c7f"
        },
        "item": {
          "id": "4c05ed00-cbd9-4932-af58-67c667be3214",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "50e69119-fcfb-4e83-8698-45b166a420e5",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a4cdc337-aea5-4ddc-9713-60101faa2e07",
        "cursor": {
          "ref": "16db2bb3-6de4-407a-9de8-61022cfb2456",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6a7d47ba-4255-4f03-9639-691697064f92"
        },
        "item": {
          "id": "a4cdc337-aea5-4ddc-9713-60101faa2e07",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "de491aa7-0478-4878-a947-8fe9ca278e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa17280-192f-451e-a66c-3a0918b13229",
        "cursor": {
          "ref": "e7d35291-8c44-4aa9-8324-16ee174a7f9b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0c4e3c0f-4c18-4270-9f16-10cd4573367e"
        },
        "item": {
          "id": "2fa17280-192f-451e-a66c-3a0918b13229",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ac87863f-73b6-4a39-9cf1-98c88a646015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f766c6fa-cc06-4e78-93e8-7ab2c0cd0e5d",
        "cursor": {
          "ref": "8415f468-a585-4813-bcda-aa617288cc30",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b556f71b-1685-43f8-9ff0-89238d9f0d1a"
        },
        "item": {
          "id": "f766c6fa-cc06-4e78-93e8-7ab2c0cd0e5d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8878d70d-6156-4616-aafc-134fc328cf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaa5676-b522-4df7-a7d3-c12868004a70",
        "cursor": {
          "ref": "df6ce94d-bdf0-4de9-b58e-644cac7607b0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d750c755-e28f-46cc-94a0-184f832afeec"
        },
        "item": {
          "id": "ecaa5676-b522-4df7-a7d3-c12868004a70",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bf2e47e2-841c-4d33-9602-1ad741793227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c2b3a1-133a-46bc-9e6c-0f3d5bdfb46c",
        "cursor": {
          "ref": "4b1483ed-7d84-4968-b678-84cd2713ef78",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2470365a-76d0-4d2d-a1d9-4c2071815b8b"
        },
        "item": {
          "id": "71c2b3a1-133a-46bc-9e6c-0f3d5bdfb46c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b8f89497-dc07-4206-8966-baebadb2b3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d3fb71-744e-4f2d-83a6-2427686175f6",
        "cursor": {
          "ref": "205675a0-516e-4dc3-8d63-38cd983e7955",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6a9224dd-2ece-47a4-a3ae-8f51a2c5c0b2"
        },
        "item": {
          "id": "b6d3fb71-744e-4f2d-83a6-2427686175f6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "74ba03ea-f35a-4c30-a685-54860ea6ba83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acca0c3-5382-4efb-b2cc-e7888a6e806d",
        "cursor": {
          "ref": "056a5b4c-e3ad-4b24-8c62-e4676bc0f13d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f2b6d364-b051-4976-9b3f-5215b01dfdff"
        },
        "item": {
          "id": "3acca0c3-5382-4efb-b2cc-e7888a6e806d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d4b2e599-5018-425f-865f-795098369fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21778084-00bd-43e1-bd73-726c8768b6cc",
        "cursor": {
          "ref": "3b3e6bb9-5120-4907-9e4c-bfc6d6542dd1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2711dcd1-8520-499b-b929-6fa1dbda57b7"
        },
        "item": {
          "id": "21778084-00bd-43e1-bd73-726c8768b6cc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3e4c345d-6741-4f3d-9f9b-9628443ced5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57bf742-4370-46fa-8875-8f882f64b1ba",
        "cursor": {
          "ref": "39d9b740-71d6-470d-870d-3309b8ce79be",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5ca22e5a-7348-448e-90ea-1518a5418b8f"
        },
        "item": {
          "id": "e57bf742-4370-46fa-8875-8f882f64b1ba",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4b2216c7-88aa-4bd2-8424-9393c9458b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e20cdd6-afe2-44c3-b430-84b198365b64",
        "cursor": {
          "ref": "1149bbc0-f1e5-40ff-8fa4-f326042e5689",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "529a814f-04ff-47d4-8304-d7257c03ed68"
        },
        "item": {
          "id": "0e20cdd6-afe2-44c3-b430-84b198365b64",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a5771e1f-85bf-4626-9f7a-dffd4e27148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dbf117-6ae5-4e61-bb86-5b1bedbcdbbd",
        "cursor": {
          "ref": "a72a049d-f209-492e-9918-c323c649d03c",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "22c64af5-8f6a-4dab-9444-e713f210abe4"
        },
        "item": {
          "id": "77dbf117-6ae5-4e61-bb86-5b1bedbcdbbd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4069b95c-196e-45f0-86a4-a528011cf7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fe475a-ce6c-4336-8bfb-bdc79e532ca9",
        "cursor": {
          "ref": "f4e84c35-6e3d-4bec-9b01-d392b03d5903",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0c1a78de-c453-424e-9522-4cb843787a12"
        },
        "item": {
          "id": "22fe475a-ce6c-4336-8bfb-bdc79e532ca9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "67fc1bfe-dca2-4229-a4da-614478635416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4efe5df-0ac7-4abc-b092-61846cda28a5",
        "cursor": {
          "ref": "d8e45206-9728-4d5d-8e34-eeeac874cf28",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6a54d66c-f0ed-4506-8f7d-da9a4abdde4c"
        },
        "item": {
          "id": "a4efe5df-0ac7-4abc-b092-61846cda28a5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6117e08b-8485-4a24-a114-574eefb71c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf01eb82-b381-4ff1-bfe6-cc78c67260bf",
        "cursor": {
          "ref": "d4c47e27-9319-40dd-a745-4b50143d60e6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "74199cd6-48c0-494e-93e1-f9ba78571899"
        },
        "item": {
          "id": "bf01eb82-b381-4ff1-bfe6-cc78c67260bf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3dde948b-4363-4779-90ca-c6cd86617542",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "52b59192-38f8-43de-8672-1f592f4aebea",
        "cursor": {
          "ref": "7f0801b2-4453-4768-ba2b-e9c4599b976b",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "30ff66c4-78db-4ad9-8346-ac745369df20"
        },
        "item": {
          "id": "52b59192-38f8-43de-8672-1f592f4aebea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c7bed618-4a96-4841-865d-ebf8d97b2beb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "776d0a38-8e90-4926-b9a0-f7f834f133d3",
        "cursor": {
          "ref": "041c82a1-649d-4015-a2fe-63648051622f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9f8a84ea-fa2a-4a27-b57b-7b921cfd0357"
        },
        "item": {
          "id": "776d0a38-8e90-4926-b9a0-f7f834f133d3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "169707bc-3564-4b88-9470-d133c4d9fc44",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a1886604-11b1-4f0f-ba92-411234902d74",
        "cursor": {
          "ref": "a158c24d-9fa7-47eb-9699-e111b34c4365",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "87169057-ddde-4333-a5c1-0e9432cf843e"
        },
        "item": {
          "id": "a1886604-11b1-4f0f-ba92-411234902d74",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "36a98726-f723-42fb-b708-56a347a8e45b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "1dd710d6-4989-47b0-8b5f-36a6c71a61f1",
        "cursor": {
          "ref": "e673b818-3efd-40b4-a52b-45a258f7c10a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7fada853-a2b5-40ae-90ba-b5da3d5533a2"
        },
        "item": {
          "id": "1dd710d6-4989-47b0-8b5f-36a6c71a61f1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3f3e820b-50a9-40cb-b5aa-5b7a564b7c9e",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f90f58f5-af12-47e9-8d8d-8e6c791e65fa",
        "cursor": {
          "ref": "c2e7ccfb-3a17-4279-8510-f023c164050a",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "502374fe-2ed4-4038-99c8-ea7ecbb58370"
        },
        "item": {
          "id": "f90f58f5-af12-47e9-8d8d-8e6c791e65fa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5e373a64-1a43-4930-90fb-6ba0e38ddf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a166dfb-ab93-461b-9c23-51ea88e2121a",
        "cursor": {
          "ref": "c1dbb7dc-6429-4b05-a8c4-0b86a86bb332",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4aae49e8-d2b7-4159-8c7d-d6c20cc8a96a"
        },
        "item": {
          "id": "6a166dfb-ab93-461b-9c23-51ea88e2121a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "743ede8e-9d10-440c-bbc4-59d96d284f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7af59f-82dc-48ac-9e60-1ac156bedb61",
        "cursor": {
          "ref": "c717c1ec-2345-4292-b764-4d34f71c6c5e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4f67589d-194d-4ce3-bbaf-ef5277ccbd7b"
        },
        "item": {
          "id": "8d7af59f-82dc-48ac-9e60-1ac156bedb61",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "01015a9f-26f8-4248-a03d-36b6adef048d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bdb9f1e-29d0-421e-8baa-294af8000673",
        "cursor": {
          "ref": "a0463850-50de-4a5c-902e-3a40b1c73d7f",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "446104cb-ca1d-4891-be84-45c48052d819"
        },
        "item": {
          "id": "7bdb9f1e-29d0-421e-8baa-294af8000673",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "745043ab-b6a8-42c6-a64b-dbc2ca9e778e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687e35d5-5001-446a-859f-41ed6b67a34e",
        "cursor": {
          "ref": "7193b051-a00d-4a2f-9a07-9f026cd96f81",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "02ed883a-0943-4374-85f5-856ca7d392d7"
        },
        "item": {
          "id": "687e35d5-5001-446a-859f-41ed6b67a34e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2f605efe-207b-4750-b3ed-f4507021f508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7537d3a2-fb56-4f16-8126-d2928cbad427",
        "cursor": {
          "ref": "ab77d136-23d1-45aa-acca-bc6642dddc11",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "edd2b026-5cc3-47c5-93d9-62ccc29da2ff"
        },
        "item": {
          "id": "7537d3a2-fb56-4f16-8126-d2928cbad427",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7d048374-a6a4-4d97-8005-ca7616393f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c34471f-e843-41a6-bbeb-17440005fdb2",
        "cursor": {
          "ref": "0f5604cf-4df1-4ae7-92da-4c91819f8148",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "938c60d6-4417-4657-b62b-a317f536b560"
        },
        "item": {
          "id": "6c34471f-e843-41a6-bbeb-17440005fdb2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5620e126-9b66-4ff2-95b3-b9a27c085f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525a750f-a675-4633-b814-c64f29bb8c69",
        "cursor": {
          "ref": "cc9981f4-76a9-45d2-9660-bbee5b612f2d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e412d2b4-463d-4a9b-ba6f-14b9d5293857"
        },
        "item": {
          "id": "525a750f-a675-4633-b814-c64f29bb8c69",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9889f28d-cb80-496c-b8a7-59aa1d7164ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd052d8a-068e-4d05-897a-e2493ff17ccc",
        "cursor": {
          "ref": "3ecc0738-86eb-412c-a1d0-fb2e72cd4596",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e5abc0ce-3022-4a63-b853-d89eee7fc327"
        },
        "item": {
          "id": "cd052d8a-068e-4d05-897a-e2493ff17ccc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e8a80869-6ecf-4ec4-8e85-a97d0568159e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7944efd2-841a-4aab-9d2a-844f4a60ffff",
        "cursor": {
          "ref": "6af89d56-b56e-4a1a-88b0-1373d4e6e7cd",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ab124c4d-3743-4da5-a8a2-88bc4087bcdc"
        },
        "item": {
          "id": "7944efd2-841a-4aab-9d2a-844f4a60ffff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "02dc9c28-929a-455a-8118-45a13cc5972a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72366f79-7545-4ac2-8272-2abec3568836",
        "cursor": {
          "ref": "5fb5ad13-fa64-4cab-8eaf-683beb946a57",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "65c38547-859a-4152-9ca0-b72141dcd000"
        },
        "item": {
          "id": "72366f79-7545-4ac2-8272-2abec3568836",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "33029907-1a56-4027-bd83-e16b40e8a762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e36fd08-6a3e-4f55-8e9f-fa9ba0e2a6d5",
        "cursor": {
          "ref": "36a12b18-8a1a-4cc1-85af-b4830ec5c8f1",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d8ada963-929b-4988-aa70-0a2b6e1b6cee"
        },
        "item": {
          "id": "7e36fd08-6a3e-4f55-8e9f-fa9ba0e2a6d5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9f289d64-c9a1-4f51-9931-19efa1c13287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2568500-124b-48bd-b962-6bb493a33343",
        "cursor": {
          "ref": "d361cd73-3a66-4e4c-a8b2-af21790591cd",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c606cf1a-ca88-4312-87b9-45f275325f06"
        },
        "item": {
          "id": "d2568500-124b-48bd-b962-6bb493a33343",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c2662dcf-3593-48da-b64f-6a279febd7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5b50fa-3837-4411-9b92-d696accecf3c",
        "cursor": {
          "ref": "2161200b-382f-4d4a-bf88-f840c69a0648",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "47c6779f-7a69-49b6-9120-81502287305e"
        },
        "item": {
          "id": "4d5b50fa-3837-4411-9b92-d696accecf3c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4fd039e3-4113-4f29-883f-d49db44929dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9ba203-98c1-4427-879a-46ebfc53a67f",
        "cursor": {
          "ref": "8a2009f0-ec4a-48bc-898c-194f051a27b1",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d1a4240a-607b-49fa-97fc-3dd59a8c8130"
        },
        "item": {
          "id": "6d9ba203-98c1-4427-879a-46ebfc53a67f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3b2c7ebd-d86a-4055-b870-54d9cd18fb6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cb716a-58c9-463b-8e97-8d6ee93ae1b4",
        "cursor": {
          "ref": "3b5d7359-3c78-4e29-872a-6d01122884e7",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c144f662-93c4-429e-b27d-c30a34410a5d"
        },
        "item": {
          "id": "21cb716a-58c9-463b-8e97-8d6ee93ae1b4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a5e9b2e4-6c35-4640-99d7-e25e72da611b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cd3f0a-052e-47f5-85e6-9c97c0b16025",
        "cursor": {
          "ref": "bf52caad-3cc8-4541-8084-72af0fa03570",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8728fe06-4664-4e6f-af1a-601967427b62"
        },
        "item": {
          "id": "d1cd3f0a-052e-47f5-85e6-9c97c0b16025",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "457ee6b1-f43c-4e6e-830c-51c1a49073ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef12487e-40b9-4b5d-955b-b538ff48ec57",
        "cursor": {
          "ref": "89d849e6-8cd0-4d62-99b3-6a5cfc8aa29c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "eba0fed3-7efb-4ca3-af04-6a5b1d4b13ae"
        },
        "item": {
          "id": "ef12487e-40b9-4b5d-955b-b538ff48ec57",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "08e0dd7f-ab75-4b50-84a3-49dcfad98b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6904be60-240a-4957-ab6c-53941d3ff2f4",
        "cursor": {
          "ref": "8ac22c19-eeaa-4832-aaa9-1d4b3d31e1b2",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "021d19e1-b9b4-4cc4-abbe-b7d77e1dd4da"
        },
        "item": {
          "id": "6904be60-240a-4957-ab6c-53941d3ff2f4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5104725a-937f-45c0-af8e-4d3db813c73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed58980-60bf-476e-ac1a-443ba4af40d5",
        "cursor": {
          "ref": "cceff40d-e8c8-4b69-9884-705a9aa31834",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8e0536c1-7fee-48e2-b2d0-4af55408dbbe"
        },
        "item": {
          "id": "bed58980-60bf-476e-ac1a-443ba4af40d5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d69a0290-de1a-4a9e-8a2c-86f8925e05e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bed542f-705d-41ca-bf51-1d4159474d9f",
        "cursor": {
          "ref": "13213ae3-b952-42ba-9d4e-2dfd455450aa",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f3e82288-2719-4477-ad2c-55e381e864b3"
        },
        "item": {
          "id": "5bed542f-705d-41ca-bf51-1d4159474d9f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "290a5a35-cd9e-4f77-a3b3-e64378fec5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd2f1da-fa5c-400a-bf31-134a2de61aa7",
        "cursor": {
          "ref": "a7470873-7b17-4ae4-87a7-44edf652a1c2",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fbfa6315-8a44-4acc-95b1-910e430522fa"
        },
        "item": {
          "id": "cbd2f1da-fa5c-400a-bf31-134a2de61aa7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d0384a55-4272-428b-a68b-6ec58927b878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a7aeed-be0f-487b-9fe5-8f33df5f8019",
        "cursor": {
          "ref": "c9951e7d-8e08-4c2a-a18b-d1df6d568768",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0396b6cd-2fbb-4487-a112-0274cc19bdfb"
        },
        "item": {
          "id": "89a7aeed-be0f-487b-9fe5-8f33df5f8019",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ec51a5a6-3493-406b-841d-32fe3aa509f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5108a6b4-2fcf-462c-b154-a49b0c952680",
        "cursor": {
          "ref": "b9275dc9-b57e-4787-a7d1-a880d52fe26d",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dcc84ade-5cad-44cb-9d17-8c6021ae337c"
        },
        "item": {
          "id": "5108a6b4-2fcf-462c-b154-a49b0c952680",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1309e656-abb3-4cc5-86cc-5eb4c0a9e673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455a6aa6-8ecb-4082-8000-206e98596f60",
        "cursor": {
          "ref": "9b8f6964-6a19-4294-9cb8-e648c41fec45",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d3202ddc-59cc-43c3-b15c-f9a17065461e"
        },
        "item": {
          "id": "455a6aa6-8ecb-4082-8000-206e98596f60",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6e8a5f0b-5769-499d-97a5-79cae3415231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ef75d7-aaeb-4e1e-9436-2cdeee6ca6ab",
        "cursor": {
          "ref": "74df40ef-6239-40bb-858c-e58ace673172",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "75e2f2f7-edcb-4d59-b520-4c4cc819a6f4"
        },
        "item": {
          "id": "80ef75d7-aaeb-4e1e-9436-2cdeee6ca6ab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d976a5c8-cad4-476f-b874-a1cdaac11964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6877c3-4287-4c99-bf64-760cccf5d1cd",
        "cursor": {
          "ref": "a1c2c913-cf2c-4c67-9308-2a7d4aa74a8d",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dee4b0db-9a30-4bcf-b790-4825788d985c"
        },
        "item": {
          "id": "4b6877c3-4287-4c99-bf64-760cccf5d1cd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d09e89b3-cf72-49d7-b4f5-f279631f188e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf86b18-fa93-4db1-8d7d-bd9158fcac6e",
        "cursor": {
          "ref": "a74de3b6-0b2a-44fb-b509-231374c62963",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8780cd3e-6fc6-4d07-ad05-baab492b8b0e"
        },
        "item": {
          "id": "abf86b18-fa93-4db1-8d7d-bd9158fcac6e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "656db911-500c-403c-a3e4-aee5df3d838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fc377b-f8df-4439-8004-c82bbf6dbeca",
        "cursor": {
          "ref": "6430e74d-6e18-45e6-b99d-f24ec866965f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "65aa541f-fcce-4238-97e0-aa54b8486c3d"
        },
        "item": {
          "id": "f2fc377b-f8df-4439-8004-c82bbf6dbeca",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "368b4bd8-5295-467f-9d4a-cd57aa9e8e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736b7b16-fe5e-4ea6-b5c2-df7b886401c5",
        "cursor": {
          "ref": "c70ae01b-53e4-4948-99fd-f91ad19bece4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c58cff2e-aef1-4dfc-89de-89fb128b2713"
        },
        "item": {
          "id": "736b7b16-fe5e-4ea6-b5c2-df7b886401c5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4de1b290-042d-4ba1-a324-c432c3cdc7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2a9bdb-f8bc-41e6-adb0-7c11bbcc4e9d",
        "cursor": {
          "ref": "ec5418b2-20c0-4e45-be12-4a2bd8b04aba",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dd41af34-897a-4712-9972-406b7ad44315"
        },
        "item": {
          "id": "bd2a9bdb-f8bc-41e6-adb0-7c11bbcc4e9d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "431888c2-54a2-49a9-b443-ffb2e4b05b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab0a05b-85ec-4cee-833f-c4b75d6a87d2",
        "cursor": {
          "ref": "7a6037ac-e761-437c-bbdd-67e8480d1cca",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f7de280e-a6d7-4cc7-83de-03760aafd327"
        },
        "item": {
          "id": "bab0a05b-85ec-4cee-833f-c4b75d6a87d2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "11db62ce-b9a6-4ff3-9162-873c4b25b938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3bcc19-9349-40c4-9458-fdedfad48c63",
        "cursor": {
          "ref": "7a66c2ee-2b12-49f9-b46f-cf204a77ea94",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "62178ea5-49cd-4a75-9b88-3a16c754ca31"
        },
        "item": {
          "id": "8e3bcc19-9349-40c4-9458-fdedfad48c63",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "499c81fc-b8a6-4897-9660-79757d75924e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d347483-3317-4cc8-8cc5-b174619d4391",
        "cursor": {
          "ref": "737b416e-8a6e-44b7-a013-02974812ced1",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "324d794d-9d01-4d5c-8ae2-e5efa7448466"
        },
        "item": {
          "id": "1d347483-3317-4cc8-8cc5-b174619d4391",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2fce20c3-5bf1-427a-a3d5-dba4f386fe30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1dedbd9-b8b1-490b-afd7-42a09e39a613",
        "cursor": {
          "ref": "400639cc-5d46-460a-853d-9815a7c38a5f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "281ec15a-4227-499d-9721-dcf731615142"
        },
        "item": {
          "id": "d1dedbd9-b8b1-490b-afd7-42a09e39a613",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0df322d0-3fa1-47ca-9c2a-571c56bb887c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abce7790-832a-4a07-b902-abe7fd9849fb",
        "cursor": {
          "ref": "48be6d19-a0ff-413a-a48d-71a602cc0648",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9d905c48-4fa0-460c-91d8-30ebfbdbe2b4"
        },
        "item": {
          "id": "abce7790-832a-4a07-b902-abe7fd9849fb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "df6838b6-1dfd-4933-b3de-1f50e549f911",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "08e55144-19f4-4294-8984-1042071f0922",
        "cursor": {
          "ref": "00f218dd-6976-4bfe-b5d8-a210a78218ed",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "749bf5c5-c359-4e74-8459-85ec06a661fb"
        },
        "item": {
          "id": "08e55144-19f4-4294-8984-1042071f0922",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a6697317-8605-43cf-8efe-23c1677d719a",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "800373dc-ec5f-44dc-a28f-78717f227417",
        "cursor": {
          "ref": "5a776612-6226-4740-a25c-22d2eb15dec6",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8d178a42-7fc2-42db-9131-e619a9e401be"
        },
        "item": {
          "id": "800373dc-ec5f-44dc-a28f-78717f227417",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7df8399f-650d-4ed7-bfc0-30f80945b686",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e69a5be-011f-476d-8193-f2af316a9683",
        "cursor": {
          "ref": "634e3c71-740c-42fb-ad51-28fda2b8f7df",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "424c0880-7c88-4f98-ba8c-dec7faf48408"
        },
        "item": {
          "id": "9e69a5be-011f-476d-8193-f2af316a9683",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "da272bd2-369b-4ad3-a604-a209a42c1192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e69a5be-011f-476d-8193-f2af316a9683",
        "cursor": {
          "ref": "634e3c71-740c-42fb-ad51-28fda2b8f7df",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "424c0880-7c88-4f98-ba8c-dec7faf48408"
        },
        "item": {
          "id": "9e69a5be-011f-476d-8193-f2af316a9683",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "da272bd2-369b-4ad3-a604-a209a42c1192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddc1563-8469-42c9-996b-1924f4e91b11",
        "cursor": {
          "ref": "6fe81b41-bfed-4a65-8333-3ea3b4bf9d04",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "559f5b40-5933-4df0-b71c-c9c6b95459f4"
        },
        "item": {
          "id": "7ddc1563-8469-42c9-996b-1924f4e91b11",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a8b5df53-a916-4067-bd49-6215c9071eb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1887b0ca-6dd7-4e29-bf5e-65cfea1469e8",
        "cursor": {
          "ref": "6f2ad30b-e2c5-42c0-af82-da519cb80c16",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "56dc8c90-4118-4fa8-b0d9-1e4bb309539b"
        },
        "item": {
          "id": "1887b0ca-6dd7-4e29-bf5e-65cfea1469e8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "02faf221-adc5-4d28-b53d-b1b310a37051",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}